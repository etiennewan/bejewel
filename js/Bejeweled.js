//Start:Announcement
Game = Type.registerNamespace('Game');
/**
 * @constructor
 */
Game.Announcement = function Game_Announcement(theBoard, theText) {
    this.mPos = new GameFramework.geom.TPoint(0, 0);
    this.mAlpha = new GameFramework.CurvedVal();
    this.mScale = new GameFramework.CurvedVal();
    this.mHorzScaleMult = new GameFramework.CurvedVal();
    this.mBoard = theBoard;
    if(this.mBoard != null) {
        this.mPos = new GameFramework.geom.TPoint(this.mBoard.GetBoardCenterX(), 500);
        if(!this.mBoard.mDrawGameElements) {
            this.mPos.x = 800.0;
        }
    }
    this.mText = theText;
    this.mAlpha.SetCurve('b+0,1,0.003333,1,#### Q~###      ~~### O####');
    this.mScale.SetCurve('b+0,1,0.003333,1,#### Q~###       #~### O####');
    this.mHorzScaleMult.SetConstant(1.0);
    this.mDarkenBoard = true;
    this.mBlocksPlay = true;
    this.mFont = Game.Resources['FONT_HUGE'];
    if(this.mBoard != null) {
        this.mBoard.HandleAnnouncementAdded(this);
    }
}
Game.Announcement.prototype = {
    mPos : null,
    mText : null,
    mAlpha : null,
    mScale : null,
    mHorzScaleMult : null,
    mDarkenBoard : null,
    mBlocksPlay : null,
    mBoard : null,
    mFont : null,
    End : function Game_Announcement$End() {
        if(this.mAlpha.GetInVal() < 0.85) {
            this.mAlpha.SetInVal(0.85, true);
            this.mScale.SetInVal(0.85, true);
            this.mHorzScaleMult.SetInVal(0.85, true);
        }
    },
    Update : function Game_Announcement$Update() {
        this.mAlpha.IncInVal();
        this.mScale.IncInVal();
        this.mHorzScaleMult.IncInVal();
        if(!this.mAlpha.IsDoingCurve() && !this.mScale.IsDoingCurve()) {
            if(this.mBoard != null) {
                this.mBoard.HandleAnnouncementComplete(this);
            }
            return;
        }
        if((this.mDarkenBoard) && (this.mBoard != null)) {
            this.mBoard.mBoardDarkenAnnounce = this.mAlpha.GetOutVal();
        }
    },
    Draw : function Game_Announcement$Draw(g) {
        if(this.mScale.GetOutVal() == 0.0) {
            return;
        }
        g.SetFont(this.mFont);
        var aColor = GameFramework.gfx.Color.WHITE.Clone();
        if(this.mBoard != null) {
            aColor.mAlpha = ((this.mAlpha.GetOutVal() * this.mBoard.GetPieceAlpha() * 255) | 0);
        } else {
            aColor.mAlpha = ((this.mAlpha.GetOutVal() * 255) | 0);
        }
        g.PushColor(aColor.ToInt());
        var aCenterX = this.mPos.x + (this.mBoard != null ? this.mBoard.mSideXOff.GetOutVal() : 0.0);
        var aCenterY = this.mPos.y;
        var aLines = 1;
        for(var i = 0; i < this.mText.length; i++) {
            if(GameFramework.Utils.GetCharCodeAt(this.mText, i) == 10) {
                aLines++;
            }
        }
        g.PushScale(this.mScale.GetOutVal() * this.mHorzScaleMult.GetOutVal(), this.mScale.GetOutVal(), aCenterX, aCenterY);
        var aLineNum = 0;
        var aPos = 0;
        for(var i_2 = 0; i_2 < this.mText.length; i_2++) {
            if(GameFramework.Utils.GetCharCodeAt(this.mText, i_2) == 10) {
                g.DrawStringEx(this.mText.substr(aPos, i_2 - aPos), aCenterX, aCenterY - aLines * 70 + aLineNum * 140 + 120, 0, 0);
                aPos = i_2 + 1;
                aLineNum++;
            }
        }
        g.DrawStringEx(this.mText.substr(aPos), aCenterX, aCenterY - aLines * 70 + aLineNum * 140 + 120, 0, 0);
        g.PopMatrix();
        g.PopColor();
    }
}
Game.Announcement.staticInit = function Game_Announcement$staticInit() {
}

JS_AddInitFunc(function() {
    Game.Announcement.registerClass('Game.Announcement', null);
});
JS_AddStaticInitFunc(function() {
    Game.Announcement.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\Announcement.cs
//LineMap:1=15 2=17 3=37 6=38 8=27 9=29 12=39 13=41 19=48 26=56 41=60 51=69 56=75 64=84 68=87 72=92 73=94 78=100 79=102 81=105 87=116 88=118 
//Start:Background
/**
 * @constructor
 */
Game.BackgroundLoader = function Game_BackgroundLoader(theIdx) {
    this.mIdx = theIdx;
}
Game.BackgroundLoader.prototype = {
    mIdx : 0,
    BackgroundLoaded : function Game_BackgroundLoader$BackgroundLoaded(e) {
        var aResourceStreamer = e.target;
        Game.Background.mLoadedImages[this.mIdx] = Type.safeCast(aResourceStreamer.mResultData, GameFramework.resources.ImageResource);
        Game.Background.mIsBkgLoaded[this.mIdx] = true;
        GameFramework.BaseApp.mApp.ClearUpdateBacklog();
    }
}
Game.BackgroundLoader.staticInit = function Game_BackgroundLoader$staticInit() {
}

JS_AddInitFunc(function() {
    Game.BackgroundLoader.registerClass('Game.BackgroundLoader', null);
});
JS_AddStaticInitFunc(function() {
    Game.BackgroundLoader.staticInit();
});
/**
 * @constructor
 */
Game.Background = function Game_Background(wantFlatImage, wantAnim) {
    if(wantFlatImage === undefined) {
        wantFlatImage = true;
    }
    if(wantAnim === undefined) {
        wantAnim = true;
    }
    this.mAnim = null;
    this.mUpdateSpeed = new GameFramework.CurvedVal();
    this.mImageOverlayAlpha = new GameFramework.CurvedVal();
    this.mFlash = new GameFramework.CurvedVal();
    Game.Background.initializeBase(this);
    this.mWantAnim = false;
    this.mImageOverlayAlpha.SetConstant(1.0);
    this.mNoParticles = true;
    this.mNoParticles = false;
}
Game.Background.StartBkgLoad = function Game_Background$StartBkgLoad(theBkgIdx) {
    if(!Game.Background.mIsBkgLoaded[theBkgIdx]) {
        var aBackgroundLoader = new Game.BackgroundLoader(theBkgIdx);
        var aResourceStreamer;
        if(Game.Background.mBkgGroupNames[theBkgIdx] != null) {
            aResourceStreamer = GameFramework.BaseApp.mApp.mResourceManager.StreamResourceGroup(Game.Background.mBkgGroupNames[theBkgIdx]);
        } else {
            aResourceStreamer = GameFramework.BaseApp.mApp.mResourceManager.StreamImageFromPath(Game.Background.mFlattenedNames[theBkgIdx]);
        }
        aResourceStreamer.AddEventListener(GameFramework.events.Event.COMPLETE, ss.Delegate.create(aBackgroundLoader, aBackgroundLoader.BackgroundLoaded));
        return aResourceStreamer;
    }
    return null;
}
Game.Background.SetBkgImagePath = function Game_Background$SetBkgImagePath(theIdx, thePath) {
    Game.Background.mBkgGroupNames[theIdx] = null;
    Game.Background.mPopAnimNames[theIdx] = null;
    Game.Background.mFlattenedNames[theIdx] = thePath;
}
Game.Background.BkgUnload = function Game_Background$BkgUnload(theBkgIdx) {
    if(Game.Background.mIsBkgLoaded[theBkgIdx]) {
        if(Game.Background.mBkgGroupNames[theBkgIdx] != null) {
            GameFramework.BaseApp.mApp.mResourceManager.UnloadResourceGroup(Game.Background.mBkgGroupNames[theBkgIdx]);
        } else {
            Game.Background.mLoadedImages[theBkgIdx].Dispose();
            Game.Background.mLoadedImages[theBkgIdx] = null;
        }
        Game.Background.mIsBkgLoaded[theBkgIdx] = false;
    }
}
Game.Background.prototype = {
    mAnim : null,
    mImage : null,
    mNoParticles : null,
    mAnimActive : false,
    mWantAnim : false,
    mKeepFlatImage : false,
    mHasRenderTargetFlatImage : false,
    mRenderTargetFlatImageDirty : false,
    mExtraImgScale : 1.0,
    mExtraDrawScale : 1.0,
    mAllowRealign : true,
    mStage : 0,
    mScoreWaitLevel : 0,
    mScoreWaitsPassed : 0,
    mUpdateAcc : 0,
    mUpdateSpeed : null,
    mImageOverlayAlpha : null,
    mFlash : null,
    mColor : ~0,
    mCurBkgIdx : -1,
    mWantNextBkgStream : -1,
    mWantNextBkgUnload : -1,
    TryLoadBackground : function Game_Background$TryLoadBackground(theIdx) {
        if(Game.Background.mIsBkgLoaded[theIdx]) {
            this.mImageOverlayAlpha.SetConstant(1.0);
            this.mAnim = null;
            this.mAnimActive = false;
            if(Game.Background.mLoadedImages[theIdx] != null) {
                this.mImage = Game.Background.mLoadedImages[theIdx];
            } else {
                this.mImage = GameFramework.BaseApp.mApp.mResourceManager.GetImageResourceById(Game.Background.mFlattenedNames[theIdx]);
                if((GameFramework.BaseApp.mApp.get_Is3D()) && (!Game.BejApp.mBejApp.mIsSlow)) {
                    this.mAnim = GameFramework.BaseApp.mApp.mResourceManager.GetPopAnimResourceById(Game.Background.mPopAnimNames[theIdx]);
                    this.mAnim.mPIEffectIdSearchVector = [];
                    this.mAnim.mPIEffectIdSearchVector.push('PIEFFECT_BACKGROUNDS_');
                }
            }
            return true;
        }
        return false;
    },
    NextBkg : function Game_Background$NextBkg() {
        var aPrevBkgIdx = this.mCurBkgIdx;
        for(var aCount = 0; aCount < Game.Background.mBkgGroupNames.length; aCount++) {
            this.mCurBkgIdx = (this.mCurBkgIdx + 1) % Game.Background.mBkgGroupNames.length;
            if(this.TryLoadBackground(this.mCurBkgIdx)) {
                break;
            }
        }
        var aLoadingBkgIdx = (this.mCurBkgIdx + 1) % Game.Background.mBkgGroupNames.length;
        this.mWantNextBkgStream = aLoadingBkgIdx;
        for(var anIdx = 0; anIdx < Game.Background.mBkgGroupNames.length; anIdx++) {
            if((anIdx != 0) && (anIdx != aPrevBkgIdx) && (anIdx != this.mCurBkgIdx) && (anIdx != aLoadingBkgIdx) && (Game.Background.mIsBkgLoaded[anIdx])) {
                if(this.mWantNextBkgUnload == -1) {
                    this.mWantNextBkgUnload = anIdx;
                } else {
                    Game.Background.BkgUnload(this.mWantNextBkgUnload);
                }
            }
        }
        this.mStage = 0;
    },
    SetPopAnim : function Game_Background$SetPopAnim(thePopAnimResource) {
        this.mAnim = thePopAnimResource;
    },
    SetImage : function Game_Background$SetImage(theImage) {
        this.mImage = theImage;
    },
    GetPopAnim : function Game_Background$GetPopAnim(wait) {
        if(this.mAnim == null) {
            if(!wait) {
                return null;
            }
        }
        return this.mAnim;
    },
    LoadAnimProc : function Game_Background$LoadAnimProc() {
        this.mStage++;
    },
    Dispose : function Game_Background$Dispose() {
        if(this.mAnim != null) {
            this.RemoveWidget(this.mAnim);
        }
        this.RemoveAllWidgets(true);
        GameFramework.widgets.ClassicWidget.prototype.Dispose.apply(this);
    },
    Draw : function Game_Background$Draw(g) {
        var didDraw = false;
        var wantColor = this.mColor != GameFramework.gfx.Color.WHITE_RGB;
        if(wantColor) {
            g.PushColor(this.mColor);
        }
        if((this.mAnim != null) && (this.mAnim.mLoaded) && (this.mAnimActive)) {
            this.mAnim.Draw(g);
            didDraw = true;
        }
        if((this.mImage != null) && (this.mImageOverlayAlpha.GetOutVal() > 0.0)) {
            var _t1 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.mImageOverlayAlpha.GetOutVal()));
            try {
                if(this.mImage.mHeight == this.mHeight) {
                    if(this.mAllowRealign) {
                        g.DrawImage(this.mImage, (((1920 - this.mImage.mWidth) / 2) | 0), 0);
                    } else {
                        g.DrawImage(this.mImage, 0, 0);
                    }
                }

                else {
                    var aScaleFactor = this.mHeight / this.mImage.mHeight;
                    var _t2 = g.PushScale(aScaleFactor, aScaleFactor, 160, 0);
                    try {
                        g.DrawImage(this.mImage, (1920 - this.mImage.mWidth * aScaleFactor) / 2.0, 0.0);
                    } finally {
                        _t2.Dispose();
                    }
                }
                didDraw = true;
            } finally {
                _t1.Dispose();
            }
        }
        if(!didDraw) {
            var _t3 = g.PushColor(GameFramework.gfx.Color.RGBToInt(64, 0, 0));
            try {
                g.FillRect(0, 0, this.mWidth * 2, this.mHeight);
            } finally {
                _t3.Dispose();
            }
        }
        if(wantColor) {
            g.PopColor();
        }
        if(this.mFlash.GetOutVal() > 0.0) {
        }
    },
    Update : function Game_Background$Update() {
        GameFramework.widgets.ClassicWidget.prototype.Update.apply(this);
        var wantedAnim = this.mWantAnim;
        this.mWantAnim = Game.BejApp.mBejApp.mProfile.mAnimateBackground && Game.BejApp.mBejApp.get_Is3D();
        if(wantedAnim != this.mWantAnim) {
            if(this.mWantAnim && this.mAnim == null) {
                this.TryLoadBackground(this.mCurBkgIdx);
            }
        }
        if((this.mWantNextBkgStream != -1) && (Game.BejApp.mBejApp.mBoard != null) && (Game.BejApp.mBejApp.mBoard.mHyperspace == null) && (this.mWantAnim) && (Game.BejApp.mBejApp.mBoard.mSideXOff.get_v() == 0)) {
            Game.Background.StartBkgLoad(this.mWantNextBkgStream);
            this.mWantNextBkgStream = -1;
        }
        if((this.mWantNextBkgUnload != -1) && (Game.BejApp.mBejApp.mBoard != null) && (Game.BejApp.mBejApp.mBoard.mHyperspace == null) && (this.mWantAnim) && (Game.BejApp.mBejApp.mBoard.mSideXOff.get_v() == 0)) {
            Game.Background.BkgUnload(this.mWantNextBkgUnload);
            this.mWantNextBkgUnload = -1;
        }
        if((Game.BejApp.mBejApp.get_Is3D()) && (true) && (this.mWantAnim) && (this.mStage == 1) && ((this.mVisible) || (this.mParent == null))) {
            this.mStage++;
        }
        {
            if(this.mAnim != null) {
                if(!this.mWantAnim) {
                    this.mAnim.mPaused = true;
                    this.mAnim.mAnimRunning = false;
                } else if((!this.mAnimActive) && (this.mVisible)) {
                    this.mAnim.Play();
                    this.mAnim.Resize(0, 0, 1920, 1200);
                    if(this.mImage != null) {
                        this.mUpdateSpeed.SetCurve('b;0,1,0.0025,1,####         ~~###');
                        this.mImageOverlayAlpha.SetCurve('b;0,1,0.01,1,~###         ~####');
                    } else {
                        this.mUpdateSpeed.SetConstant(1.0);
                    }
                    this.mAnimActive = true;
                }
            }
            if((!this.mHasRenderTargetFlatImage) && (this.mAnim != null) && (!this.mKeepFlatImage) && (this.mImageOverlayAlpha.GetOutVal() == 0.0)) {
            }
        }
        if(this.mAnimActive) {
            this.mRenderTargetFlatImageDirty = true;
            if(this.mWantAnim) {
                this.mAnim.mAnimSpeedScale = this.mUpdateSpeed.GetOutVal();
                this.mAnim.Update();
            }
            if(!this.mWantAnim) {
                this.mStage = 0;
                this.mAnimActive = false;
                if(this.mAnim != null) {
                    if(this.mAnim.mParent != null) {
                        this.RemoveWidget(this.mAnim);
                    }
                    this.mAnim = null;
                }
                this.mImageOverlayAlpha.SetConstant(1.0);
            }
        }
    },
    GetBackgroundImage : function Game_Background$GetBackgroundImage(wait) {
        return this.GetBackgroundImage$3(wait, true);
    },
    GetBackgroundImage$2 : function Game_Background$GetBackgroundImage$2() {
        return this.GetBackgroundImage$3(true, true);
    },
    GetBackgroundImage$3 : function Game_Background$GetBackgroundImage$3(wait, removeAnim) {
        if(removeAnim === undefined) {
            removeAnim = true;
        }
        if((this.mImage == null) || (this.mHasRenderTargetFlatImage)) {
            if((this.mImage == null) || (this.mRenderTargetFlatImageDirty)) {
                if(this.mAnim != null) {
                    this.mHasRenderTargetFlatImage = true;
                    this.mRenderTargetFlatImageDirty = false;
                }

                else {
                    if(this.mHasRenderTargetFlatImage) {
                        this.mHasRenderTargetFlatImage = false;
                    }
                }
            }
        }
        return this.mImage;
    },
    PrepBackgroundImage : function Game_Background$PrepBackgroundImage() {
    }
}
Game.Background.staticInit = function Game_Background$staticInit() {
    Game.Background.mBkgGroupNames = Array.Create(7, 7, 'BG_LionTowerCascade', 'BG_HorseForestTree', 'BG_FloatingRockCity', 'BG_LanternPlantsWorld', 'BG_SnowyCliffsCastle', 'BG_PointyIcePath', 'BG_WaterfallCliff');
    Game.Background.mPopAnimNames = Array.Create(7, 7, 'POPANIM_BACKGROUNDS_LION_TOWER_CASCADE', 'POPANIM_BACKGROUNDS_HORSE_FOREST_TREE', 'POPANIM_BACKGROUNDS_FLOATING_ROCK_CITY', 'POPANIM_BACKGROUNDS_LANTERN_PLANTS_WORLD', 'POPANIM_BACKGROUNDS_SNOWY_CLIFFS_CASTLE', 'POPANIM_BACKGROUNDS_POINTY_ICE_PATH', 'POPANIM_BACKGROUNDS_WATER_FALL_CLIFF');
    Game.Background.mFlattenedNames = Array.Create(7, 7, 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_FLATTENEDPAM', 'IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_FLATTENEDPAM', 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLATTENEDPAM', 'IMAGE_BACKGROUNDS_LANTERN_PLANTS_WORLD_FLATTENEDPAM', 'IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_FLATTENEDPAM', 'IMAGE_BACKGROUNDS_POINTY_ICE_PATH_FLATTENEDPAM', 'IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_FLATTENEDPAM');
    Game.Background.mIsBkgLoaded = Array.Create(Game.Background.mBkgGroupNames.length, null);
    Game.Background.mLoadedImages = Array.Create(Game.Background.mBkgGroupNames.length, null);
}

JS_AddInitFunc(function() {
    Game.Background.registerClass('Game.Background', GameFramework.widgets.ClassicWidget);
});
JS_AddStaticInitFunc(function() {
    Game.Background.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\Background.cs
//LineMap:2=3 5=18 7=19 13=22 27=31 30=209 32=208 33=208 34=33 35=55 37=58 39=210 41=214 42=216 44=95 46=104 50=109 57=117 59=120 65=127 76=137 87=40 95=49 96=51 98=54 102=59 103=61 107=144 121=157 137=174 143=181 145=184 155=195 168=226 175=248 178=252 183=259 189=268 
//LineMap:190=277 196=284 199=288 204=294 209=298 211=304 219=311 223=314 230=319 237=323 242=327 249=331 251=334 256=342 259=346 261=349 268=357 273=363 278=369 282=379 283=381 290=386 292=391 301=399 305=404 309=412 312=421 317=441 319=444 321=447 325=454 327=458 332=464 
//LineMap:337=470 342=476 344=476 345=478 347=485 349=488 351=493 355=515 362=524 365=526 371=66 372=75 373=84 374=92 
//Start:Bej3Button
/**
 * @constructor
 */
Game.Bej3Button = function Game_Bej3Button(theId) {
    Game.Bej3Button.initializeBase(this, [theId]);
}
Game.Bej3Button.prototype = {
    mScale : 1.0,
    Draw : function Game_Bej3Button$Draw(g) {
        if(this.mScale != 1.0) {
            g.PushScale(this.mScale, this.mScale, this.mWidth / 2, this.mHeight / 2);
        }
        GameFramework.widgets.ButtonWidget.prototype.Draw.apply(this, [g]);
        if(this.mScale != 1.0) {
            g.PopMatrix();
        }
    }
}
Game.Bej3Button.staticInit = function Game_Bej3Button$staticInit() {
}

JS_AddInitFunc(function() {
    Game.Bej3Button.registerClass('Game.Bej3Button', GameFramework.widgets.ButtonWidget);
});
JS_AddStaticInitFunc(function() {
    Game.Bej3Button.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\Bej3Button.cs
//LineMap:2=4 5=14 7=13 11=11 13=17 17=22 18=24 
//Start:Bej3Dialog
/**
 * @constructor
 */
Game.Bej3DialogButton = function Game_Bej3DialogButton(theId) {
    Game.Bej3DialogButton.initializeBase(this, [theId]);
    this.mAlpha = 1;
    this.SetFont(Game.Resources['FONT_DIALOG_BUTTONS']);
    this.mButtonImage = Game.Resources['IMAGE_DIALOG_BUTTON'];
    this.mOverCel = 1;
    this.mDownCel = 2;
}
Game.Bej3DialogButton.prototype = {
    mTooltipHeader : null,
    mTooltip : null,
    DrawAll : function Game_Bej3DialogButton$DrawAll(g) {
        var _t1 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255 * this.mAlpha) | 0)));
        try {
            GameFramework.widgets.ButtonWidget.prototype.DrawAll.apply(this, [g]);
        } finally {
            _t1.Dispose();
        }
    },
    Update : function Game_Bej3DialogButton$Update() {
        GameFramework.widgets.ButtonWidget.prototype.Update.apply(this);
        if((this.mIsOver) && (this.mTooltip != null) && (this.mTooltip.length > 0)) {
            Game.BejApp.mBejApp.mTooltipManager.RequestTooltip(this, this.mTooltipHeader, '^FFAACC^' + this.mTooltip, new GameFramework.geom.TPoint(this.mX + this.mWidth / 2, this.mY + 0), 400, Game.Tooltip.EArrowDir.ARROW_DOWN, 10);
        }
    },
    MouseEnter : function Game_Bej3DialogButton$MouseEnter() {
        GameFramework.widgets.ButtonWidget.prototype.MouseEnter.apply(this);
        Game.BejApp.mBejApp.PlaySound(Game.Resources['SOUND_BUTTON_MOUSEOVER']);
    },
    MouseLeave : function Game_Bej3DialogButton$MouseLeave() {
        GameFramework.widgets.ButtonWidget.prototype.MouseLeave.apply(this);
        Game.BejApp.mBejApp.PlaySound(Game.Resources['SOUND_BUTTON_MOUSELEAVE']);
        Game.BejApp.mBejApp.mPauseFrames = -10;
    }
}
Game.Bej3DialogButton.staticInit = function Game_Bej3DialogButton$staticInit() {
}

JS_AddInitFunc(function() {
    Game.Bej3DialogButton.registerClass('Game.Bej3DialogButton', GameFramework.widgets.ButtonWidget);
});
JS_AddStaticInitFunc(function() {
    Game.Bej3DialogButton.staticInit();
});
/**
 * @constructor
 */
Game.Bej3Dialog = function Game_Bej3Dialog(theComponentImage, theButtonComponentImage, theId, isModal, theDialogHeader, theDialogLines, theDialogFooter, theButtonMode) {
    this.mScale = new GameFramework.CurvedVal();
    this.mAlpha = new GameFramework.CurvedVal();
    this.mMouseInvisibleChildren = [];
    Game.Bej3Dialog.initializeBase(this, [theComponentImage, theButtonComponentImage, isModal, theDialogHeader, theDialogLines, theDialogFooter, theButtonMode]);
    this.mDialogId = theId;
    this.mFlushPriority = -1;
    this.mIsKilling = false;
    this.mCanEscape = false;
    this.mAllowDrag = true;
    this.mScaleCenterX = 0;
    this.mScaleCenterY = 0;
    this.mWantsDarken = true;
    this.mSpaceAfterHeader = 45;
    this.mContentInsets = new GameFramework.Insets(90, 22, 90, 45);
    this.mButtonHorzSpacing = 10;
    this.mButtonSidePadding = 25;
    this.mLineSpacingOffset = -3;
    this.SetHeaderFont(Game.Resources['FONT_DIALOG_HEADER']);
    this.SetLinesFont(Game.Resources['FONT_DIALOG_SMALL_TEXT']);
    this.SetButtonFont(Game.Resources['FONT_DIALOG_BUTTONS']);
    this.mScale.SetCurve('b+0,2,0.033333,1,####        HY### XPV}f');
    this.mAlpha.SetCurve('b+0,1,0.033333,1,#%t=.####=#2h3       J~P##  1~P##');
}
Game.Bej3Dialog.prototype = {
    mFlushPriority : 0,
    mScale : null,
    mAlpha : null,
    mCanEscape : null,
    mAllowDrag : null,
    mScaleCenterX : 0,
    mScaleCenterY : 0,
    mWantsDarken : null,
    mDialogId : null,
    mMouseInvisibleChildren : null,
    Draw : function Game_Bej3Dialog$Draw(g) {
        GameFramework.widgets.Dialog.prototype.Draw.apply(this, [g]);
    },
    DrawAll : function Game_Bej3Dialog$DrawAll(g) {
        if(this.mAlpha.get_v() != 1.0) {
            g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.mAlpha.get_v()));
        }
        this.mAppState.FlushDeferDraws();
        var wantScaling = this.mScale.GetOutVal() != 1.0;
        if(wantScaling) {
            var aCenterX = this.mX + this.mWidth / 2.0;
            var aCenterY = this.mY + this.mHeight / 2.0;
            if(this.mScaleCenterX != 0) {
                aCenterX = this.mScaleCenterX;
                aCenterY = this.mScaleCenterY;
            }
            g.PushScale(this.mScale.get_v(), this.mScale.get_v(), aCenterX, aCenterY);
        }
        GameFramework.widgets.Dialog.prototype.DrawAll.apply(this, [g]);
        if(wantScaling) {
            g.PopMatrix();
        }
        if(this.mAlpha.get_v() != 1.0) {
            g.PopColor();
        }
    },
    Update : function Game_Bej3Dialog$Update() {
        GameFramework.widgets.Dialog.prototype.Update.apply(this);
        this.mScaleCenterX = this.mWidth / 2.0;
        this.mScaleCenterY = this.mHeight / 2.0;
        this.mAlpha.IncInVal();
        if(!this.mScale.IncInVal() && this.mScale.mRamp != GameFramework.CurvedVal.RAMP_LINEAR) {
            if(this.mScale.GetOutVal() == 0.0) {
                if(Game.BejApp.mBejApp.mBoard != null) {
                    Game.BejApp.mBejApp.mBoard.DialogClosed(this.mDialogId);
                }
                Game.BejApp.mBejApp.mDialogMgr.KillDialog(this.mDialogId);
            } else if(this.mScale.GetOutVal() == 1.0) {
                this.SetChildrenMouseVisible(true);
            }
        } else if(this.mScale.mRamp == GameFramework.CurvedVal.RAMP_CURVEDATA) {
            this.SetChildrenMouseVisible(false);
        }
    },
    SetChildrenMouseVisible : function Game_Bej3Dialog$SetChildrenMouseVisible(isVisible) {
    },
    Kill : function Game_Bej3Dialog$Kill() {
        if(this.mIsKilling) {
            return;
        }
        this.mIsKilling = true;
        var e = new GameFramework.widgets.DialogEvent(GameFramework.widgets.DialogEvent.CLOSED, this);
        e.mCloseResult = this.mResult;
        this.DispatchEvent(e);
        var aPrevScale = this.mScale.GetOutVal();
        this.mAlpha.SetCurve('b+0,1,0.05,1,~###    P~###     P#>%*');
        this.mScale.SetCurve('b+0,1,0.05,1,~###         ~#A5t');
        this.mScale.mOutMax = aPrevScale;
    },
    CreateButton : function Game_Bej3Dialog$CreateButton(theButtonImage) {
        var ret = new Game.Bej3Button(0);
        Game.BejApp.mBejApp.AddButtonSounds(ret);
        this.ConfigureButton(ret, theButtonImage);
        ret.mFont = Game.Resources['FONT_DIALOG_BUTTONS'];
        ret.mLabelYOfs = -4;
        ret.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.ButtonDepress));
        ret.AddEventListener(GameFramework.widgets.WidgetEvent.MOUSE_DOWN, ss.Delegate.create(this, this.ButtonPress));
        return ret;
    },
    NewButton : function Game_Bej3Dialog$NewButton(theId, theWidth) {
        return this.NewButton$2(theId, theWidth, null);
    },
    NewButton$2 : function Game_Bej3Dialog$NewButton$2(theId, theWidth, theButtonImage) {
        var aButtonImage;
        if(theButtonImage == null) {
            aButtonImage = Game.Resources['IMAGE_DIALOG_BUTTON'];
        } else {
            aButtonImage = theButtonImage;
        }
        var aButton = new Game.Bej3DialogButton(theId);
        aButton.Resize(0, 0, theWidth, aButtonImage.mHeight);
        aButton.SetFont(Game.Resources['FONT_DIALOG_BUTTONS']);
        this.AddWidget(aButton);
        Game.BejApp.mBejApp.AddButtonSounds(aButton);
        aButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.ButtonDepress));
        aButton.AddEventListener(GameFramework.widgets.WidgetEvent.MOUSE_DOWN, ss.Delegate.create(this, this.ButtonPress));
        return aButton;
    },
    KeyDown : function Game_Bej3Dialog$KeyDown(theKey) {
        if((theKey == GameFramework.KeyCode.Escape) && (this.mCanEscape)) {
            var btn = this.mNoButton != null ? this.mNoButton : this.mYesButton;
            if(btn != null) {
                var aWidgetEvent = new GameFramework.widgets.WidgetEvent(GameFramework.widgets.WidgetEvent.CLICKED);
                aWidgetEvent.mX = btn.mX;
                aWidgetEvent.mY = btn.mY;
                btn.DispatchEvent(aWidgetEvent);
            }
        }
    },
    MouseDown : function Game_Bej3Dialog$MouseDown(x, y) {
        GameFramework.widgets.Dialog.prototype.MouseDown.apply(this, [x, y]);
    },
    ButtonPress : function Game_Bej3Dialog$ButtonPress(theEvent) {
    },
    ButtonDepress : function Game_Bej3Dialog$ButtonDepress(theEvent) {
    }
}
Game.Bej3Dialog.staticInit = function Game_Bej3Dialog$staticInit() {
}

JS_AddInitFunc(function() {
    Game.Bej3Dialog.registerClass('Game.Bej3Dialog', GameFramework.widgets.Dialog);
});
JS_AddStaticInitFunc(function() {
    Game.Bej3Dialog.staticInit();
});
Game.Bej3Dialog.EId = {};
Game.Bej3Dialog.EId.staticInit = function Game_Bej3Dialog_EId$staticInit() {
    Game.Bej3Dialog.EId.ID_CANCEL = 1002;
}
JS_AddInitFunc(function() {
    Game.Bej3Dialog.EId.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\Bej3Dialog.cs
//LineMap:2=3 5=17 7=16 8=18 19=25 24=29 32=33 35=37 41=44 60=58 63=80 65=67 67=76 68=79 69=81 70=85 77=97 79=100 82=104 85=108 101=112 106=116 108=121 110=124 111=126 112=128 116=133 121=139 123=142 124=144 128=149 135=157 138=161 144=170 146=170 148=177 151=177 152=183 
//LineMap:159=233 163=238 164=240 167=244 182=260 185=264 193=273 197=278 199=287 204=293 224=315 227=321 231=329 241=61 244=63 
//Start:BejApp
/**
 * @constructor
 */
Game.LoadingError = function Game_LoadingError(theDetails) {
    Game.LoadingError.initializeBase(this, [theDetails]);
    this.mDetails = theDetails;
}
Game.LoadingError.prototype = {
    mDetails : null
}
Game.LoadingError.staticInit = function Game_LoadingError$staticInit() {
}

JS_AddInitFunc(function() {
    Game.LoadingError.registerClass('Game.LoadingError', System.Exception);
});
JS_AddStaticInitFunc(function() {
    Game.LoadingError.staticInit();
});
/**
 * @constructor
 */
Game.ScalingIconButton = function Game_ScalingIconButton() {
    Game.ScalingIconButton.initializeBase(this);
}
Game.ScalingIconButton.prototype = {
    mImageDisabledOverlay : null,
    mImageDisabledOverlayOffsetX : 0.0,
    mImageDisabledOverlayOffsetY : 0.0,
    mScale : 1.0,
    mScaleRate : 0.035,
    mMouseOverMaxScale : 1.25,
    Draw : function Game_ScalingIconButton$Draw(g) {
        if(this.mIsOver && this.mScale < this.mMouseOverMaxScale) {
            this.mScale = Math.min(this.mMouseOverMaxScale, this.mScale + this.mScaleRate);
        } else if(!this.mIsOver && this.mScale > 1.0) {
            this.mScale = Math.max(1.0, this.mScale - this.mScaleRate);
        }
        var _t1 = g.PushScale(this.mScale, this.mScale, this.mWidth / 2, this.mHeight / 2);
        try {
            Game.IconButton.prototype.Draw.apply(this, [g]);
            if(!this.mEnabled && this.mImageDisabledOverlay != null) {
                g.DrawImage(this.mImageDisabledOverlay, this.mImageDisabledOverlayOffsetX, this.mImageDisabledOverlayOffsetY);
            }
        } finally {
            _t1.Dispose();
        }
    }
}
Game.ScalingIconButton.staticInit = function Game_ScalingIconButton$staticInit() {
}

JS_AddInitFunc(function() {
    Game.ScalingIconButton.registerClass('Game.ScalingIconButton', Game.IconButton);
});
JS_AddStaticInitFunc(function() {
    Game.ScalingIconButton.staticInit();
});
/**
 * @constructor
 */
Game.MusicInterface = function Game_MusicInterface() {
}
Game.MusicInterface.prototype = {

    QueueEvent : function Game_MusicInterface$QueueEvent(theEvent) {
    },
    QueueEventEx : function Game_MusicInterface$QueueEventEx(theEvent, theMusicTrack, theForceRestart) {
    }
}
Game.MusicInterface.staticInit = function Game_MusicInterface$staticInit() {
}

JS_AddInitFunc(function() {
    Game.MusicInterface.registerClass('Game.MusicInterface', null);
});
JS_AddStaticInitFunc(function() {
    Game.MusicInterface.staticInit();
});
/**
 * @constructor
 */
Game.ResourceCache = function Game_ResourceCache() {
    this.mShrunkenGems = Array.Create((Game.DM.EGemColor._COUNT | 0), null);
}
Game.ResourceCache.prototype = {
    mShrunkenGems : null,
    MakeShrunkenGems : function Game_ResourceCache$MakeShrunkenGems() {
    }
}
Game.ResourceCache.staticInit = function Game_ResourceCache$staticInit() {
}

JS_AddInitFunc(function() {
    Game.ResourceCache.registerClass('Game.ResourceCache', null);
});
JS_AddStaticInitFunc(function() {
    Game.ResourceCache.staticInit();
});
/**
 * @constructor
 */
Game.TopWidget = function Game_TopWidget() {
    this.mMessager = new Game.Messager();
    Game.TopWidget.initializeBase(this);
}
Game.TopWidget.prototype = {
    mMessager : null,
    mInitialized : false,
    InitMessager : function Game_TopWidget$InitMessager() {
        this.mInitialized = true;
        this.mMessager.Init(Game.Resources['FONT_FLAREGOTHIC16']);
        GameFramework.BaseApp.mApp.AddEventListener(GameFramework.widgets.WidgetEvent.KEY_CHAR, ss.Delegate.create(this, this.HandleKeyChar));
    },
    HandleKeyChar : function Game_TopWidget$HandleKeyChar(theE) {
        if(!this.mInitialized) {
            return;
        }
        if((theE).mKeyChar == 86) {
            var aVersionAppend = '';
            if(GameFramework.BaseApp.mApp.get_Is3D()) {
                aVersionAppend += '(HTML5 WebGL)';
            } else {
                aVersionAppend += '(HTML5 Canvas)';
            }
            if(this.mMessager.GetMessageCount() == 0) {
                this.mMessager.AddMessage(String.format('Version {0} ' + aVersionAppend, Game.Version.Get()));
            }
        }
    },
    Update : function Game_TopWidget$Update() {
        if(!this.mInitialized) {
            return;
        }
        GameFramework.widgets.ClassicWidget.prototype.Update.apply(this);
        this.mMessager.Update();
    },
    Draw : function Game_TopWidget$Draw(g) {
        if(!this.mInitialized) {
            return;
        }
        GameFramework.widgets.ClassicWidget.prototype.Draw.apply(this, [g]);
        this.mMessager.Draw(g, 10, Game.BejApp.mBejApp.mHeight + 20);
        if(Game.BejApp.mBejApp.mDebugKeysEnabled) {
            for(var i = 0; i < 2; ++i) {
                if(i == 0) {
                    g.PushColor(0xff000000);
                    g.PushTranslate(-1.0, -1.0);
                }
                g.SetFont(Game.Resources['FONT_FLAREGOTHIC16']);
                if(Game.BejApp.mBejApp.mAutoPlay != Game.DM.EAutoplay.None) {
                    g.DrawString(String.format('Autoplay: {0} -- {1}', Game.DM.gAutoplayDesc[(Game.BejApp.mBejApp.mAutoPlay | 0)], Game.Util.TicksToString(Game.Board.mTotalTicks)), 8, 22);
                }
                var s = String.format('v{0}', Game.Version.Get());
                s = 'DEBUG ' + s;
                g.DrawStringEx(s, Game.BejApp.mBejApp.mWidth - 4, 22, 0, 1);
                if(i == 0) {
                    g.PopColor();
                    g.PopMatrix();
                }
            }
        }
    }
}
Game.TopWidget.staticInit = function Game_TopWidget$staticInit() {
}

JS_AddInitFunc(function() {
    Game.TopWidget.registerClass('Game.TopWidget', GameFramework.widgets.ClassicWidget);
});
JS_AddStaticInitFunc(function() {
    Game.TopWidget.staticInit();
});
/**
 * @constructor
 */
Game.BejApp = function Game_BejApp() {
    this.mRankNames = Game.DM.gRankNames;
    this.mTips = [];
    this.mGemOutlines = new Game.GemOutlines();
    this.mAutoPlay = Game.DM.EAutoplay.None;
    this.mHyperSpaceAnims = [];
    this.mGems3D = [];
    this.mMetrics = new Game.Metrics();
    this.mRecentFPSVector = [];
    Game.BejApp.initializeBase(this);
    GameFramework.Utils.Trace('BejApp()');
    JS_Assert(Game.BejApp.mBejApp == null);
    this.mFrameTime = 1000.0 / 60.0;
    this.mLandscapeWidth = 1600;
    this.mLandscapeHeight = 1200;
    this.mPhysWidth = 1024;
    this.mPhysHeight = 768;
    this.mArtRes = this.mPhysHeight;
    this.mScale = this.mPhysHeight / this.mLandscapeHeight;
    this.mProfile = new Game.Profile();
    this.mMusicInterface = new Game.MusicInterface();
    this.mResCache = new Game.ResourceCache();
    this.mHighScoreMgr = new Game.HighScoreMgr();
    this.mResCache.MakeShrunkenGems();
    Game.BejApp.mBejApp = this;
}
Game['BejApp'] = Game.BejApp;
Game.BejApp.RotToShort = function Game_BejApp$RotToShort(theRot) {
    var aRotToInt = ((theRot * 0x7fff / 3.14159) | 0);
    return (aRotToInt | 0);
}
Game.BejApp.ShortToRot = function Game_BejApp$ShortToRot(theShort) {
    return (theShort * 3.14159 / 0x7fff);
}
Game.BejApp.FloatToByte = function Game_BejApp$FloatToByte(theFloat, theMaxScale) {
    return ((theFloat * 127 / theMaxScale) | 0);
}
Game.BejApp.ByteToFloat = function Game_BejApp$ByteToFloat(theByte, theMaxScale) {
    if(theByte >= 128) {
        return ((theByte | 0xffffff00) | 0) * theMaxScale / 127.0;
    } else {
        return theByte * theMaxScale / 127.0;
    }
}
Game.BejApp.prototype = {
    mMessager : null,
    mBaseWidgetAppState : null,
    mRootWidget : null,
    mGameLayerWidget : null,
    mTopLayerWidget : null,
    mBoard : null,
    mProfile : null,
    mMainMenu : null,
    mLoadingScreen : null,
    mDebugKeysEnabled : null,
    mMusicInterface : null,
    mDialogMgr : null,
    mResCache : null,
    mLoadingThreadComplete : false,
    mInitLoadingComplete : false,
    mGroupsLoading : 0,
    mInitResourceStreamer : null,
    mPauseFrames : 0,
    mRankNames : null,
    mTips : null,
    mTipIdx : 0,
    mTooltipManager : null,
    mHighScoreMgr : null,
    mGemOutlines : null,
    mAutoPlay : null,
    mAutoLevelUpCount : 0,
    mConnecting : null,
    mIsSlow : true,
    mHyperSpaceAnims : null,
    mGems3D : null,
    mWarpTube3D : null,
    mWarpTubeCap3D : null,
    mMetrics : null,
    mInitializedMetrics : false,
    mSessionId : null,
    mRecentFPSVector : null,
    mRecentMaxFPS : 0,
    mRecentMinFPS : 60,
    mFXScale : 1.0,
    mFailed : false,
    mWantMusicInstanceId : null,
    mMusicInstance : null,
    mMusicFade : null,
    mCurMusicVolume : 1.0,
    mWantMusicVolume : 1.0,
    mWantMusic : null,
    mLoopMusic : null,
    mUserAgent : 'unknown',
    Update : function Game_BejApp$Update() {
        this.mMetrics.Update();
        if(this.mMainMenu == null) {
            GameFramework.JSBaseApp.prototype.Update.apply(this);
            return;
        }
        if(this.mMainMenu.mLoaded) {
            if(this.mUpdateCnt % 20 == 0) {
                this.mRecentFPSVector.push(this.mCurFPS);
                while(this.mRecentFPSVector.length > 5) {
                    this.mRecentFPSVector.removeAt(0);
                }
                this.mRecentMaxFPS = 0;

                {
                    var $srcArray2 = this.mRecentFPSVector;
                    for(var $enum2 = 0; $enum2 < $srcArray2.length; $enum2++) {
                        var aFPS = $srcArray2[$enum2];
                        this.mRecentMaxFPS = ((Math.max(this.mRecentMaxFPS, aFPS)) | 0);
                    }
                }
                this.mRecentMinFPS = 60;

                {
                    var $srcArray3 = this.mRecentFPSVector;
                    for(var $enum3 = 0; $enum3 < $srcArray3.length; $enum3++) {
                        var aFPS_2 = $srcArray3[$enum3];
                        this.mRecentMinFPS = ((Math.min(this.mRecentMinFPS, aFPS_2)) | 0);
                    }
                }
            }
            if(this.mUpdateCnt % 20 == 0) {
            }
            if(this.mIsSlow) {
                this.mFXScale = 1.0;
            } else if((this.mRecentMaxFPS != 0) && (this.mBoard != null) && (this.mBoard.mHyperspace == null)) {
                var aTargetFPSDiff = this.mRecentMaxFPS - 50;
                if(aTargetFPSDiff < 0) {
                    this.mFXScale = Math.max(0, this.mFXScale + aTargetFPSDiff * 0.00025);
                }
                aTargetFPSDiff = this.mRecentMinFPS - 50;
                if(aTargetFPSDiff > 0) {
                    this.mFXScale = Math.min(1, this.mFXScale + aTargetFPSDiff * 0.00025);
                }
            }
            if(this.mRecentMaxFPS >= 55) {
                this.mIsSlow = false;
            }
        }
        var aWantPauseFrames = 0;
        if(this.mBoard != null && this.mBoard.WantsHideOnPause()) {
            aWantPauseFrames = 35;
        }
        if(this.mPauseFrames <= aWantPauseFrames) {
            GameFramework.JSBaseApp.prototype.Update.apply(this);
        }
        this.UpdateMusic();
    },
    GotScreenSize : function Game_BejApp$GotScreenSize(theWidth, theHeight) {
        this.SetRes(theWidth, theHeight);
    },
    SetRes : function Game_BejApp$SetRes(theWidth, theHeight) {
        var anArtRes = ((Math.min(theWidth, theHeight)) | 0);
        if((anArtRes == 768) || (anArtRes == 480) || (anArtRes == 320)) {
            this.mPhysWidth = ((Math.max(theWidth, theHeight)) | 0);
            this.mPhysHeight = ((Math.min(theWidth, theHeight)) | 0);
            this.mScale = this.mPhysHeight / this.mLandscapeHeight;
            this.mArtRes = anArtRes;
        }

        else {
            this.mPhysWidth = ((this.mArtRes * 1600 / 1200) | 0);
            this.mPhysHeight = this.mArtRes;
        }
    },
    GetConfig : function Game_BejApp$GetConfig(theName) {
        return this.mDatabase.QueryDB(this.mProdName, 'config', new GameFramework.misc.KeyVal('_id', theName), null, 0);
    },
    AddButtonSounds : function Game_BejApp$AddButtonSounds(theWidget) {
        theWidget.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.PlayButtonClick));
        theWidget.AddEventListener(GameFramework.widgets.WidgetEvent.MOUSE_DOWN, ss.Delegate.create(this, this.PlayButtonDown));
    },
    ButtonCloseDialog : function Game_BejApp$ButtonCloseDialog(e) {
        var aWidgetEvent = e;
        var aWidget = aWidgetEvent.target;
        if(Type.tryCast(aWidget.mParent, GameFramework.widgets.Dialog)) {
            (aWidget.mParent).Kill();
        } else {
            aWidget.mParent.mParent.RemoveWidget(aWidget.mParent);
        }
    },
    PlayVoice : function Game_BejApp$PlayVoice(theSoundResource) {
        this.PlaySound(theSoundResource);
    },
    PlayButtonDown : function Game_BejApp$PlayButtonDown(e) {
        var aButtonWidget = Type.safeCast(e.target, GameFramework.widgets.ButtonWidget);
        if((aButtonWidget != null) && (aButtonWidget.mDisabled)) {
            return;
        }
        this.PlaySound(Game.Resources['SOUND_BUTTON_PRESS']);
    },
    PlayButtonClick : function Game_BejApp$PlayButtonClick(e) {
        this.PlaySound(Game.Resources['SOUND_BUTTON_RELEASE']);
    },
    SetDebugMode : function Game_BejApp$SetDebugMode(debugMode) {
        this.mDebugKeysEnabled = true;
    },
    GetArtRes : function Game_BejApp$GetArtRes() {
        return this.mArtRes;
    },
    SetArtRes : function Game_BejApp$SetArtRes(theArtRes) {
        this.mArtRes = theArtRes;
    },
    SetPathPrefix : function Game_BejApp$SetPathPrefix(thePathPrefix) {
        //JS
        this.mPathPrefix = thePathPrefix;
        //-JS
    },
    SetMetricsURL : function Game_BejApp$SetMetricsURL(theURL) {
        this.mMetrics.SetMetricsURL(theURL);
    },
    SetThrottlingURL : function Game_BejApp$SetThrottlingURL(theURL) {
        this.mMetrics.SetThrottlingURL(theURL);
    },
    SetUserAgent : function Game_BejApp$SetUserAgent(theUserAgent) {
        this.mUserAgent = theUserAgent;
    },
    SetUserId : function Game_BejApp$SetUserId(theUserID) {
        this.mUserId = theUserID;
    },
    GetUserId : function Game_BejApp$GetUserId() {
        return this.mUserId;
    },
    SetUseGL : function Game_BejApp$SetUseGL(useWebGL) {
        //JS
        this.mUseGL = useWebGL;
        //-JS
    },
    GetUseGL : function Game_BejApp$GetUseGL() {
        //JS
        return this.mUseGL;
        //-JS
        return this.get_Is3D();
    },
    SetBkgImagePath : function Game_BejApp$SetBkgImagePath(theIdx, thePath) {
        Game.Background.SetBkgImagePath(theIdx, thePath);
    },
    SizeChanged : function Game_BejApp$SizeChanged(theWidth, theHeight) {
        GameFramework.JSBaseApp.prototype.SizeChanged.apply(this, [theWidth, theHeight]);
    },
    Init : function Game_BejApp$Init() {
        this.mProdName = 'Bejeweled';
        //JS
        gCanvasAllowAdditive = false;
        //-JS
        Game.Util.gRand.SRand((GameFramework.Utils.GetRand() | 0));
        var aDefaultArtRes = this.mArtRes;
        var anArtResStr = this.GetLocalData(this.mProdName, 'ArtRes');
        if(anArtResStr != null) {
            this.mArtRes = GameFramework.Utils.ToInt(anArtResStr);
        }
        GameFramework.JSBaseApp.prototype.Init.apply(this);
        if(this.mUserId != null) {
        }
        this.mSessionId = GameFramework.Utils.CreateGUID();
        if(this.mUserId == null) {
            this.mUserId = this.GetLocalData('Global', 'UserId');
        }
        if(this.mUserId == null) {
            this.mUserId = GameFramework.Utils.CreateGUID();
            this.SetLocalData('Global', 'UserId', this.mUserId);
        }
        if(!this.mInitializedMetrics) {
            this.mMetrics.Init();
            this.mInitializedMetrics = true;
        }
        var aThrottleIdx = 0;
        for(var i = 0; i < this.mUserId.length; i++) {
            aThrottleIdx ^= ((this.mUserId.charCodeAt(i) | 0) << ((i % 4) * 8));
        }
        if(this.mMetrics.mSamplingProbRoll == 0.0) {
            this.mMetrics.SetSamplingProbRoll(((aThrottleIdx % 1234567) / 1234567));
        }
        this.mHighScoreMgr.Load();
        this.InitDefaultHighScores();
        this.mScale = this.mPhysHeight / this.mLandscapeHeight;
        if(this.mDatabase != null) {
            this.mDatabase.mURL = 'http://10.1.244.102/query_engine.php';
        }
        this.SubmitStandardMetrics('startup', [new GameFramework.misc.KeyVal('DefaultArtRes', aDefaultArtRes), new GameFramework.misc.KeyVal('WebGL', this.get_Is3D()), new GameFramework.misc.KeyVal('ArtRes', this.mArtRes), new GameFramework.misc.KeyVal('PlatformInfo', this.mUserAgent)]);
        this.mBaseWidgetAppState = new GameFramework.widgets.ClassicWidgetAppState();
        this.mBaseWidgetAppState.mGraphics = this.mGraphics;
        this.mRootWidget = this.mBaseWidgetAppState.mRootWidget;
        this.Start(this.mBaseWidgetAppState);
    },
    InitDefaultHighScores : function Game_BejApp$InitDefaultHighScores() {
        this.mHighScoreMgr.GenerateDefaults$2('Classic', 60000, 10000);
        this.mHighScoreMgr.GenerateDefaults$2('Lightning', 100000, 50000);
    },
    StartLoad : function Game_BejApp$StartLoad() {
        var anExpectedWidth = (((1600 * this.mPhysHeight) / 1200) | 0);
        this.mRootWidget.mX = (((this.mPhysWidth - anExpectedWidth) / 2) | 0) / this.mScale;
        this.mX = (-this.mRootWidget.mX | 0);
        this.mDrawWidth = this.mWidth + this.mRootWidget.mX * 2;
        this.mDrawHeight = this.mHeight;
        this.mGameLayerWidget = new GameFramework.widgets.ClassicWidget();
        this.mRootWidget.AddWidget(this.mGameLayerWidget);
        this.mDialogMgr = new Game.DialogMgr();
        this.mRootWidget.AddWidget(this.mDialogMgr);
        this.mTopLayerWidget = new Game.TopWidget();
        this.mMessager = this.mTopLayerWidget.mMessager;
        this.mRootWidget.AddWidget(this.mTopLayerWidget);
        if(this.mLoadingScreen == null) {
            this.mMainMenu = new Game.MainMenu();
            this.mMainMenu.mWidth = 1600;
            this.mMainMenu.mHeight = 1200;
            this.mGameLayerWidget.AddWidget(this.mMainMenu);
            this.mMainMenu.Update();
            this.mBaseWidgetAppState.SetFocus(this.mMainMenu);
            this.mTooltipManager = new Game.TooltipManager();
            this.mRootWidget.AddWidget(this.mTooltipManager);
        }
        var aResourceStreamer = this.mResourceManager.StreamTextFile('properties/resources.xml');
        aResourceStreamer.AddEventListener(GameFramework.events.Event.COMPLETE, ss.Delegate.create(this, this.ResourceXMLLoaded));
        aResourceStreamer.AddEventListener(GameFramework.events.IOErrorEvent.IO_ERROR, ss.Delegate.create(this, this.LoadFailed));
    },
    ResourceXMLLoaded : function Game_BejApp$ResourceXMLLoaded(e) {
        var aResourceStreamer = e.target;
        this.mResourceManager.ParseResourceManifest(aResourceStreamer.mResultData);
        this.StreamInitResources();
    },
    SubmitStandardMetricsDict : function Game_BejApp$SubmitStandardMetricsDict(theMetricsType, theMetricsData, force, theAlternateURL) {
        if(theMetricsData === undefined) {
            theMetricsData = null;
        }
        if(force === undefined) {
            force = false;
        }
        if(theAlternateURL === undefined) {
            theAlternateURL = null;
        }
        if(!this.mInitializedMetrics) {
            this.mMetrics.Init();
            this.mInitializedMetrics = true;
        }
        var aStats = [];
        if(theMetricsData != null) {

            {
                for(aKey in theMetricsData) {
                    aStats.push(new GameFramework.misc.KeyVal(aKey, theMetricsData[aKey]));
                }
            }
        }
        this.SubmitStandardMetrics(theMetricsType, aStats, force, theAlternateURL);
    },
    SubmitStandardMetrics : function Game_BejApp$SubmitStandardMetrics(theMetricsType, theMetricsData, force, theAlternateURL) {
        if(force === undefined) {
            force = false;
        }
        if(theAlternateURL === undefined) {
            theAlternateURL = null;
        }
        var aStats = [new GameFramework.misc.KeyVal('PlayerId', this.mUserId), new GameFramework.misc.KeyVal('ProductName', 'Bejeweled'), new GameFramework.misc.KeyVal('PlatformName', 'HTML5'), new GameFramework.misc.KeyVal('ClientVersion', Game.Version.Get()), new GameFramework.misc.KeyVal('SessionId', this.mSessionId)];
        if(theMetricsData != null) {

            {
                var $srcArray5 = theMetricsData;
                for(var $enum5 = 0; $enum5 < $srcArray5.length; $enum5++) {
                    var aKeyVal = $srcArray5[$enum5];
                    aStats.push(aKeyVal);
                }
            }
        }
        this.mMetrics.SubmitReport(theMetricsType, aStats, force, theAlternateURL);
    },
    LoadFailed : function Game_BejApp$LoadFailed(e) {
        if(!this.mFailed) {
            var aDetails = 'Loading failed';
            var aResourceStreamer = Type.safeCast(e.target, GameFramework.resources.ResourceStreamer);
            while(aResourceStreamer.mFailedChild != null) {
                aResourceStreamer = aResourceStreamer.mFailedChild;
            }
            if(aResourceStreamer != null) {
                if(aResourceStreamer.mPath != null) {
                    aDetails = 'Failed to load \'' + aResourceStreamer.mPath + '\'';
                } else if(aResourceStreamer.mGroupName != null) {
                    aDetails = 'Failed to load group \'' + aResourceStreamer.mGroupName + '\'';
                }
            }
            this.Trace(aDetails);
            this.mFailed = true;
            throw new Game.LoadingError(aDetails);
        }
    },

    // start to load Init group resources, Init group is used for loading screen
    StreamInitResources : function Game_BejApp$StreamInitResources() {
        this.mInitResourceStreamer = this.mResourceManager.StreamResourceGroup('Init');
        this.mInitResourceStreamer.AddEventListener(GameFramework.events.Event.COMPLETE, ss.Delegate.create(this, this.InitLoadingComplete));
        this.mInitResourceStreamer.AddEventListener(GameFramework.events.IOErrorEvent.IO_ERROR, ss.Delegate.create(this, this.LoadFailed));
    },

    // start to load a group resources
    StreamResourceGroup : function Game_BejApp$StreamResourceGroup(theName) {
        var aStreamer = this.mResourceManager.StreamResourceGroup(theName);
        this.mGroupsLoading++;
        aStreamer.AddEventListener(GameFramework.events.Event.COMPLETE, ss.Delegate.create(this, this.LoadingThreadLoadingComplete));
        aStreamer.AddEventListener(GameFramework.events.IOErrorEvent.IO_ERROR, ss.Delegate.create(this, this.LoadFailed));
    },

    // save highscores
    SaveHighscores : function Game_BejApp$SaveHighscores(theForceSave) {
        this.mHighScoreMgr.Save();
    },

    // invoked when Init group is loaded
    InitLoadingComplete : function Game_BejApp$InitLoadingComplete(e) {
        // check init load time, if larger than 25 seconds, disable music
        var anInitLoadTimeMS = GameFramework.Utils.GetRunningMilliseconds();
        if(anInitLoadTimeMS > 25000) {
            this.mProfile.mMusicVolume = 0.0;
        }

        // TODO, what is this?
        if(this.mLoadingScreen != null) {
            this.mLoadingScreen.mHasFont = true;
        }

        // set flag
        this.mInitLoadingComplete = true;

        // notify main menu
        this.mMainMenu.InitLoadingComplete();

        // load background resource group
        var aBgStreamer = Game.Background.StartBkgLoad(0);
        this.mGroupsLoading++;
        aBgStreamer.AddEventListener(GameFramework.events.Event.COMPLETE, ss.Delegate.create(this, this.LoadingThreadLoadingComplete));
        aBgStreamer.AddEventListener(GameFramework.events.IOErrorEvent.IO_ERROR, ss.Delegate.create(this, this.LoadFailed));

        // other resource grouips
        this.StreamResourceGroup('Gameplay');
        this.StreamResourceGroup('Fonts');
        this.StreamResourceGroup('LoadingThread');
        this.StreamResourceGroup('Dialog');
        this.StreamResourceGroup('Board');
        this.StreamResourceGroup('Additive');
        this.StreamResourceGroup('MainMenu');

        // load hyperspace anim resource group
        var aStreamer = this.mResourceManager.StreamBinaryFile(Game.Resources.RESFILE_3D_HYPERSPACE_MAIN_0_ID);
        this.mGroupsLoading++;
        aStreamer.AddEventListener(GameFramework.events.Event.COMPLETE, ss.Delegate.create(this, this.HyperspaceAnimLoaded));
        aStreamer.AddEventListener(GameFramework.events.IOErrorEvent.IO_ERROR, ss.Delegate.create(this, this.LoadFailed));
    },

    // invoked when hyperspace animation group loaded
    HyperspaceAnimLoaded : function Game_BejApp$HyperspaceAnimLoaded(e) {
        var aStreamer = e.target;
        var aByteArray = aStreamer.mResultData;
        var aDataBuffer = new GameFramework.DataBuffer();
        aDataBuffer.InitRead(aByteArray);
        var aHyperAnimSequence = new Game.HyperAnimSequence();
        this.LoadHyperspaceAnim(aDataBuffer, aHyperAnimSequence);
        this.mHyperSpaceAnims.push(aHyperAnimSequence);
        this.LoadingThreadLoadingComplete(e);
    },

    // change resulotion
    ChangeArtRes : function Game_BejApp$ChangeArtRes(theWantRes) {
        this.SetLocalData(this.mProdName, 'ArtRes', GameFramework.Utils.ToString(theWantRes));
        //JS
        JSFExt_Reload();
        //-JS
    },

    SocialConnected : function Game_BejApp$SocialConnected(e) {
        this.mConnecting = false;
        this.LoadingThreadLoadingComplete(e);
    },

    // invoked when one group resource is loaded
    LoadingThreadLoadingComplete : function Game_BejApp$LoadingThreadLoadingComplete(e) {
        this.mGroupsLoading--;
        if((this.mGroupsLoading == 0) && (!this.mLoadingThreadComplete)) {
            //JS
            this.mDistributeLoadTime = false;
            //-JS
            this.StreamResourceGroup('Music');
            this.SubmitStandardMetrics('load_complete', [new GameFramework.misc.KeyVal('LoadSeconds', ((GameFramework.Utils.GetRunningMilliseconds() / 1000) | 0))]);
            this.SetMusicVolume(this.mProfile.mMusicVolume);
            this.SetSoundVolume(this.mProfile.mSfxVolume);
            this.PlayMusic(Game.Resources.SOUND_MUSIC_MENU_ID);
            this.mTopLayerWidget.InitMessager();
            this.mLoadingThreadComplete = true;
            Game.Resources['FONT_DIALOG_BUTTONS'].PushLayerColor('MAIN', GameFramework.gfx.Color.RGBAToInt(255, 255, 255, 230));
            Game.Resources['FONT_DIALOG_BUTTONS'].PushLayerColor('OUTLINE', GameFramework.gfx.Color.RGBAToInt(255, 255, 255, 255));
            Game.Resources['FONT_DIALOG_BUTTONS'].PushLayerColor('GLOW', GameFramework.gfx.Color.RGBAToInt(255, 255, 255, 128));
            Game.Resources['FONT_DIALOG_HEADER'].PushLayerColor('MAIN', GameFramework.gfx.Color.RGBAToInt(255, 255, 255, 230));
            Game.Resources['FONT_DIALOG_HEADER'].PushLayerColor('OUTLINE', GameFramework.gfx.Color.RGBAToInt(255, 255, 255, 255));
            Game.Resources['FONT_DIALOG_HEADER'].PushLayerColor('GLOW', GameFramework.gfx.Color.RGBAToInt(255, 255, 255, 128));
            Game.Resources['IMAGE_BOARD_TIMER'].mPixelSnapping = GameFramework.resources.PixelSnapping.Never;
            Game.Resources['IMAGE_BOARD_TIMER_RED'].mPixelSnapping = GameFramework.resources.PixelSnapping.Never;
            Game.Resources['IMAGE_BOARD_TIMER_GOLD'].mPixelSnapping = GameFramework.resources.PixelSnapping.Never;
            Game.Resources['IMAGE_LIGHTNING_TIMER_LIGHTNING'].mPixelSnapping = GameFramework.resources.PixelSnapping.Never;
            Game.Resources['IMAGE_LIGHTNING_TIMER_GOLD_LIGHTNING'].mPixelSnapping = GameFramework.resources.PixelSnapping.Never;
            Game.Resources['IMAGE_LIGHTNING_TIMER_RED_LIGHTNING'].mPixelSnapping = GameFramework.resources.PixelSnapping.Never;
            Game.Resources['FONT_TIMER_LARGE'].SetPixelSnappingOverride(GameFramework.resources.PixelSnapping.Never);
            Game.Resources['FONT_TIMER_SMALL'].SetPixelSnappingOverride(GameFramework.resources.PixelSnapping.Never);
            this.mGems3D.push(this.mResourceManager.GetMeshResourceById(this.mResourceManager.PathToId('3d/gemRed.p3d')));
            this.mGems3D.push(this.mResourceManager.GetMeshResourceById(this.mResourceManager.PathToId('3d/gemWhite.p3d')));
            this.mGems3D.push(this.mResourceManager.GetMeshResourceById(this.mResourceManager.PathToId('3d/gemGreen.p3d')));
            this.mGems3D.push(this.mResourceManager.GetMeshResourceById(this.mResourceManager.PathToId('3d/gemYellow.p3d')));
            this.mGems3D.push(this.mResourceManager.GetMeshResourceById(this.mResourceManager.PathToId('3d/gemPurple.p3d')));
            this.mGems3D.push(this.mResourceManager.GetMeshResourceById(this.mResourceManager.PathToId('3d/gemOrange.p3d')));
            this.mGems3D.push(this.mResourceManager.GetMeshResourceById(this.mResourceManager.PathToId('3d/gemBlue.p3d')));
            this.mWarpTube3D = this.mResourceManager.GetMeshResourceById(this.mResourceManager.PathToId('3d/warptube.p3d'));
            this.mWarpTube3D.AddEventListener(GameFramework.resources.MeshEvent.PREDRAW_SET, ss.Delegate.create(Game.HyperspaceUltra, Game.HyperspaceUltra.HypertubePredrawSet));
            this.mWarpTube3D.AddEventListener(GameFramework.resources.MeshEvent.POSTDRAW_SET, ss.Delegate.create(Game.HyperspaceUltra, Game.HyperspaceUltra.HypertubePostdrawSet));
            this.mWarpTubeCap3D = this.mResourceManager.GetMeshResourceById(this.mResourceManager.PathToId('3d/warptube_cap.p3d'));
        }
    },

    DoModalDialog : function Game_BejApp$DoModalDialog(theDialogHeader, theDialogLines, theDialogFooter, theButtonMode, theDialogId) {
        if(theDialogId === undefined) {
            theDialogId = Game.DM.EDialog.UNKNOWN_MODAL;
        }
        var aDialog = new Game.Bej3Dialog(Game.Resources['IMAGE_DIALOG_BACKGROUND'], Game.Resources['IMAGE_DIALOG_BUTTON'], theDialogId, true, theDialogHeader, theDialogLines, theDialogFooter, theButtonMode);
        aDialog.SetButtonFont(Game.Resources['FONT_DIALOG_BUTTONS']);
        aDialog.SetHeaderFont(Game.Resources['FONT_DIALOG_HEADER']);
        aDialog.SetLinesFont(Game.Resources['FONT_DIALOG_TEXT']);
        aDialog.mContentInsets = new GameFramework.Insets(128, 20, 128, 64);
        aDialog.SetColor(GameFramework.widgets.Dialog.COLOR_LINES, 0xff000000);
        aDialog.mSpaceAfterHeader = 32;
        aDialog.Resize(((1600 / 2) | 0) - ((1000 / 2) | 0), 300, 1000, aDialog.GetPreferredHeight(1000));
        this.mDialogMgr.AddDialog(aDialog);
        return aDialog;
    },
    DoSimpleDialog : function Game_BejApp$DoSimpleDialog(theDialogHeader, theDialogLines, theDialogFooter, theButtonMode) {
        if(theDialogFooter === undefined) {
            theDialogFooter = '';
        }
        if(theButtonMode === undefined) {
            theButtonMode = GameFramework.widgets.Dialog.BUTTONS_FOOTER;
        }
        var aDialog = this.DoModalDialog(theDialogHeader, theDialogLines, theDialogFooter, theButtonMode);
        aDialog.mYesButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.ButtonCloseDialog));
    },
    ClearBoard : function Game_BejApp$ClearBoard() {
        if(this.mBoard != null) {
            this.mGameLayerWidget.RemoveWidget(this.mBoard);
            this.mBoard.Dispose();
            this.mBoard = null;
        }
    },
    doNewGame : function Game_BejApp$doNewGame(theBoard) {
        this.ClearBoard();
        this.mBoard = theBoard;
        this.mGameLayerWidget.AddWidget(this.mBoard);
        this.mBoard.Init();
        this.mBoard.NewGame();
        this.mBoard.Resize(0, 0, 1600, 1200);
        this.mBaseWidgetAppState.SetFocus(this.mBoard);
        if(!this.mIsSlow) {
        } else {
        }
        this.mBoard.mBackground.mVisible = false;
        if(this.mMainMenu != null) {
            this.mMainMenu.mLeftButton.mImage = Game.Resources['IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_FLATTENEDPAM'];
        }
        //JS
        gTimeAcc = 0;
        //-JS
    },
    SetSoundVolume : function Game_BejApp$SetSoundVolume(theVolume) {
        this.mSoundManager.SetVolume(theVolume, 0);
    },
    SetMusicVolume : function Game_BejApp$SetMusicVolume(theVolume) {
        this.mWantMusicVolume = theVolume;
    },
    PlayMusic : function Game_BejApp$PlayMusic(theSoundResourceId, theFadeout, loopMusic) {
        if(theFadeout === undefined) {
            theFadeout = null;
        }
        if(loopMusic === undefined) {
            loopMusic = true;
        }
        if(theSoundResourceId != this.mWantMusicInstanceId) {
            if(theFadeout == null) {
                if(this.mMusicInstance != null) {
                    this.mMusicInstance.Stop();
                    this.mMusicInstance = null;
                }
            }
            this.mMusicFade = theFadeout;
            this.mWantMusicInstanceId = theSoundResourceId;
        }
        this.mLoopMusic = loopMusic;
    },
    UpdateMusic : function Game_BejApp$UpdateMusic() {
        var aVolume = this.mWantMusicVolume;
        if(aVolume < 0.04) {
            aVolume = 0.0;
        }
        if(this.mMusicFade != null) {
            this.mMusicFade.IncInVal();
            aVolume = aVolume * this.mMusicFade.get_v();
        }
        if(aVolume == 0) {
            this.mMusicFade = null;
        }
        if((this.mMusicInstance != null) && (aVolume == 0)) {
            this.mMusicInstance.Stop();
            this.mMusicInstance = null;
        }
        if(this.mBackgrounded) {
            aVolume = 0.0;
        }
        if((this.mMusicInstance == null) && (this.mWantMusicInstanceId != null) && (aVolume > 0)) {
            var aSoundResource = this.mResourceManager.GetSoundResourceById(this.mWantMusicInstanceId);
            if(aSoundResource != null) {
                this.mMusicInstance = this.GetSoundInst(aSoundResource);
                if(this.mMusicInstance != null) {
                    this.mMusicInstance.SetSoundGroup(1);
                    this.mMusicInstance.SetVolume(aVolume);
                    this.mMusicInstance.PlayEx(this.mLoopMusic, false);
                }
                this.mCurMusicVolume = aVolume;
            }
        }
        if((this.mMusicInstance != null) && (aVolume != this.mCurMusicVolume)) {
            this.mMusicInstance.SetVolume(aVolume);
            this.mCurMusicVolume = aVolume;
        }
    },
    BackToMenu : function Game_BejApp$BackToMenu() {
        if(this.mBoard != null) {
            this.mMainMenu.UpdateBackgroundImageForActiveBtn(this.mBoard.mBackground.GetBackgroundImage$2());
        }
        this.mMainMenu.mVisible = true;
        this.mMainMenu.PlayLeaveAnim();
        var aMusicFade = new GameFramework.CurvedVal();
        aMusicFade.SetCurveRef('BejApp_cs_11_21_11__05_46_54_679');
        Game.BejApp.mBejApp.PlayMusic(Game.Resources.SOUND_MUSIC_MENU_ID, aMusicFade);
    },
    DoNewClassicGame : function Game_BejApp$DoNewClassicGame() {
        this.doNewGame(new Game.ClassicBoard(this));
    },
    DoNewSpeedGame : function Game_BejApp$DoNewSpeedGame() {
        this.doNewGame(new Game.SpeedBoard(this));
    },
    GetDialog : function Game_BejApp$GetDialog(theDialogId) {
        return this.mDialogMgr.GetDialog(theDialogId);
    },
    LoadHyperspaceAnimConv : function Game_BejApp$LoadHyperspaceAnimConv(theDataBuffer, theHyperSpaceAnim, theOutBuffer) {
        var formatVer = theDataBuffer.ReadInt();
        if(formatVer != 0x3 && formatVer != 0x2) {
            return false;
        }
        theOutBuffer.WriteInt(4);
        var frameCount = theDataBuffer.ReadInt();
        theOutBuffer.WriteInt(frameCount);
        var lightCount = theDataBuffer.ReadInt();
        theOutBuffer.WriteInt(lightCount);
        if(theHyperSpaceAnim != null) {
        }
        theHyperSpaceAnim.mFrameCount = frameCount;
        theHyperSpaceAnim.mLightCount = lightCount;
        theHyperSpaceAnim.mCamera = Array.Create(frameCount, null);
        theHyperSpaceAnim.mBoard = Array.Create(frameCount, null);
        theHyperSpaceAnim.mGems = Array.Create3D(Game.Board.NUM_ROWS, Game.Board.NUM_COLS, frameCount, null);
        theHyperSpaceAnim.mLights = Array.Create2D(lightCount, frameCount, null);
        for(var row = 0; row < Game.Board.NUM_ROWS; ++row) {
            for(var col = 0; col < Game.Board.NUM_COLS; ++col) {
                theHyperSpaceAnim.mGemHitFrame[theHyperSpaceAnim.mGemHitFrame.mIdxMult0 * (row) + col] = theHyperSpaceAnim.mFrameCount;
            }
        }
        if(formatVer >= 0x3) {
            var numHiddenObjects = theDataBuffer.ReadInt();
            theOutBuffer.WriteInt(numHiddenObjects);
            for(var hiddenObjTableIdx = 0; hiddenObjTableIdx < numHiddenObjects; ++hiddenObjTableIdx) {
                var trackId = theDataBuffer.ReadInt();
                theOutBuffer.WriteInt(trackId);
                var shouldHideAtFrameNum = theDataBuffer.ReadInt();
                theOutBuffer.WriteInt(shouldHideAtFrameNum);
                if(trackId < 2 || trackId > 65) {
                    continue;
                }
                var gemCol = (trackId - 2) % 8;
                var gemRow = (((((trackId - 2) - gemCol) / 8) | 0));
                theHyperSpaceAnim.mGemHitFrame[theHyperSpaceAnim.mGemHitFrame.mIdxMult0 * (gemRow) + gemCol] = shouldHideAtFrameNum;
            }
        }
        var aTrackingRot = Array.Create2D(8, 8, null);
        var aTrackingPos = Array.Create2D(8, 8, null);
        var aTrackingPosPrev = Array.Create2D(8, 8, null);
        for(var frame = 0; frame < frameCount; ++frame) {
            var trackId_2;
            var trackKind;
            if(frame != theDataBuffer.ReadInt()) {
                return false;
            }
            trackId_2 = theDataBuffer.ReadInt();
            if(trackId_2 != 0) {
                return false;
            }
            trackKind = theDataBuffer.ReadInt();
            theHyperSpaceAnim.mCamera[frame] = new Game.HyperAnimKey();
            theHyperSpaceAnim.mCamera[frame].mPos.x = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mCamera[frame].mPos.y = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mCamera[frame].mPos.z = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mCamera[frame].mRot.x = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mCamera[frame].mRot.y = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mCamera[frame].mRot.z = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mCamera[frame].mScale.x = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mCamera[frame].mScale.y = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mCamera[frame].mScale.z = theDataBuffer.ReadFloat();
            {
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mCamera[frame].mPos.x);
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mCamera[frame].mPos.y);
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mCamera[frame].mPos.z);
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mCamera[frame].mRot.x);
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mCamera[frame].mRot.y);
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mCamera[frame].mRot.z);
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mCamera[frame].mScale.x);
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mCamera[frame].mScale.y);
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mCamera[frame].mScale.z);
            }
            trackId_2 = theDataBuffer.ReadInt();
            if(trackId_2 != 1) {
                return false;
            }
            trackKind = theDataBuffer.ReadInt();
            theHyperSpaceAnim.mBoard[frame] = new Game.HyperAnimKey();
            theHyperSpaceAnim.mBoard[frame].mPos.x = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mBoard[frame].mPos.y = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mBoard[frame].mPos.z = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mBoard[frame].mRot.x = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mBoard[frame].mRot.y = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mBoard[frame].mRot.z = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mBoard[frame].mScale.x = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mBoard[frame].mScale.y = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mBoard[frame].mScale.z = theDataBuffer.ReadFloat();
            {
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mBoard[frame].mPos.x);
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mBoard[frame].mPos.y);
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mBoard[frame].mPos.z);
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mBoard[frame].mRot.x);
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mBoard[frame].mRot.y);
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mBoard[frame].mRot.z);
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mBoard[frame].mScale.x);
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mBoard[frame].mScale.y);
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mBoard[frame].mScale.z);
            }
            var aXDeltaScale = 0;
            var aYDeltaScale = 0;
            var aZDeltaScale = 0;
            var aXRotDeltaScale = 0;
            var aYRotDeltaScale = 0;
            var aZRotDeltaScale = 0;
            for(var row_2 = 0; row_2 < Game.Board.NUM_ROWS; ++row_2) {
                for(var col_2 = 0; col_2 < Game.Board.NUM_COLS; ++col_2) {
                    trackId_2 = theDataBuffer.ReadInt();
                    trackKind = theDataBuffer.ReadInt();
                    theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame] = new Game.HyperAnimKey();
                    theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mPos.x = theDataBuffer.ReadFloat();
                    theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mPos.y = theDataBuffer.ReadFloat();
                    theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mPos.z = theDataBuffer.ReadFloat();
                    theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mRot.x = theDataBuffer.ReadFloat();
                    theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mRot.y = theDataBuffer.ReadFloat();
                    theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mRot.z = theDataBuffer.ReadFloat();
                    theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mScale.x = theDataBuffer.ReadFloat();
                    theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mScale.y = theDataBuffer.ReadFloat();
                    theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mScale.z = theDataBuffer.ReadFloat();
                    if(frame > 0) {
                        var aDelta = Math.abs(aTrackingPos[aTrackingPos.mIdxMult0 * (row_2) + col_2].x - theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mPos.x);
                        aXDeltaScale = Math.max(aDelta, aXDeltaScale);
                        aDelta = Math.abs(aTrackingPos[aTrackingPos.mIdxMult0 * (row_2) + col_2].y - theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mPos.y);
                        aYDeltaScale = Math.max(aDelta, aYDeltaScale);
                        aDelta = Math.abs(aTrackingPos[aTrackingPos.mIdxMult0 * (row_2) + col_2].z - theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mPos.z);
                        aZDeltaScale = Math.max(aDelta, aZDeltaScale);
                        aDelta = Math.abs(aTrackingRot[aTrackingRot.mIdxMult0 * (row_2) + col_2].x - theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mRot.x);
                        aXRotDeltaScale = Math.max(aDelta, aXRotDeltaScale);
                        aDelta = Math.abs(aTrackingRot[aTrackingRot.mIdxMult0 * (row_2) + col_2].y - theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mRot.y);
                        aYRotDeltaScale = Math.max(aDelta, aYRotDeltaScale);
                        aDelta = Math.abs(aTrackingRot[aTrackingRot.mIdxMult0 * (row_2) + col_2].z - theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mRot.z);
                        aZRotDeltaScale = Math.max(aDelta, aZRotDeltaScale);
                    }
                }
            }
            aXDeltaScale = Math.min(aXDeltaScale, 50.0);
            aYDeltaScale = Math.min(aYDeltaScale, 50.0);
            aZDeltaScale = Math.min(aZDeltaScale, frame * 1.0);
            aXRotDeltaScale = Math.min(aXRotDeltaScale, 0.25);
            aYRotDeltaScale = Math.min(aYRotDeltaScale, 0.25);
            aZRotDeltaScale = Math.min(aZRotDeltaScale, 0.25);
            theOutBuffer.WriteFloat(aXDeltaScale);
            theOutBuffer.WriteFloat(aYDeltaScale);
            theOutBuffer.WriteFloat(aZDeltaScale);
            theOutBuffer.WriteFloat(aXRotDeltaScale);
            theOutBuffer.WriteFloat(aYRotDeltaScale);
            theOutBuffer.WriteFloat(aZRotDeltaScale);
            for(var row_3 = 0; row_3 < Game.Board.NUM_ROWS; ++row_3) {
                for(var col_3 = 0; col_3 < Game.Board.NUM_COLS; ++col_3) {
                    if(frame == 0) {
                        aTrackingPos[aTrackingPos.mIdxMult0 * (row_3) + col_3] = new GameFramework.geom.Vector3(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.x, theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.y, theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.z);
                        aTrackingRot[aTrackingRot.mIdxMult0 * (row_3) + col_3] = new GameFramework.geom.Vector3(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mRot.x, theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mRot.y, theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mRot.z);
                        theOutBuffer.WriteFloat(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.x);
                        theOutBuffer.WriteFloat(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.y);
                        theOutBuffer.WriteFloat(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.z);
                        theOutBuffer.WriteFloat(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mRot.x);
                        theOutBuffer.WriteFloat(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mRot.y);
                        theOutBuffer.WriteFloat(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mRot.z);
                        theOutBuffer.WriteFloat(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mScale.x);
                        theOutBuffer.WriteFloat(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mScale.y);
                        theOutBuffer.WriteFloat(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mScale.z);
                    }

                    else {
                        var aFlags = 0;
                        var xbyte = 0;
                        var ybyte = 0;
                        var zbyte = 0;
                        var xrotbyte = 0;
                        var yrotbyte = 0;
                        var zrotbyte = 0;
                        var aDelta_2 = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mRot.x - aTrackingRot[aTrackingRot.mIdxMult0 * (row_3) + col_3].x;
                        if(Math.abs(aDelta_2) <= aXRotDeltaScale) {
                            xrotbyte = Game.BejApp.FloatToByte(aDelta_2, aXRotDeltaScale);
                            if(xrotbyte != 0) {
                                aTrackingRot[aTrackingRot.mIdxMult0 * (row_3) + col_3].x += Game.BejApp.ByteToFloat(xrotbyte, aXRotDeltaScale);
                                aFlags |= 1;
                            }
                        }

                        else {
                            aTrackingRot[aTrackingRot.mIdxMult0 * (row_3) + col_3].x = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.x;
                            aFlags |= 1024;
                        }
                        aDelta_2 = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mRot.y - aTrackingRot[aTrackingRot.mIdxMult0 * (row_3) + col_3].y;
                        if(Math.abs(aDelta_2) <= aYRotDeltaScale) {
                            yrotbyte = Game.BejApp.FloatToByte(aDelta_2, aYRotDeltaScale);
                            if(yrotbyte != 0) {
                                aTrackingRot[aTrackingRot.mIdxMult0 * (row_3) + col_3].y += Game.BejApp.ByteToFloat(yrotbyte, aYRotDeltaScale);
                                aFlags |= 2;
                            }
                        }

                        else {
                            aTrackingRot[aTrackingRot.mIdxMult0 * (row_3) + col_3].y = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.y;
                            aFlags |= 2048;
                        }
                        aDelta_2 = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mRot.z - aTrackingRot[aTrackingRot.mIdxMult0 * (row_3) + col_3].z;
                        if(Math.abs(aDelta_2) <= aZRotDeltaScale) {
                            zrotbyte = Game.BejApp.FloatToByte(aDelta_2, aZRotDeltaScale);
                            if(zrotbyte != 0) {
                                aTrackingRot[aTrackingRot.mIdxMult0 * (row_3) + col_3].z += Game.BejApp.ByteToFloat(zrotbyte, aZRotDeltaScale);
                                aFlags |= 4;
                            }
                        }

                        else {
                            aTrackingRot[aTrackingRot.mIdxMult0 * (row_3) + col_3].z = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.z;
                            aFlags |= 4096;
                        }
                        var aPrevTrackingPos = new GameFramework.geom.Vector3(aTrackingPos[aTrackingPos.mIdxMult0 * (row_3) + col_3].x, aTrackingPos[aTrackingPos.mIdxMult0 * (row_3) + col_3].y, aTrackingPos[aTrackingPos.mIdxMult0 * (row_3) + col_3].z);
                        var aString = '' + frame + ' Cur:' + theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (0) + theHyperSpaceAnim.mGems.mIdxMult1 * (0) + frame].mPos.x;
                        if(aTrackingPos[aTrackingPos.mIdxMult0 * (0) + 0] != null) {
                            aString += ' TrackingPos:' + aTrackingPos[aTrackingPos.mIdxMult0 * (0) + 0].x;
                        }
                        if(aTrackingPosPrev[aTrackingPosPrev.mIdxMult0 * (0) + 0] != null) {
                            aString += ' TrackingPosPrev:' + aTrackingPosPrev[aTrackingPosPrev.mIdxMult0 * (0) + 0].x;
                        }
                        if(frame == 1) {
                            aFlags |= 16 | 64 | 256;
                            aTrackingPos[aTrackingPos.mIdxMult0 * (row_3) + col_3] = new GameFramework.geom.Vector3(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.x, theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.y, theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.z);
                            aTrackingPosPrev[aTrackingPosPrev.mIdxMult0 * (row_3) + col_3] = aPrevTrackingPos;
                            aTrackingRot[aTrackingRot.mIdxMult0 * (row_3) + col_3] = new GameFramework.geom.Vector3(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mRot.x, theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mRot.y, theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mRot.z);
                        }

                        else {
                            if(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.x != theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame - 1].mPos.x) {
                                aDelta_2 = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.x - aTrackingPos[aTrackingPos.mIdxMult0 * (row_3) + col_3].x;
                                if(Math.abs(aDelta_2) <= aXDeltaScale) {
                                    xbyte = Game.BejApp.FloatToByte(aDelta_2, aXDeltaScale);
                                    if(xbyte != 0) {
                                        aTrackingPos[aTrackingPos.mIdxMult0 * (row_3) + col_3].x += Game.BejApp.ByteToFloat(xbyte, aXDeltaScale);
                                        aString += ' Guessing:' + aTrackingPos[aTrackingPos.mIdxMult0 * (row_3) + col_3].x;
                                        aFlags |= 8;
                                    }
                                }

                                else {
                                    aString += ' Setting:' + theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.x;
                                    aTrackingPos[aTrackingPos.mIdxMult0 * (row_3) + col_3].x = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.x;
                                    aFlags |= 16;
                                }
                            }
                            if(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.y != theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame - 1].mPos.y) {
                                aDelta_2 = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.y - aTrackingPos[aTrackingPos.mIdxMult0 * (row_3) + col_3].y;
                                if(Math.abs(aDelta_2) <= aYDeltaScale) {
                                    ybyte = Game.BejApp.FloatToByte(aDelta_2, aYDeltaScale);
                                    if(ybyte != 0) {
                                        aTrackingPos[aTrackingPos.mIdxMult0 * (row_3) + col_3].y += Game.BejApp.ByteToFloat(ybyte, aYDeltaScale);
                                        aFlags |= 32;
                                    }
                                }

                                else {
                                    aTrackingPos[aTrackingPos.mIdxMult0 * (row_3) + col_3].y = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.y;
                                    aFlags |= 64;
                                }
                            }
                            if(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.z != theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame - 1].mPos.z) {
                                aDelta_2 = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.z - aTrackingPos[aTrackingPos.mIdxMult0 * (row_3) + col_3].z;
                                if(Math.abs(aDelta_2) <= aZDeltaScale) {
                                    zbyte = Game.BejApp.FloatToByte(aDelta_2, aZDeltaScale);
                                    if(xbyte != 0) {
                                        aTrackingPos[aTrackingPos.mIdxMult0 * (row_3) + col_3].z += Game.BejApp.ByteToFloat(zbyte, aZDeltaScale);
                                        aFlags |= 128;
                                    }
                                }

                                else {
                                    aTrackingPos[aTrackingPos.mIdxMult0 * (row_3) + col_3].z = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.z;
                                    aFlags |= 256;
                                }
                            }
                        }
                        aTrackingPosPrev[aTrackingPosPrev.mIdxMult0 * (row_3) + col_3] = aPrevTrackingPos;
                        if((theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mScale.x != theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame - 1].mScale.x) || (theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mScale.y != theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame - 1].mScale.y) || (theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mScale.z != theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame - 1].mScale.z)) {
                            aFlags |= 512;
                        }
                        theOutBuffer.WriteShort(aFlags);
                        if((aFlags & 1) != 0) {
                            theOutBuffer.WriteByte(xrotbyte);
                        } else if((aFlags & 1024) != 0) {
                            theOutBuffer.WriteShort(Game.BejApp.RotToShort(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mRot.x));
                        }
                        if((aFlags & 2) != 0) {
                            theOutBuffer.WriteByte(yrotbyte);
                        } else if((aFlags & 2048) != 0) {
                            theOutBuffer.WriteShort(Game.BejApp.RotToShort(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mRot.y));
                        }
                        if((aFlags & 4) != 0) {
                            theOutBuffer.WriteByte(zrotbyte);
                        } else if((aFlags & 4096) != 0) {
                            theOutBuffer.WriteShort(Game.BejApp.RotToShort(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mRot.z));
                        }
                        if((aFlags & 8) != 0) {
                            theOutBuffer.WriteByte(xbyte);
                        }
                        if((aFlags & 16) != 0) {
                            theOutBuffer.WriteFloat(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.x);
                        }
                        if((aFlags & 32) != 0) {
                            theOutBuffer.WriteByte(ybyte);
                        }
                        if((aFlags & 64) != 0) {
                            theOutBuffer.WriteFloat(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.y);
                        }
                        if((aFlags & 128) != 0) {
                            theOutBuffer.WriteByte(zbyte);
                        }
                        if((aFlags & 256) != 0) {
                            theOutBuffer.WriteFloat(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mPos.z);
                        }
                        if((aFlags & 512) != 0) {
                            theOutBuffer.WriteFloat(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mScale.x);
                            theOutBuffer.WriteFloat(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mScale.y);
                            theOutBuffer.WriteFloat(theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_3) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_3) + frame].mScale.z);
                        }
                    }
                }
            }
            for(var light = 0; light < lightCount; ++light) {
                trackId_2 = theDataBuffer.ReadInt();
                trackKind = theDataBuffer.ReadInt();
                theHyperSpaceAnim.mLights[theHyperSpaceAnim.mLights.mIdxMult0 * (light) + frame] = new Game.HyperAnimKey();
                theHyperSpaceAnim.mLights[theHyperSpaceAnim.mLights.mIdxMult0 * (light) + frame].mPos.x = theDataBuffer.ReadFloat();
                theHyperSpaceAnim.mLights[theHyperSpaceAnim.mLights.mIdxMult0 * (light) + frame].mPos.y = theDataBuffer.ReadFloat();
                theHyperSpaceAnim.mLights[theHyperSpaceAnim.mLights.mIdxMult0 * (light) + frame].mPos.z = theDataBuffer.ReadFloat();
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mLights[theHyperSpaceAnim.mLights.mIdxMult0 * (light) + frame].mPos.x);
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mLights[theHyperSpaceAnim.mLights.mIdxMult0 * (light) + frame].mPos.y);
                theOutBuffer.WriteFloat(theHyperSpaceAnim.mLights[theHyperSpaceAnim.mLights.mIdxMult0 * (light) + frame].mPos.z);
            }
        }
        return true;
    },
    SetBackgrounded : function Game_BejApp$SetBackgrounded(isBackgrounded) {
        this.mBackgrounded = isBackgrounded;
        this.UpdateMusic();
    },
    LoadHyperspaceAnim : function Game_BejApp$LoadHyperspaceAnim(theDataBuffer, theHyperSpaceAnim) {
        var formatVer = theDataBuffer.ReadInt();
        if(formatVer != 0x4) {
            return false;
        }
        var frameCount = theDataBuffer.ReadInt();
        var lightCount = theDataBuffer.ReadInt();
        if(theHyperSpaceAnim != null) {
        }
        theHyperSpaceAnim.mFrameCount = frameCount;
        theHyperSpaceAnim.mLightCount = lightCount;
        theHyperSpaceAnim.mCamera = Array.Create(frameCount, null);
        theHyperSpaceAnim.mBoard = Array.Create(frameCount, null);
        theHyperSpaceAnim.mGems = Array.Create3D(Game.Board.NUM_ROWS, Game.Board.NUM_COLS, frameCount, null);
        theHyperSpaceAnim.mLights = Array.Create2D(lightCount, frameCount, null);
        for(var row = 0; row < Game.Board.NUM_ROWS; ++row) {
            for(var col = 0; col < Game.Board.NUM_COLS; ++col) {
                theHyperSpaceAnim.mGemHitFrame[theHyperSpaceAnim.mGemHitFrame.mIdxMult0 * (row) + col] = theHyperSpaceAnim.mFrameCount;
            }
        }
        if(formatVer >= 0x3) {
            var numHiddenObjects = theDataBuffer.ReadInt();
            for(var hiddenObjTableIdx = 0; hiddenObjTableIdx < numHiddenObjects; ++hiddenObjTableIdx) {
                var trackId = theDataBuffer.ReadInt();
                var shouldHideAtFrameNum = theDataBuffer.ReadInt();
                if(trackId < 2 || trackId > 65) {
                    continue;
                }
                var gemCol = (trackId - 2) % 8;
                var gemRow = (((((trackId - 2) - gemCol) / 8) | 0));
                theHyperSpaceAnim.mGemHitFrame[theHyperSpaceAnim.mGemHitFrame.mIdxMult0 * (gemRow) + gemCol] = shouldHideAtFrameNum;
            }
        }
        for(var frame = 0; frame < frameCount; ++frame) {
            theHyperSpaceAnim.mCamera[frame] = new Game.HyperAnimKey();
            theHyperSpaceAnim.mCamera[frame].mPos.x = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mCamera[frame].mPos.y = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mCamera[frame].mPos.z = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mCamera[frame].mRot.x = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mCamera[frame].mRot.y = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mCamera[frame].mRot.z = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mCamera[frame].mScale.x = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mCamera[frame].mScale.y = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mCamera[frame].mScale.z = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mBoard[frame] = new Game.HyperAnimKey();
            theHyperSpaceAnim.mBoard[frame].mPos.x = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mBoard[frame].mPos.y = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mBoard[frame].mPos.z = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mBoard[frame].mRot.x = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mBoard[frame].mRot.y = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mBoard[frame].mRot.z = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mBoard[frame].mScale.x = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mBoard[frame].mScale.y = theDataBuffer.ReadFloat();
            theHyperSpaceAnim.mBoard[frame].mScale.z = theDataBuffer.ReadFloat();
            var aXDeltaScale = theDataBuffer.ReadFloat();
            var aYDeltaScale = theDataBuffer.ReadFloat();
            var aZDeltaScale = theDataBuffer.ReadFloat();
            var aXRotDeltaScale = theDataBuffer.ReadFloat();
            var aYRotDeltaScale = theDataBuffer.ReadFloat();
            var aZRotDeltaScale = theDataBuffer.ReadFloat();
            for(var row_2 = 0; row_2 < Game.Board.NUM_ROWS; ++row_2) {
                for(var col_2 = 0; col_2 < Game.Board.NUM_COLS; ++col_2) {
                    theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame] = new Game.HyperAnimKey();
                    if(frame == 0) {
                        theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mPos.x = theDataBuffer.ReadFloat();
                        theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mPos.y = theDataBuffer.ReadFloat();
                        theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mPos.z = theDataBuffer.ReadFloat();
                        theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mRot.x = theDataBuffer.ReadFloat();
                        theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mRot.y = theDataBuffer.ReadFloat();
                        theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mRot.z = theDataBuffer.ReadFloat();
                        theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mScale.x = theDataBuffer.ReadFloat();
                        theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mScale.y = theDataBuffer.ReadFloat();
                        theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mScale.z = theDataBuffer.ReadFloat();
                    }

                    else {
                        var aFlags = theDataBuffer.ReadShort();
                        if((aFlags & 1) != 0) {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mRot.x = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame - 1].mRot.x + Game.BejApp.ByteToFloat(theDataBuffer.ReadByte(), aXRotDeltaScale);
                        } else if((aFlags & 1024) != 0) {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mRot.x = Game.BejApp.ShortToRot(theDataBuffer.ReadShort());
                        } else {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mRot.x = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame - 1].mRot.x;
                        }
                        if((aFlags & 2) != 0) {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mRot.y = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame - 1].mRot.y + Game.BejApp.ByteToFloat(theDataBuffer.ReadByte(), aYRotDeltaScale);
                        } else if((aFlags & 2048) != 0) {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mRot.y = Game.BejApp.ShortToRot(theDataBuffer.ReadShort());
                        } else {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mRot.y = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame - 1].mRot.y;
                        }
                        if((aFlags & 4) != 0) {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mRot.z = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame - 1].mRot.z + Game.BejApp.ByteToFloat(theDataBuffer.ReadByte(), aZRotDeltaScale);
                        } else if((aFlags & 4096) != 0) {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mRot.z = Game.BejApp.ShortToRot(theDataBuffer.ReadShort());
                        } else {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mRot.z = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame - 1].mRot.z;
                        }
                        if((aFlags & 8) != 0) {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mPos.x = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame - 1].mPos.x + Game.BejApp.ByteToFloat(theDataBuffer.ReadByte(), aXDeltaScale);
                        } else if((aFlags & 16) != 0) {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mPos.x = theDataBuffer.ReadFloat();
                        } else {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mPos.x = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame - 1].mPos.x;
                        }
                        if((aFlags & 32) != 0) {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mPos.y = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame - 1].mPos.y + Game.BejApp.ByteToFloat(theDataBuffer.ReadByte(), aYDeltaScale);
                        } else if((aFlags & 64) != 0) {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mPos.y = theDataBuffer.ReadFloat();
                        } else {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mPos.y = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame - 1].mPos.y;
                        }
                        if((aFlags & 128) != 0) {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mPos.z = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame - 1].mPos.z + Game.BejApp.ByteToFloat(theDataBuffer.ReadByte(), aZDeltaScale);
                        } else if((aFlags & 256) != 0) {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mPos.z = theDataBuffer.ReadFloat();
                        } else {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mPos.z = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame - 1].mPos.z;
                        }
                        if((aFlags & 512) != 0) {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mScale.x = theDataBuffer.ReadFloat();
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mScale.y = theDataBuffer.ReadFloat();
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mScale.z = theDataBuffer.ReadFloat();
                        }

                        else {
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mScale.x = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame - 1].mScale.x;
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mScale.y = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame - 1].mScale.y;
                            theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame].mScale.z = theHyperSpaceAnim.mGems[theHyperSpaceAnim.mGems.mIdxMult0 * (row_2) + theHyperSpaceAnim.mGems.mIdxMult1 * (col_2) + frame - 1].mScale.z;
                        }
                    }
                }
            }
            for(var light = 0; light < lightCount; ++light) {
                theHyperSpaceAnim.mLights[theHyperSpaceAnim.mLights.mIdxMult0 * (light) + frame] = new Game.HyperAnimKey();
                theHyperSpaceAnim.mLights[theHyperSpaceAnim.mLights.mIdxMult0 * (light) + frame].mPos.x = theDataBuffer.ReadFloat();
                theHyperSpaceAnim.mLights[theHyperSpaceAnim.mLights.mIdxMult0 * (light) + frame].mPos.y = theDataBuffer.ReadFloat();
                theHyperSpaceAnim.mLights[theHyperSpaceAnim.mLights.mIdxMult0 * (light) + frame].mPos.z = theDataBuffer.ReadFloat();
            }
        }
        return true;
    }
}
Game.BejApp.prototype['SetDebugMode'] = Game.BejApp.prototype.SetDebugMode;
Game.BejApp.prototype['GetArtRes'] = Game.BejApp.prototype.GetArtRes;
Game.BejApp.prototype['SetArtRes'] = Game.BejApp.prototype.SetArtRes;
Game.BejApp.prototype['SetPathPrefix'] = Game.BejApp.prototype.SetPathPrefix;
Game.BejApp.prototype['SetMetricsURL'] = Game.BejApp.prototype.SetMetricsURL;
Game.BejApp.prototype['SetThrottlingURL'] = Game.BejApp.prototype.SetThrottlingURL;
Game.BejApp.prototype['SetUserAgent'] = Game.BejApp.prototype.SetUserAgent;
Game.BejApp.prototype['SetUserId'] = Game.BejApp.prototype.SetUserId;
Game.BejApp.prototype['GetUserId'] = Game.BejApp.prototype.GetUserId;
Game.BejApp.prototype['SetUseGL'] = Game.BejApp.prototype.SetUseGL;
Game.BejApp.prototype['GetUseGL'] = Game.BejApp.prototype.GetUseGL;
Game.BejApp.prototype['SetBkgImagePath'] = Game.BejApp.prototype.SetBkgImagePath;
Game.BejApp.prototype['SizeChanged'] = Game.BejApp.prototype.SizeChanged;
Game.BejApp.prototype['Init'] = Game.BejApp.prototype.Init;
Game.BejApp.prototype['StartLoad'] = Game.BejApp.prototype.StartLoad;
Game.BejApp.prototype['SubmitStandardMetricsDict'] = Game.BejApp.prototype.SubmitStandardMetricsDict;
Game.BejApp.staticInit = function Game_BejApp$staticInit() {
    Game.BejApp.mBejApp = null;
}

JS_AddInitFunc(function() {
    Game.BejApp.registerClass('Game.BejApp', GameFramework.JSBaseApp);
});
JS_AddStaticInitFunc(function() {
    Game.BejApp.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\BejApp.cs
//LineMap:2=3 5=20 7=19 8=21 20=25 30=28 32=31 42=39 44=43 46=46 49=48 50=50 67=58 76=60 80=65 90=72 95=74 101=76 111=124 114=130 116=126 122=127 124=133 135=145 138=150 142=156 151=166 152=168 159=176 160=178 161=181 170=191 175=199 176=201 177=203 178=205 193=217 196=294 
//LineMap:198=250 200=256 201=258 202=265 204=272 205=276 207=295 208=297 209=300 210=302 212=305 215=314 216=316 219=320 220=322 221=324 224=1171 229=1177 233=1182 237=1187 259=243 263=248 266=252 271=259 273=263 279=273 282=277 285=281 289=286 295=327 297=337 298=339 
//LineMap:303=345 310=353 313=354 317=355 320=357 323=358 327=359 331=362 334=367 337=371 340=375 344=380 347=384 350=388 354=393 364=406 370=413 375=417 380=436 395=452 419=477 424=483 429=489 434=495 441=503 446=509 451=515 456=521 461=527 466=533 473=541 481=550 486=556 
//LineMap:491=562 497=570 498=572 499=575 502=580 503=582 506=587 514=596 524=607 527=611 529=639 530=651 533=655 536=662 542=669 549=677 551=680 553=683 556=690 564=699 565=702 567=705 572=715 579=723 581=723 582=723 583=723 584=725 589=731 590=733 594=735 596=736 600=739 
//LineMap:605=742 606=742 607=744 608=752 612=754 616=755 620=758 628=767 629=769 631=772 635=777 637=780 639=784 660=807 668=816 670=819 671=821 672=823 676=828 683=836 689=857 695=864 697=880 698=882 711=896 723=909 724=911 725=914 728=918 729=920 731=924 733=927 734=930 
//LineMap:736=933 744=945 751=953 754=957 758=971 760=971 761=973 768=982 769=984 770=991 775=994 776=994 777=996 778=998 783=1010 794=1022 800=1029 804=1041 807=1045 808=1047 815=1056 827=1066 828=1066 829=1068 839=1079 855=1096 857=1099 862=1105 864=1108 867=1112 879=1125 
//LineMap:892=1147 894=1151 914=1195 917=1199 921=1204 922=1206 926=1215 929=1245 931=1248 933=1260 934=1267 935=1272 942=1284 946=1289 952=1298 956=1303 958=1306 961=1312 964=1316 968=1321 972=1328 973=1330 977=1335 978=1338 982=1343 985=1347 988=1352 992=1357 995=1361 
//LineMap:999=1368 1000=1370 1004=1375 1005=1378 1009=1383 1012=1387 1015=1391 1019=1396 1022=1400 1026=1405 1032=1412 1038=1421 1039=1423 1042=1427 1045=1431 1048=1435 1052=1440 1054=1443 1056=1447 1058=1450 1060=1453 1065=1459 1068=1463 1071=1467 1074=1471 1077=1476 
//LineMap:1088=1488 1091=1492 1098=1498 1099=1506 1105=1513 1118=1525 1121=1529 1134=1541 1137=1545 1150=1557 1153=1561 1154=1563 1159=1569 1162=1573 1169=1579 1171=1596 1185=1609 1190=1618 1192=1633 1205=1645 1209=1650 1211=1664 1224=1676 1229=1682 1230=1684 1231=1687 
//LineMap:1232=1689 1233=1691 1235=1694 1238=1698 1241=1702 1242=1704 1254=1717 1263=1727 1267=1734 1271=1739 1276=1745 1292=1762 1294=1769 1297=1799 1299=1802 1301=1814 1302=1821 1303=1826 1310=1838 1313=1842 1317=1849 1321=1854 1323=1857 1326=1863 1328=1867 1332=1872 
//LineMap:1335=1876 1338=1882 1342=1887 1345=1891 1348=1897 1354=1904 1358=1910 1359=1912 1364=1918 1367=1922 1374=1928 1377=1932 1380=1936 1382=1939 1385=1943 1387=1946 1390=1950 1392=1953 1395=1957 1397=1960 1400=1964 1402=1967 1405=1971 1414=1979 1421=1987 1423=1991 
//LineMap:1429=1998 
//Start:Board
/**
 * @constructor
 */
Game.SwapData = function Game_SwapData() {
    this.mPiece1 = null;
    this.mPiece2 = null;
    this.mSwapDir = new GameFramework.geom.TIntPoint(0, 0);
    this.mSwapPct = new GameFramework.CurvedVal();
    this.mGemScale = new GameFramework.CurvedVal();
}
Game.SwapData.prototype = {
    mPiece1 : null,
    mPiece2 : null,
    mSwapDir : null,
    mSwapPct : null,
    mGemScale : null,
    mForwardSwap : false,
    mHoldingSwap : -1,
    mIgnore : false,
    mForceSwap : false,
    mDestroyTarget : false,
    mDragSwap : null
}
Game.SwapData.staticInit = function Game_SwapData$staticInit() {
}

JS_AddInitFunc(function() {
    Game.SwapData.registerClass('Game.SwapData', null);
});
JS_AddStaticInitFunc(function() {
    Game.SwapData.staticInit();
});
/**
 * @constructor
 */
Game.MoveData = function Game_MoveData() {
}
Game.MoveData.prototype = {
    mUpdateCnt : 0,
    mSelectedId : 0,
    mSwappedRow : 0,
    mSwappedCol : 0,
    mPreSaveBuffer : null,
    mMoveCreditId : 0,
    mStats : null
}
Game.MoveData.staticInit = function Game_MoveData$staticInit() {
}

JS_AddInitFunc(function() {
    Game.MoveData.registerClass('Game.MoveData', null);
});
JS_AddStaticInitFunc(function() {
    Game.MoveData.staticInit();
});
/**
 * @constructor
 */
Game.QueuedMove = function Game_QueuedMove() {
}
Game.QueuedMove.prototype = {
    mUpdateCnt : 0,
    mSelectedId : 0,
    mSwappedRow : 0,
    mSwappedCol : 0,
    mForceSwap : null,
    mPlayerSwapped : null,
    mDestroyTarget : null,
    mDragSwap : null
}
Game.QueuedMove.staticInit = function Game_QueuedMove$staticInit() {
}

JS_AddInitFunc(function() {
    Game.QueuedMove.registerClass('Game.QueuedMove', null);
});
JS_AddStaticInitFunc(function() {
    Game.QueuedMove.staticInit();
});
/**
 * @constructor
 */
Game.Lightning = function Game_Lightning() {
    this.mPoints = Array.Create2D(Game.Lightning.NUM_LIGHTNING_POINTS, 2, null);
}
Game.Lightning.prototype = {
    mPoints : null,
    mPercentDone : 0.0,
    mPullX : 0.0,
    mPullY : 0.0
}
Game.Lightning.staticInit = function Game_Lightning$staticInit() {
    Game.Lightning.NUM_LIGHTNING_POINTS = 8;
}

JS_AddInitFunc(function() {
    Game.Lightning.registerClass('Game.Lightning', null);
});
JS_AddStaticInitFunc(function() {
    Game.Lightning.staticInit();
});
/**
 * @constructor
 */
Game.ElectrocutedCel = function Game_ElectrocutedCel() {
}
Game.ElectrocutedCel.prototype = {
    mCol : -1,
    mRow : -1,
    mElectrocutePercent : 0.0
}
Game.ElectrocutedCel.staticInit = function Game_ElectrocutedCel$staticInit() {
}

JS_AddInitFunc(function() {
    Game.ElectrocutedCel.registerClass('Game.ElectrocutedCel', null);
});
JS_AddStaticInitFunc(function() {
    Game.ElectrocutedCel.staticInit();
});
/**
 * @constructor
 */
Game.GridTileData = function Game_GridTileData() {
    this.mBack = [];
    this.mAttr = 0;
}
Game.GridTileData.prototype = {
    mBack : null,
    mAttr : 0,
    mSettings : null
}
Game.GridTileData.staticInit = function Game_GridTileData$staticInit() {
}

JS_AddInitFunc(function() {
    Game.GridTileData.registerClass('Game.GridTileData', null);
});
JS_AddStaticInitFunc(function() {
    Game.GridTileData.staticInit();
});
/**
 * @constructor
 */
Game.GridData = function Game_GridData(theColCount, theRowCount) {
    this.mTiles = [];
    this.mColCount = theColCount;
    this.mRowCount = theRowCount;
}
Game.GridData.prototype = {
    mTiles : null,
    mColCount : 0,
    mRowCount : 0,
    GetRowCount : function Game_GridData$GetRowCount() {
        return ((this.mTiles.length / this.mColCount) | 0);
    },
    AddRow : function Game_GridData$AddRow() {
        for(var i = 0; i < this.mColCount; ++i) {
            this.mTiles.push(new Game.GridTileData());
        }
    },
    At : function Game_GridData$At(theRow, theCol) {
        var idx = this.mColCount * theRow + theCol;
        while(this.mTiles.length < idx) {
            this.mTiles.push(new Game.GridTileData());
        }
        return this.mTiles[idx];
    }
}
Game.GridData.staticInit = function Game_GridData$staticInit() {
}

JS_AddInitFunc(function() {
    Game.GridData.registerClass('Game.GridData', null);
});
JS_AddStaticInitFunc(function() {
    Game.GridData.staticInit();
});
/**
 * @constructor
 */
Game.LightningZap = function Game_LightningZap(theBoard, theStartX, theStartY, theEndX, theEndY, theColor, theTime, isFlamimg) {
    this.mRainbowSize = new GameFramework.CurvedVal();
    this.mRainbowAlpha = new GameFramework.CurvedVal();
    this.mPoints = Array.Create(2, null, [], []);
    this.mBoard = theBoard;
    this.mDeleteMe = false;
    this.mRainbowSize.SetCurve(('b;0,1,0.006667,1,#6P4 dG==] 9e###OH###Qm###bD###Mb###V?###LS###O8###|?<i^  G####'));
    this.mRainbowAlpha.SetCurve(('b;0,1,0.006667,1,####    *(###`:###O\'###    i####'));
    this.mFlaming = isFlamimg;
    this.mPercentDone = 0.0;
    this.mDoneTime = theTime;
    this.mTimer = 0.0;
    this.mColor = theColor;
    this.mStartPoint = new GameFramework.geom.TPoint(theStartX, theStartY);
    this.mEndPoint = new GameFramework.geom.TPoint(theEndX, theEndY);
    var aYDiff = (this.mEndPoint.y - this.mStartPoint.y);
    var aXDiff = (this.mEndPoint.x - this.mStartPoint.x);
    this.mAngle = Math.atan2(aYDiff, aXDiff);
    this.mLength = Math.sqrt(aXDiff * aXDiff + aYDiff * aYDiff);
    this.mFrame = 0;
    this.mUpdates = 0;
    this.Update();
}
Game.LightningZap.prototype = {
    mBoard : null,
    mStartPoint : null,
    mEndPoint : null,
    mRainbowSize : null,
    mRainbowAlpha : null,
    mPoints : null,
    mPercentDone : 0,
    mTimer : 0,
    mDoneTime : 0,
    mAngle : 0,
    mLength : 0,
    mColor : 0,
    mUpdates : 0,
    mFrame : 0,
    mDeleteMe : null,
    mFlaming : null,
    Update : function Game_LightningZap$Update() {
        var anImage = Game.Resources['IMAGE_LIGHTNING'];
        var wantsCalm = false;
        this.mUpdates++;
        if(wantsCalm) {
            this.mTimer += (0.05) * 1.67;
        } else {
            this.mTimer += (0.1) * 1.67;
        }
        var aDiffX = this.mEndPoint.x - this.mStartPoint.x;
        var aDiffY = this.mEndPoint.y - this.mStartPoint.y;
        var aMag = Math.max((1.0), Math.sqrt(aDiffX * aDiffX + aDiffY * aDiffY));
        var thickness = this.mFlaming ? (80.0) : (80.0);
        var aXOff = thickness * aDiffY / aMag;
        var aYOff = thickness * aDiffX / aMag;
        if(((wantsCalm) && (this.mUpdates % (6) == 0)) || ((!wantsCalm) && (this.mUpdates % (3) == 0))) {
            this.mPoints[0].clear();
            this.mPoints[1].clear();
            this.mFrame = Game.Util.Rand() % 5;
            var numpoints = (Math.max(1.0, (0.5) * (this.mLength) / anImage.mHeight) | 0) + 1;
            for(var i = 0; i < numpoints; i++) {
                var aPoint = Array.Create(2, null, new GameFramework.geom.TPoint(0, 0), new GameFramework.geom.TPoint(0, 0));
                var aRatio = i / (numpoints - 1);
                var aMaxOffset = 1;
                if((i != 0) && (i < numpoints - 1)) {
                    aMaxOffset = ((Math.max((80), (((160.0) * this.mTimer / this.mDoneTime) | 0))) | 0);
                }
                if(wantsCalm) {
                    aMaxOffset = ((Math.max(1, ((aMaxOffset * (0.5)) | 0))) | 0);
                }
                aPoint[0].x = aPoint[1].x = this.mStartPoint.x + aRatio * aDiffX + ((aMaxOffset / 2) | 0) - Game.Util.Rand() % aMaxOffset;
                aPoint[0].y = aPoint[1].y = this.mStartPoint.y + aRatio * aDiffY + ((aMaxOffset / 2) | 0) - Game.Util.Rand() % aMaxOffset;
                aPoint[0].x -= aXOff;
                aPoint[1].x += aXOff;
                aPoint[0].y += aYOff;
                aPoint[1].y -= aYOff;
                this.mPoints[0].push(aPoint[0]);
                this.mPoints[1].push(aPoint[1]);
            }
        }
        this.mPercentDone = this.mTimer / this.mDoneTime;
        if(this.mPercentDone >= 1.0) {
            this.mDeleteMe = true;
        }
    },
    Draw : function Game_LightningZap$Draw(g) {
        var anImage = Game.Resources['IMAGE_LIGHTNING'];
        var aBrightness = Math.max(0, Math.min((1.0 - this.mPercentDone) * 8.0, 1.0)) * this.mBoard.GetPieceAlpha();
        anImage.mAdditive = true;
        var aMatrix = g.mReserveMatrix;
        aMatrix.identity();
        aMatrix.scale(2.5 * anImage.mWidth / anImage.mAdjustedWidth, 4.0 * anImage.mHeight / anImage.mAdjustedHeight);
        if(this.mEndPoint.y == this.mStartPoint.y) {
            aMatrix.rotate(Math.PI / -2.0);
        }
        if(this.mEndPoint.x == this.mStartPoint.x) {
            aMatrix.translate(this.mBoard.GetBoardX() + this.mStartPoint.x - 104, this.mBoard.GetBoardY() + this.mStartPoint.y);
        } else {
            aMatrix.translate(this.mBoard.GetBoardX() + this.mStartPoint.x, this.mBoard.GetBoardY() + this.mStartPoint.y + 104);
        }
        g.PushColor(GameFramework.gfx.Color.FAlphaToInt(aBrightness));
        g.PushMatrix(aMatrix);
        g.DrawImageCel(anImage, 0, 0, this.mFrame);
        g.DrawImageCel(anImage, 0, anImage.mAdjustedHeight, (this.mFrame + 0) % anImage.mNumFrames);
        g.PopMatrix();
        g.PopColor();
        if(GameFramework.BaseApp.mApp.get_Is3D()) {
            var u0;
            var u1;
            u0 = u1 = 1.0 / 5.0 * (400.0 / 512.0);
            u0 *= this.mFrame;
            u1 += u0;
            u0 += (0.02);
            u1 += (-0.02);
            var aCenterColor = ((aBrightness * 255.0) | 0);
            var numpoints = (this.mPoints[0].length | 0);
            var _t1 = g.PushTranslate((this.mBoard.GetBoardX()), (this.mBoard.GetBoardY()));
            try {
                for(var i = 0; i < numpoints - 1; i++) {
                    var v0 = 0.1;
                    var v1 = 0.9;
                    {
                        var aTriVertices = Array.Create(4, 4, new GameFramework.gfx.TriVertex(), new GameFramework.gfx.TriVertex(), new GameFramework.gfx.TriVertex(), new GameFramework.gfx.TriVertex());
                        var thickness = 0.0;
                        var aVtx = aTriVertices[0];
                        var aXDiff = (this.mPoints[0][i].x - this.mPoints[0][i + 1].x + this.mPoints[1][i].x - this.mPoints[1][i + 1].x);
                        var aYDiff = (this.mPoints[0][i].y - this.mPoints[0][i + 1].y + this.mPoints[1][i].y - this.mPoints[1][i + 1].y);
                        var aMag = Math.max((1.0), Math.sqrt(aXDiff * aXDiff + aYDiff * aYDiff));
                        var aTemp = aXDiff;
                        aXDiff = thickness * aYDiff / aMag;
                        aYDiff = thickness * aTemp / aMag;
                        var aColor = GameFramework.gfx.Color.Mult(this.mColor, GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((Math.min(255, (((800.0) * aBrightness) | 0))) | 0)));
                        {
                            aVtx.x = (this.mPoints[0][i].x - aXDiff);
                            aVtx.y = (this.mPoints[0][i].y - aYDiff);
                            aVtx.u = 0.0;
                            aVtx.v = v0;
                            aVtx.color = aColor;
                            aVtx = aTriVertices[1];
                            aVtx.x = (this.mPoints[1][i].x + aXDiff);
                            aVtx.y = (this.mPoints[1][i].y + aYDiff);
                            aVtx.u = 1.0;
                            aVtx.v = v0;
                            aVtx.color = aColor;
                            aVtx = aTriVertices[2];
                            aVtx.x = (this.mPoints[1][i + 1].x + aXDiff);
                            aVtx.y = (this.mPoints[1][i + 1].y + aYDiff);
                            aVtx.u = 1.0;
                            aVtx.v = v1;
                            aVtx.color = aColor;
                            aVtx = aTriVertices[3];
                            aVtx.x = (this.mPoints[0][i + 1].x - aXDiff);
                            aVtx.y = (this.mPoints[0][i + 1].y - aYDiff);
                            aVtx.u = 0.0;
                            aVtx.v = v1;
                            aVtx.color = aColor;
                            var aTri = Array.Create2D(2, 3, 6, aTriVertices[0], aTriVertices[1], aTriVertices[2], aTriVertices[2], aTriVertices[3], aTriVertices[0]);
                            Game.Resources['IMAGE_GRITTYBLURRY'].set_Additive(true);
                            g.DrawTrianglesTex(Game.Resources['IMAGE_GRITTYBLURRY'], aTri);
                            g.DrawTrianglesTex(Game.Resources['IMAGE_GRITTYBLURRY'], aTri);
                        }
                    }
                    v0 = v1;
                    if(v0 >= 1.0) {
                        v0 -= 1.0;
                    }
                }
            } finally {
                _t1.Dispose();
            }
        }
    }
}
Game.LightningZap.staticInit = function Game_LightningZap$staticInit() {
}

JS_AddInitFunc(function() {
    Game.LightningZap.registerClass('Game.LightningZap', null);
});
JS_AddStaticInitFunc(function() {
    Game.LightningZap.staticInit();
});
/**
 * @constructor
 */
Game.LightningStorm = function Game_LightningStorm(theBoard, thePiece, theType) {
    this.mZaps = [];
    this.mLightningVector = [];
    this.mPieceIds = [];
    this.mElectrocutedCelVector = [];
    this.mNovaScale = new GameFramework.CurvedVal();
    this.mNovaAlpha = new GameFramework.CurvedVal();
    this.mNukeScale = new GameFramework.CurvedVal();
    this.mNukeAlpha = new GameFramework.CurvedVal();
    this.mLightingAlpha = new GameFramework.CurvedVal();
    this.mBoard = theBoard;
    this.mUpdateCnt = 0;
    this.mLightningCount = 1;
    this.mGemAlpha = 1.0;
    this.mMatchType = thePiece.mColor;
    this.mPieceIds.push(thePiece.mId);
    this.mDoneDelay = 0;
    this.mLastElectroSound = 0;
    this.mStartPieceFlags = thePiece.mFlags;
    this.mMoveCreditId = thePiece.mMoveCreditId;
    this.mMatchId = thePiece.mMatchId;
    this.mExplodeTimer = 0.0;
    if(thePiece.IsFlagSet(Game.Piece.EFlag.FLAME)) {
        this.mNovaScale.SetCurve('b+0,1.5,0.013333,1,#4I(         ~~P##');
        this.mNovaAlpha.SetCurveLinked('b+0,1,0,1,####    e~###     <####', this.mNovaScale);
        this.mNukeScale.SetCurve('b+0,2,0.006667,1,####   ^X### bX### S~###   /####');
        this.mNukeAlpha.SetCurveLinked('b+0,1,0,1,#### o~###     Y}###  V####', this.mNukeScale);
        this.mStormType = Game.LightningStorm.EStormType.FLAMING;
    }

    else {
        this.mStormType = theType;
    }
    this.mElectrocuterId = thePiece.mId;
    this.mCX = (thePiece.CX() | 0) - this.mBoard.GetBoardX();
    this.mCY = (thePiece.CY() | 0) - this.mBoard.GetBoardY();
    this.mOriginCol = thePiece.mCol;
    this.mOriginRow = thePiece.mRow;
    thePiece.mIsElectrocuting = true;
    if(this.mStormType != Game.LightningStorm.EStormType.HYPERCUBE) {
        thePiece.mElectrocutePercent = 0.9;
    }
    this.mColor = Game.DM.EGemColor._INVALID;
    this.mTimer = 0;
    this.mDist = 0;
    this.mHoldDelay = 1.0;
    this.mStormLength = (this.mStormType == Game.LightningStorm.EStormType.SHORT) ? (3) : (7);
    if(this.mStormType != Game.LightningStorm.EStormType.HYPERCUBE) {
        for(var anOffset = ((this.mStormType == Game.LightningStorm.EStormType.FLAMING) ? -1 : 0); anOffset <= ((this.mStormType == Game.LightningStorm.EStormType.FLAMING) ? 1 : 0); anOffset++) {
            var aRow = this.mBoard.GetRowAt((thePiece.mY | 0) + ((Game.Board.GEM_HEIGHT / 2) | 0) + anOffset * Game.Board.GEM_HEIGHT);
            if((aRow >= 0) && (aRow < this.mBoard.mRowCount) && (this.mStormType != Game.LightningStorm.EStormType.VERT)) {
                var aZap = new Game.LightningZap(this.mBoard, ((Math.max(0, this.mCX - this.mStormLength * Game.Board.GEM_WIDTH - ((Game.Board.GEM_WIDTH / 2) | 0))) | 0), (thePiece.mY | 0) + ((Game.Board.GEM_HEIGHT / 2) | 0) + anOffset * Game.Board.GEM_HEIGHT, ((Math.min(this.mBoard.GetColX(this.mBoard.mColCount), this.mCX + this.mStormLength * Game.Board.GEM_WIDTH + ((Game.Board.GEM_WIDTH / 2) | 0))) | 0), (thePiece.mY | 0) + ((Game.Board.GEM_HEIGHT / 2) | 0) + anOffset * Game.Board.GEM_HEIGHT, Game.DM.gElectColors[(this.mMatchType | 0) + 1], (10.0), this.mStormType == Game.LightningStorm.EStormType.FLAMING);
                this.mZaps.push(aZap);
            }
            var aCol = this.mBoard.GetColAt((thePiece.mX | 0) + ((Game.Board.GEM_WIDTH / 2) | 0) + anOffset * Game.Board.GEM_WIDTH);
            if((aCol >= 0) && (aCol < this.mBoard.mColCount) && (this.mStormType != Game.LightningStorm.EStormType.HORZ)) {
                var aZap_2 = new Game.LightningZap(this.mBoard, (thePiece.mX | 0) + ((Game.Board.GEM_WIDTH / 2) | 0) + anOffset * Game.Board.GEM_WIDTH, ((Math.max(0, this.mCY - this.mStormLength * Game.Board.GEM_HEIGHT - ((Game.Board.GEM_HEIGHT / 2) | 0))) | 0), (thePiece.mX | 0) + ((Game.Board.GEM_WIDTH / 2) | 0) + anOffset * Game.Board.GEM_WIDTH, ((Math.min(this.mBoard.GetRowY(this.mBoard.mRowCount), this.mCY + this.mStormLength * Game.Board.GEM_HEIGHT + ((Game.Board.GEM_HEIGHT / 2) | 0))) | 0), Game.DM.gElectColors[(this.mMatchType | 0) + 1], 10.0, this.mStormType == Game.LightningStorm.EStormType.FLAMING);
                this.mZaps.push(aZap_2);
            }
        }
        this.mLightingAlpha.SetCurve('b;0,1,0.00885,1,####oCh;uZV###X^8.tQ<###Uqh*Kzk###QG###R~###hI###u~### $#### 2y### *####');
    }

    else {
        if((thePiece != null) && (thePiece.mColor == Game.DM.EGemColor.HYPERCUBE)) {
            thePiece.mDestructing = true;
        }
    }
}
Game.LightningStorm.prototype = {
    mBoard : null,
    mCX : 0,
    mCY : 0,
    mUpdateCnt : 0,
    mColor : null,
    mStormLength : 0,
    mLastElectroSound : 0,
    mStartPieceFlags : 0,
    mMatchType : null,
    mLightningCount : 0,
    mStormType : null,
    mExplodeTimer : 0,
    mHoldDelay : 0,
    mElectrocuterId : 0,
    mMoveCreditId : 0,
    mMatchId : 0,
    mOriginCol : 0,
    mOriginRow : 0,
    mDist : 0,
    mTimer : 0,
    mZaps : null,
    mLightningVector : null,
    mPieceIds : null,
    mElectrocutedCelVector : null,
    mParams : null,
    mNovaScale : null,
    mNovaAlpha : null,
    mNukeScale : null,
    mNukeAlpha : null,
    mLightingAlpha : null,
    mGemAlpha : 0,
    mDoneDelay : 0,
    AddLightning : function Game_LightningStorm$AddLightning(theStartX, theStartY, theEndX, theEndY) {
        var aLightning = new Game.Lightning();
        aLightning.mPercentDone = 0.0;
        var aYDiff = (theEndY - theStartY);
        var aXDiff = (theEndX - theStartX);
        var aRot = Math.atan2(aYDiff, aXDiff);
        var aDist = Math.sqrt(aXDiff * aXDiff + aYDiff * aYDiff);
        aLightning.mPullX = Math.cos(aRot - 3.14159 / 2) * aDist * 0.4;
        aLightning.mPullY = Math.sin(aRot - 3.14159 / 2) * aDist * 0.4;
        for(var aLightningPointNum = 0; aLightningPointNum < Game.LightningStorm.NUM_LIGTNING_POINTS; aLightningPointNum++) {
            var aDistAlong = aLightningPointNum / (Game.LightningStorm.NUM_LIGTNING_POINTS - 1);
            var aCenterX = (theStartX * (1.0 - aDistAlong)) + (theEndX * aDistAlong);
            var aCenterY = (theStartY * (1.0 - aDistAlong)) + (theEndY * aDistAlong);
            var aPoint = new GameFramework.geom.TIntPoint(0, 0);
            aLightning.mPoints[aLightning.mPoints.mIdxMult0 * (aLightningPointNum) + 0] = aPoint;
            var aPointR = new GameFramework.geom.TIntPoint(0, 0);
            aLightning.mPoints[aLightning.mPoints.mIdxMult0 * (aLightningPointNum) + 1] = aPointR;
            aPoint.x = (aCenterX | 0);
            aPoint.y = (aCenterY | 0);
            aPointR.x = (aCenterX | 0);
            aPointR.y = (aCenterY | 0);
        }
        this.mLightningVector.push(aLightning);
    },
    UpdateLightning : function Game_LightningStorm$UpdateLightning() {
        if(this.mDoneDelay > 0) {
            return;
        }
        var wantsCalm = this.mBoard.WantsCalmEffects();
        var anElectrocutedPieces = Array.Create(64, null);
        var aNumElectrocutedPieces = 0;
        var anElectrocuterPieces = Array.Create(64, null);
        var aNumElectrocuterPieces = 0;
        var aMatchingPieces = Array.Create(64, null);
        var aNumMatchingPieces = 0;
        var hadWildcardEffect = false;
        var hasExplodingPieces = false;
        for(var aRow = 0; aRow < 8; aRow++) {
            for(var aCol = 0; aCol < 8; aCol++) {
                var aPiece = this.mBoard.mBoard[this.mBoard.mBoard.mIdxMult0 * (aRow) + aCol];
                if(aPiece != null) {
                    if(aPiece.mExplodeDelay > 0) {
                        hasExplodingPieces = true;
                    }
                    if(aPiece.mIsElectrocuting) {
                        if(wantsCalm) {
                            if(aPiece.IsFlagSet(Game.Piece.EFlag.HYPERCUBE)) {
                                aPiece.mElectrocutePercent += (0.0075);
                            } else {
                                aPiece.mElectrocutePercent += (0.01);
                            }
                        }

                        else {
                            if(aPiece.IsFlagSet(Game.Piece.EFlag.HYPERCUBE)) {
                                aPiece.mElectrocutePercent += (0.01) * 1.67;
                            } else {
                                aPiece.mElectrocutePercent += 0.015 * 1.67;
                            }
                        }
                        if(aPiece.mElectrocutePercent > 1.0) {
                            this.mBoard.SetMoveCredit(aPiece, this.mMoveCreditId);
                            aPiece.mExplodeSourceId = this.mElectrocuterId;
                            var aSrcPiece = this.mBoard.GetPieceById(this.mElectrocuterId);
                            aPiece.mExplodeSourceFlags |= this.mStartPieceFlags;
                            if(!this.mBoard.TriggerSpecialEx(aPiece, this.mBoard.GetPieceById(this.mElectrocuterId))) {
                                aPiece.mExplodeDelay = 1;
                            }
                        }

                        else {
                            if(aPiece.mElectrocutePercent < 0.04) {
                                anElectrocuterPieces[aNumElectrocuterPieces++] = aPiece;
                            }
                            anElectrocutedPieces[aNumElectrocutedPieces++] = aPiece;
                        }
                    } else if((aPiece.mColor == this.mColor || this.mColor == Game.DM.EGemColor.HYPERCUBE) && aPiece.GetScreenY() > -Game.Board.GEM_HEIGHT && !aPiece.IsFlagSet(Game.Piece.EFlag.DIG) && !aPiece.IsFlagSet(Game.Piece.EFlag.DETONATOR) && !aPiece.IsFlagSet(Game.Piece.EFlag.SCRAMBLE)) {
                        aMatchingPieces[aNumMatchingPieces++] = aPiece;
                    }
                }
            }
        }
        var aRandIdx = ((((((20 / (aNumElectrocutedPieces + 1)) | 0)) + 5) / 1.67) | 0);
        if(wantsCalm) {
            aRandIdx = ((aRandIdx * (1.4)) | 0);
        }
        if((this.mColor | 0) == -1) {
            aRandIdx = ((aRandIdx) / (2)) | 0;
        }
        if((aNumMatchingPieces > 0) && ((this.mLightningVector.length == 0) || (this.mBoard.mRand.Next() % aRandIdx == 0))) {
            var aNewPiece = null;
            var anElectrocuter = null;
            if(aNumElectrocuterPieces > 0) {
                anElectrocuter = anElectrocuterPieces[this.mBoard.mRand.Next() % aNumElectrocuterPieces];
            } else if(aNumElectrocutedPieces > 0) {
                anElectrocuter = anElectrocutedPieces[this.mBoard.mRand.Next() % aNumElectrocutedPieces];
            }
            if(anElectrocuter != null) {
                var aClosestDist = 0x7fffffff;
                for(var aCheckPieceIdx = 0; aCheckPieceIdx < aNumMatchingPieces; aCheckPieceIdx++) {
                    var aCheckPiece = aMatchingPieces[aCheckPieceIdx];
                    var aDist = (Math.min(Math.abs(aCheckPiece.mCol - anElectrocuter.mCol), Math.abs(aCheckPiece.mRow - anElectrocuter.mRow)) | 0);
                    if(aDist < aClosestDist) {
                        aNewPiece = aCheckPiece;
                    }
                }
                var aRot = Math.atan2(aNewPiece.mY - anElectrocuter.mY, aNewPiece.mX - anElectrocuter.mX);
                this.AddLightning((aNewPiece.mX | 0) + ((Game.Board.GEM_WIDTH / 2) | 0), (aNewPiece.mY | 0) + ((Game.Board.GEM_HEIGHT / 2) | 0), (anElectrocuter.mX | 0) + ((Game.Board.GEM_WIDTH / 2) | 0), (anElectrocuter.mY | 0) + ((Game.Board.GEM_HEIGHT / 2) | 0));
                if((this.mUpdateCnt - this.mLastElectroSound >= (20)) || (this.mLastElectroSound == 0)) {
                    if(wantsCalm) {
                        Game.SoundUtil.PlayEx(Game.Resources['SOUND_ELECTRO_PATH2'], (0), (0.67));
                    } else {
                        Game.SoundUtil.Play(Game.Resources['SOUND_ELECTRO_PATH2']);
                    }
                    this.mLastElectroSound = 0;
                }
            }

            else {
                aNewPiece = aMatchingPieces[this.mBoard.mRand.Next() % aNumMatchingPieces];
            }
            aNewPiece.mIsElectrocuting = true;
        }
        for(var aLightningNum = 0; aLightningNum < (this.mLightningVector.length | 0); aLightningNum++) {
            var aLightning = this.mLightningVector[aLightningNum];
            aLightning.mPercentDone += 0.012 * 1.67;
            if(aLightning.mPercentDone > 1.0) {
                this.mLightningVector.removeAt(aLightningNum);
                aLightningNum--;
                continue;
            }
            var aPullFactor = Math.max(0.0, 1.0 - ((1.0 - aLightning.mPercentDone) * 3.0));
            if(((wantsCalm) && (this.mUpdateCnt % (5) == 0)) || ((!wantsCalm) && (this.mUpdateCnt % 2 == 0))) {
                var aStartX = aLightning.mPoints[aLightning.mPoints.mIdxMult0 * (0) + 0].x;
                var aStartY = aLightning.mPoints[aLightning.mPoints.mIdxMult0 * (0) + 0].y;
                var anEndX = aLightning.mPoints[aLightning.mPoints.mIdxMult0 * (Game.LightningStorm.NUM_LIGTNING_POINTS - 1) + 0].x;
                var anEndY = aLightning.mPoints[aLightning.mPoints.mIdxMult0 * (Game.LightningStorm.NUM_LIGTNING_POINTS - 1) + 0].y;
                for(var aLightningPointNum = 0; aLightningPointNum < Game.LightningStorm.NUM_LIGTNING_POINTS; aLightningPointNum++) {
                    var aDistAlong = aLightningPointNum / (Game.LightningStorm.NUM_LIGTNING_POINTS - 1);
                    var aCenterMult = 1.0 - Math.abs(1.0 - aDistAlong * 2.0);
                    var aCenterX = (aStartX * (1.0 - aDistAlong)) + (anEndX * aDistAlong) + aCenterMult * (GameFramework.Utils.GetRandFloat() * 40.0 + aPullFactor * aLightning.mPullX);
                    var aCenterY = (aStartY * (1.0 - aDistAlong)) + (anEndY * aDistAlong) + aCenterMult * (GameFramework.Utils.GetRandFloat() * 40.0 + aPullFactor * aLightning.mPullY);
                    if(wantsCalm) {
                        aCenterX = (aStartX * (1.0 - aDistAlong)) + (anEndX * aDistAlong) + aCenterMult * (GameFramework.Utils.GetRandFloat() * 15.0 + aPullFactor * aLightning.mPullX);
                        aCenterY = (aStartY * (1.0 - aDistAlong)) + (anEndY * aDistAlong) + aCenterMult * (GameFramework.Utils.GetRandFloat() * 15.0 + aPullFactor * aLightning.mPullY);
                    }
                    var aPoint = aLightning.mPoints[aLightning.mPoints.mIdxMult0 * (aLightningPointNum) + 0];
                    var aPointR = aLightning.mPoints[aLightning.mPoints.mIdxMult0 * (aLightningPointNum) + 1];
                    if((aLightningPointNum == 0) || (aLightningPointNum == Game.LightningStorm.NUM_LIGTNING_POINTS - 1)) {
                        aPoint.x = (aCenterX | 0);
                        aPoint.y = (aCenterY | 0);
                        aPointR.x = (aCenterX | 0);
                        aPointR.y = (aCenterY | 0);
                    }

                    else {
                        var aWidthMult = GameFramework.BaseApp.mApp.get_Is3D() ? 32.0 : 26.0;
                        aPoint.x = ((aCenterX + GameFramework.Utils.GetRandFloat() * aWidthMult) | 0);
                        aPoint.y = ((aCenterY + GameFramework.Utils.GetRandFloat() * aWidthMult) | 0);
                        aPointR.x = ((aCenterX + GameFramework.Utils.GetRandFloat() * aWidthMult) | 0);
                        aPointR.y = ((aCenterY + GameFramework.Utils.GetRandFloat() * aWidthMult) | 0);
                    }
                }
            }
        }
        if((!hasExplodingPieces) && (aNumElectrocutedPieces == 0) && (aNumMatchingPieces == 0) && (this.mLightningVector.length == 0) && (!hadWildcardEffect)) {
            for(var aRow_2 = 0; aRow_2 < 8; aRow_2++) {
                for(var aCol_2 = 0; aCol_2 < 8; aCol_2++) {
                    var aPiece_2 = this.mBoard.mBoard[this.mBoard.mBoard.mIdxMult0 * (aRow_2) + aCol_2];
                    if(aPiece_2 != null) {
                        aPiece_2.mFallVelocity = 0.0;
                    }
                }
            }
            this.mDoneDelay = 30;
        }
    },
    DrawLightning : function Game_LightningStorm$DrawLightning(g) {
        g.PushTranslate((this.mBoard.GetBoardX()), (this.mBoard.GetBoardY()));
        for(var aLightningNum = 0; aLightningNum < (this.mLightningVector.length | 0); aLightningNum++) {
            var aLightning = this.mLightningVector[aLightningNum];
            var aBrightness = Math.min((1.0 - aLightning.mPercentDone) * 8.0, 1.0) * this.mBoard.GetPieceAlpha();
            var aCenterColor = GameFramework.gfx.Color.FAlphaToInt(aBrightness);
            if(GameFramework.BaseApp.mApp.get_Is3D()) {
                var aTriVertices = Array.Create2D((Game.LightningStorm.NUM_LIGTNING_POINTS - 1) * 2 - 2, 3, null);
                var aTriCount = 0;
                for(var aLightningPointNum = 0; aLightningPointNum < Game.LightningStorm.NUM_LIGTNING_POINTS - 1; aLightningPointNum++) {
                    var aPoint = aLightning.mPoints[aLightning.mPoints.mIdxMult0 * (aLightningPointNum) + 0];
                    var aPointR = aLightning.mPoints[aLightning.mPoints.mIdxMult0 * (aLightningPointNum) + 1];
                    var aPointD = aLightning.mPoints[aLightning.mPoints.mIdxMult0 * (aLightningPointNum + 1) + 0];
                    var aPointRD = aLightning.mPoints[aLightning.mPoints.mIdxMult0 * (aLightningPointNum + 1) + 1];
                    var aV = aLightningPointNum / (Game.LightningStorm.NUM_LIGTNING_POINTS - 1);
                    var aVD = (aLightningPointNum + 1) / (Game.LightningStorm.NUM_LIGTNING_POINTS - 1);
                    var aColor = GameFramework.gfx.Color.UInt_FAToInt(Game.DM.gElectColors[(this.mColor | 0) + 1], aBrightness);
                    if(aLightningPointNum == 0) {
                        aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 0] = new GameFramework.gfx.TriVertex(aPoint.x, aPoint.y, 0.5, aV, aColor);
                        aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 1] = new GameFramework.gfx.TriVertex(aPointRD.x, aPointRD.y, 1.0, aVD, aColor);
                        aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 2] = new GameFramework.gfx.TriVertex(aPointD.x, aPointD.y, 0.0, aVD, aColor);
                        aTriCount++;
                    } else if(aLightningPointNum == Game.LightningStorm.NUM_LIGTNING_POINTS - 2) {
                        aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 0] = new GameFramework.gfx.TriVertex(aPoint.x, aPoint.y, 0.0, aV, aColor);
                        aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 1] = new GameFramework.gfx.TriVertex(aPointR.x, aPointR.y, 1.0, aV, aColor);
                        aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 2] = new GameFramework.gfx.TriVertex(aPointD.x, aPointD.y, 0.5, aVD, aColor);
                        aTriCount++;
                    } else {
                        aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 0] = new GameFramework.gfx.TriVertex(aPoint.x, aPoint.y, 0.0, aV, aColor);
                        aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 1] = new GameFramework.gfx.TriVertex(aPointRD.x, aPointRD.y, 1.0, aVD, aColor);
                        aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 2] = new GameFramework.gfx.TriVertex(aPointD.x, aPointD.y, 0.0, aVD, aColor);
                        aTriCount++;
                        aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 0] = new GameFramework.gfx.TriVertex(aPoint.x, aPoint.y, 0.0, aV, aColor);
                        aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 1] = new GameFramework.gfx.TriVertex(aPointR.x, aPointR.y, 1.0, aV, aColor);
                        aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 2] = new GameFramework.gfx.TriVertex(aPointRD.x, aPointRD.y, 1.0, aVD, aColor);
                        aTriCount++;
                    }
                }
                Game.Resources['IMAGE_LIGHTNING_TEX'].set_Additive(true);
                g.DrawTrianglesTex(Game.Resources['IMAGE_LIGHTNING_TEX'], aTriVertices);

                {
                    var $srcArray2 = aTriVertices;
                    for(var $enum2 = 0; $enum2 < $srcArray2.length; $enum2++) {
                        var aTriVertex = $srcArray2[$enum2];
                        aTriVertex.color = aCenterColor;
                    }
                }
                Game.Resources['IMAGE_LIGHTNING_CENTER'].set_Additive(true);
                g.DrawTrianglesTex(Game.Resources['IMAGE_LIGHTNING_CENTER'], aTriVertices);
            }

            else {
                var aColor_2 = GameFramework.gfx.Color.UInt_AToInt(Game.DM.gElectColors[(this.mColor | 0) + 1], ((aBrightness * 255.0) | 0));
                for(var aLightningPointNum_2 = 0; aLightningPointNum_2 < Game.LightningStorm.NUM_LIGTNING_POINTS - 1; aLightningPointNum_2++) {
                    var aPoint_2 = aLightning.mPoints[aLightning.mPoints.mIdxMult0 * (aLightningPointNum_2) + 0];
                    var aPointR_2 = aLightning.mPoints[aLightning.mPoints.mIdxMult0 * (aLightningPointNum_2) + 1];
                    var aPointD_2 = aLightning.mPoints[aLightning.mPoints.mIdxMult0 * (aLightningPointNum_2 + 1) + 0];
                    var aPointRD_2 = aLightning.mPoints[aLightning.mPoints.mIdxMult0 * (aLightningPointNum_2 + 1) + 1];
                    var aSidePct = 0.3;
                    var aCenterX = ((aPoint_2.x) * aSidePct) + ((aPointR_2.x) * (1.0 - aSidePct));
                    var aCenterY = ((aPoint_2.y) * aSidePct) + ((aPointR_2.y) * (1.0 - aSidePct));
                    var aCenterRX = ((aPointR_2.x) * aSidePct) + ((aPoint_2.x) * (1.0 - aSidePct));
                    var aCenterRY = ((aPointR_2.y) * aSidePct) + ((aPoint_2.y) * (1.0 - aSidePct));
                    var aCenterDX = ((aPointD_2.x) * aSidePct) + ((aPointRD_2.x) * (1.0 - aSidePct));
                    var aCenterDY = ((aPointD_2.y) * aSidePct) + ((aPointRD_2.y) * (1.0 - aSidePct));
                    var aCenterRDX = ((aPointRD_2.x) * aSidePct) + ((aPointD_2.x) * (1.0 - aSidePct));
                    var aCenterRDY = ((aPointRD_2.y) * aSidePct) + ((aPointD_2.y) * (1.0 - aSidePct));
                    var aPt = Array.Create2D(3, 2, null);
                    g.PushColor(aColor_2);
                    aPt[aPt.mIdxMult0 * (0) + 0] = ((aPoint_2.x) | 0);
                    aPt[aPt.mIdxMult0 * (0) + 1] = ((aPoint_2.y) | 0);
                    aPt[aPt.mIdxMult0 * (1) + 0] = ((aPointRD_2.x) | 0);
                    aPt[aPt.mIdxMult0 * (1) + 1] = ((aPointRD_2.y) | 0);
                    aPt[aPt.mIdxMult0 * (2) + 0] = ((aPointD_2.x) | 0);
                    aPt[aPt.mIdxMult0 * (2) + 1] = ((aPointD_2.y) | 0);
                    g.PolyFill(aPt);
                    aPt[aPt.mIdxMult0 * (0) + 0] = ((aPoint_2.x) | 0);
                    aPt[aPt.mIdxMult0 * (0) + 1] = ((aPoint_2.y) | 0);
                    aPt[aPt.mIdxMult0 * (1) + 0] = ((aPointR_2.x) | 0);
                    aPt[aPt.mIdxMult0 * (1) + 1] = ((aPointR_2.y) | 0);
                    aPt[aPt.mIdxMult0 * (2) + 0] = ((aPointRD_2.x) | 0);
                    aPt[aPt.mIdxMult0 * (2) + 1] = ((aPointRD_2.y) | 0);
                    g.PolyFill(aPt);
                    g.PopColor();
                    g.PushColor(aCenterColor);
                    aPt[aPt.mIdxMult0 * (0) + 0] = ((aCenterX) | 0);
                    aPt[aPt.mIdxMult0 * (0) + 1] = ((aCenterY) | 0);
                    aPt[aPt.mIdxMult0 * (1) + 0] = ((aCenterRDX) | 0);
                    aPt[aPt.mIdxMult0 * (1) + 1] = ((aCenterRDY) | 0);
                    aPt[aPt.mIdxMult0 * (2) + 0] = ((aCenterDX) | 0);
                    aPt[aPt.mIdxMult0 * (2) + 1] = ((aCenterDY) | 0);
                    g.PolyFill(aPt);
                    aPt[aPt.mIdxMult0 * (0) + 0] = ((aCenterX) | 0);
                    aPt[aPt.mIdxMult0 * (0) + 1] = ((aCenterY) | 0);
                    aPt[aPt.mIdxMult0 * (1) + 0] = ((aCenterRX) | 0);
                    aPt[aPt.mIdxMult0 * (1) + 1] = ((aCenterRY) | 0);
                    aPt[aPt.mIdxMult0 * (2) + 0] = ((aCenterRDX) | 0);
                    aPt[aPt.mIdxMult0 * (2) + 1] = ((aCenterRDY) | 0);
                    g.PolyFill(aPt);
                    g.PopColor();
                }
            }
        }
        g.PopMatrix();
    },
    Update : function Game_LightningStorm$Update() {
        this.mUpdateCnt++;
        this.mNovaScale.IncInVal();
        this.mNukeScale.IncInVal();
        if(this.mStormType == Game.LightningStorm.EStormType.FLAMING) {
            if(this.mNukeScale.CheckInThreshold((1.6))) {
                Game.SoundUtil.Play(Game.Resources['SOUND_BOMB_EXPLODE']);
            }
        }
        for(var aZapNum = 0; aZapNum < (this.mZaps.length | 0); aZapNum++) {
            var aZap = this.mZaps[aZapNum];
            aZap.Update();
        }
        this.mGemAlpha = Math.max(0, this.mGemAlpha - (0.01) * 1.67);
        if(this.mStormType == Game.LightningStorm.EStormType.HYPERCUBE) {
            this.UpdateLightning();
        }
    },
    Draw : function Game_LightningStorm$Draw(g) {
        for(var i = 0; i < this.mZaps.length; i++) {
            var aZap = this.mZaps[i];
            aZap.Draw(g);
        }
        if(this.mStormType == Game.LightningStorm.EStormType.HYPERCUBE) {
            this.DrawLightning(g);
        }
    }
}
Game.LightningStorm.staticInit = function Game_LightningStorm$staticInit() {
    Game.LightningStorm.NUM_LIGTNING_POINTS = 8;
}

JS_AddInitFunc(function() {
    Game.LightningStorm.registerClass('Game.LightningStorm', null);
});
JS_AddStaticInitFunc(function() {
    Game.LightningStorm.staticInit();
});
Game.LightningStorm.EStormType = {};
Game.LightningStorm.EStormType.staticInit = function Game_LightningStorm_EStormType$staticInit() {
    Game.LightningStorm.EStormType.HORZ = 0;
    Game.LightningStorm.EStormType.VERT = 1;
    Game.LightningStorm.EStormType.BOTH = 2;
    Game.LightningStorm.EStormType.SHORT = 3;
    Game.LightningStorm.EStormType.STAR = 4;
    Game.LightningStorm.EStormType.SCREEN = 5;
    Game.LightningStorm.EStormType.FLAMING = 6;
    Game.LightningStorm.EStormType.HYPERCUBE = 7;
}
JS_AddInitFunc(function() {
    Game.LightningStorm.EStormType.staticInit();
});
/**
 * @constructor
 */
Game.DistortionQuad = function Game_DistortionQuad(inX1, inY1, inX2, inY2) {
    this.x1 = inX1;
    this.y1 = inY1;
    this.x2 = inX2;
    this.y2 = inY2;
}
Game.DistortionQuad.prototype = {
    x1 : 0,
    y1 : 0,
    x2 : 0,
    y2 : 0
}
Game.DistortionQuad.staticInit = function Game_DistortionQuad$staticInit() {
}

JS_AddInitFunc(function() {
    Game.DistortionQuad.registerClass('Game.DistortionQuad', null);
});
JS_AddStaticInitFunc(function() {
    Game.DistortionQuad.staticInit();
});
/**
 * @constructor
 */
Game.MatchSet = function Game_MatchSet() {
    this.mPieces = [];
}
Game.MatchSet.prototype = {
    mPieces : null,
    mMatchId : 0,
    mMoveCreditId : 0,
    mExplosionCount : 0
}
Game.MatchSet.staticInit = function Game_MatchSet$staticInit() {
}

JS_AddInitFunc(function() {
    Game.MatchSet.registerClass('Game.MatchSet', null);
});
JS_AddStaticInitFunc(function() {
    Game.MatchSet.staticInit();
});
/**
 * @constructor
 */
Game.StateInfo = function Game_StateInfo() {
}
Game.StateInfo.prototype = {
    mUpdateCnt : 0,
    mPoints : 0,
    mNextPieceId : 0,
    mIdleTicks : 0
}
Game.StateInfo.staticInit = function Game_StateInfo$staticInit() {
}

JS_AddInitFunc(function() {
    Game.StateInfo.registerClass('Game.StateInfo', null);
});
JS_AddStaticInitFunc(function() {
    Game.StateInfo.staticInit();
});
/**
 * @constructor
 */
Game.Span = function Game_Span() {
}
Game.Span.prototype = {
    mStartX : 0,
    mEndX : 0,
    mStartY : 0,
    mEndY : 0
}
Game.Span.staticInit = function Game_Span$staticInit() {
}

JS_AddInitFunc(function() {
    Game.Span.registerClass('Game.Span', null);
});
JS_AddStaticInitFunc(function() {
    Game.Span.staticInit();
});
/**
 * @constructor
 */
Game.SpanRow = function Game_SpanRow() {
    this.mSpans = [];
}
Game.SpanRow.prototype = {
    mSpans : null
}
Game.SpanRow.staticInit = function Game_SpanRow$staticInit() {
}

JS_AddInitFunc(function() {
    Game.SpanRow.registerClass('Game.SpanRow', null);
});
JS_AddStaticInitFunc(function() {
    Game.SpanRow.staticInit();
});
/**
 * @constructor
 */
Game.DeferredTutorial = function Game_DeferredTutorial() {
}
Game.DeferredTutorial.prototype = {
    mTutorialFlag : null,
    mPieceId : 0
}
Game.DeferredTutorial.staticInit = function Game_DeferredTutorial$staticInit() {
}

JS_AddInitFunc(function() {
    Game.DeferredTutorial.registerClass('Game.DeferredTutorial', null);
});
JS_AddStaticInitFunc(function() {
    Game.DeferredTutorial.staticInit();
});
/**
 * @constructor
 */
Game.PieceIter = function Game_PieceIter(theBoard) {
    this.mIdx = -1;
    this.mBoard = theBoard;
}
Game.PieceIter.prototype = {
    mBoard : null,
    mIdx : 0,
    HasNext : function Game_PieceIter$HasNext() {
        return this.mBoard != null && this.mIdx < this.mBoard.mColCount * this.mBoard.mRowCount - 1;
    },
    Next : function Game_PieceIter$Next() {
        if(!this.HasNext()) {
            return false;
        }
        ++this.mIdx;
        return true;
    },
    GetRow : function Game_PieceIter$GetRow() {
        return ((this.mIdx / this.mBoard.mColCount) | 0);
    },
    GetCol : function Game_PieceIter$GetCol() {
        return this.mIdx % this.mBoard.mColCount;
    },
    GetPiece : function Game_PieceIter$GetPiece() {
        if(this.mIdx < 0) {
            return null;
        }
        return this.mBoard.mBoard[this.mBoard.mBoard.mIdxMult0 * (this.GetRow()) + this.GetCol()];
    }
}
Game.PieceIter.staticInit = function Game_PieceIter$staticInit() {
}

JS_AddInitFunc(function() {
    Game.PieceIter.registerClass('Game.PieceIter', null);
});
JS_AddStaticInitFunc(function() {
    Game.PieceIter.staticInit();
});
/**
 * @constructor
 */
Game.BarInstance = function Game_BarInstance() {
}
Game.BarInstance.prototype = {
    mSrcX : 0,
    mSrcY : 0,
    mAlpha : 0,
    mDAlpha : 0
}
Game.BarInstance.staticInit = function Game_BarInstance$staticInit() {
}

JS_AddInitFunc(function() {
    Game.BarInstance.registerClass('Game.BarInstance', null);
});
JS_AddStaticInitFunc(function() {
    Game.BarInstance.staticInit();
});
/**
 * @constructor
 */
Game.Board = function Game_Board(theApp) {
    this.mBarInstanceVector = [];
    this.mRand = new Game.MTRand();
    this.mUiConfig = Game.Board.EUIConfig.Standard;
    this.mBackgroundIdxSet = [];
    this.mBoardColors = Array.Create(2, null);
    this.mPointsBreakdown = [];
    this.mLevelBarBonusAlpha = new GameFramework.CurvedVal();
    this.mSpeedModeFactor = new GameFramework.CurvedVal();
    this.mSpeedometerPopup = new GameFramework.CurvedVal();
    this.mSpeedometerGlow = new GameFramework.CurvedVal();
    this.mSpeedBonusDisp = new GameFramework.CurvedVal();
    this.mFlameSoundBlazingVol = new GameFramework.CurvedVal();
    this.mFavorGemColors = [];
    this.mNewGemColors = [];
    this.mSpeedBonusTextShowPct = new GameFramework.CurvedVal();
    this.mSpeedFireBarPIEffect = Array.Create(2, null);
    this.mSpeedBonusPointsGlow = new GameFramework.CurvedVal();
    this.mSpeedBonusPointsScale = new GameFramework.CurvedVal();
    this.mComboFlashPct = new GameFramework.CurvedVal();
    this.gExplodePoints = Array.Create2D(64, 2, 0);
    this.gShardPoints = Array.Create2D(64, 2, 0);
    this.gShardExplodeCenter = Array.Create2D(64, 2, 0);
    this.gShardTypes = Array.Create(64, 0);
    this.mPrevPointMultAlpha = new GameFramework.CurvedVal();
    this.mSrcPointMultPos = new GameFramework.geom.TPoint();
    this.mPointMultPosPct = new GameFramework.CurvedVal();
    this.mPointMultTextMorph = new GameFramework.CurvedVal();
    this.mPointMultScale = new GameFramework.CurvedVal();
    this.mPointMultAlpha = new GameFramework.CurvedVal();
    this.mPointMultYAdd = new GameFramework.CurvedVal();
    this.mPointMultDarkenPct = new GameFramework.CurvedVal();
    this.mTimerInflate = new GameFramework.CurvedVal();
    this.mTimerAlpha = new GameFramework.CurvedVal();
    this.mPointMultSoundQueue = [];
    this.mGemCountAlpha = new GameFramework.CurvedVal();
    this.mGemScalarAlpha = new GameFramework.CurvedVal();
    this.mGemCountCurve = new GameFramework.CurvedVal();
    this.mCascadeCountAlpha = new GameFramework.CurvedVal();
    this.mCascadeScalarAlpha = new GameFramework.CurvedVal();
    this.mCascadeCountCurve = new GameFramework.CurvedVal();
    this.mComplementAlpha = new GameFramework.CurvedVal();
    this.mComplementScale = new GameFramework.CurvedVal();
    this.mDeferredTutorialVector = [];
    this.mTutorialPieceIrisPct = new GameFramework.CurvedVal();
    this.mSunPosition = new GameFramework.CurvedVal();
    this.mAlpha = new GameFramework.CurvedVal();
    this.mScale = new GameFramework.CurvedVal();
    this.mSlideUIPct = new GameFramework.CurvedVal();
    this.mSideAlpha = new GameFramework.CurvedVal();
    this.mSideXOff = new GameFramework.CurvedVal();
    this.mBoostShowPct = new GameFramework.CurvedVal();
    this.mRestartPct = new GameFramework.CurvedVal();
    this.mBkgGlowPct = new GameFramework.CurvedVal();
    this.mNukeRadius = new GameFramework.CurvedVal();
    this.mNukeAlpha = new GameFramework.CurvedVal();
    this.mNovaRadius = new GameFramework.CurvedVal();
    this.mNovaAlpha = new GameFramework.CurvedVal();
    this.mGameOverPieceScale = new GameFramework.CurvedVal();
    this.mGameOverPieceGlow = new GameFramework.CurvedVal();
    this.mDeferredSounds = [];
    this.mQuestPortalPct = new GameFramework.CurvedVal();
    this.mQuestPortalCenterPct = new GameFramework.CurvedVal();
    this.mDistortionPieces = [];
    this.mDistortionQuads = [];
    this.mAnnouncements = [];
    this.UpdateComplements_gComplementPoints = Array.Create(6, 0, 3, 6, 12, 20, 30, 45);
    Game.Board.initializeBase(this);
    this.mBoardX = Game.Util.ImgCXOfs(Game.Resources['IMAGE_BOARD_MARKER_CHECKERBOARD']) + this.mWidescreenX;
    this.mBoardY = Game.Util.ImgCYOfs(Game.Resources['IMAGE_BOARD_MARKER_CHECKERBOARD']) - 60;
    this.mShowPointMultiplier = false;
    this.mPointMultSidebarOffset = new GameFramework.geom.TPoint(-70, -200);
}
Game.Board.ParseGridLayout = function Game_Board$ParseGridLayout(theBoard, theStr, outGrid, theEnforceStdGridSize, theColCount, theRowCount) {
    var count = 0;
    for(var loc = 0; loc < theStr.length; ++loc) {
        if(GameFramework.Utils.IsLetterAt(theStr, loc)) {
            var grid = outGrid[outGrid.length - 1];
            if(count == 0) {
                grid = outGrid[outGrid.length - 1];
                count = grid.mTiles.length - 1;
            }
            grid.At((((((count - 1) / theBoard.mRowCount) | 0)) | 0), (count - 1) % theBoard.mColCount).mAttr = GameFramework.Utils.GetCharAt(theStr, loc);
        } else if(GameFramework.Utils.IsDigitAt(theStr, loc)) {
            if(theEnforceStdGridSize && (outGrid.length == 0 || count >= theBoard.mColCount * theBoard.mRowCount)) {
                count = 0;
                outGrid.length = outGrid.length + 1;
                outGrid[outGrid.length - 1].mTiles.length = theBoard.mColCount * theBoard.mRowCount;
            } else if(!theEnforceStdGridSize && (outGrid.length == 0 || ((((count | 0) / theBoard.mColCount) | 0)) >= outGrid[outGrid.length - 1].GetRowCount())) {
                if(outGrid.length == 0) {
                    outGrid.push(new Game.GridData(theColCount, theRowCount));
                }
                outGrid[outGrid.length - 1].AddRow();
            }
            outGrid[outGrid.length - 1].At(((((count / theBoard.mRowCount) | 0)) | 0), count % theBoard.mColCount).mBack.push(GameFramework.Utils.ToInt(theStr.substr(loc, 1)));
            ++count;
        } else if(theStr.substr(loc, 1) == '\'') {
            var anEndPos = theStr.indexOf(String.fromCharCode(39), loc + 1);
            var aGridTileData = outGrid[outGrid.length - 1].At((((((count - 1) / theBoard.mRowCount) | 0)) | 0), (count - 1) % theBoard.mColCount);
            if(aGridTileData.mSettings == null) {
                aGridTileData.mSettings = {};
            }
            var aKey = theStr.substr(loc + 1, anEndPos - loc - 1);
            var aValue = '';
            var anEqPos = aKey.indexOf(String.fromCharCode(61));
            if(anEqPos != -1) {
                aValue = aKey.substr(anEqPos + 1);
                aKey = aKey.substr(0, anEqPos);
            }
            aGridTileData.mSettings[aKey] = aValue;
            loc = anEndPos;
        } else if(theStr.substr(loc, 1) == '/') {
            --count;
        }
    }
}
Game.Board.prototype = {
    mGameId : null,
    mBackground : null,
    mRowCount : 8,
    mColCount : 8,
    mFullLaser : true,
    mBarInstanceVector : null,
    mUpdateAcc : 1.0,
    mNextPieceId : 0,
    mBoard : null,
    mBumpVelocities : null,
    mNextColumnCredit : null,
    mRand : null,
    mLastHitSoundTick : 0,
    mPieceMap : null,
    mSwapDataVector : null,
    mMoveDataVector : null,
    mQueuedMoveVector : null,
    mStateInfoVector : null,
    mGameStats : null,
    mLevelStats : null,
    mGameOverCount : 0,
    mLevelCompleteCount : 0,
    mPoints : 0,
    mInLoadSave : null,
    mUiConfig : null,
    mBackgroundIdx : -1,
    mBackgroundIdxSet : null,
    mTutorialMgr : null,
    mFlameSound : null,
    mWantReset : null,
    mNeverAllowCascades : null,
    mBoardColors : null,
    mPointsBreakdown : null,
    mDispPoints : 0,
    mLevelBarPct : 0,
    mCountdownBarPct : 0,
    mLevelBarSizeBias : 0,
    mGameFinished : null,
    mLevelBarBonusAlpha : null,
    mLevelPointsTotal : 0,
    mLevel : 0,
    mAutohintOverridePieceId : -1,
    mAutohintOverrideTime : -1,
    mHypermixerCheckRow : 0,
    mPointMultiplier : 0,
    mPointMultSidebarOffset : null,
    mShowPointMultiplier : null,
    mCurMoveCreditId : 0,
    mCurMatchId : 0,
    mGemFallDelay : 0,
    mTimeExpired : null,
    mLastWarningTick : 0,
    mScrambleUsesLeft : 0,
    mMoveCounter : 0,
    mGameTicks : 0,
    mIdleTicks : 0,
    mSettlingDelay : 0,
    mLastMatchTick : 0,
    mLastMatchTime : 0,
    mMatchTallyCount : 0,
    mLastMatchTally : 0,
    mSpeedModeFactor : null,
    mSpeedBonusAlpha : 0,
    mSpeedBonusText : null,
    mSpeedometerPopup : null,
    mSpeedometerGlow : null,
    mSpeedBonusDisp : null,
    mFlameSoundBlazingVol : null,
    mSpeedNeedle : 0,
    mSpeedBonusPoints : 0,
    mFavorComboGems : null,
    mFavorGemColors : null,
    mNewGemColors : null,
    mSpeedBonusNum : 0,
    mSpeedBonusCount : 0,
    mSpeedBonusCountHighest : 0,
    mSpeedBonusTextShowPct : null,
    mSpeedBonusLastCount : 0,
    mPowerGemThreshold : 0,
    mColorCountStart : 0,
    mColorCount : 0,
    mIsBoardStill : null,
    mSpeedFirePIEffect : null,
    mSpeedFireBarPIEffect : null,
    mSpeedBonusPointsGlow : null,
    mSpeedBonusPointsScale : null,
    mSpeedBonusFlameModePct : 0,
    mHasBoardSettled : null,
    mContinuedFromLoad : null,
    mBoardUIOffsetY : 0,
    mComboCount : 0,
    mLastComboCount : 0,
    mComboLen : 0,
    mComboCountDisp : 0,
    mComboFlashPct : null,
    mComboSelectorAngle : 0,
    mLastPlayerSwapColor : null,
    mComboBonusSlowdownPct : 0,
    mLightningStorms : null,
    mPointsManager : null,
    mLastMoveSave : null,
    mTestSave : null,
    mPreFXManager : null,
    mPostFXManager : null,
    mUserPaused : null,
    mBoardHidePct : 0,
    mVisPausePct : 0,
    mShowAutohints : null,
    mWidescreenX : -160,
    gExplodeCount : 0,
    gExplodePoints : null,
    gShardPoints : null,
    gShardExplodeCenter : null,
    gShardTypes : null,
    mWantLevelup : false,
    mHyperspace : null,
    mCoinMultiplier : 1,
    mPrevPointMultAlpha : null,
    mSrcPointMultPos : null,
    mPointMultPosPct : null,
    mPointMultTextMorph : null,
    mPointMultScale : null,
    mPointMultAlpha : null,
    mPointMultYAdd : null,
    mPointMultDarkenPct : null,
    mPointMultColor : 0,
    mTimerInflate : null,
    mTimerAlpha : null,
    mPointMultSoundQueue : null,
    mPointMultSoundDelay : 0,
    mBottomFillRow : 0,
    mGemCountValueDisp : 0,
    mGemCountValueCheck : 0,
    mGemCountAlpha : null,
    mGemScalarAlpha : null,
    mGemCountCurve : null,
    mCascadeCountValueDisp : 0,
    mCascadeCountValueCheck : 0,
    mCascadeCountAlpha : null,
    mCascadeScalarAlpha : null,
    mCascadeCountCurve : null,
    mComplementAlpha : null,
    mComplementScale : null,
    mComplementNum : 0,
    mLastComplement : 0,
    mSidebarText : '',
    mShowLevelPoints : null,
    mHintCooldownTicks : 0,
    mWantHintTicks : 0,
    mLastMoveTicks : 0,
    mDeferredTutorialVector : null,
    mTutorialPieceIrisPct : null,
    mShowMoveCredit : null,
    mDoThirtySecondVoice : null,
    mSunPosition : null,
    mSunFired : null,
    mLastSunTick : 0,
    mBoardDarken : 0,
    mBoardDarkenAnnounce : 0,
    mWarningGlowColor : 0,
    mWarningGlowAlpha : 0,
    mMouseDown : null,
    mMouseDownX : 0,
    mMouseDownY : 0,
    mMouseUpPiece : null,
    mHintButton : null,
    mMenuButton : null,
    mResetButton : null,
    mZenOptionsButton : null,
    mScrambleDelayTicks : 0,
    mSliderSetTicks : 0,
    mDoAutoload : null,
    mAlpha : null,
    mScale : null,
    mOfsX : 0.0,
    mOfsY : 0.0,
    mKilling : null,
    mSlideUIPct : null,
    mSideAlpha : null,
    mSideXOff : null,
    mBoostShowPct : null,
    mStartDelay : 0,
    mRestartPct : null,
    mBkgGlowPct : null,
    mIsFacebookGame : null,
    mBoostsEnabled : 0,
    mCursorSelectPos : null,
    mNukeRadius : null,
    mNukeAlpha : null,
    mNovaRadius : null,
    mNovaAlpha : null,
    mGameOverPieceScale : null,
    mGameOverPieceGlow : null,
    mGameOverPiece : null,
    mDrawAll : null,
    mDrawGameElements : null,
    mWantsReddishFlamegems : null,
    mDeferredSounds : null,
    mQuestPortalPct : null,
    mQuestPortalCenterPct : null,
    mQuestPortalOrigin : null,
    mNeedsMaskCleared : null,
    mDistortionPieces : null,
    mDistortionQuads : null,
    mAnnouncements : null,
    mMessager : null,
    mReadyDelayCount : 0,
    mGoDelayCount : 0,
    mBoardX : 0,
    mBoardY : 0,
    mLastMouseX : 0,
    mLastMouseY : 0,
    UpdateComplements_gComplementPoints : null,
    Update_aSpeed : 1.0,
    RemoveAllButtons : function Game_Board$RemoveAllButtons() {
        var allBtns = Array.Create(3, null, this.mHintButton, this.mMenuButton, this.mResetButton);
        for(var i = 0; i < (allBtns.length); ++i) {
            if(allBtns[i] != null) {
                this.RemoveWidget(allBtns[i]);
            }
        }
    },
    InitUI : function Game_Board$InitUI() {
        if(this.mUiConfig == Game.Board.EUIConfig.Standard || this.mUiConfig == Game.Board.EUIConfig.WithReset) {
            if(this.mHintButton == null) {
                this.mHintButton = new Game.Bej3Button((Game.Board.Widgets.BUTTON_HINT | 0));
                this.mHintButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.HintButtonPressed));
                this.mHintButton.AddEventListener(GameFramework.widgets.WidgetEvent.MOUSE_DOWN, ss.Delegate.create(this, this.ButtonDown));
                if(this.mUiConfig == Game.Board.EUIConfig.Standard) {
                    this.mHintButton.mButtonImage = Game.Resources['IMAGE_BOARD_HINT_BUTTON_CLASSIC'];
                } else if(this.mUiConfig == Game.Board.EUIConfig.WithReset) {
                    this.mHintButton.mButtonImage = Game.Resources['IMAGE_BOARD_HINT_BUTTON_LIGHTNING'];
                }
                this.mHintButton.mDownImage = this.mHintButton.mButtonImage;
                this.mHintButton.mOverImage = this.mHintButton.mButtonImage;
                this.mHintButton.mOverCel = 1;
                this.mHintButton.mDownCel = 1;
                this.mHintButton.mBoundsRadius = 84.0;
                this.mHintButton.Resize(this.mWidescreenX + this.mHintButton.mButtonImage.mOffsetX + this.GetLeftUIOffsetX(), this.mHintButton.mButtonImage.mOffsetY, this.mHintButton.mButtonImage.mWidth, this.mHintButton.mButtonImage.mHeight);
                this.AddWidget(this.mHintButton);
            }
            if(this.mMenuButton == null) {
                this.mMenuButton = new Game.Bej3Button((Game.Board.Widgets.BUTTON_MENU | 0));
                if(this.mUiConfig == Game.Board.EUIConfig.Standard) {
                    this.mMenuButton.mButtonImage = Game.Resources['IMAGE_BOARD_MENU_BUTTON_CLASSIC'];
                } else if(this.mUiConfig == Game.Board.EUIConfig.WithReset) {
                    this.mMenuButton.mButtonImage = Game.Resources['IMAGE_BOARD_MENU_BUTTON_LIGHTNING'];
                }
                this.mMenuButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.MenuButtonPressed));
                this.mMenuButton.AddEventListener(GameFramework.widgets.WidgetEvent.MOUSE_DOWN, ss.Delegate.create(this, this.ButtonDown));
                this.mMenuButton.mDownImage = this.mMenuButton.mButtonImage;
                this.mMenuButton.mOverImage = this.mMenuButton.mButtonImage;
                this.mMenuButton.mOverCel = 1;
                this.mMenuButton.mDownCel = 1;
                this.mMenuButton.mBoundsRadius = 50.0;
                this.mMenuButton.Resize(this.mWidescreenX + this.mMenuButton.mButtonImage.mOffsetX + this.GetLeftUIOffsetX(), this.mMenuButton.mButtonImage.mOffsetY, this.mMenuButton.mButtonImage.mWidth, this.mMenuButton.mButtonImage.mHeight);
                this.AddWidget(this.mMenuButton);
            }
        }
        switch(this.mUiConfig) {
            case Game.Board.EUIConfig.WithReset:

            {
                if(this.mResetButton == null) {
                    this.mResetButton = new Game.Bej3Button((Game.Board.Widgets.BUTTON_RESET | 0));
                    this.mResetButton.mButtonImage = Game.Resources['IMAGE_BOARD_RESET_BUTTON_LIGHTNING'];
                    this.mResetButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.ResetButtonPressed));
                    this.mResetButton.AddEventListener(GameFramework.widgets.WidgetEvent.MOUSE_DOWN, ss.Delegate.create(this, this.ButtonDown));
                    this.mResetButton.mDownImage = this.mResetButton.mButtonImage;
                    this.mResetButton.mOverImage = this.mResetButton.mButtonImage;
                    this.mResetButton.mOverCel = 1;
                    this.mResetButton.mDownCel = 1;
                    this.mResetButton.mBoundsRadius = 50.0;
                    this.mResetButton.Resize(this.mWidescreenX + this.mResetButton.mButtonImage.mOffsetX + this.GetLeftUIOffsetX(), this.mResetButton.mButtonImage.mOffsetY, this.mResetButton.mButtonImage.mWidth, this.mResetButton.mButtonImage.mHeight);
                    this.AddWidget(this.mResetButton);
                }
                break;
            }

        }
    },
    Init : function Game_Board$Init() {
        this.RemoveAllButtons();
        this.mDeferredTutorialVector.clear();
        this.mBumpVelocities = Array.Create(this.mRowCount, null);
        this.mNextColumnCredit = Array.Create(this.mRowCount, 0);
        if(this.mBoard != null) {

            {
                var $srcArray3 = this.mBoard;
                for(var $enum3 = 0; $enum3 < $srcArray3.length; $enum3++) {
                    var aPiece = $srcArray3[$enum3];
                    if(aPiece != null) {
                        aPiece.ClearBoundEffects();
                    }
                }
            }
        }
        this.mBoard = Array.Create2D(this.mRowCount, this.mColCount, null);
        this.mFlameSoundBlazingVol.SetConstant(0.0);
        this.mSpeedBonusTextShowPct.SetConstant(0.0);
        this.mNeverAllowCascades = false;
        this.mWantReset = false;
        for(var row = 0; row < this.mRowCount; ++row) {
            for(var col = 0; col < this.mColCount; ++col) {
                this.mBoard[this.mBoard.mIdxMult0 * (row) + col] = null;
            }
        }
        this.ClearAllPieces();
        this.mPieceMap = {};
        this.mMoveDataVector = [];
        this.mQueuedMoveVector = [];
        this.mStateInfoVector = [];
        this.mLightningStorms = [];
        this.mBoardColors[0] = GameFramework.gfx.Color.RGBAToInt(6, 6, 6, 160);
        this.mBoardColors[1] = GameFramework.gfx.Color.RGBAToInt(24, 24, 24, 160);
        this.mGameStats = Array.Create((Game.DM.EStat._COUNT | 0), 0);
        this.mLevelStats = Array.Create((Game.DM.EStat._COUNT | 0), 0);
        this.mColorCountStart = (Game.DM.EGemColor._COUNT | 0);
        this.mColorCount = this.mColorCountStart;
        this.mBoardUIOffsetY = 0;
        this.mGameFinished = false;
        this.mGameTicks = 0;
        this.mIdleTicks = 0;
        this.mGameOverCount = 0;
        this.mSettlingDelay = 0;
        this.mLastMatchTick = -1000;
        this.mLastMatchTime = 1000;
        this.mMatchTallyCount = 0;
        this.mLastMatchTally = 0;
        this.mUpdateCnt = 0;
        this.mSpeedNeedle = 50;
        this.mSpeedBonusAlpha = 0.0;
        this.mSpeedBonusPoints = 0;
        this.mSpeedModeFactor.SetConstant(1.0);
        this.mSpeedBonusNum = 0;
        this.mSpeedBonusCount = 0;
        this.mSpeedBonusCountHighest = 0;
        this.mSpeedBonusLastCount = 0;
        this.mSpeedBonusFlameModePct = 0;
        this.mSpeedBonusPointsScale.SetConstant(0.0);
        this.mHypermixerCheckRow = 3;
        this.mLastWarningTick = 0;
        this.mCurMoveCreditId = 0;
        this.mCurMatchId = 0;
        this.mGemFallDelay = 0;
        this.mPointMultiplier = 1;
        this.mPoints = 0;
        this.mPointsBreakdown.length = 0;
        this.AddPointBreakdownSection();
        this.mDispPoints = 0;
        this.mLevelBarPct = 0;
        this.mCountdownBarPct = 0;
        this.mLevelPointsTotal = 0;
        this.mLevel = 0;
        this.mScrambleUsesLeft = 2;
        this.mDeferredSounds.length = 0;
        this.mComboCount = 0;
        this.mLastComboCount = 0;
        this.mComboCountDisp = 0;
        this.mComboSelectorAngle = 22;
        this.mLastPlayerSwapColor = Game.DM.EGemColor.WHITE;
        this.mComboBonusSlowdownPct = 0;
        this.mGemCountValueDisp = 0;
        this.mCascadeCountValueDisp = 0;
        this.mGemCountValueCheck = 0;
        this.mCascadeCountValueCheck = 0;
        this.mHintCooldownTicks = 0;
        this.mWantHintTicks = 0;
        this.mBoardDarken = 0;
        this.mBoardDarkenAnnounce = 0;
        this.mWarningGlowAlpha = 0;
        this.mTimeExpired = false;
        this.mPointMultPosPct.SetConstant(1);
        this.mTimerInflate.SetCurve('b+0,1,0.005,1,~###    V~###     J####');
        this.mTimerAlpha.SetConstant(1.0);
        for(var aCol = 0; aCol < this.mColCount; aCol++) {
            this.mBumpVelocities[aCol] = 0;
            this.mNextColumnCredit[aCol] = -1;
        }
        this.mReadyDelayCount = 0;
        this.mGoDelayCount = 0;
        this.mAnnouncements = [];
        this.mHintButton = null;
        this.mMenuButton = null;
        this.mResetButton = null;
        this.mGameFinished = false;
        this.mNextPieceId = 1;
        this.mBottomFillRow = this.mRowCount - 1;
        var aRand = Game.Util.Rand();
        this.mRand.SRand((aRand | 0));
        for(var i = 0; i < (Game.DM.EStat._COUNT | 0); i++) {
            this.mGameStats[i] = 0;
        }
        this.mFullLaser = true;
        this.mUpdateAcc = 0;
        this.mGameOverCount = 0;
        this.mLevelCompleteCount = 0;
        this.mScrambleDelayTicks = 0;
        this.mInLoadSave = false;
        this.mComplementNum = -1;
        this.mLastComplement = -1;
        this.mLastHitSoundTick = 0;
        this.mShowAutohints = true;
        this.mMouseDown = false;
        this.mMouseDownX = 0;
        this.mMouseDownY = 0;
        this.mMouseUpPiece = null;
        this.mContinuedFromLoad = false;
        this.mSidebarText = '';
        this.mShowLevelPoints = false;
        this.mFavorComboGems = false;
        this.mUserPaused = false;
        this.mBoardHidePct = 0.0;
        this.mVisPausePct = 0.0;
        this.mTimeExpired = false;
        this.mLastWarningTick = 0;
        this.mShowMoveCredit = false;
        this.mDoThirtySecondVoice = true;
        this.mSunFired = false;
        this.mLastSunTick = 0;
        this.mPointsManager = new Game.PointsManager();
        this.AddWidget(this.mPointsManager);
        this.mPreFXManager = new Game.EffectsManager(this);
        this.mPostFXManager = new Game.EffectsManager(this);
        this.AddWidget(this.mPostFXManager);
        this.mSideAlpha.SetConstant(1.0);
        this.mSideXOff.SetConstant(0.0);
        this.mAlpha.SetConstant(1.0);
        this.mScale.SetConstant(1.0);
        this.mKilling = false;
        this.mSliderSetTicks = -1;
        this.mStartDelay = 0;
        this.mCursorSelectPos = new GameFramework.geom.TIntPoint(-1, -1);
        this.mMoveCounter = 0;
        this.mDrawAll = true;
        this.mDrawGameElements = true;
        this.mNeedsMaskCleared = false;
        this.mWantsReddishFlamegems = false;
        this.mPowerGemThreshold = 5;
        this.InitUI();
        for(var aGemColor = 0; aGemColor < (7 | 0); aGemColor++) {
            this.mNewGemColors.push(aGemColor);
            this.mNewGemColors.push(aGemColor);
        }
        this.mMessager = Game.BejApp.mBejApp.mMessager;
    },
    GetTutorialSequence : function Game_Board$GetTutorialSequence() {
        return null;
    },
    Dispose : function Game_Board$Dispose() {
        this.mAnnouncements.clear();
        this.mLightningStorms.clear();
        this.mHyperspace = null;
        this.ClearAllPieces();
        GameFramework.widgets.ClassicWidget.prototype.Dispose.apply(this);
        if(this.mPreFXManager != null) {
            this.mPreFXManager.Dispose();
            this.mPreFXManager = null;
        }
        if(this.mPostFXManager != null) {
            this.mPostFXManager.Dispose();
            this.mPostFXManager = null;
        }
        if(this.mFlameSound != null) {
            this.mFlameSound.Dispose();
        }
    },
    GetLevelBarRect : function Game_Board$GetLevelBarRect() {
        return new GameFramework.TRect(554, 1108, 900, 40);
    },
    GetCountdownBarRect : function Game_Board$GetCountdownBarRect() {
        return new GameFramework.TRect(0, 200, 1000, 200);
    },
    WantsCalmEffects : function Game_Board$WantsCalmEffects() {
        return false;
    },
    GetTutorialIrisPiece : function Game_Board$GetTutorialIrisPiece() {
        return null;
    },
    GetMusicName : function Game_Board$GetMusicName() {
        return 'Classic';
    },
    AllowNoMoreMoves : function Game_Board$AllowNoMoreMoves() {
        return (this.mLevel != 0) && (this.mSpeedBonusFlameModePct == 0);
    },
    AllowSpeedBonus : function Game_Board$AllowSpeedBonus() {
        return false;
    },
    AllowPowerups : function Game_Board$AllowPowerups() {
        return true;
    },
    AllowLaserGems : function Game_Board$AllowLaserGems() {
        return true;
    },
    AllowHints : function Game_Board$AllowHints() {
        return true;
    },
    AllowTooltips : function Game_Board$AllowTooltips() {
        if((this.mScale.GetOutVal() != 1.0) || (this.GetPieceAlpha() != 1.0)) {
            return false;
        }
        if((this.mIsOver) && (this.mIsBoardStill) && (this.GetPieceAlpha() == 1.0)) {
            return true;
        }
        return false;
    },
    HasLargeExplosions : function Game_Board$HasLargeExplosions() {
        return false;
    },
    ForceSwaps : function Game_Board$ForceSwaps() {
        return false;
    },
    CanPlay : function Game_Board$CanPlay() {
        if(this.mAnnouncements.length > 0) {
            for(var i = 0; i < this.mAnnouncements.length; ++i) {
                if(this.mAnnouncements[i].mBlocksPlay) {
                    return false;
                }
            }
        }
        if(!this.mHasBoardSettled) {
            return false;
        }
        if(this.mReadyDelayCount != 0) {
            return false;
        }
        if(this.mLevelCompleteCount != 0) {
            return false;
        }
        if(this.mGameOverCount != 0) {
            return false;
        }
        if(this.GetTicksLeft() == 0) {
            return false;
        }

        {
            var $srcArray4 = this.mBoard;
            for(var $enum4 = 0; $enum4 < $srcArray4.length; $enum4++) {
                var aPiece = $srcArray4[$enum4];
                if(aPiece != null && (aPiece.IsFlagSet(Game.Piece.EFlag.BOMB) || aPiece.IsFlagSet(Game.Piece.EFlag.REALTIME_BOMB)) && (aPiece.mCounter == 0)) {
                    return false;
                }
            }
        }
        if((this.mWantLevelup) || (this.mHyperspace != null)) {
            return false;
        }
        return true;
    },
    WantsBackground : function Game_Board$WantsBackground() {
        return true;
    },
    WantsLevelBasedBackground : function Game_Board$WantsLevelBasedBackground() {
        return true;
    },
    IsGameSuspended : function Game_Board$IsGameSuspended() {
        return (this.mReadyDelayCount > 0) || (this.mTimeExpired) || (this.mLightningStorms.length > 0) || Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.OPTIONS) != null || this.mTutorialMgr.WantsBlockTimer() || (Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.TUTORIAL) != null && Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.TUTORIAL).IsModal());
    },
    CanPiecesFall : function Game_Board$CanPiecesFall() {
        return ((Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.TUTORIAL) == null || !Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.TUTORIAL).mIsModal) && (this.mGemFallDelay == 0) && (this.mLightningStorms.length == 0));
    },
    IsGamePaused : function Game_Board$IsGamePaused() {
        return (this.mUserPaused || Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.OPTIONS) != null || Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.RESET) != null || Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.MAIN_MENU_CONFIRM) != null) && this.WantsHideOnPause();
    },
    GetPowerGemThreshold : function Game_Board$GetPowerGemThreshold() {
        return this.mPowerGemThreshold;
    },
    GetTimeLimit : function Game_Board$GetTimeLimit() {
        return 0;
    },
    GetTimeDrawX : function Game_Board$GetTimeDrawX() {
        return this.GetBoardCenterX();
    },
    GetHintTime : function Game_Board$GetHintTime() {
        return 15;
    },
    WantsHideOnPause : function Game_Board$WantsHideOnPause() {
        return this.GetTimeLimit() != 0;
    },
    WantHypermixerEdgeCheck : function Game_Board$WantHypermixerEdgeCheck() {
        return false;
    },
    WantHypermixerBottomCheck : function Game_Board$WantHypermixerBottomCheck() {
        return true;
    },
    WantAnnihilatorReplacement : function Game_Board$WantAnnihilatorReplacement() {
        return false;
    },
    GetGemCountPopupThreshold : function Game_Board$GetGemCountPopupThreshold() {
        return 10;
    },
    GetMinComplementLevel : function Game_Board$GetMinComplementLevel() {
        return 0;
    },
    GetGravityFactor : function Game_Board$GetGravityFactor() {
        return 1.0 + (this.mSpeedModeFactor.GetOutVal() - 1.0) * 0.65;
    },
    GetSwapSpeed : function Game_Board$GetSwapSpeed() {
        return this.mSpeedModeFactor.GetOutVal();
    },
    GetMatchSpeed : function Game_Board$GetMatchSpeed() {
        return this.mSpeedModeFactor.GetOutVal();
    },
    GetGameSpeed : function Game_Board$GetGameSpeed() {
        return 1.0;
    },
    GetSpeedModeFactorScale : function Game_Board$GetSpeedModeFactorScale() {
        return 1.0;
    },
    GetModePointMultiplier : function Game_Board$GetModePointMultiplier() {
        return 1.0;
    },
    GetRankPointMultiplier : function Game_Board$GetRankPointMultiplier() {
        return this.GetModePointMultiplier();
    },
    GetTopWidgetButtonText : function Game_Board$GetTopWidgetButtonText() {
        return '';
    },
    GetBottomWidgetOffset : function Game_Board$GetBottomWidgetOffset() {
        return 0;
    },
    WantColorCombos : function Game_Board$WantColorCombos() {
        return false;
    },
    BackToMenu : function Game_Board$BackToMenu() {
        if(this.mAlpha.get_v() > 0.0) {
            this.mAlpha.SetCurve('b;0,1,0.02,1,~###         ~#EAC');
        }
        this.mScale.SetCurve('b;1,1.2,0.02,1,####         ~~^bn');
        if(this.mFlameSound != null) {
            this.mFlameSound.Dispose();
        }
        this.mFlameSound = null;
        Game.BejApp.mBejApp.PlaySound(Game.Resources['SOUND_BACKTOMAIN']);
        this.mKilling = true;
        this.mTutorialMgr.Kill();
        this.DisableUI(true);
        Game.BejApp.mBejApp.BackToMenu();
        if(this.mBackground != null) {
            this.mBackground.RemoveSelf();
        }
    },
    WantHyperMixers : function Game_Board$WantHyperMixers() {
        return false;
    },
    WantBulgeCascades : function Game_Board$WantBulgeCascades() {
        return true;
    },
    WantDrawTimer : function Game_Board$WantDrawTimer() {
        return true;
    },
    WantsTutorial : function Game_Board$WantsTutorial(theTutorialFlag) {
        if(Game.BejApp.mBejApp.mAutoPlay != Game.DM.EAutoplay.None) {
            return false;
        }
        return (!this.HasClearedTutorial(theTutorialFlag)) && (this.mSpeedBonusFlameModePct == 0) && (!this.mTimeExpired);
    },
    HypermixerDropped : function Game_Board$HypermixerDropped() {
    },
    SetupBackground : function Game_Board$SetupBackground(theDeltaIdx) {
        if(theDeltaIdx === undefined) {
            theDeltaIdx = 0;
        }
        if((theDeltaIdx == 0) && (this.mBackgroundIdx >= 0) && (this.mBackground != null)) {
            return;
        }
        if(this.mBackground != null) {
            this.mBackground.RemoveSelf();
            this.mBackground = null;
        }
        if(!this.WantsBackground()) {
            return;
        }
        if(this.mParent == null) {
            return;
        }
        this.mBackground = new Game.Background(true, false);
        this.mBackground.NextBkg();
        this.mBackground.Resize(-160, 0, 1920, 1200);
        var parentWidget = this.mParent;
        if(parentWidget != null) {
            this.RemoveSelf();
            parentWidget.AddWidget(this.mBackground);
            parentWidget.AddWidget(this);
        }
    },
    GetGameType : function Game_Board$GetGameType() {
        return 'GameType';
    },
    NewGame : function Game_Board$NewGame() {
        if(this.mTutorialMgr != null) {
            this.mTutorialMgr.Kill();
        }
        this.mTutorialMgr = new Game.TutorialMgr(this);
        this.mTutorialMgr.SetTutorialSequence(this.GetTutorialSequence());
        this.mGameId = GameFramework.Utils.CreateGUID();
        Game.BejApp.mBejApp.SubmitStandardMetrics('game_started', [new GameFramework.misc.KeyVal('GameId', this.mGameId)]);
        this.mUserPaused = false;
        this.mVisPausePct = 0;
        this.mAutohintOverridePieceId = -1;
        this.mAutohintOverrideTime = -1;
        var randSeedOverride = this.GetRandSeedOverride();
        if(randSeedOverride != 0) {
            this.mRand.SRand(randSeedOverride);
            GameFramework.Utils.Trace(String.format('Tutorial Seed Override: {0}\r\n', randSeedOverride));
        }
        for(var i = 0; i < (Game.DM.EStat._COUNT | 0); i++) {
            this.mGameStats[i] = 0;
        }
        this.mWantLevelup = false;
        this.mBackgroundIdx = -1;
        this.SetupBackground(1);
        Game.BejApp.mBejApp.mBaseWidgetAppState.SetFocus(this);
        this.mHasBoardSettled = false;
        this.mContinuedFromLoad = false;
        this.NewCombo();
        this.FillInBlanksEx(false);
        this.mReadyDelayCount = 0;
        this.mGoDelayCount = 25;
        this.mSettlingDelay = 0;
        var d = Game.BejApp.mBejApp.mDialogMgr.GetDialog(Game.DM.EDialog.END_LEVEL);
        if(d != null) {
            d.Kill();
        }
        this.ExtraTutorialSetup();
    },
    ExtraTutorialSetup : function Game_Board$ExtraTutorialSetup() {
    },
    BoardSettled : function Game_Board$BoardSettled() {
    },
    DialogClosed : function Game_Board$DialogClosed(theId) {
    },
    TallyPiece : function Game_Board$TallyPiece(thePiece, thePieceDestroyed) {
        if(!thePiece.mTallied) {
            thePiece.mTallied = true;
            this.PieceTallied(thePiece);
            if(thePieceDestroyed) {
                if(!thePiece.IsFlagSet(Game.Piece.EFlag.DIG)) {
                    this.AddToStatCred(Game.DM.EStat.GEMS_CLEARED, 1, thePiece.mMoveCreditId);
                    JS_Assert(thePiece.mColor < Game.DM.EGemColor._COUNT);
                    if(thePiece.mColor != Game.DM.EGemColor._INVALID) {
                        var aStat = ((Game.DM.EStat.RED_CLEARED | 0) + (thePiece.mColor | 0));
                        this.AddToStatCred(aStat, 1, thePiece.mMoveCreditId);
                    }
                    if(thePiece.mMoveCreditId != -1) {
                        this.MaxStat(Game.DM.EStat.BIGGESTMOVE, this.GetMoveStat(thePiece.mMoveCreditId, Game.DM.EStat.POINTS));
                        this.MaxStat(Game.DM.EStat.BIGGEST_GEMS_CLEARED, this.GetMoveStat(thePiece.mMoveCreditId, Game.DM.EStat.GEMS_CLEARED));
                    }
                }
                if(thePiece.IsFlagSet(Game.Piece.EFlag.POINT_MULTIPLIER)) {
                    this.IncPointMult(thePiece);
                }
            }
        }
    },
    PieceTallied : function Game_Board$PieceTallied(thePiece) {
        if((thePiece.IsFlagSet(Game.Piece.EFlag.COUNTER)) && (this.mGameOverPiece == null)) {
            var aCX = (thePiece.CX() | 0);
            var aCY = (thePiece.CY() | 0);
            var aLight = this.mPostFXManager.AllocEffect(Game.Effect.EFxType.LIGHT);
            aLight.mFlags = (Game.Effect.EFlag.ALPHA_FADEINOUT | 0);
            aLight.mX = aCX;
            aLight.mY = aCY;
            aLight.mZ = 0.08;
            aLight.mValue[0] = 45.1;
            aLight.mValue[1] = -0.5;
            aLight.mAlpha = 0.3;
            aLight.mDAlpha = 0.06 * 1.67;
            aLight.mScale = 300.0;
            this.mPostFXManager.AddEffect(aLight);
            Game.SoundUtil.Play(Game.Resources['SOUND_GEM_COUNTDOWN_DESTROYED']);
            this.BumpColumn(thePiece, 2.0);
            for(var i = 0; i < 20; i++) {
                var anEffect = this.mPostFXManager.AllocEffect(Game.Effect.EFxType.COUNTDOWN_SHARD);
                anEffect.mColor = Game.DM.gGemColors[(thePiece.mColor | 0)];
                anEffect.mX = aCX;
                anEffect.mY = aCY;
                this.mPostFXManager.AddEffect(anEffect);
            }
        }
    },
    AddToStatCred : function Game_Board$AddToStatCred(theStatNum, theNumber, theMoveCreditId) {
        this.AddToStatEx(theStatNum, theNumber, theMoveCreditId, true);
    },
    AddToStat : function Game_Board$AddToStat(theStatNum, theNumber) {
        this.AddToStatEx(theStatNum, theNumber, -1, true);
    },
    IncStat : function Game_Board$IncStat(theStatNum) {
        this.AddToStatEx(theStatNum, 1, -1, true);
    },
    AddToStatEx : function Game_Board$AddToStatEx(theStatNum, theNumber, theMoveCreditId, addToProfile) {
        this.mGameStats[(theStatNum | 0)] += theNumber;
        if(this.mGameStats[(theStatNum | 0)] < 0) {
            this.mGameStats[(theStatNum | 0)] = 0x7fffffff;
        }
        this.mLevelStats[(theStatNum | 0)] += theNumber;
        if(this.mLevelStats[(theStatNum | 0)] < 0) {
            this.mLevelStats[(theStatNum | 0)] = 0x7fffffff;
        }
        if(addToProfile) {
            Game.BejApp.mBejApp.mProfile.mStats[(theStatNum | 0)] = Game.BejApp.mBejApp.mProfile.mStats[(theStatNum | 0)] + theNumber;
            if(Game.BejApp.mBejApp.mProfile.mStats[(theStatNum | 0)] < 0) {
                Game.BejApp.mBejApp.mProfile.mStats[(theStatNum | 0)] = 0x7fffffff;
            }
        }
        if(theMoveCreditId != -1) {
            for(var aMoveDataIdx = 0; aMoveDataIdx < (this.mMoveDataVector.length | 0); aMoveDataIdx++) {
                if(this.mMoveDataVector[aMoveDataIdx].mMoveCreditId == theMoveCreditId) {
                    this.mMoveDataVector[aMoveDataIdx].mStats[(theStatNum | 0)] = this.mMoveDataVector[aMoveDataIdx].mStats[(theStatNum | 0)] + theNumber;
                }
            }
        }
    },
    MaxStat : function Game_Board$MaxStat(theStatNum, theNumber) {
        this.MaxStatCred(theStatNum, theNumber, -1);
    },
    MaxStatCred : function Game_Board$MaxStatCred(theStatNum, theNumber, theMoveCreditId) {
        this.mGameStats[(theStatNum | 0)] = (Math.max(this.mGameStats[(theStatNum | 0)], theNumber) | 0);
        this.mLevelStats[(theStatNum | 0)] = (Math.max(this.mLevelStats[(theStatNum | 0)], theNumber) | 0);
        Game.BejApp.mBejApp.mProfile.mStats[(theStatNum | 0)] = (Math.max(Game.BejApp.mBejApp.mProfile.mStats[(theStatNum | 0)], theNumber) | 0);
        if(theMoveCreditId != -1) {
            for(var aMoveDataIdx = 0; aMoveDataIdx < (this.mMoveDataVector.length | 0); aMoveDataIdx++) {
                if(this.mMoveDataVector[aMoveDataIdx].mMoveCreditId == theMoveCreditId) {
                    this.mMoveDataVector[aMoveDataIdx].mStats[(theStatNum | 0)] = (Math.max(this.mMoveDataVector[aMoveDataIdx].mStats[(theStatNum | 0)], theNumber) | 0);
                }
            }
        }
    },
    GetMoveStat : function Game_Board$GetMoveStat(theMoveCreditId, theStatNum) {
        return this.GetMoveStatEx(theMoveCreditId, theStatNum, 0);
    },
    GetMoveStatEx : function Game_Board$GetMoveStatEx(theMoveCreditId, theStatNum, theDefault) {
        for(var aMoveDataIdx = 0; aMoveDataIdx < (this.mMoveDataVector.length | 0); aMoveDataIdx++) {
            if(this.mMoveDataVector[aMoveDataIdx].mMoveCreditId == theMoveCreditId) {
                return this.mMoveDataVector[aMoveDataIdx].mStats[(theStatNum | 0)];
            }
        }
        return theDefault;
    },
    GetTotalMovesStat : function Game_Board$GetTotalMovesStat(theStatNum) {
        var aTotal = 0;
        for(var aMoveDataIdx = 0; aMoveDataIdx < (this.mMoveDataVector.length | 0); aMoveDataIdx++) {
            aTotal += this.mMoveDataVector[aMoveDataIdx].mStats[(theStatNum | 0)];
        }
        return aTotal;
    },
    GetMaxMovesStat : function Game_Board$GetMaxMovesStat(theStatNum) {
        var aMax = 0;
        for(var aMoveDataIdx = 0; aMoveDataIdx < (this.mMoveDataVector.length | 0); aMoveDataIdx++) {
            if((aMoveDataIdx == 0) || (this.mMoveDataVector[aMoveDataIdx].mStats[(theStatNum | 0)] > aMax)) {
                aMax = this.mMoveDataVector[aMoveDataIdx].mStats[(theStatNum | 0)];
            }
        }
        return aMax;
    },
    SubmitStats : function Game_Board$SubmitStats(endOfGame) {
        var aStats = endOfGame ? this.mGameStats : this.mLevelStats;
        var aSpeedPoints = 0;
        var aHurrahPoints = 0;
        var aMatchPoints = 0;
        if(endOfGame) {

            {
                var $srcArray5 = this.mPointsBreakdown;
                for(var $enum5 = 0; $enum5 < $srcArray5.length; $enum5++) {
                    var aPointsTypes = $srcArray5[$enum5];
                    aSpeedPoints += aPointsTypes[(Game.Board.EPointType.SPEED | 0)];
                    aMatchPoints += aPointsTypes[(Game.Board.EPointType.MATCH | 0)];
                }
            }
            if(this.GetGameType() == 'Speed') {

                {
                    var $srcArray6 = this.mPointsBreakdown[this.mPointsBreakdown.length - 1];
                    for(var $enum6 = 0; $enum6 < $srcArray6.length; $enum6++) {
                        var aPoints = $srcArray6[$enum6];
                        aHurrahPoints += aPoints;
                    }
                }
            }
        }

        else {
            aSpeedPoints += this.mPointsBreakdown[this.mPointsBreakdown.length - 1][(Game.Board.EPointType.SPEED | 0)];
            aMatchPoints += this.mPointsBreakdown[this.mPointsBreakdown.length - 1][(Game.Board.EPointType.MATCH | 0)];
        }
        var aData = [new GameFramework.misc.KeyVal('IsSlow', Game.BejApp.mBejApp.mIsSlow), new GameFramework.misc.KeyVal('MusicVolume', Game.BejApp.mBejApp.mProfile.mMusicVolume), new GameFramework.misc.KeyVal('SfxVolume', Game.BejApp.mBejApp.mProfile.mSfxVolume), new GameFramework.misc.KeyVal('GameId', this.mGameId), new GameFramework.misc.KeyVal('GameMode', this.GetGameType()), new GameFramework.misc.KeyVal('GameTimePlayed', aStats[(Game.DM.EStat.SECONDS_PLAYED | 0)] * 10), new GameFramework.misc.KeyVal('WasGameCompleted', this.mGameFinished), new GameFramework.misc.KeyVal('FpsAverage', ((aStats[(Game.DM.EStat.FPS_SAMPLE_TOTAL | 0)] / Math.max(1, aStats[(Game.DM.EStat.FPS_SAMPLE_COUNT | 0)])) | 0)), new GameFramework.misc.KeyVal('FpsLow', aStats[(Game.DM.EStat.FPS_MIN | 0)]), new GameFramework.misc.KeyVal('FpsHigh', aStats[(Game.DM.EStat.FPS_MAX | 0)]), new GameFramework.misc.KeyVal('Level', Math.max(this.mPointMultiplier, this.mLevel + 1)), new GameFramework.misc.KeyVal('Points', this.mPoints), new GameFramework.misc.KeyVal('SpeedPoints', aSpeedPoints), new GameFramework.misc.KeyVal('HurrahPoints', aHurrahPoints), new GameFramework.misc.KeyVal('MatchPoints', aMatchPoints), new GameFramework.misc.KeyVal('GemsCleared', aStats[(Game.DM.EStat.GEMS_CLEARED | 0)]), new GameFramework.misc.KeyVal('FlamegemsCleared', aStats[(Game.DM.EStat.FLAMEGEMS_USED | 0)]), new GameFramework.misc.KeyVal('StargemsCleared', aStats[(Game.DM.EStat.LASERGEMS_USED | 0)]), new GameFramework.misc.KeyVal('HypergemsCleared', aStats[(Game.DM.EStat.HYPERCUBES_USED | 0)]), new GameFramework.misc.KeyVal('SupernovagemsCleared', aStats[(Game.DM.EStat.SUPERNOVAS_USED | 0)]), new GameFramework.misc.KeyVal('FlamegemsMade', aStats[(Game.DM.EStat.FLAMEGEMS_MADE | 0)]), new GameFramework.misc.KeyVal('StargemsMade', aStats[(Game.DM.EStat.LASERGEMS_MADE | 0)]), new GameFramework.misc.KeyVal('HypergemsMade', aStats[(Game.DM.EStat.HYPERCUBES_MADE | 0)]), new GameFramework.misc.KeyVal('SupernovagemsMade', aStats[(Game.DM.EStat.SUPERNOVAS_MADE | 0)]), new GameFramework.misc.KeyVal('NumMoves', aStats[(Game.DM.EStat.NUM_MOVES | 0)]), new GameFramework.misc.KeyVal('NumMovesDrag', aStats[(Game.DM.EStat.NUM_MOVES_DRAG | 0)]), new GameFramework.misc.KeyVal('NumMovesClick', aStats[(Game.DM.EStat.NUM_MOVES_CLICK | 0)]), new GameFramework.misc.KeyVal('NumGoodMoves', aStats[(Game.DM.EStat.NUM_GOOD_MOVES | 0)]), new GameFramework.misc.KeyVal('NumMatches', aStats[(Game.DM.EStat.MATCHES | 0)]), new GameFramework.misc.KeyVal('TotalXP', Game.BejApp.mBejApp.mProfile.mOfflineRankPoints), new GameFramework.misc.KeyVal('PlayerRank', Game.BejApp.mBejApp.mProfile.mOfflineRank), new GameFramework.misc.KeyVal('HintsUsed', aStats[(Game.DM.EStat.HINT_USED | 0)])];
        Game.BejApp.mBejApp.SubmitStandardMetrics('gameplay', aData);
    },
    UpdateDeferredSounds : function Game_Board$UpdateDeferredSounds() {
        if(this.mDeferredSounds.length == 0) {
            return;
        }
        for(var i = 0; i < this.mDeferredSounds.length;) {
            if(this.mGameTicks >= this.mDeferredSounds[i].mOnGameTick) {
                Game.SoundUtil.Play(this.mDeferredSounds[i].mId);
                this.mDeferredSounds.removeAt(i);
            }

            else {
                ++i;
            }
        }
    },
    AddDeferredSound : function Game_Board$AddDeferredSound(theSoundId, theDelayGameTicks) {
        this.AddDeferredSoundEx(theSoundId, theDelayGameTicks, 1.0);
    },
    AddDeferredSoundEx : function Game_Board$AddDeferredSoundEx(theSoundId, theDelayGameTicks, theVol) {
        var ds = new Game.DeferredSound(theSoundId, this.mGameTicks + theDelayGameTicks, theVol);
        this.mDeferredSounds.push(ds);
    },
    DoSpeedText : function Game_Board$DoSpeedText(anIndex) {
        Game.SoundUtil.Play(Game.Resources['SOUND_FLAMEBONUS']);
        Game.SoundUtil.Play(Game.Resources['SOUND_VOICE_BLAZINGSPEED']);
        this.mFlameSoundBlazingVol.SetCurve('b;0,1,0.01,8,~###        h~### 9#:tT');
        this.DoComplement(6);
        var anEffect;
        anEffect = Game.Resources['PIEFFECT_SPEEDBOARD_FLAME'].Duplicate();
        anEffect.mDrawTransform.translate(1040, 120);
        anEffect.mDrawTransform.scale(1.0, 1.0);
        this.mSpeedFireBarPIEffect[0] = anEffect;
        anEffect = Game.Resources['PIEFFECT_SPEEDBOARD_FLAME'].Duplicate();
        anEffect.mDrawTransform.translate(1040, 1165);
        anEffect.mDrawTransform.scale(1.0, 1.0);
        this.mSpeedFireBarPIEffect[1] = anEffect;
        this.mSpeedBonusFlameModePct = 1.0;
        this.IncStat(Game.DM.EStat.INFERNO_COUNT);
    },
    DoComplement : function Game_Board$DoComplement(theComplementNum) {
        var gComplements = Array.Create(7, "", Game.Resources.SOUND_VOICE_GOOD_ID, Game.Resources.SOUND_VOICE_EXCELLENT_ID, Game.Resources.SOUND_VOICE_AWESOME_ID, Game.Resources.SOUND_VOICE_SPECTACULAR_ID, Game.Resources.SOUND_VOICE_EXTRAORDINARY_ID, Game.Resources.SOUND_VOICE_UNBELIEVABLE_ID, Game.Resources.SOUND_VOICE_BLAZINGSPEED_ID);
        Game.SoundUtil.PlayVoice(GameFramework.BaseApp.mApp.mResourceManager.GetSoundResourceById(gComplements[theComplementNum]));
        this.mComplementNum = theComplementNum;
        if(this.mComplementNum > 0) {
            this.mComplementAlpha.SetCurve('b+0,1,0.005714,1,#### 0~r2d        q#G_h');
            this.mComplementScale.SetCurveLinked('b+0,1,0,1,#7+F  td,P9       -~P##', this.mComplementAlpha);
        }
        this.mLastComplement = theComplementNum;
    },
    NewHyperMixer : function Game_Board$NewHyperMixer() {
    },
    NewCombo : function Game_Board$NewCombo() {
    },
    ComboProcess : function Game_Board$ComboProcess(theColor) {
        return false;
    },
    ComboFailed : function Game_Board$ComboFailed() {
        if(!this.WantColorCombos()) {
            return;
        }
        this.mComboCount = (Math.max(0, this.mComboCount - 1) | 0);
    },
    ComboCompleted : function Game_Board$ComboCompleted() {
        if(!this.WantColorCombos()) {
            return;
        }
        this.mComboCount = 0;
        this.mComboFlashPct.SetCurve('b-0,1,0.006667,1,#### 3{### oO### jk### TI### ]W###  &####');
    },
    GetPanPositionByPiece : function Game_Board$GetPanPositionByPiece(thePiece) {
        return this.GetPanPosition((thePiece.GetScreenX() | 0) + ((Game.Board.GEM_WIDTH / 2) | 0));
    },
    GetPanPosition : function Game_Board$GetPanPosition(theX) {
        var aFieldWidth = this.GetColX(this.mColCount - 1) + Game.Board.GEM_WIDTH;
        var aPixOffset = theX - (this.GetBoardX() + ((aFieldWidth / 2) | 0));
        var aPerOffset = aPixOffset / aFieldWidth * 2.0;
        return aPerOffset * 0.5;
    },
    GetPiecePanPosition : function Game_Board$GetPiecePanPosition(thePiece) {
        if(thePiece == null) {
            return 0;
        }
        return this.GetPanPosition((thePiece.GetScreenX() | 0) + ((Game.Board.GEM_WIDTH / 2) | 0));
    },
    DoAddPoints : function Game_Board$DoAddPoints(theX, theY, thePoints, theColor, theId, addtotube, usePointMultiplier, theMoveCreditId, theForceAdd, thePointType) {
        if(thePoints <= 0 && !theForceAdd) {
            return null;
        }
        var aMultiplier = this.mPointMultiplier;
        if(!usePointMultiplier) {
            aMultiplier = 1.0;
        }
        var aPointsLeft = ((thePoints * aMultiplier) | 0);
        while(aPointsLeft > 0) {
            var aCurPointAdd = (Math.min(aPointsLeft, 10) | 0);
            var aPow = 0.8;
            var aCurMovePts = ((this.GetMoveStat(theMoveCreditId, Game.DM.EStat.POINTS) / this.GetModePointMultiplier()) | 0);
            var aLevelPointsDelta = Math.pow((aCurMovePts + aCurPointAdd), aPow) - Math.pow(aCurMovePts, aPow);
            aLevelPointsDelta *= 3.0;
            if(addtotube) {
                this.mLevelPointsTotal += (aLevelPointsDelta | 0);
            }
            aPointsLeft -= aCurPointAdd;
            var aStatPoints = ((aCurPointAdd * this.GetModePointMultiplier()) | 0);
            this.AddToStatEx(Game.DM.EStat.POINTS, aStatPoints, theMoveCreditId, true);
            this.mPoints += aStatPoints;
            if(this.mPoints < 0) {
                this.mPoints = 0x7fffffff;
            }
        }
        return this.mPointsManager.Add(theX, theY, thePoints, theColor, theId, usePointMultiplier, theMoveCreditId, theForceAdd);
    },
    AddPoints : function Game_Board$AddPoints(theX, theY, thePoints, theColor, theId, addtotube, usePointMultiplier, theMoveCreditId, theForceAdd, thePointType) {
        if(theColor === undefined) {
            theColor = ~0;
        }
        if(theId === undefined) {
            theId = ~0;
        }
        if(addtotube === undefined) {
            addtotube = true;
        }
        if(usePointMultiplier === undefined) {
            usePointMultiplier = true;
        }
        if(theMoveCreditId === undefined) {
            theMoveCreditId = -1;
        }
        if(theForceAdd === undefined) {
            theForceAdd = false;
        }
        if(thePointType === undefined) {
            thePointType = Game.Board.EPointType.SPECIAL;
        }
        var aPrevPoints = this.mPoints;
        var aPoint = this.DoAddPoints(theX, theY, thePoints, theColor, theId, addtotube, usePointMultiplier, theMoveCreditId, theForceAdd, thePointType);
        var aPointDelta = this.mPoints - aPrevPoints;
        this.mPointsBreakdown[this.mPointsBreakdown.length - 1][(thePointType | 0)] += aPointDelta;
        return aPoint;
    },
    AddPointBreakdownSection : function Game_Board$AddPointBreakdownSection() {
        var anIntVector = [];
        for(var i = 0; i < (Game.Board.EPointType.__COUNT | 0); ++i) {
            anIntVector.push(0);
        }
        this.mPointsBreakdown.push(anIntVector);
    },
    GetLevelPoints : function Game_Board$GetLevelPoints() {
        return (2500 + this.mLevel * 750);
    },
    GetLevelPointsTotal : function Game_Board$GetLevelPointsTotal() {
        return this.mLevelPointsTotal;
    },
    RandomizeBoard : function Game_Board$RandomizeBoard(ClearFlags) {
        if(ClearFlags === undefined) {
            ClearFlags = false;
        }
        var foundNewPattern = false;
        var aPieceVector = [];
        do {
            aPieceVector.length = 0;
            for(var aPieceIter = new Game.PieceIter(this); aPieceIter.Next();) {
                var aPiece = aPieceIter.GetPiece();
                if(aPiece != null) {
                    aPieceVector.push(aPiece);
                    aPiece.mDestCol = aPiece.mCol = 7 - aPiece.mCol;
                    aPiece.mDestRow = aPiece.mRow = 7 - aPiece.mRow;
                }
            }
            for(var aPieceIdx = 0; aPieceIdx < (aPieceVector.length | 0); aPieceIdx++) {
                var aPiece_2 = aPieceVector[aPieceIdx];
                this.mBoard[this.mBoard.mIdxMult0 * (aPiece_2.mDestRow) + aPiece_2.mDestCol] = aPiece_2;
            }
            var aSwapGemOffsets = Array.Create2D(3, 2, 0, 1, 0, 1, 1, 0, 1);
            for(var anItr = 0; ((anItr < 16) || (!this.FindMove(null, 0, true, true, false, null, false))) && (anItr < 20); anItr++) {
                var aSwapCol1 = ((this.mRand.Next() | 0) % this.mColCount) & ~1;
                var aSwapRow1 = ((this.mRand.Next() | 0) % this.mRowCount) & ~1;
                var aPiece1 = this.mBoard[this.mBoard.mIdxMult0 * (aSwapRow1) + aSwapCol1];
                if((aPiece1.mDestCol == aPiece1.mCol) && (aPiece1.mDestRow == aPiece1.mRow)) {
                    for(var aRotCount = 0; aRotCount < 4; aRotCount++) {
                        for(var aSwapIdx = 0; aSwapIdx < 3; aSwapIdx++) {
                            var aSwapCol2 = aSwapCol1 + aSwapGemOffsets[aSwapGemOffsets.mIdxMult0 * (aSwapIdx) + 0];
                            var aSwapRow2 = aSwapRow1 + aSwapGemOffsets[aSwapGemOffsets.mIdxMult0 * (aSwapIdx) + 1];
                            var aSwapPiece1 = this.mBoard[this.mBoard.mIdxMult0 * (aSwapRow1) + aSwapCol1];
                            var aSwapPiece2 = this.mBoard[this.mBoard.mIdxMult0 * (aSwapRow2) + aSwapCol2];
                            var aSwapDest = aSwapPiece2.mDestCol;
                            aSwapPiece2.mDestCol = aSwapPiece1.mDestCol;
                            aSwapPiece1.mDestCol = aSwapDest;
                            aSwapDest = aSwapPiece2.mDestRow;
                            aSwapPiece2.mDestRow = aSwapPiece1.mDestRow;
                            aSwapPiece1.mDestRow = aSwapDest;
                            this.mBoard[this.mBoard.mIdxMult0 * (aSwapPiece1.mDestRow) + aSwapPiece1.mDestCol] = aSwapPiece1;
                            this.mBoard[this.mBoard.mIdxMult0 * (aSwapPiece2.mDestRow) + aSwapPiece2.mDestCol] = aSwapPiece2;
                        }
                        if(((aRotCount & 1) == 0) && (!this.HasSet())) {
                            break;
                        }
                    }
                }
            }
            foundNewPattern = this.FindMove(null, 0, true, true, false, null, false);
            for(var aPieceIdx_2 = 0; aPieceIdx_2 < aPieceVector.length; aPieceIdx_2++) {
                var aPiece_3 = aPieceVector[aPieceIdx_2];
                this.mBoard[this.mBoard.mIdxMult0 * (aPiece_3.mRow) + aPiece_3.mCol] = aPiece_3;
            }
        } while(!foundNewPattern);
        for(var aPieceIdx_3 = 0; aPieceIdx_3 < aPieceVector.length; aPieceIdx_3++) {
            var aPiece_4 = aPieceVector[aPieceIdx_3];
            aPiece_4.mCol = aPiece_4.mDestCol;
            aPiece_4.mRow = aPiece_4.mDestRow;
            aPiece_4.mX = this.GetColX(aPiece_4.mCol);
            aPiece_4.mY = this.GetRowY(aPiece_4.mRow);
            this.mBoard[this.mBoard.mIdxMult0 * (aPiece_4.mRow) + aPiece_4.mCol] = aPiece_4;
        }
        for(; ;) {
            for(var i = 0; i < 3; i++) {
                var aPiece1_2 = this.mBoard[this.mBoard.mIdxMult0 * (this.mRand.NextInt() % this.mRowCount) + this.mRand.NextInt() % this.mColCount];
                var aPiece2 = this.mBoard[this.mBoard.mIdxMult0 * (this.mRand.NextInt() % this.mRowCount) + this.mRand.NextInt() % this.mColCount];
                if(aPiece1_2 != null && aPiece2 != null) {
                    for(var aSwapCount = 0; aSwapCount < 2; aSwapCount++) {
                        var p = this.mBoard[this.mBoard.mIdxMult0 * (aPiece1_2.mRow) + aPiece1_2.mCol];
                        this.mBoard[this.mBoard.mIdxMult0 * (aPiece1_2.mRow) + aPiece1_2.mCol] = this.mBoard[this.mBoard.mIdxMult0 * (aPiece2.mRow) + aPiece2.mCol];
                        this.mBoard[this.mBoard.mIdxMult0 * (aPiece2.mRow) + aPiece2.mCol] = p;
                        var t = aPiece1_2.mCol;
                        aPiece1_2.mCol = aPiece2.mCol;
                        aPiece2.mCol = t;
                        t = aPiece1_2.mRow;
                        aPiece1_2.mRow = aPiece2.mRow;
                        aPiece2.mRow = t;
                        if(!this.HasSet()) {
                            break;
                        }
                    }
                }
            }
            var aCoords = Array.Create(4, 0);
            if(this.FindMove(aCoords, 3, true, true, true, null, false) && (aCoords[1] >= this.mRowCount - 4)) {
                break;
            }
        }
        for(var aPieceIter_2 = new Game.PieceIter(this); aPieceIter_2.Next();) {
            var aPiece_5 = aPieceIter_2.GetPiece();
            if(aPiece_5 != null) {
                aPiece_5.mX = this.GetColX(aPiece_5.mCol);
                aPiece_5.mY = this.GetRowY(aPiece_5.mRow);
            }
        }
    },
    LevelUp : function Game_Board$LevelUp() {
        if(this.mGameFinished || (this.mWantLevelup) || (this.mHyperspace != null) || (this.mGameOverCount > 0)) {
            return;
        }
        this.mWantLevelup = true;
    },
    HyperspaceEvent : function Game_Board$HyperspaceEvent(inEvent) {
        switch(inEvent) {
            case Game.Hyperspace.HyperspaceEvent.Start:

            {
                this.mSideXOff.SetCurve('b+0,-202,0.00625,1,####    G####     Y~Ws|');
            }

                break;
            case Game.Hyperspace.HyperspaceEvent.HideAll:

            {
                this.mSideAlpha.SetConstant(1.0);
                this.mDrawGameElements = false;
                for(var aPieceIter = new Game.PieceIter(this); aPieceIter.Next();) {
                    var aPiece = aPieceIter.GetPiece();
                    if(aPiece.IsFlagSet(Game.Piece.EFlag.FLAME)) {
                        this.Start3DFireGemEffect(aPiece);
                    }
                }
                this.RandomizeBoard();
            }

                break;
            case Game.Hyperspace.HyperspaceEvent.BoardShatter:

            {
                this.mDrawAll = false;
            }

                break;
            case Game.Hyperspace.HyperspaceEvent.NextBkg:

            {
                this.mBackground.NextBkg();
            }

                break;
            case Game.Hyperspace.HyperspaceEvent.OldLevelClear:

            {
                this.mLevel++;
                this.mLevelPointsTotal = 0;
                this.mMoveCounter = 0;
            }

                break;
            case Game.Hyperspace.HyperspaceEvent.ZoomIn:

            {
                this.mDrawAll = true;
                this.mDrawGameElements = true;
                this.mOfsX = 0;
                this.mOfsY = 0;
                this.mSideXOff.SetConstant(-202);
                this.mScale.SetCurve('b+0.26,1,0.008333,1,#&Mg      /~a[J   r~P##');
            }

                break;
            case Game.Hyperspace.HyperspaceEvent.SlideOver:

            {
                this.mSideXOff.SetCurve('b+0,-202,0.009091,1,~},XB~P## ;olsb        F#O%V');
                this.mScale.SetConstant(1.0);
                for(var aPieceIter_2 = new Game.PieceIter(this); aPieceIter_2.Next();) {
                    var aPiece_2 = aPieceIter_2.GetPiece();
                    if(aPiece_2.IsFlagSet(Game.Piece.EFlag.FLAME)) {
                        aPiece_2.ClearHyperspaceEffects();
                    }
                }
            }

                break;
            case Game.Hyperspace.HyperspaceEvent.Finish:

            {
                this.mHyperspace.RemoveSelf();
                this.mHyperspace = null;
                var anAnnouncement = new Game.Announcement(this, String.format('LEVEL {0}', this.mLevel + 1));
                anAnnouncement.mAlpha.SetCurve('b+0,1,0.004,1,#### F####  (~###    +~###  M####');
                anAnnouncement.mScale.SetCurve('b+0,2,0.004,1,#### D####  ,P}}}    +P###  K####');
                anAnnouncement.mHorzScaleMult.SetCurve('b+1,10,0.004,1,~### D~i%C  ,####      S####');
                anAnnouncement.mBlocksPlay = false;
                anAnnouncement.mDarkenBoard = false;
            }

                break;
        }
    },
    GameOverAnnounce : function Game_Board$GameOverAnnounce() {
        if((this.GetTicksLeft() == 0) && (this.GetTimeLimit() > 0)) {
            new Game.Announcement(this, 'TIME UP');
            Game.SoundUtil.Play(Game.Resources['SOUND_VOICE_TIMEUP']);
        }

        else {
            new Game.Announcement(this, 'GAME OVER');
            Game.SoundUtil.Play(Game.Resources['SOUND_VOICE_GAMEOVER']);
        }
    },
    AllowGameOver : function Game_Board$AllowGameOver() {
        return (this.mHyperspace == null) && (!this.mWantLevelup);
    },
    GameOver : function Game_Board$GameOver(visible) {
        if(visible === undefined) {
            visible = true;
        }
        if(!this.AllowGameOver()) {
            return;
        }
        this.mCursorSelectPos = new GameFramework.geom.TIntPoint(-1, -1);
        if(this.mGameFinished || this.mGameOverCount > 0 || this.mLevelCompleteCount > 0) {
            return;
        }
        this.mGameFinished = true;
        if(visible) {
            this.GameOverAnnounce();
        }
        this.SubmitStats(true);
        this.mGameOverCount = 1;
    },
    BombExploded : function Game_Board$BombExploded(thePiece) {
        if(this.mLevelCompleteCount != 0) {
            return;
        }
        if(this.mGameOverPiece != null) {
            return;
        }
        this.GameOver();
        this.mGameOverPiece = thePiece;
        this.mNukeRadius.SetCurve('b#0,50,0.0065,2,#    %#  (j   w~');
        this.mNukeAlpha.SetCurveLinked('b+0,1,0,2,~###        >~}ir 3eiIFJ)hD5+#Mfq', this.mNukeRadius);
        this.mNovaRadius.SetCurveLinked('b#0,12,0,2,# _#  |`  g~  [}', this.mNukeRadius);
        this.mNovaAlpha.SetCurveLinked('b#0,1,0,1,~       1w  p#', this.mNukeRadius);
        this.mGameOverPieceScale.SetCurveLinked('b#1,2,0,1,# E# d7ae m6  P# w#', this.mNukeRadius);
        this.mGameOverPieceGlow.SetCurveLinked('b#0,1,0.004,2,# V: Yf Y] T~   b~', this.mNukeRadius);
        this.mNukeRadius.IncInValBy(0.1);
    },
    UpdateBombExplode : function Game_Board$UpdateBombExplode() {
        if(!this.mNukeRadius.IsDoingCurve()) {
            return;
        }
        var done = !this.mNukeRadius.IncInVal();
        this.mGameOverPiece.Update();
        var aKillGemRadius = this.mNovaRadius.GetOutVal() * 280.0;
        var aCenterX = this.mGameOverPiece.mX + ((Game.Board.GEM_WIDTH / 2) | 0);
        var aCenterY = this.mGameOverPiece.mY + ((Game.Board.GEM_HEIGHT / 2) | 0);
        for(var aRow = 0; aRow < this.mRowCount; aRow++) {
            for(var aCol = 0; aCol < this.mColCount; aCol++) {
                var aPiece = this.GetPieceAtRowCol(aRow, aCol);
                if((aPiece != null) && (aPiece != this.mGameOverPiece)) {
                    var aDistX = (aPiece.mX + ((Game.Board.GEM_WIDTH / 2) | 0)) - aCenterX;
                    var aDistY = (aPiece.mY + ((Game.Board.GEM_HEIGHT / 2) | 0)) - aCenterY;
                    var aDist = Math.sqrt((aDistX * aDistX + aDistY * aDistY));
                    if(aDist < aKillGemRadius) {
                        for(var i = 0; i < 8; i++) {
                            var anEffect = this.mPostFXManager.AllocEffect(Game.Effect.EFxType.GEM_SHARD);
                            anEffect.mColor = Game.DM.gGemColors[(aPiece.mColor | 0)];
                            var aRot = i * 0.503 + ((Game.Util.Rand() % 100)) / 800.0;
                            anEffect.mX = aPiece.CX() + GameFramework.Utils.GetRandFloat() * Game.Board.GEM_WIDTH / 2;
                            anEffect.mY = aPiece.CY() + GameFramework.Utils.GetRandFloat() * Game.Board.GEM_HEIGHT / 2;
                            anEffect.mAngle = aRot;
                            anEffect.mDAngle = (0.05 * GameFramework.Utils.GetRandFloat()) * 1.67;
                            anEffect.mScale = 1.0;
                            anEffect.mAlpha = 1.0;
                            anEffect.mDecel = (0.8 + GameFramework.Utils.GetRandFloat() * 0.15);
                            var anAng = Math.atan2(aDistY, aDistX);
                            var aRatio = 1.0 * 1.67;
                            anEffect.mDX = (aRatio * 4.0 * GameFramework.Utils.GetRandFloat() + Math.cos(anAng) * 16.0) * 1.67;
                            anEffect.mDY = (aRatio * 4.0 * GameFramework.Utils.GetRandFloat() + Math.sin(anAng) * 16.0) * 1.67;
                            anEffect.mGravity = aRatio * 0.05;
                            anEffect.mValue[0] = GameFramework.Utils.GetRandFloat() * Game.MathUtil.PI_M2;
                            anEffect.mValue[1] = anEffect.mValue[0] + 0.25 * Game.MathUtil.PI_M2;
                            anEffect.mValue[2] = (GameFramework.Utils.GetRandFloat() > 0) ? 0 : 1;
                            anEffect.mValue[3] = 0.045 * (3.0 * Math.abs(GameFramework.Utils.GetRandFloat()) + 1.0);
                            anEffect.mDAlpha = (-0.005 * (4.0 * Math.abs(GameFramework.Utils.GetRandFloat()) + 2.0)) * 1.67;
                            this.mPostFXManager.AddEffect(anEffect);
                        }
                        this.DeletePiece(aPiece);
                    }
                }
            }
        }
        if(this.mNukeRadius.CheckInThreshold(1.65)) {
            this.mGameOverPiece.mFlags = 0;
            this.mPostFXManager.Clear();
            this.mDrawAll = false;
        }
        if(done) {
            this.GameOver();
        }
    },
    IncPointMult : function Game_Board$IncPointMult(thePieceFrom) {
        var aNextMult = this.mPointMultiplier + 1;
        if(!this.mTimeExpired) {
            if(this.mPointMultSoundQueue.length == 0) {
                this.mPointMultSoundDelay = 0;
            }
            this.mPointMultiplier++;
            this.mPrevPointMultAlpha.SetCurve('b+0,1,0.01,1,~###         ~####');
            if(thePieceFrom == null) {
                this.mSrcPointMultPos = new GameFramework.geom.TPoint(this.GetBoardCenterX(), 1000);
            } else {
                this.mSrcPointMultPos = new GameFramework.geom.TPoint(thePieceFrom.CX(), thePieceFrom.CY());
                if((thePieceFrom.mColor | 0) == 6) {
                    this.mSrcPointMultPos.y += -10;
                }
                if((thePieceFrom.mColor | 0) == 4) {
                    this.mSrcPointMultPos.y += 12;
                }
            }
            this.mPointMultPosPct.SetCurve('b+0,1,0.006667,1,####M&0:N uP###   OP###   Nz-xH`~P##');
            this.mPointMultTextMorph.SetConstant(0);
            this.mPointMultScale.SetCurveLinked('b+0,1.25,0,1,F### q[/8@sPXY5  d~###    U8=f}', this.mPointMultPosPct);
            this.mPointMultAlpha.SetCurveLinked('b+0,1,0,1,####     6~###    k~###', this.mPointMultPosPct);
            this.mPointMultYAdd.SetCurveLinked('b+0,-80,0,1,####     g####  7~|4(  &#;-0', this.mPointMultPosPct);
            this.mPointMultDarkenPct.SetCurveLinked('b+0,1,0,1,####     $~###    }####', this.mPointMultPosPct);
            var aMultColor = Array.Create(7, null, GameFramework.gfx.Color.RGBToInt(255, 128, 128), GameFramework.gfx.Color.RGBToInt(255, 255, 255), GameFramework.gfx.Color.RGBToInt(128, 255, 128), GameFramework.gfx.Color.RGBToInt(255, 255, 128), GameFramework.gfx.Color.RGBToInt(255, 128, 255), GameFramework.gfx.Color.RGBToInt(255, 192, 128), GameFramework.gfx.Color.RGBToInt(128, 255, 255));
            if((thePieceFrom == null) || (thePieceFrom.mColor == Game.DM.EGemColor._INVALID)) {
                this.mPointMultColor = GameFramework.gfx.Color.RGBToInt(255, 255, 255);
            } else {
                this.mPointMultColor = aMultColor[(thePieceFrom.mColor | 0)];
            }
        }
        if((thePieceFrom != null) && (thePieceFrom.mColor != Game.DM.EGemColor._INVALID)) {
            this.AddPoints((thePieceFrom.CX() | 0), (thePieceFrom.CY() | 0), 1000 * aNextMult, Game.DM.gGemColors[(thePieceFrom.mColor | 0)], thePieceFrom.mMatchId, false, false, -1, false, Game.Board.EPointType.SPECIAL);
        }
        this.AddPointBreakdownSection();
        this.SubmitStats(false);
        for(var i = 0; i < (Game.DM.EStat._COUNT | 0); i++) {
            this.mLevelStats[i] = 0;
        }
    },
    Flamify : function Game_Board$Flamify(thePiece) {
        if((thePiece.mColor | 0) == -1) {
            return;
        }
        if(!thePiece.SetFlag(Game.Piece.EFlag.FLAME)) {
            return;
        }
        Game.SoundUtil.Play(Game.Resources['SOUND_POWERGEM_CREATED']);
        thePiece.ClearDisallowFlags();
        thePiece.SetFlagTo(Game.Piece.EFlag.COUNTER, false);
        thePiece.SetFlagTo(Game.Piece.EFlag.BOMB, false);
        thePiece.SetFlagTo(Game.Piece.EFlag.REALTIME_BOMB, false);
        thePiece.mImmunityCount = 25;
        var anEffect = new Game.PopAnimEffect(Game.Resources['POPANIM_FLAMEGEMCREATION']);
        anEffect.mX = thePiece.CX();
        anEffect.mY = thePiece.CY();
        anEffect.mScale = 2.0;
        anEffect.mDoubleSpeed = true;
        anEffect.Play$2('Creation_Below Gem_Horizontal');
        anEffect.Update();
        this.mPreFXManager.AddEffect(anEffect);
        anEffect = new Game.PopAnimEffect(Game.Resources['POPANIM_FLAMEGEMCREATION']);
        anEffect.mX = thePiece.CX();
        anEffect.mY = thePiece.CY();
        anEffect.mScale = 2.0;
        anEffect.mOverlay = true;
        anEffect.mDoubleSpeed = true;
        anEffect.Play$2('Creation_Above Gem');
        anEffect.Update();
        this.mPostFXManager.AddEffect(anEffect);
    },
    Hypercubeify : function Game_Board$Hypercubeify(thePiece) {
        this.HypercubeifyEx(thePiece, true);
    },
    HypercubeifyEx : function Game_Board$HypercubeifyEx(thePiece, theStartEffect) {
        if(!thePiece.CanSetFlag(Game.Piece.EFlag.HYPERCUBE)) {
            return;
        }
        thePiece.ClearFlags();
        thePiece.SetFlag(Game.Piece.EFlag.HYPERCUBE);
        thePiece.mChangedTick = this.mUpdateCnt;
        thePiece.mLastColor = thePiece.mColor;
        thePiece.mColor = Game.DM.EGemColor.HYPERCUBE;
        thePiece.mImmunityCount = 25;
        thePiece.ClearFlag(Game.Piece.EFlag.FLAME);
        if(theStartEffect) {
            this.StartHypercubeEffect(thePiece);
            if(this.WantsCalmEffects()) {
                Game.SoundUtil.PlayEx(Game.Resources['SOUND_HYPERCUBE_CREATE'], 0, 0.4);
            } else {
                Game.SoundUtil.Play(Game.Resources['SOUND_HYPERCUBE_CREATE']);
            }
        }
    },
    Laserify : function Game_Board$Laserify(thePiece) {
        if((thePiece.mColor | 0) == -1) {
            return;
        }
        if(!thePiece.SetFlag(Game.Piece.EFlag.LASER)) {
            return;
        }
        Game.SoundUtil.Play(Game.Resources['SOUND_LASERGEM_CREATED']);
        thePiece.ClearDisallowFlags();
        thePiece.SetFlagTo(Game.Piece.EFlag.COUNTER, false);
        thePiece.SetFlagTo(Game.Piece.EFlag.BOMB, false);
        thePiece.SetFlagTo(Game.Piece.EFlag.REALTIME_BOMB, false);
        thePiece.mImmunityCount = 25;
        this.StartLaserGemEffect(thePiece);
    },
    Bombify : function Game_Board$Bombify(thePiece, theCounter, realTime) {
        if(!thePiece.CanSetFlag(Game.Piece.EFlag.COUNTER) && (realTime ? thePiece.CanSetFlag(Game.Piece.EFlag.REALTIME_BOMB) : thePiece.CanSetFlag(Game.Piece.EFlag.BOMB))) {
            return;
        }
        thePiece.ClearFlags();
        thePiece.ClearDisallowFlags();
        thePiece.SetFlag(Game.Piece.EFlag.COUNTER);
        if(realTime) {
            thePiece.SetFlag(Game.Piece.EFlag.REALTIME_BOMB);
        } else {
            thePiece.SetFlag(Game.Piece.EFlag.BOMB);
        }
        thePiece.mCounter = theCounter;
        thePiece.mImmunityCount = 25;
    },
    Doomify : function Game_Board$Doomify(thePiece, theCounter) {
        if(!thePiece.CanSetFlag(Game.Piece.EFlag.DOOM) || !thePiece.CanSetFlag(Game.Piece.EFlag.COUNTER)) {
            return;
        }
        thePiece.ClearFlags();
        thePiece.ClearDisallowFlags();
        thePiece.SetFlag(Game.Piece.EFlag.DOOM);
        thePiece.SetFlag(Game.Piece.EFlag.COUNTER);
        thePiece.mColor = Game.DM.EGemColor._INVALID;
        thePiece.mCounter = theCounter;
        thePiece.mImmunityCount = 25;
    },
    Blastify : function Game_Board$Blastify(thePiece) {
        if(!thePiece.CanSetFlag(Game.Piece.EFlag.BLAST_GEM)) {
            return;
        }
        thePiece.SetFlag(Game.Piece.EFlag.BLAST_GEM);
        this.StartPieceEffect(thePiece);
    },
    StartPieceEffect : function Game_Board$StartPieceEffect(thePiece) {
        if(thePiece.IsFlagSet(Game.Piece.EFlag.POINT_MULTIPLIER)) {
            this.StartMultiplierGemEffect(thePiece);
        }
        if(thePiece.IsFlagSet(Game.Piece.EFlag.LASER)) {
            this.StartLaserGemEffect(thePiece);
        }
        if(thePiece.IsFlagSet(Game.Piece.EFlag.HYPERCUBE)) {
            this.StartHypercubeEffect(thePiece);
        } else if(thePiece.IsFlagSet(Game.Piece.EFlag.DETONATOR) || thePiece.IsFlagSet(Game.Piece.EFlag.SCRAMBLE)) {
            this.StartBoostGemEffect(thePiece);
        } else if(thePiece.IsFlagSet(Game.Piece.EFlag.BLAST_GEM)) {
            this.StartBlastgemEffect(thePiece);
        }
    },
    Start3DFireGemEffect : function Game_Board$Start3DFireGemEffect(thePiece) {
        var anEffect;
        anEffect = new Game.ParticleEffect(Game.Resources['PIEFFECT_FIREGEM_HYPERSPACE']);
        anEffect.SetEmitAfterTimeline(true);
        anEffect.mDoDrawTransform = true;
        anEffect.mFlags |= (Game.Effect.EFlag.HYPERSPACE_ONLY | 0);
        thePiece.BindEffect(anEffect);
        this.mPreFXManager.AddEffect(anEffect);
    },
    StartLaserGemEffect : function Game_Board$StartLaserGemEffect(thePiece) {
        var anEffect = this.NewBottomLaserEffect(thePiece.mColor);
        thePiece.BindEffect(anEffect);
        this.mPreFXManager.AddEffect(anEffect);
        anEffect = this.NewTopLaserEffect(thePiece.mColor);
        thePiece.BindEffect(anEffect);
        this.mPostFXManager.AddEffect(anEffect);
    },
    NewTopLaserEffect : function Game_Board$NewTopLaserEffect(theGemColor) {
        var anEffect;
        var aLayer;
        var anEmitter;
        anEffect = new Game.ParticleEffect(Game.Resources['PIEFFECT_STARGEM']);
        anEffect.SetEmitAfterTimeline(true);
        anEffect.mDoDrawTransform = true;
        for(var i = 0; i < 7; i++) {
            aLayer = anEffect.GetLayer(i + 1);
            if((i == (theGemColor | 0)) && (GameFramework.BaseApp.mApp.get_Is3D()) && (!Game.BejApp.mBejApp.mIsSlow)) {
                aLayer.SetVisible(true);
            } else {
                aLayer.SetVisible(false);
            }
        }
        aLayer = anEffect.GetLayer((theGemColor | 0) + 1);
        anEmitter = aLayer.GetEmitter$2('Glow');
        if(anEmitter != null) {
            anEmitter.SetVisible(false);
        }
        return anEffect;
    },
    NewBottomLaserEffect : function Game_Board$NewBottomLaserEffect(theGemColor) {
        var anEffect;
        var aLayer;
        var anEmitter;
        anEffect = new Game.ParticleEffect(Game.Resources['PIEFFECT_STARGEM']);
        anEffect.SetEmitAfterTimeline(true);
        anEffect.mDoDrawTransform = true;
        anEffect.mDoubleSpeed = true;
        for(var i = 0; i < 7; i++) {
            aLayer = anEffect.GetLayer(i + 1);
            if((i == (theGemColor | 0)) && (GameFramework.BaseApp.mApp.get_Is3D()) && (!Game.BejApp.mBejApp.mIsSlow)) {
                aLayer.SetVisible(true);
            } else {
                aLayer.SetVisible(false);
            }
        }
        anEffect.GetLayer$2('Top').SetVisible(false);
        aLayer = anEffect.GetLayer((theGemColor | 0) + 1);
        anEmitter = aLayer.GetEmitter$2('Stars');
        if(anEmitter != null) {
            anEmitter.SetVisible(false);
        }
        return anEffect;
    },
    StartMultiplierGemEffect : function Game_Board$StartMultiplierGemEffect(thePiece) {
        thePiece.mAnimCurve.SetCurve('b390,-90,0.005,1,~         ~#');
        thePiece.mAnimCurve.SetMode(GameFramework.CurvedVal.MODE_REPEAT);
        var anEffect = new Game.ParticleEffect(Game.Resources['PIEFFECT_MULTIPLIER']);
        anEffect.mPieceIdRel = thePiece.mId;
        anEffect.mDoDrawTransform = true;
        anEffect.mDoubleSpeed = true;
        anEffect.SetEmitAfterTimeline(true);
        var outlineLayer = anEffect.GetLayer$2('OUTLINE');
        var gasLayer = anEffect.GetLayer$2('Offgassing');
        for(var aColor = 0; aColor < 7; aColor++) {
            var aLayer = anEffect.GetLayer(aColor + 1);
            if(aColor == (thePiece.mColor | 0)) {
                aLayer.SetVisible(true);
            }

            else {
                aLayer.SetVisible(false);
            }
        }
        this.mPostFXManager.AddEffect(anEffect);
    },
    StartHypercubeEffect : function Game_Board$StartHypercubeEffect(thePiece) {
        if((!GameFramework.BaseApp.mApp.get_Is3D()) || (Game.BejApp.mBejApp.mIsSlow)) {
            return;
        }
        var anEffect = new Game.ParticleEffect(Game.Resources['PIEFFECT_HYPERCUBE']);
        anEffect.mPieceIdRel = thePiece.mId;
        anEffect.SetEmitAfterTimeline(true);
        anEffect.mDoDrawTransform = true;
        this.mPreFXManager.AddEffect(anEffect);
    },
    StartBlastgemEffect : function Game_Board$StartBlastgemEffect(thePiece) {
    },
    StartBoostGemEffect : function Game_Board$StartBoostGemEffect(thePiece) {
    },
    GetSelectedPiece : function Game_Board$GetSelectedPiece() {
        for(var aPieceIter = new Game.PieceIter(this); aPieceIter.Next();) {
            var aPiece = aPieceIter.GetPiece();
            if(aPiece != null && aPiece.mSelected) {
                return aPiece;
            }
        }
        return null;
    },
    GetNewGemColors : function Game_Board$GetNewGemColors() {
        var ret = this.mNewGemColors;
        for(var i = 0; i < (this.mFavorGemColors.length | 0); i++) {
            ret.push(this.mFavorGemColors[i]);
        }
        return ret;
    },
    CreateNewPiece : function Game_Board$CreateNewPiece(theRow, theCol) {
        var aPiece = new Game.Piece(this);
        aPiece.mCreatedTick = this.mUpdateCnt;
        aPiece.mLastActiveTick = this.mUpdateCnt;
        aPiece.mCol = theCol;
        aPiece.mRow = theRow;
        aPiece.mIsPieceStill = false;
        aPiece.mX = this.GetColX(theCol);
        aPiece.mY = this.GetRowY(theRow);
        JS_Assert(this.mBoard[this.mBoard.mIdxMult0 * (theRow) + theCol] == null);
        this.mBoard[this.mBoard.mIdxMult0 * (theRow) + theCol] = aPiece;
        return aPiece;
    },
    IsTurnBased : function Game_Board$IsTurnBased() {
        return false;
    },
    WantPointComplements : function Game_Board$WantPointComplements() {
        return true;
    },
    IsHypermixerCancelledBy : function Game_Board$IsHypermixerCancelledBy(thePiece) {
        return thePiece.IsFlagSet(Game.Piece.EFlag.HYPERCUBE);
    },
    GetColX : function Game_Board$GetColX(theCol) {
        return theCol * Game.Board.GEM_WIDTH;
    },
    GetRowY : function Game_Board$GetRowY(theRow) {
        return theRow * Game.Board.GEM_HEIGHT;
    },
    GetColScreenX : function Game_Board$GetColScreenX(theCol) {
        return this.GetColX(theCol) + this.GetBoardX();
    },
    GetRowScreenY : function Game_Board$GetRowScreenY(theRow) {
        return this.GetRowY(theRow) + this.GetBoardY();
    },
    GetColAt : function Game_Board$GetColAt(theX) {
        for(var aCol = 0; aCol < this.mColCount; aCol++) {
            var aColX = this.GetColX(aCol);
            if((theX >= aColX) && (theX < aColX + Game.Board.GEM_WIDTH)) {
                return aCol;
            }
        }
        return -1;
    },
    GetRowAt : function Game_Board$GetRowAt(theY) {
        for(var aRow = 0; aRow < this.mRowCount; aRow++) {
            var aRowY = this.GetRowY(aRow);
            if((theY >= aRowY) && (theY < aRowY + Game.Board.GEM_HEIGHT)) {
                return aRow;
            }
        }
        return -1;
    },
    GetBoardX : function Game_Board$GetBoardX() {
        return this.mBoardX;
    },
    GetBoardY : function Game_Board$GetBoardY() {
        return this.mBoardY;
    },
    GetBoardCenterX : function Game_Board$GetBoardCenterX() {
        return this.GetBoardX() + ((Game.Board.GEM_WIDTH * this.mColCount / 2) | 0);
    },
    GetBoardCenterY : function Game_Board$GetBoardCenterY() {
        return this.GetBoardY() + ((Game.Board.GEM_HEIGHT * this.mRowCount / 2) | 0);
    },
    GetAlpha : function Game_Board$GetAlpha() {
        return this.mAlpha.GetOutVal();
    },
    GetBoardAlpha : function Game_Board$GetBoardAlpha() {
        return this.GetAlpha();
    },
    GetPieceAlpha : function Game_Board$GetPieceAlpha() {
        return (1.0 - (this.mBoardHidePct)) * this.GetBoardAlpha();
    },
    GetPieceAtRowCol : function Game_Board$GetPieceAtRowCol(theRow, theCol) {
        return this.GetPieceAtColRow(theCol, theRow);
    },
    GetPieceAtColRow : function Game_Board$GetPieceAtColRow(theCol, theRow) {
        if((theRow < 0) || (theRow >= this.mRowCount) || (theCol < 0) || (theCol >= this.mColCount)) {
            return null;
        }
        return this.mBoard[this.mBoard.mIdxMult0 * (theRow) + theCol];
    },
    GetPieceAtXY : function Game_Board$GetPieceAtXY(theX, theY) {

        {
            var $srcArray7 = this.mBoard;
            for(var $enum7 = 0; $enum7 < $srcArray7.length; $enum7++) {
                var aPiece = $srcArray7[$enum7];
                if(aPiece != null && (theX >= aPiece.mX) && (theY >= aPiece.mY) && (theX < aPiece.mX + Game.Board.GEM_WIDTH) && (theY < aPiece.mY + Game.Board.GEM_WIDTH)) {
                    return aPiece;
                }
            }
        }
        return null;
    },
    GetPieceAtScreenXY : function Game_Board$GetPieceAtScreenXY(theX, theY) {
        return this.GetPieceAtXY(theX - this.GetBoardX(), theY - this.GetBoardY());
    },
    GetPieceById : function Game_Board$GetPieceById(theId) {
        if(theId == -1) {
            return null;
        }
        return this.mPieceMap[theId];
    },
    GetRandomPieceOnGrid : function Game_Board$GetRandomPieceOnGrid() {
        var aPieceList = [];

        {
            var $srcArray8 = this.mBoard;
            for(var $enum8 = 0; $enum8 < $srcArray8.length; $enum8++) {
                var aPiece = $srcArray8[$enum8];
                if(aPiece != null) {
                    aPieceList.push(aPiece);
                }
            }
        }
        if(aPieceList.length > 0) {
            return aPieceList[((this.mRand.Next() % aPieceList.length) | 0)];
        } else {
            return null;
        }
    },
    DeletePiece : function Game_Board$DeletePiece(thePiece) {
        this.TallyPiece(thePiece, true);
        for(var i = 0; i < (this.mSwapDataVector.length | 0);) {
            var aSwapData = this.mSwapDataVector[i];
            if((aSwapData.mPiece1 == thePiece) || (aSwapData.mPiece2 == thePiece)) {
                if(aSwapData.mSwapPct.get_v() < 0.0 && aSwapData.mPiece1 != null && aSwapData.mPiece2 != null) {
                    var tmp = aSwapData.mPiece1.mCol;
                    aSwapData.mPiece1.mCol = aSwapData.mPiece2.mCol;
                    aSwapData.mPiece2.mCol = tmp;
                    tmp = aSwapData.mPiece1.mRow;
                    aSwapData.mPiece1.mRow = aSwapData.mPiece2.mRow;
                    aSwapData.mPiece2.mRow = tmp;
                    var tmpPiece = this.mBoard[this.mBoard.mIdxMult0 * (aSwapData.mPiece1.mRow) + aSwapData.mPiece1.mCol];
                    this.mBoard[this.mBoard.mIdxMult0 * (aSwapData.mPiece1.mRow) + aSwapData.mPiece1.mCol] = this.mBoard[this.mBoard.mIdxMult0 * (aSwapData.mPiece2.mRow) + aSwapData.mPiece2.mCol];
                    this.mBoard[this.mBoard.mIdxMult0 * (aSwapData.mPiece2.mRow) + aSwapData.mPiece2.mCol] = tmpPiece;
                }
                if(aSwapData.mPiece1 != null) {
                    aSwapData.mPiece1.mX = this.GetColX(aSwapData.mPiece1.mCol);
                    aSwapData.mPiece1.mY = this.GetRowY(aSwapData.mPiece1.mRow);
                    aSwapData.mPiece1 = null;
                }
                if(aSwapData.mPiece2 != null) {
                    aSwapData.mPiece2.mX = this.GetColX(aSwapData.mPiece2.mCol);
                    aSwapData.mPiece2.mY = this.GetRowY(aSwapData.mPiece2.mRow);
                    aSwapData.mPiece2 = null;
                }
                this.mSwapDataVector.removeAt(i);
            }

            else {
                ++i;
            }
        }
        for(var aRow = 0; aRow < thePiece.mRow; aRow++) {
            var aFallPiece = this.mBoard[this.mBoard.mIdxMult0 * (aRow) + thePiece.mCol];
            if(aFallPiece != null) {
                this.SetMoveCredit(aFallPiece, thePiece.mMoveCreditId);
            }
        }
        this.mNextColumnCredit[thePiece.mCol] = (Math.max(this.mNextColumnCredit[thePiece.mCol], thePiece.mMoveCreditId) | 0);
        this.mBoard[this.mBoard.mIdxMult0 * (thePiece.mRow) + thePiece.mCol] = null;
        thePiece.Dispose();
    },
    ClearAllPieces : function Game_Board$ClearAllPieces() {
        for(var aPieceIter = new Game.PieceIter(this); aPieceIter.Next();) {
            var aPiece = aPieceIter.GetPiece();
            if(aPiece != null) {
                this.mBoard[this.mBoard.mIdxMult0 * (aPieceIter.GetRow()) + aPieceIter.GetCol()] = null;
                aPiece.Dispose();
                aPiece = null;
            }
        }
        this.mSwapDataVector = [];
    },
    AddToPieceMap : function Game_Board$AddToPieceMap(theId, thePiece) {
        JS_Assert(this.mPieceMap[theId] == null);
        this.mPieceMap[theId] = thePiece;
    },
    RemoveFromPieceMap : function Game_Board$RemoveFromPieceMap(theId) {
        delete this.mPieceMap[theId];
    },
    IsPieceSwappingIncludeIgnored : function Game_Board$IsPieceSwappingIncludeIgnored(thePiece, includeIgnored) {
        return this.IsPieceSwappingEx(thePiece, includeIgnored, false);
    },
    IsPieceSwapping : function Game_Board$IsPieceSwapping(thePiece) {
        if(this.mSwapDataVector.length == 0) {
            return false;
        }
        return this.IsPieceSwappingEx(thePiece, false, false);
    },
    IsPieceSwappingEx : function Game_Board$IsPieceSwappingEx(thePiece, includeIgnored, onlyCheckForwardSwaps) {
        for(var i = 0; i < (this.mSwapDataVector.length | 0); i++) {
            if((!this.mSwapDataVector[i].mIgnore || includeIgnored) && ((this.mSwapDataVector[i].mForwardSwap && (this.mSwapDataVector[i].mHoldingSwap == 0)) || !onlyCheckForwardSwaps) && ((this.mSwapDataVector[i].mPiece1 == thePiece) || (this.mSwapDataVector[i].mPiece2 == thePiece))) {
                return true;
            }
        }
        return false;
    },
    IsPieceMatching : function Game_Board$IsPieceMatching(thePiece) {
        return thePiece.IsShrinking();
    },
    IsPieceStill : function Game_Board$IsPieceStill(thePiece) {
        return (thePiece.mFallVelocity == 0) && (!thePiece.mDestPct.IsDoingCurve()) && (this.GetRowY(thePiece.mRow) == thePiece.mY) && (!this.IsPieceMatching(thePiece)) && (!this.IsPieceSwapping(thePiece)) && (thePiece.mCanMatch || thePiece.IsFlagSet(Game.Piece.EFlag.DIG)) && (thePiece.mExplodeDelay == 0.0) && (thePiece.mDestPct.get_v() == 0.0) && (!thePiece.IsFlagSet(Game.Piece.EFlag.MYSTERY));
    },
    WillPieceBeStill : function Game_Board$WillPieceBeStill(thePiece) {
        return (!this.IsPieceMatching(thePiece)) && (!this.IsPieceSwappingEx(thePiece, false, true)) && (thePiece.mCanMatch) && (thePiece.mExplodeDelay == 0) && (thePiece.mDestPct.get_v() == 0) && (!thePiece.IsFlagSet(Game.Piece.EFlag.MYSTERY));
    },
    CanBakeShadow : function Game_Board$CanBakeShadow(thePiece) {
        return (!this.IsPieceSwapping(thePiece)) && (thePiece.mRotPct == 0.0) && (!thePiece.IsFlagSet(Game.Piece.EFlag.FLAME)) && (!thePiece.IsFlagSet(Game.Piece.EFlag.LASER)) && (!thePiece.IsFlagSet(Game.Piece.EFlag.POINT_MULTIPLIER) && (!thePiece.IsFlagSet(Game.Piece.EFlag.DETONATOR)) && (!thePiece.IsFlagSet(Game.Piece.EFlag.SCRAMBLE)));
    },
    IsBoardStill : function Game_Board$IsBoardStill() {
        if(this.mSettlingDelay != 0) {
            return false;
        }

        {
            var $srcArray9 = this.mBoard;
            for(var $enum9 = 0; $enum9 < $srcArray9.length; $enum9++) {
                var aPiece = $srcArray9[$enum9];
                if(aPiece != null && !aPiece.mIsPieceStill) {
                    return false;
                }
            }
        }
        if(this.HasSet()) {
            return false;
        }
        if(this.mLightningStorms.length != 0) {
            return false;
        }
        if(!this.mHasBoardSettled) {
            this.mHasBoardSettled = true;
            this.BoardSettled();
        }
        return true;
    },
    IsGameIdle : function Game_Board$IsGameIdle() {
        if(this.mSettlingDelay != 0) {
            return false;
        }

        {
            var $srcArray10 = this.mBoard;
            for(var $enum10 = 0; $enum10 < $srcArray10.length; $enum10++) {
                var aPiece = $srcArray10[$enum10];
                if(aPiece != null && !aPiece.mIsPieceStill && !this.IsPieceSwapping(aPiece)) {
                    return false;
                }
            }
        }
        if(this.HasSet()) {
            return false;
        }
        if(this.mLightningStorms.length != 0) {
            return false;
        }
        if(this.mScrambleDelayTicks != 0) {
            return false;
        }
        return true;
    },
    DoHypercubeColor : function Game_Board$DoHypercubeColor(thePiece, theColor) {
        if(theColor == Game.DM.EGemColor._INVALID) {
            this.AddToStatCred(Game.DM.EStat.HYPERCUBE_ANNIHILATION, 1, thePiece.mMoveCreditId);
        }
        this.AddToStatCred(Game.DM.EStat.HYPERCUBES_USED, 1, thePiece.mMoveCreditId);
        this.ComboProcess(theColor);
        thePiece.mDestructing = true;
        var aLightningStorm = new Game.LightningStorm(this, thePiece, Game.LightningStorm.EStormType.HYPERCUBE);
        aLightningStorm.mColor = theColor;
        this.mLightningStorms.push(aLightningStorm);
    },
    DoHypercube : function Game_Board$DoHypercube(thePiece, theSwappedPiece) {
        this.DoHypercubeColor(thePiece, theSwappedPiece.mColor);
        Game.SoundUtil.Play(Game.Resources['SOUND_ELECTRO_PATH']);
        var aLightningStorm = this.mLightningStorms[this.mLightningStorms.length - 1];
        aLightningStorm.AddLightning((thePiece.mX | 0) + ((Game.Board.GEM_WIDTH / 2) | 0), (thePiece.mY | 0) + ((Game.Board.GEM_HEIGHT / 2) | 0), (theSwappedPiece.mX | 0) + ((Game.Board.GEM_WIDTH / 2) | 0), (theSwappedPiece.mY | 0) + ((Game.Board.GEM_HEIGHT / 2) | 0));
    },
    ExamineBoard : function Game_Board$ExamineBoard() {
    },
    WantSpecialPiece : function Game_Board$WantSpecialPiece(thePieceVector) {
        return false;
    },
    DropSpecialPiece : function Game_Board$DropSpecialPiece(thePieceVector) {
        return false;
    },
    TryingDroppedPieces : function Game_Board$TryingDroppedPieces(thePieceVector, theTryCount) {
        return true;
    },
    PiecesDropped : function Game_Board$PiecesDropped(thePieceVector) {
        return true;
    },
    NumPiecesWithFlag : function Game_Board$NumPiecesWithFlag(theFlag) {
        var aNum = 0;

        {
            var $srcArray11 = this.mBoard;
            for(var $enum11 = 0; $enum11 < $srcArray11.length; $enum11++) {
                var aPiece = $srcArray11[$enum11];
                if((aPiece != null) && aPiece.IsFlagSet(theFlag)) {
                    aNum++;
                }
            }
        }
        return aNum;
    },
    CanTimeUp : function Game_Board$CanTimeUp() {
        return this.mIsBoardStill;
    },
    GetTicksLeft : function Game_Board$GetTicksLeft() {
        var aTimeLimit = this.GetTimeLimit();
        if(aTimeLimit == 0) {
            return -1;
        }
        var anAmnesty = 250;
        var aTicksLeft = (Math.min(aTimeLimit * 60, Math.max(0, (aTimeLimit * 60) - Math.max(0, this.mGameTicks - anAmnesty))) | 0);
        return aTicksLeft;
    },
    GetLevelPct : function Game_Board$GetLevelPct() {
        var aLevelPoints = this.GetLevelPoints();
        var aLevelPct;
        var writeTicksLeft = (this.mUpdateCnt % 20) == 0;
        if(aLevelPoints != 0) {
            aLevelPct = Math.min(1.0, this.GetLevelPointsTotal() / aLevelPoints);
        } else {
            aLevelPct = 0.0;
        }
        return aLevelPct;
    },
    GetCountdownPct : function Game_Board$GetCountdownPct() {
        var aTimeLimit = this.GetTimeLimit();
        var aCountdownPct;
        var writeTicksLeft = (this.mUpdateCnt % 20) == 0;
        aCountdownPct = Math.max(0.0, this.GetTicksLeft() / (aTimeLimit * 60.0));
        this.CheckCountdownBar();
        var aTicksLeft = this.GetTicksLeft();
        var aTimeBetweenWarnings = 35 + ((aTicksLeft * 0.1) | 0);
        if((this.mUpdateCnt - this.mLastWarningTick >= aTimeBetweenWarnings) && (aTicksLeft > 0) && (this.WantWarningGlow())) {
            var aWarningStartTick = (this.GetTimeLimit() > 60) ? 1500 : 1000;
            Game.SoundUtil.Play(Game.Resources['SOUND_COUNTDOWN_WARNING']);
            this.mLastWarningTick = this.mUpdateCnt;
        }
        if((aTicksLeft == 30 * 60) && (this.mLevelCompleteCount == 0)) {
            if(this.mDoThirtySecondVoice) {
                writeTicksLeft = true;
                this.mDoThirtySecondVoice = false;
                Game.SoundUtil.Play(Game.Resources['SOUND_VOICE_THIRTYSECONDS']);
            }
        }

        else {
            this.mDoThirtySecondVoice = true;
        }
        return aCountdownPct;
    },
    SwapSucceeded : function Game_Board$SwapSucceeded(theSwapData) {
    },
    SwapFailed : function Game_Board$SwapFailed(theSwapData) {
    },
    IsSwapLegal : function Game_Board$IsSwapLegal(theSelected, theSwappedRow, theSwappedCol) {
        if(this.mLightningStorms.length != 0) {
            return false;
        }
        if(!theSelected.mCanSwap) {
            return false;
        }
        var aSwappedPiece = this.GetPieceAtRowCol(theSwappedRow, theSwappedCol);
        if((!this.IsPieceStill(theSelected)) || (theSelected.IsFlagSet(Game.Piece.EFlag.DOOM))) {
            return false;
        }
        if(aSwappedPiece != null) {
            if(!aSwappedPiece.mCanSwap || !this.IsPieceStill(aSwappedPiece) || aSwappedPiece.IsFlagSet(Game.Piece.EFlag.DOOM)) {
                return false;
            }
        }
        if(this.mDeferredTutorialVector.length > 0) {
            return false;
        }
        var aDirX = theSwappedCol - theSelected.mCol;
        var aDirY = theSwappedRow - theSelected.mRow;
        if(((theSelected.IsButton()) && (Math.abs(aDirX) + Math.abs(aDirY) != 0)) || ((!theSelected.IsButton()) && (Math.abs(aDirX) + Math.abs(aDirY) != 1))) {
            return false;
        }
        return true;
    },
    QueueSwap : function Game_Board$QueueSwap(theSelected, theSwappedRow, theSwappedCol, forceSwap, playerSwapped, destroyTarget, dragSwap) {
        if(forceSwap === undefined) {
            forceSwap = false;
        }
        if(playerSwapped === undefined) {
            playerSwapped = true;
        }
        if(destroyTarget === undefined) {
            destroyTarget = false;
        }
        if(dragSwap === undefined) {
            dragSwap = false;
        }
        if(!this.IsSwapLegal(theSelected, theSwappedRow, theSwappedCol)) {
            return false;
        }
        var aSwappedPiece = this.GetPieceAtRowCol(theSwappedRow, theSwappedCol);
        var aQueuedMove = new Game.QueuedMove();
        aQueuedMove.mUpdateCnt = this.mUpdateCnt;
        aQueuedMove.mSelectedId = theSelected.mId;
        aQueuedMove.mSwappedRow = theSwappedRow;
        aQueuedMove.mSwappedCol = theSwappedCol;
        aQueuedMove.mForceSwap = forceSwap;
        aQueuedMove.mPlayerSwapped = playerSwapped;
        aQueuedMove.mDestroyTarget = destroyTarget;
        aQueuedMove.mDragSwap = dragSwap;
        this.mQueuedMoveVector.push(aQueuedMove);
        return true;
    },
    TrySwap : function Game_Board$TrySwap(theSelected, theSwappedRow, theSwappedCol, isDragSwap) {
        return this.TrySwapEx(theSelected, theSwappedRow, theSwappedCol, false, true, false, isDragSwap);
    },
    TrySwapEx : function Game_Board$TrySwapEx(theSelected, theSwappedRow, theSwappedCol, forceSwap, playerSwapped, destroyTarget, isDragSwap) {
        if(theSelected == null) {
            return false;
        }
        if(theSwappedRow < 0 || theSwappedRow >= this.mRowCount || theSwappedCol < 0 || theSwappedCol >= this.mColCount) {
            return false;
        }
        if(!this.IsSwapLegal(theSelected, theSwappedRow, theSwappedCol)) {
            return false;
        }
        if(playerSwapped) {
            this.mLastPlayerSwapColor = theSelected.mColor;
        }
        this.mLastMoveTicks = 0;
        var aDirX = theSwappedCol - theSelected.mCol;
        var aDirY = theSwappedRow - theSelected.mRow;
        if(playerSwapped) {
            theSelected.mSelected = false;
            theSelected.mSelectorAlpha.SetCurve('b+0,1,0.066667,1,~###         ~#@yd');
        }
        var aCurMoveCreditId = this.mCurMoveCreditId;
        this.PushMoveData(theSelected, theSwappedRow, theSwappedCol, isDragSwap);
        var aSwappedPiece = this.GetPieceAtRowCol(theSwappedRow, theSwappedCol);
        theSelected.mMoveCreditId = aCurMoveCreditId;
        if(aSwappedPiece != null) {
            aSwappedPiece.mMoveCreditId = aCurMoveCreditId;
        }
        if(theSelected.IsFlagSet(Game.Piece.EFlag.HYPERCUBE)) {
            if(aSwappedPiece != null) {
                if(!aSwappedPiece.mCanDestroy) {
                    return false;
                }
                this.mWantHintTicks = 0;
                this.DecrementAllCounterGems(false);
                this.DoHypercube(theSelected, aSwappedPiece);
                return true;
            }
        }
        if(aSwappedPiece != null && aSwappedPiece.IsFlagSet(Game.Piece.EFlag.HYPERCUBE)) {
            if(aSwappedPiece != null) {
                if(!theSelected.mCanDestroy) {
                    return false;
                }
                this.mWantHintTicks = 0;
                this.DecrementAllCounterGems(false);
                this.DoHypercube(aSwappedPiece, theSelected);
                return true;
            }
        }
        if(playerSwapped) {
            Game.SoundUtil.Play(Game.Resources['SOUND_START_ROTATE']);
        }
        theSelected.mLastActiveTick = this.mUpdateCnt;
        if(aSwappedPiece != null) {
            aSwappedPiece.mLastActiveTick = this.mUpdateCnt - 1;
        }
        if(theSelected != null) {
            theSelected.mIsPieceStill = false;
        }
        if(aSwappedPiece != null) {
            aSwappedPiece.mIsPieceStill = false;
        }
        this.mIsBoardStill = false;
        var aSwapData = new Game.SwapData();
        aSwapData.mPiece1 = theSelected;
        aSwapData.mPiece2 = aSwappedPiece;
        aSwapData.mSwapDir = new GameFramework.geom.TIntPoint(theSwappedCol - theSelected.mCol, theSwappedRow - theSelected.mRow);
        aSwapData.mSwapPct.SetCurve('b+-1,1,0.033333,1,~x:*    }Ppt+     $#LPR');
        aSwapData.mGemScale.SetCurve('b+-0.075,0.075,0.033333,1,P&X%     \'~###    zPL=I');
        aSwapData.mSwapPct.mIncRate *= this.GetSwapSpeed();
        aSwapData.mGemScale.mIncRate *= this.GetSwapSpeed();
        aSwapData.mForwardSwap = true;
        aSwapData.mHoldingSwap = 0;
        aSwapData.mIgnore = false;
        aSwapData.mForceSwap = forceSwap;
        aSwapData.mDestroyTarget = destroyTarget;
        aSwapData.mDragSwap = isDragSwap;
        this.mSwapDataVector.push(aSwapData);
        return true;
    },
    PushMoveData : function Game_Board$PushMoveData(theSelected, theSwappedRow, theSwappedCol, isDragSwap) {
        var aMoveData = new Game.MoveData();
        aMoveData.mUpdateCnt = this.mUpdateCnt;
        aMoveData.mSelectedId = theSelected.mId;
        aMoveData.mSwappedRow = theSwappedRow;
        aMoveData.mSwappedCol = theSwappedCol;
        aMoveData.mMoveCreditId = this.mCurMoveCreditId++;
        aMoveData.mStats = [];
        ;
        for(var i = 0; i < (Game.DM.EStat._COUNT | 0); i++) {
            aMoveData.mStats.push(0);
        }
        this.mMoveDataVector.push(aMoveData);
    },
    SwapPieceLocations : function Game_Board$SwapPieceLocations(thePieceA, thePieceB, theIncludeXY) {
        var tmp = thePieceA.mRow;
        thePieceA.mRow = thePieceB.mRow;
        thePieceB.mRow = tmp;
        tmp = thePieceA.mCol;
        thePieceA.mCol = thePieceB.mCol;
        thePieceB.mCol = tmp;
        var tmpP = this.mBoard[this.mBoard.mIdxMult0 * (thePieceA.mRow) + thePieceA.mCol];
        this.mBoard[this.mBoard.mIdxMult0 * (thePieceA.mRow) + thePieceA.mCol] = this.mBoard[this.mBoard.mIdxMult0 * (thePieceB.mRow) + thePieceB.mCol];
        this.mBoard[this.mBoard.mIdxMult0 * (thePieceB.mRow) + thePieceB.mCol] = tmpP;
        if(theIncludeXY) {
            var tmpF = thePieceA.mX;
            thePieceA.mX = thePieceB.mX;
            thePieceB.mX = tmpF;
            tmpF = thePieceA.mY;
            thePieceA.mY = thePieceB.mY;
            thePieceB.mY = tmpF;
        }
    },
    TrySwapAndRecordForce : function Game_Board$TrySwapAndRecordForce(theSelected, theSwappedRow, theSwappedCol, forceSwap, dragSwap) {
        return this.TrySwapAndRecordEx(theSelected, theSwappedRow, theSwappedCol, forceSwap, true, dragSwap);
    },
    TrySwapAndRecord : function Game_Board$TrySwapAndRecord(theSelected, theSwappedRow, theSwappedCol, dragSwap) {
        return this.TrySwapAndRecordEx(theSelected, theSwappedRow, theSwappedCol, false, true, dragSwap);
    },
    TrySwapAndRecordEx : function Game_Board$TrySwapAndRecordEx(theSelected, theSwappedRow, theSwappedCol, forceSwap, playerSwapped, dragSwap) {
        if(this.TrySwapEx(theSelected, theSwappedRow, theSwappedCol, forceSwap, playerSwapped, false, dragSwap)) {
            return true;
        }
        return false;
    },
    PieceDestroyedInSwap : function Game_Board$PieceDestroyedInSwap(thePiece) {
    },
    BumpColumn : function Game_Board$BumpColumn(thePiece, thePower) {
        var aNewVel = 0.0;
        for(var aRow = 7; aRow >= 0; aRow--) {
            var aLastCheckVal = 0.0;
            for(var aCol = thePiece.mCol; aCol <= thePiece.mCol; aCol++) {
                var aPiece = this.GetPieceAtRowCol(aRow, aCol);
                if(aPiece != null && aPiece.mY < thePiece.mY) {
                    var aDist = Math.abs(aPiece.mY - thePiece.mY);
                    var aRatio = Math.min(1.0, aDist / Game.Board.BumpColumn_MAX_DIST);
                    aRatio = 1.0 - aRatio;
                    aLastCheckVal = thePower * -3.75 * aRatio;
                    if(aLastCheckVal > -0.9 && aLastCheckVal < 0) {
                        aLastCheckVal = 0;
                    }
                    if(aNewVel == 0) {
                        aNewVel = aLastCheckVal;
                    }
                    aPiece.mFallVelocity = Math.min(aPiece.mFallVelocity, aNewVel);
                    aPiece.mIsPieceStill = false;
                }
                this.mBumpVelocities[aCol] = Math.max(aNewVel, aLastCheckVal);
            }
        }
    },
    BumpColumns : function Game_Board$BumpColumns(theX, theY, thePower) {
        for(var aCol = 0; aCol < this.mColCount; aCol++) {
            var aNewVel = 0.0;
            var aLastCheckVal = 0.0;
            var aFirstBumpedPiece = null;
            for(var aRow = this.mRowCount - 1; aRow >= -1; aRow--) {
                var aPiece = this.GetPieceAtRowCol(aRow, aCol);
                var aDX;
                var aDY;
                var setPiece = false;
                if(aPiece != null && aPiece.GetScreenY() + ((Game.Board.GEM_HEIGHT / 2) | 0) < theY) {
                    aDX = (aPiece.GetScreenX() + ((Game.Board.GEM_WIDTH / 2) | 0)) - theX;
                    aDY = (aPiece.GetScreenY() + ((Game.Board.GEM_HEIGHT / 2) | 0)) - theY;
                    setPiece = true;
                } else if(aRow == -1) {
                    aDX = (this.GetColScreenX(aCol) + ((Game.Board.GEM_WIDTH / 2) | 0)) - theX;
                    aDY = (this.GetRowScreenY(aRow) + ((Game.Board.GEM_HEIGHT / 2) | 0)) - theY;
                } else {
                    continue;
                }
                var anAngle = Math.atan2(aDY, aDX);
                var aGemDist = Math.sqrt(aDX * aDX + aDY * aDY) / Game.Board.GEM_WIDTH;
                var aForce = (thePower / ((Math.max(0, aGemDist - 1.0)) + 1.0)) * Math.abs(Math.sin(anAngle));
                aLastCheckVal = aForce * -5.25;
                if(aLastCheckVal > -0.9 && aLastCheckVal < 0) {
                    aLastCheckVal = 0;
                }
                if(setPiece) {
                    if(aNewVel == 0) {
                        aNewVel = aLastCheckVal;
                    }
                    aPiece.mFallVelocity = Math.min(aPiece.mFallVelocity, aNewVel);
                    aPiece.mIsPieceStill = false;
                    if(this.IsPieceSwapping(aPiece)) {
                        aFirstBumpedPiece = null;
                        for(var aChangeRow = aRow; aChangeRow < this.mRowCount; aChangeRow++) {
                            var aChangePiece = this.mBoard[this.mBoard.mIdxMult0 * (aChangeRow) + aCol];
                            if(aChangePiece != null) {
                                aChangePiece.mFallVelocity = Math.max(0, aChangePiece.mFallVelocity);
                            }
                        }
                    }

                    else {
                        if(aFirstBumpedPiece == null) {
                            aFirstBumpedPiece = aPiece;
                        }
                    }
                }
            }
            this.mBumpVelocities[aCol] = Math.min(aNewVel, aLastCheckVal);
        }
    },
    CelDestroyedBySpecial : function Game_Board$CelDestroyedBySpecial(theCol, theRow) {
    },
    UpdateLightning : function Game_Board$UpdateLightning() {
        var aCandidatePieces = [];
        var wantsCalm = this.WantsCalmEffects();
        var doDelete;
        var aTotalLightningPieces = 0;

        {
            var $srcArray12 = this.mBoard;
            for(var $enum12 = 0; $enum12 < $srcArray12.length; $enum12++) {
                var aPiece = $srcArray12[$enum12];
                if(aPiece != null && aPiece.mIsElectrocuting) {
                    aTotalLightningPieces++;
                }
            }
        }
        var aWantDelay = 0;
        this.mBoardDarken = Math.max(this.mBoardDarken - 0.02 * 1.67, 0.0);
        if(this.mLightningStorms.length > 0) {
            this.mBoardDarken = Math.min(this.mBoardDarken + 0.05 * 1.67, 1.0);
        }
        for(var aStormIdx = 0; aStormIdx < (this.mLightningStorms.length | 0); aStormIdx++) {
            var anInfo = this.mLightningStorms[aStormIdx];
            anInfo.Update();
            doDelete = false;
            switch(anInfo.mStormType) {
                case Game.LightningStorm.EStormType.HORZ:
                case Game.LightningStorm.EStormType.VERT:
                case Game.LightningStorm.EStormType.BOTH:
                case Game.LightningStorm.EStormType.SHORT:
                case Game.LightningStorm.EStormType.STAR:
                case Game.LightningStorm.EStormType.SCREEN:
                case Game.LightningStorm.EStormType.FLAMING:

                {
                    var aSpread = (anInfo.mStormType == Game.LightningStorm.EStormType.FLAMING) ? 1 : 0;
                    var stormover = true;
                    for(var i = 1; i < anInfo.mPieceIds.length;) {
                        var aSubPiece = this.GetPieceById(anInfo.mPieceIds[i]);
                        if(aSubPiece != null) {
                            if(aSubPiece.mCanDestroy) {
                                if(wantsCalm) {
                                    aSubPiece.mElectrocutePercent += 0.01 * 1.67;
                                } else {
                                    aSubPiece.mElectrocutePercent += 0.015 * 1.67;
                                }
                                if(aSubPiece.mElectrocutePercent >= 1.0) {
                                    var aSrcPiece = this.GetPieceById(anInfo.mElectrocuterId);
                                    if(!aSubPiece.mDestructing) {
                                        this.SetMoveCredit(aSubPiece, anInfo.mMoveCreditId);
                                        aSubPiece.mMatchId = anInfo.mMatchId;
                                        aSubPiece.mExplodeSourceId = anInfo.mElectrocuterId;
                                        aSubPiece.mExplodeSourceFlags |= anInfo.mStartPieceFlags;
                                        if(aSubPiece.IsFlagSet(Game.Piece.EFlag.POINT_MULTIPLIER)) {
                                            aSubPiece.mExplodeDelay = 3;
                                        } else if((!this.TriggerSpecialEx(aSubPiece, aSrcPiece)) && (!aSubPiece.mDestructing)) {
                                            aSubPiece.mExplodeDelay = 1;
                                        }
                                        aSubPiece.mIsPieceStill = false;
                                    }
                                    anInfo.mPieceIds.removeAt(i);
                                    continue;
                                }

                                else {
                                    stormover = false;
                                }
                            }
                        }
                        ++i;
                    }
                    for(var i_2 = 0; i_2 < anInfo.mElectrocutedCelVector.length;) {
                        var anElectrocuteCel = anInfo.mElectrocutedCelVector[i_2];
                        if(wantsCalm) {
                            anElectrocuteCel.mElectrocutePercent += 0.01 * 1.67;
                        } else {
                            anElectrocuteCel.mElectrocutePercent += 0.015 * 1.67;
                        }
                        if(anElectrocuteCel.mElectrocutePercent >= 1.0) {
                            this.CelDestroyedBySpecial(anElectrocuteCel.mCol, anElectrocuteCel.mRow);
                            anInfo.mElectrocutedCelVector.removeAt(i_2);
                            continue;
                        }
                        ++i_2;
                    }
                    anInfo.mTimer -= 0.01 * 1.67;
                    if(anInfo.mTimer <= 0) {
                        if(wantsCalm) {
                            anInfo.mTimer = 0.15 * 1.67;
                        } else {
                            anInfo.mTimer = 0.1 * 1.67;
                        }
                        var offsets = Array.Create2D(8, 2, 0, 1, 0, -1, 0, 0, 1, 0, -1, -1, -1, -1, 1, 1, -1, 1, 1);
                        var anOffsetStart = 0;
                        var anOffsetEnd = 4;
                        if(anInfo.mStormType == Game.LightningStorm.EStormType.HORZ) {
                            anOffsetEnd = 2;
                        }
                        if(anInfo.mStormType == Game.LightningStorm.EStormType.VERT) {
                            anOffsetStart = 2;
                        }
                        if(anInfo.mStormType == Game.LightningStorm.EStormType.STAR) {
                            anOffsetEnd = 8;
                        }
                        if(anInfo.mStormType == Game.LightningStorm.EStormType.SCREEN) {
                            var aDist = (Math.min(anInfo.mDist, 7) | 0);
                            var anIdx = 0;
                            for(var aHorz = -aDist; aHorz <= aDist; aHorz++) {
                                offsets[offsets.mIdxMult0 * (anIdx) + 0] = aHorz;
                                offsets[offsets.mIdxMult0 * (anIdx++) + 1] = -aDist;
                                offsets[offsets.mIdxMult0 * (anIdx) + 0] = aHorz;
                                offsets[offsets.mIdxMult0 * (anIdx++) + 1] = aDist;
                            }
                            for(var aVert = -aDist + 1; aVert <= aDist - 1; aVert++) {
                                offsets[offsets.mIdxMult0 * (anIdx) + 0] = -aDist;
                                offsets[offsets.mIdxMult0 * (anIdx++) + 1] = aVert;
                                offsets[offsets.mIdxMult0 * (anIdx) + 0] = aDist;
                                offsets[offsets.mIdxMult0 * (anIdx++) + 1] = aVert;
                            }
                            anOffsetEnd = anIdx;
                        }
                        for(var anOffset = anOffsetStart; anOffset < anOffsetEnd; anOffset++) {
                            for(var aSubOffset = -aSpread; aSubOffset <= aSpread; aSubOffset++) {
                                var aDist_2 = (anInfo.mStormType == Game.LightningStorm.EStormType.SCREEN) ? 1 : anInfo.mDist;
                                var aSubX = anInfo.mCX + (aDist_2 * offsets[offsets.mIdxMult0 * (anOffset) + 0] + offsets[offsets.mIdxMult0 * (anOffset) + 1] * aSubOffset) * Game.Board.GEM_WIDTH;
                                var aSubY = anInfo.mCY + (aDist_2 * offsets[offsets.mIdxMult0 * (anOffset) + 1] + offsets[offsets.mIdxMult0 * (anOffset) + 0] * aSubOffset) * Game.Board.GEM_HEIGHT;
                                var aSubPiece_2 = this.GetPieceAtXY(aSubX, aSubY);
                                if(aDist_2 > anInfo.mStormLength) {
                                    continue;
                                }
                                if(aSubX < 0 || aSubX >= this.GetColX(this.mColCount)) {
                                    continue;
                                }
                                if(aSubY < 0 || aSubY >= this.GetRowY(this.mRowCount)) {
                                    continue;
                                }
                                if((aSubX != anInfo.mCX) || (aSubY != anInfo.mCY)) {
                                    var anElectrocutedCel = new Game.ElectrocutedCel();
                                    anElectrocutedCel.mCol = this.GetColAt(aSubX);
                                    anElectrocutedCel.mRow = this.GetRowAt(aSubY);
                                    anElectrocutedCel.mElectrocutePercent = 0.01;
                                    anInfo.mElectrocutedCelVector.push(anElectrocutedCel);
                                }
                                if(aSubPiece_2 != null && !aSubPiece_2.mDestructing) {
                                    var found = false;
                                    for(var j = 0; j < this.mLightningStorms.length; j++) {
                                        for(var i_3 = 0; i_3 < this.mLightningStorms[j].mPieceIds.length; i_3++) {
                                            if(aSubPiece_2.mId == this.mLightningStorms[j].mPieceIds[i_3]) {
                                                found = true;
                                            }
                                        }
                                    }
                                    if(found) {
                                        continue;
                                    }
                                    stormover = false;
                                    if(aSubPiece_2.mElectrocutePercent == 0) {
                                        anInfo.mPieceIds.push(aSubPiece_2.mId);
                                        aSubPiece_2.mElectrocutePercent = 0.01 * 1.67;
                                        if((!GameFramework.BaseApp.mApp.get_Is3D()) || (Game.BejApp.mBejApp.mIsSlow)) {
                                            for(var i_4 = 0; i_4 < 5; i_4++) {
                                                var anEffect = this.mPostFXManager.AllocEffect(Game.Effect.EFxType.SPARKLE_SHARD);
                                                anEffect.mX = aSubX + this.GetBoardX() + GameFramework.Utils.GetRandFloat() * Math.abs(offsets[offsets.mIdxMult0 * (anOffset) + 0]) * Game.Board.GEM_WIDTH / 3;
                                                anEffect.mY = aSubY + this.GetBoardY() + GameFramework.Utils.GetRandFloat() * Math.abs(offsets[offsets.mIdxMult0 * (anOffset) + 1]) * Game.Board.GEM_HEIGHT / 3;
                                                anEffect.mDX = ((GameFramework.Utils.GetRandFloat() * (Math.abs(offsets[offsets.mIdxMult0 * (anOffset) + 1]) + 0.5) * 10) | 0) * 1.67;
                                                anEffect.mDY = ((GameFramework.Utils.GetRandFloat() * (Math.abs(offsets[offsets.mIdxMult0 * (anOffset) + 0]) + 0.5) * 10) | 0) * 1.67;
                                                this.mPostFXManager.AddEffect(anEffect);
                                            }
                                        }

                                        else {
                                            for(var i_5 = 0; i_5 < 20; i_5++) {
                                                var anEffect_2 = this.mPostFXManager.AllocEffect(Game.Effect.EFxType.SPARKLE_SHARD);
                                                anEffect_2.mX = aSubX + this.GetBoardX() + GameFramework.Utils.GetRandFloat() * Math.abs(offsets[offsets.mIdxMult0 * (anOffset) + 0]) * Game.Board.GEM_WIDTH / 3;
                                                anEffect_2.mY = aSubY + this.GetBoardY() + GameFramework.Utils.GetRandFloat() * Math.abs(offsets[offsets.mIdxMult0 * (anOffset) + 1]) * Game.Board.GEM_HEIGHT / 3;
                                                anEffect_2.mDX = ((GameFramework.Utils.GetRandFloat() * (Math.abs(offsets[offsets.mIdxMult0 * (anOffset) + 1]) + 0.5) * 10) | 0) * 1.67;
                                                anEffect_2.mDY = ((GameFramework.Utils.GetRandFloat() * (Math.abs(offsets[offsets.mIdxMult0 * (anOffset) + 0]) + 0.5) * 10) | 0) * 1.67;
                                                this.mPostFXManager.AddEffect(anEffect_2);
                                            }
                                        }
                                    }
                                    aSubPiece_2.mShakeScale = Math.min(1.0, Math.max(aSubPiece_2.mShakeScale, aSubPiece_2.mElectrocutePercent));
                                }
                            }
                        }
                        if(anInfo.mDist == 0) {
                            Game.SoundUtil.Play(Game.Resources['SOUND_ELECTRO_EXPLODE']);
                        }
                        anInfo.mDist++;
                        var aMax = anInfo.mStormLength;
                        if(anInfo.mDist < aMax) {
                            stormover = false;
                        }
                        if(stormover) {
                            this.mComboBonusSlowdownPct = 1.0;
                            var aPiece_2 = this.GetPieceById(anInfo.mPieceIds[0]);
                            if(aPiece_2 != null) {
                                aPiece_2.ClearFlag(Game.Piece.EFlag.LASER);
                                if(aPiece_2.IsFlagSet(Game.Piece.EFlag.HYPERCUBE)) {
                                    this.TriggerSpecialEx(aPiece_2, aPiece_2);
                                }

                                else {
                                    this.CelDestroyedBySpecial(aPiece_2.mCol, aPiece_2.mRow);
                                    aPiece_2.mExplodeDelay = 1;
                                    aPiece_2.mExplodeSourceId = aPiece_2.mId;
                                    aPiece_2.mExplodeSourceFlags |= aPiece_2.mFlags;
                                    aPiece_2.mIsPieceStill = false;
                                }
                            }
                            anInfo.mHoldDelay -= 0.25 * 1.67;

                            {
                                var $srcArray13 = this.mBoard;
                                for(var $enum13 = 0; $enum13 < $srcArray13.length; $enum13++) {
                                    var aFallPiece = $srcArray13[$enum13];
                                    if(aFallPiece != null) {
                                        aFallPiece.mFallVelocity = 0.0;
                                    }
                                }
                            }
                            if(anInfo.mHoldDelay <= 0) {
                                doDelete = true;
                            }
                        }
                    }
                }

                    break;
            }
            if((anInfo.mDoneDelay > 0) && (--anInfo.mDoneDelay == 0)) {
                doDelete = true;
            }
            if(doDelete) {
                this.mLightningStorms.removeAt(aStormIdx);
                if((this.mLightningStorms.length == 0)) {
                    this.FillInBlanks();
                }
                aStormIdx--;
            }

            else {
                if(anInfo.mUpdateCnt < aWantDelay) {
                    break;
                }
                aWantDelay += 15;
            }
        }
    },
    FindStormIdxFor : function Game_Board$FindStormIdxFor(thePiece) {
        for(var aLightningNum = 0; aLightningNum < (this.mLightningStorms.length | 0); aLightningNum++) {
            var aLightning = this.mLightningStorms[aLightningNum];
            if(aLightning.mElectrocuterId == thePiece.mId) {
                return aLightningNum;
            }
        }
        return -1;
    },
    DrawLightning : function Game_Board$DrawLightning(g) {
        for(var aLightningNum = 0; aLightningNum < (this.mLightningStorms.length | 0); aLightningNum++) {
            var aLightning = this.mLightningStorms[aLightningNum];
            aLightning.Draw(g);
        }
    },
    ExplodeAtHelper : function Game_Board$ExplodeAtHelper(theX, theY) {
        var aXCenter = theX;
        var aYCenter = theY;
        var aCenterPiece = this.GetPieceAtScreenXY(theX, theY);
        if(aCenterPiece != null) {
            aXCenter = (aCenterPiece.GetScreenX() | 0) + ((Game.Board.GEM_WIDTH / 2) | 0);
            aYCenter = (aCenterPiece.GetScreenY() | 0) + ((Game.Board.GEM_HEIGHT / 2) | 0);
        }
        this.gExplodePoints[this.gExplodePoints.mIdxMult0 * (this.gExplodeCount) + 0] = aXCenter;
        this.gExplodePoints[this.gExplodePoints.mIdxMult0 * (this.gExplodeCount) + 1] = aYCenter;
        this.gExplodeCount++;
        {
            var anEffect = this.mPostFXManager.AllocEffect(Game.Effect.EFxType.LIGHT);
            anEffect.mFlags = (Game.Effect.EFlag.ALPHA_FADEINOUT | 0);
            anEffect.mX = aXCenter;
            anEffect.mY = aYCenter;
            anEffect.mZ = 0.04;
            anEffect.mValue[0] = 7000.0;
            anEffect.mValue[1] = -5000.0;
            anEffect.mValue[2] = 1.0;
            anEffect.mAlpha = 0.0;
            anEffect.mDAlpha = 0.1 * 1.67;
            anEffect.mScale = 3.0;
            this.mPostFXManager.AddEffect(anEffect);
        }
        var aSmCheckPositions = Array.Create2D(9, 2, 0, -1, -1, 0, -1, 1, -1, -1, 0, 1, 0, -1, 1, 0, 1, 1, 1, 0, 0);
        var aLgCheckPositions = Array.Create2D(13, 2, 0, -1, -1, 0, -1, 1, -1, -1, 0, 1, 0, -1, 1, 0, 1, 1, 1, 0, -2, -2, 0, 2, 0, 0, 2, 0, 0);
        var aCheckPositions = this.HasLargeExplosions() ? aLgCheckPositions : aSmCheckPositions;
        for(var anOffsets = 0; anOffsets < ((aCheckPositions.length / 2) | 0); anOffsets++) {
            var aX = theX + aCheckPositions[aCheckPositions.mIdxMult0 * (anOffsets) + 0] * Game.Board.GEM_WIDTH;
            var aY = theY + aCheckPositions[aCheckPositions.mIdxMult0 * (anOffsets) + 1] * Game.Board.GEM_HEIGHT;
            var celX;
            var celY;
            if(aCenterPiece != null) {
                celX = aCenterPiece.mCol + aCheckPositions[aCheckPositions.mIdxMult0 * (anOffsets) + 0];
                celY = aCenterPiece.mRow + aCheckPositions[aCheckPositions.mIdxMult0 * (anOffsets) + 1];
            }

            else {
                celX = this.GetColAt(theX - this.GetBoardX());
                celY = this.GetRowAt(theY - this.GetBoardY());
            }
            if(celX >= 0 && celX < this.mColCount && celY >= 0 && celY < this.mRowCount) {
                this.CelDestroyedBySpecial(celX, celY);
            }
            var aPiece = this.GetPieceAtScreenXY(aX, aY);
            if((aPiece != null) && ((aPiece.mExplodeDelay == 0) || (anOffsets == 8))) {
                var aPieceCenterX = (aPiece.GetScreenX() | 0) + ((Game.Board.GEM_WIDTH / 2) | 0);
                var aPieceCenterY = (aPiece.GetScreenY() | 0) + ((Game.Board.GEM_HEIGHT / 2) | 0);
                var doChainReaction = false;
                var aDistVX = ((0.013 * (aX - theX)) | 0);
                var aDistVY = ((0.013 * (aY - theY)) | 0);
                if((aCheckPositions[aCheckPositions.mIdxMult0 * (anOffsets) + 0] != 0) || (aCheckPositions[aCheckPositions.mIdxMult0 * (anOffsets) + 1] != 0)) {
                    if((GameFramework.BaseApp.mApp.get_Is3D()) && (!Game.BejApp.mBejApp.mIsSlow)) {
                        if(this.WantsCalmEffects()) {
                            for(var i = 0; i < 14; i++) {
                                var anEffect_2 = this.mPostFXManager.AllocEffect(Game.Effect.EFxType.SPARKLE_SHARD);
                                var anAngle = GameFramework.Utils.GetRandFloat() * Game.MathUtil.PI;
                                var aSpeed = (0.0 + (2.0 * Math.abs(GameFramework.Utils.GetRandFloat())));
                                anEffect_2.mDX = (aSpeed * Math.cos(anAngle) + aDistVX) * 1.67;
                                anEffect_2.mDY = (aSpeed * Math.sin(anAngle) + aDistVY) * 1.67;
                                anEffect_2.mDX *= 2.5 * Math.abs(GameFramework.Utils.GetRandFloat()) * 1.67;
                                anEffect_2.mDY *= 2.5 * Math.abs(GameFramework.Utils.GetRandFloat()) * 1.67;
                                var aRatio = Math.abs(GameFramework.Utils.GetRandFloat());
                                aRatio *= aRatio;
                                anEffect_2.mX = aRatio * aXCenter + (1.0 - aRatio) * aPieceCenterX + Math.cos(anAngle) * 64.0 * Math.abs(GameFramework.Utils.GetRandFloat());
                                anEffect_2.mY = aRatio * aYCenter + (1.0 - aRatio) * aPieceCenterY + Math.sin(anAngle) * 64.0 * Math.abs(GameFramework.Utils.GetRandFloat());
                                anEffect_2.mColor = GameFramework.gfx.Color.WHITE_RGB;
                                anEffect_2.mIsAdditive = false;
                                anEffect_2.mDScale = 0.015 * 1.67;
                                anEffect_2.mScale = 0.1 + Math.abs(GameFramework.Utils.GetRandFloat()) * 1.0;
                                this.mPostFXManager.AddEffect(anEffect_2);
                            }
                        }

                        else {
                            for(var i_2 = 0; i_2 < 14; i_2++) {
                                var anEffect_3 = this.mPostFXManager.AllocEffect(Game.Effect.EFxType.STEAM);
                                var anAngle_2 = GameFramework.Utils.GetRandFloat() * Game.MathUtil.PI;
                                var aSpeed_2 = (0.0 + (2.0 * Math.abs(GameFramework.Utils.GetRandFloat()))) * 1.67;
                                anEffect_3.mDX = (aSpeed_2 * Math.cos(anAngle_2) + aDistVX);
                                anEffect_3.mDY = (aSpeed_2 * Math.sin(anAngle_2) + aDistVY);
                                anEffect_3.mDX *= 2.5 * Math.abs(GameFramework.Utils.GetRandFloat());
                                anEffect_3.mDY *= 2.5 * Math.abs(GameFramework.Utils.GetRandFloat());
                                var aRatio_2 = Math.abs(GameFramework.Utils.GetRandFloat());
                                aRatio_2 *= aRatio_2;
                                anEffect_3.mX = aRatio_2 * aXCenter + (1.0 - aRatio_2) * aPieceCenterX + Math.cos(anAngle_2) * 64.0 * Math.abs(GameFramework.Utils.GetRandFloat());
                                anEffect_3.mY = aRatio_2 * aYCenter + (1.0 - aRatio_2) * aPieceCenterY + Math.sin(anAngle_2) * 64.0 * Math.abs(GameFramework.Utils.GetRandFloat());
                                anEffect_3.mColor = GameFramework.gfx.Color.RGBAToInt(255, 96, 32, 64);
                                anEffect_3.mIsAdditive = false;
                                anEffect_3.mDScale = 0.015 * 1.67;
                                anEffect_3.mScale = 0.1 + Math.abs(GameFramework.Utils.GetRandFloat()) * 1.0;
                                this.mPostFXManager.AddEffect(anEffect_3);
                            }
                        }
                        for(var i_3 = 0; i_3 < 25; i_3++) {
                            var anEffect_4 = this.mPostFXManager.AllocEffect(Game.Effect.EFxType.GEM_SHARD);
                            anEffect_4.mColor = Game.DM.gGemColors[(aPiece.mColor | 0) + 1];
                            var aDist = i_3 * (((i_3 + 120) / 120.0) | 0);
                            var aRot = i_3 * 0.503 + (Game.Util.Rand() % 100) / 800.0;
                            var aSpeed_3 = 1.2 + Math.abs(GameFramework.Utils.GetRandFloat()) * 1.2;
                            anEffect_4.mDX = Math.cos(aRot) * aSpeed_3 + aDistVX * 1.67;
                            anEffect_4.mDY = Math.sin(aRot) * aSpeed_3 + -2.0 + aDistVY * 1.67;
                            if((aDistVX != 0) || (aDistVY != 0)) {
                                aRot = GameFramework.Utils.GetRandFloat() * 3.14159;
                                aDist = ((GameFramework.Utils.GetRandFloat() * 48.0) | 0);
                                anEffect_4.mX = aPieceCenterX + ((1.0 * aDist * Math.cos(aRot)) | 0);
                                anEffect_4.mY = aPieceCenterY + ((1.0 * aDist * Math.sin(aRot)) | 0);
                                aRot = Math.atan2(anEffect_4.mY - aYCenter, anEffect_4.mX - aXCenter) + GameFramework.Utils.GetRandFloat() * 0.3;
                                aSpeed_3 = 3.5 + Math.abs(GameFramework.Utils.GetRandFloat()) * 1.0;
                                anEffect_4.mDX = (Math.cos(aRot) * aSpeed_3) * 1.67;
                                anEffect_4.mDY = (Math.sin(aRot) * aSpeed_3 + -2.0) * 1.67;
                                anEffect_4.mDecel = 0.965 + GameFramework.Utils.GetRandFloat() * 0.005;
                            }

                            else {
                                anEffect_4.mX = aPieceCenterX + ((1.2 * aDist * anEffect_4.mDX) | 0) + 14.0;
                                anEffect_4.mY = aPieceCenterY + ((1.2 * aDist * anEffect_4.mDY) | 0) + 10.0;
                            }
                            anEffect_4.mAngle = aRot;
                            anEffect_4.mDAngle = 0.05 * GameFramework.Utils.GetRandFloat() * 1.67;
                            anEffect_4.mGravity = 0.06;
                            anEffect_4.mValue[0] = GameFramework.Utils.GetRandFloat() * Game.MathUtil.PI * 2;
                            anEffect_4.mValue[1] = GameFramework.Utils.GetRandFloat() * Game.MathUtil.PI * 2;
                            anEffect_4.mValue[2] = 0.045 * (3.0 * Math.abs(GameFramework.Utils.GetRandFloat()) + 1.0);
                            anEffect_4.mValue[3] = 0.045 * (3.0 * Math.abs(GameFramework.Utils.GetRandFloat()) + 1.0);
                            anEffect_4.mDAlpha = (-0.0025 * (2.0 * Math.abs(GameFramework.Utils.GetRandFloat()) + 4.0)) * 1.67;
                            this.mPostFXManager.AddEffect(anEffect_4);
                        }
                        for(var i_4 = 0; i_4 < 14; i_4++) {
                            var anEffect_5 = this.mPostFXManager.AllocEffect(Game.Effect.EFxType.STEAM);
                            var anAngle_3 = i_4 * Game.MathUtil.PI * 2.0 / 14.0;
                            var aSpeed_4 = (0.5 + (5.75 * Math.abs(GameFramework.Utils.GetRandFloat())));
                            anEffect_5.mDX = (aSpeed_4 * Math.cos(anAngle_3) + aDistVX) * 1.67;
                            anEffect_5.mDY = (aSpeed_4 * Math.sin(anAngle_3) + aDistVY) * 1.67;
                            anEffect_5.mX = aPieceCenterX + Math.cos(anAngle_3) * 25.0 * Math.abs(GameFramework.Utils.GetRandFloat());
                            anEffect_5.mY = aPieceCenterY + Math.sin(anAngle_3) * 25.0 * Math.abs(GameFramework.Utils.GetRandFloat());
                            anEffect_5.mIsAdditive = false;
                            anEffect_5.mScale = 0.5;
                            anEffect_5.mDScale = 0.005 * 1.67;
                            anEffect_5.mValue[1] *= 1.0 - Math.abs(GameFramework.Utils.GetRandFloat() * 0.5);
                            anEffect_5.mColor = GameFramework.gfx.Color.RGBToInt(128, 128, 128);
                            this.mPostFXManager.AddEffect(anEffect_5);
                        }
                    }

                    else {
                        for(var i_5 = 0; i_5 < 6; i_5++) {
                            var anEffect_6 = this.mPostFXManager.AllocEffect(Game.Effect.EFxType.STEAM);
                            var anAngle_4 = i_5 * Game.MathUtil.PI * 2.0 / 6.0;
                            var aSpeed_5 = (0.5 + (5.75 * Math.abs(GameFramework.Utils.GetRandFloat())));
                            anEffect_6.mDX = (aSpeed_5 * Math.cos(anAngle_4) + aDistVX) * 1.67;
                            anEffect_6.mDY = (aSpeed_5 * Math.sin(anAngle_4) + aDistVY) * 1.67;
                            anEffect_6.mX = aPieceCenterX + Math.cos(anAngle_4) * 20.0 * Math.abs(GameFramework.Utils.GetRandFloat());
                            anEffect_6.mY = aPieceCenterY + Math.sin(anAngle_4) * 20.0 * Math.abs(GameFramework.Utils.GetRandFloat());
                            anEffect_6.mIsAdditive = false;
                            anEffect_6.mScale = 1.0;
                            anEffect_6.mDScale = 0.01 * 1.67;
                            anEffect_6.mAlpha = 0.5;
                            anEffect_6.mValue[1] *= 1.0 - Math.abs(GameFramework.Utils.GetRandFloat() * 0.5);
                            anEffect_6.mColor = 0xffffffff;
                            this.mPostFXManager.AddEffect(anEffect_6);
                        }
                    }
                    if(aPiece.IsFlagSet(Game.Piece.EFlag.FLAME)) {
                        doChainReaction = true;
                    }
                }
                var aLastType = aPiece.mColor;
                if(doChainReaction) {
                }
                if(aPiece.mImmunityCount == 0) {
                    if(aCenterPiece != null) {
                        this.SetMoveCredit(aPiece, aCenterPiece.mMoveCreditId);
                        if(aCenterPiece.mMatchId == -1) {
                            aCenterPiece.mMatchId = this.mCurMoveCreditId++;
                        }
                        aPiece.mMatchId = aCenterPiece.mMatchId;
                    }
                    if(doChainReaction) {
                        if(this.WantsCalmEffects()) {
                            aPiece.mExplodeDelay = 25;
                        } else {
                            aPiece.mExplodeDelay = 15;
                        }
                        aPiece.mExplodeSourceId = aCenterPiece.mId;
                        aPiece.mExplodeSourceFlags |= aCenterPiece.mFlags;
                        aPiece.mIsPieceStill = false;
                    } else if(aPiece.IsFlagSet(Game.Piece.EFlag.POINT_MULTIPLIER)) {
                        aPiece.mExplodeDelay = 5;
                        aPiece.mExplodeSourceId = aCenterPiece.mId;
                        aPiece.mExplodeSourceFlags |= aCenterPiece.mFlags;
                        aPiece.mIsPieceStill = false;
                    } else {
                        if(aPiece.IsFlagSet(Game.Piece.EFlag.LASER)) {
                            var aStormIdx = this.FindStormIdxFor(aPiece);
                            if(aStormIdx != -1) {
                                var aLightingStorm = this.mLightningStorms[aStormIdx];
                                if((aLightingStorm.mUpdateCnt == 0) && ((aLightingStorm.mStormType == Game.LightningStorm.EStormType.HORZ) || (aLightingStorm.mStormType == Game.LightningStorm.EStormType.VERT))) {
                                    this.mLightningStorms.removeAt(aStormIdx);
                                    aPiece.mDestructing = false;
                                }
                            }
                        }
                        if((((aPiece.IsFlagSet(Game.Piece.EFlag.FLAME)) || (aPiece.IsFlagSet(Game.Piece.EFlag.BLAST_GEM))) && (!aPiece.IsFlagSet(Game.Piece.EFlag.LASER))) || (!this.TriggerSpecialEx(aPiece, aCenterPiece))) {
                            if(aPiece.mCanDestroy) {
                                aPiece.mIsExploding = true;
                                if(aCenterPiece != null) {
                                    aPiece.mExplodeSourceId = aCenterPiece.mId;
                                    aPiece.mExplodeSourceFlags |= aCenterPiece.mFlags;
                                }
                                this.AddPoints((aPiece.GetScreenX() | 0), (aPiece.GetScreenY() | 0), 20, Game.DM.gGemColors[(aPiece.mColor | 0) + 1], aPiece.mMatchId, true, true, aPiece.mMoveCreditId, false, Game.Board.EPointType.SPECIAL);
                                this.DeletePiece(aPiece);
                            }
                        }
                    }
                }
            }
        }
    },
    ExplodeAt : function Game_Board$ExplodeAt(theX, theY) {
        this.gExplodeCount = 0;
        if(this.WantsCalmEffects()) {
            this.BumpColumns(theX, theY, 0.6);
        } else {
            this.BumpColumns(theX, theY, 1.0);
        }
        var aCenterPiece = this.GetPieceAtScreenXY(theX, theY);
        var aChainReactionCount = 0;
        if(aCenterPiece != null) {
            aChainReactionCount = this.GetMoveStatEx(aCenterPiece.mMoveCreditId, Game.DM.EStat.FLAMEGEMS_USED, 0);
        }
        this.ExplodeAtHelper(theX, theY);
        var anEffect = new Game.PopAnimEffect(Game.Resources['POPANIM_FLAMEGEMEXPLODE']);
        anEffect.mX = theX;
        anEffect.mY = theY;
        anEffect.mOverlay = true;
        anEffect.mScale = 2.0;
        anEffect.Play();
        this.mPostFXManager.AddEffect(anEffect);
    },
    SmallExplodeAt : function Game_Board$SmallExplodeAt(thePiece, theCenterX, theCenterY, process, fromFlame) {
        if((!thePiece.IsFlagSet(Game.Piece.EFlag.SCRAMBLE)) && (!thePiece.IsFlagSet(Game.Piece.EFlag.DETONATOR))) {
            this.AddPoints((thePiece.GetScreenX() | 0), (thePiece.GetScreenY() | 0), 50, Game.DM.gGemColors[(thePiece.mColor | 0) + 1], thePiece.mMatchId, true, true, thePiece.mMoveCreditId, false, Game.Board.EPointType.SPECIAL);
        }
        if((thePiece.IsFlagSet(Game.Piece.EFlag.COIN))) {
            this.DeletePiece(thePiece);
            return;
        }
        var aXCenter = (thePiece.GetScreenX() | 0) + ((Game.Board.GEM_WIDTH / 2) | 0);
        var aYCenter = (thePiece.GetScreenY() | 0) + ((Game.Board.GEM_HEIGHT / 2) | 0);
        var aDistVX = 0.01 * (aXCenter - theCenterX);
        var aDistVY = 0.01 * (aYCenter - theCenterY);
        if(aDistVX == 0.0) {
            aDistVY *= 2.0;
        }
        if(aDistVY == 0.0) {
            aDistVX *= 2.0;
        }
        if((GameFramework.BaseApp.mApp.get_Is3D()) && (!Game.BejApp.mBejApp.mIsSlow)) {
            for(var i = 0; i < 14; i++) {
                var anEffect = this.mPostFXManager.AllocEffect(Game.Effect.EFxType.STEAM);
                var anAngle = GameFramework.Utils.GetRandFloat() * Game.MathUtil.PI;
                var aSpeed = (0.0 + (2.0 * Math.abs(GameFramework.Utils.GetRandFloat())));
                anEffect.mDX = (aSpeed * Math.cos(anAngle) + aDistVX) * 1.67;
                anEffect.mDY = (aSpeed * Math.sin(anAngle) + aDistVY) * 1.67;
                if(fromFlame) {
                    anEffect.mDX *= 2.5 * Math.abs(GameFramework.Utils.GetRandFloat());
                    anEffect.mDY *= 2.5 * Math.abs(GameFramework.Utils.GetRandFloat());
                    var aRatio = Math.abs(GameFramework.Utils.GetRandFloat());
                    aRatio *= aRatio;
                    anEffect.mX = aRatio * theCenterX + (1.0 - aRatio) * aXCenter + Math.cos(anAngle) * 64.0 * Math.abs(GameFramework.Utils.GetRandFloat());
                    anEffect.mY = aRatio * theCenterY + (1.0 - aRatio) * aYCenter + Math.sin(anAngle) * 64.0 * Math.abs(GameFramework.Utils.GetRandFloat());
                    anEffect.mColor = GameFramework.gfx.Color.RGBAToInt(255, 96, 32, 64);
                    anEffect.mIsAdditive = false;
                    anEffect.mDScale = 0.015;
                }

                else {
                    anEffect.mX = aXCenter + Math.cos(anAngle) * 24.0 * Math.abs(GameFramework.Utils.GetRandFloat());
                    anEffect.mY = aYCenter + Math.sin(anAngle) * 24.0 * Math.abs(GameFramework.Utils.GetRandFloat());
                    anEffect.mColor = Game.DM.gGemColors[(thePiece.mColor | 0) + 1];
                    anEffect.mIsAdditive = false;
                    anEffect.mDScale = 0.02;
                }
                anEffect.mScale = 0.1 + Math.abs(GameFramework.Utils.GetRandFloat()) * 1.0;
                this.mPostFXManager.AddEffect(anEffect);
            }
        }
        for(var i_2 = 0; i_2 < 25; i_2++) {
            var anEffect_2 = this.mPostFXManager.AllocEffect(Game.Effect.EFxType.GEM_SHARD);
            anEffect_2.mColor = Game.DM.gGemColors[(thePiece.mColor | 0) + 1];
            var aDist = i_2 * (((i_2 + 120) / 120.0) | 0);
            var aRot = i_2 * 0.503 + (Game.Util.Rand() % 100) / 800.0;
            var aSpeed_2 = 1.2 + Math.abs(GameFramework.Utils.GetRandFloat()) * 1.2;
            anEffect_2.mDX = (Math.cos(aRot) * aSpeed_2 + aDistVX) * 1.67;
            anEffect_2.mDY = (Math.sin(aRot) * aSpeed_2 + -2.0 + aDistVY) * 1.67;
            if((aDistVX != 0) || (aDistVY != 0)) {
                aRot = ((GameFramework.Utils.GetRandFloat() * 3.14159) | 0);
                aDist = ((GameFramework.Utils.GetRandFloat() * 48.0) | 0);
                anEffect_2.mX = aXCenter + ((1.0 * aDist * Math.cos(aRot)) | 0);
                anEffect_2.mY = aYCenter + ((1.0 * aDist * Math.sin(aRot)) | 0);
                aRot = Math.atan2(anEffect_2.mY - theCenterY, anEffect_2.mX - theCenterX) + GameFramework.Utils.GetRandFloat() * 0.3;
                aSpeed_2 = 3.5 + Math.abs(GameFramework.Utils.GetRandFloat()) * 1.0;
                anEffect_2.mDX = (Math.cos(aRot) * aSpeed_2) * 1.67;
                anEffect_2.mDY = (Math.sin(aRot) * aSpeed_2 + -2.0) * 1.67;
                anEffect_2.mDecel = 0.98 + GameFramework.Utils.GetRandFloat() * 0.005;
            }

            else {
                anEffect_2.mX = aXCenter + ((1.2 * aDist * anEffect_2.mDX) | 0) + 14.0;
                anEffect_2.mY = aYCenter + ((1.2 * aDist * anEffect_2.mDY) | 0) + 10.0;
            }
            anEffect_2.mAngle = aRot;
            anEffect_2.mDAngle = (0.05 * GameFramework.Utils.GetRandFloat()) * 1.67;
            anEffect_2.mGravity = 0.06;
            anEffect_2.mValue[0] = GameFramework.Utils.GetRandFloat() * Game.MathUtil.PI * 2;
            anEffect_2.mValue[1] = GameFramework.Utils.GetRandFloat() * Game.MathUtil.PI * 2;
            anEffect_2.mValue[2] = 0.045 * (3.0 * Math.abs(GameFramework.Utils.GetRandFloat()) + 1.0);
            anEffect_2.mValue[3] = 0.045 * (3.0 * Math.abs(GameFramework.Utils.GetRandFloat()) + 1.0);
            anEffect_2.mDAlpha = -0.0025 * (2.0 * Math.abs(GameFramework.Utils.GetRandFloat()) + 4.0);
            this.mPostFXManager.AddEffect(anEffect_2);
        }
        if((GameFramework.BaseApp.mApp.get_Is3D()) && (!Game.BejApp.mBejApp.mIsSlow)) {
            for(var i_3 = 0; i_3 < 14; i_3++) {
                var anEffect_3 = this.mPostFXManager.AllocEffect(Game.Effect.EFxType.STEAM);
                var anAngle_2 = i_3 * Game.MathUtil.PI * 2.0 / 20.0;
                var aSpeed_3 = (0.5 + (5.75 * Math.abs(GameFramework.Utils.GetRandFloat())));
                anEffect_3.mDX = (aSpeed_3 * Math.cos(anAngle_2) + aDistVX) * 1.67;
                anEffect_3.mDY = (aSpeed_3 * Math.sin(anAngle_2) + aDistVY) * 1.67;
                anEffect_3.mX = aXCenter + Math.cos(anAngle_2) * 25.0 * Math.abs(GameFramework.Utils.GetRandFloat());
                anEffect_3.mY = aYCenter + Math.sin(anAngle_2) * 25.0 * Math.abs(GameFramework.Utils.GetRandFloat());
                anEffect_3.mIsAdditive = false;
                anEffect_3.mScale = 0.5;
                anEffect_3.mDScale = 0.005 * 1.67;
                anEffect_3.mValue[1] *= 1.0 - Math.abs(GameFramework.Utils.GetRandFloat() * 0.5);
                anEffect_3.mColor = GameFramework.gfx.Color.RGBToInt(128, 128, 128);
                this.mPostFXManager.AddEffect(anEffect_3);
            }
            if(thePiece.mElectrocutePercent > 0) {
                var aMgr = this.mPostFXManager;
                var aCount = 15;
                for(var j = 0; j < aCount; j++) {
                    var anEffect_4 = aMgr.AllocEffect(Game.Effect.EFxType.FRUIT_SPARK);
                    var aSpeed_4 = 1.0 + Math.abs(GameFramework.Utils.GetRandFloat()) * 2.0;
                    var anAngle_3 = GameFramework.Utils.GetRandFloat() * Game.MathUtil.PI;
                    anEffect_4.mScale = 1.0 + GameFramework.Utils.GetRandFloat() * 0.5;
                    anEffect_4.mDX = (aSpeed_4 * Math.cos(anAngle_3)) * 1.67;
                    anEffect_4.mDY = (aSpeed_4 * Math.sin(anAngle_3)) * 1.67;
                    anEffect_4.mX = thePiece.GetScreenX() + ((Game.Board.GEM_WIDTH / 2) | 0) + Math.cos(anAngle_3) * Game.Board.GEM_WIDTH / 2;
                    anEffect_4.mY = thePiece.GetScreenY() + ((Game.Board.GEM_HEIGHT / 2) | 0) + Math.sin(anAngle_3) * Game.Board.GEM_HEIGHT / 2;
                    anEffect_4.mIsAdditive = false;
                    anEffect_4.mAlpha = 1.0;
                    anEffect_4.mDAlpha = -0.005 * 1.67;
                    anEffect_4.mGravity = 0.0;
                    aMgr.AddEffect(anEffect_4);
                }
            }
            {
            }
        }
        thePiece.mIsExploding = true;
        this.DeletePiece(thePiece);
    },
    FindRandomMove : function Game_Board$FindRandomMove(theCoords) {
        return this.FindRandomMoveCoords(theCoords, false);
    },
    FindRandomMoveCoords : function Game_Board$FindRandomMoveCoords(theCoords, thePowerGemMove) {
        var reverseFind = GameFramework.Utils.GetRandFloat() >= 0;
        var aMoveNum = ((GameFramework.Utils.GetRandFloatU() * 10) | 0);
        for(var i = 0; i < 2; i++) {
            for(var m = aMoveNum; m >= 0; m--) {
                if(this.FindMove(theCoords, m, true, true, reverseFind, null, thePowerGemMove)) {
                    return true;
                }
            }
            for(var m_2 = aMoveNum; m_2 >= 0; m_2--) {
                if(this.FindMove(theCoords, m_2, true, true, !reverseFind, null, thePowerGemMove)) {
                    return true;
                }
            }
        }
        return false;
    },
    FindMoveBasic : function Game_Board$FindMoveBasic(theCoords, theMoveNum, horz, vert) {
        return this.FindMove(theCoords, theMoveNum, horz, vert, false, null, false);
    },
    FindMove : function Game_Board$FindMove(theCoords, theMoveNum, horz, vert, reverse, theIncludePiece, powerGemMove) {
        var aSwapArray = Array.Create2D(4, 2, 0, 1, 0, -1, 0, 0, 1, 0, -1);
        var aMoveNum = 0;
        var aStartRow = reverse ? this.mRowCount - 1 : 0;
        var anEndRow = reverse ? -1 : this.mRowCount;
        for(var aCheckRow = aStartRow; aCheckRow != anEndRow;) {
            for(var aCheckCol = 0; aCheckCol < this.mColCount; aCheckCol++) {
                var aPiece = this.mBoard[this.mBoard.mIdxMult0 * (aCheckRow) + aCheckCol];
                if(aPiece == null) {
                    continue;
                }
                if(aPiece != null) {
                    if(!aPiece.mWillPieceBeStill) {
                        continue;
                    }
                    if(aPiece.IsFlagSet(Game.Piece.EFlag.DOOM) || !aPiece.mCanSwap) {
                        continue;
                    }
                }
                for(var aSwapIdx = 0; aSwapIdx < 4; aSwapIdx++) {
                    var aSwapCol = aCheckCol + aSwapArray[aSwapArray.mIdxMult0 * (aSwapIdx) + 0];
                    var aSwapRow = aCheckRow + aSwapArray[aSwapArray.mIdxMult0 * (aSwapIdx) + 1];
                    if((aSwapCol >= 0) && (aSwapCol < 8) && (aSwapRow >= 0) && (aSwapRow < 8)) {
                        var aSwapPiece = aPiece;
                        var moveIsValid = false;
                        var includedPiece = theIncludePiece == null;
                        if((aPiece != null) && (aPiece.IsFlagSet(Game.Piece.EFlag.HYPERCUBE)) && (this.mBoard[this.mBoard.mIdxMult0 * (aSwapRow) + aSwapCol] != null)) {
                            if((theIncludePiece != null) && (aPiece.mColor == theIncludePiece.mColor)) {
                                includedPiece = true;
                            }
                            moveIsValid = true;
                        }
                        if((this.mBoard[this.mBoard.mIdxMult0 * (aSwapRow) + aSwapCol] != null) && (this.mBoard[this.mBoard.mIdxMult0 * (aSwapRow) + aSwapCol].mColor != Game.DM.EGemColor._INVALID) && (this.mBoard[this.mBoard.mIdxMult0 * (aSwapRow) + aSwapCol].mWillPieceBeStill)) {
                            this.mBoard[this.mBoard.mIdxMult0 * (aCheckRow) + aCheckCol] = this.mBoard[this.mBoard.mIdxMult0 * (aSwapRow) + aSwapCol];
                            this.mBoard[this.mBoard.mIdxMult0 * (aSwapRow) + aSwapCol] = aSwapPiece;
                            if(theIncludePiece == this.mBoard[this.mBoard.mIdxMult0 * (aCheckRow) + aCheckCol]) {
                                includedPiece = true;
                            }
                            var aLeftCol = aCheckCol;
                            var aRightCol = aCheckCol;
                            while((aLeftCol > 0) && (this.mBoard[this.mBoard.mIdxMult0 * (aCheckRow) + aLeftCol - 1] != null) && (this.mBoard[this.mBoard.mIdxMult0 * (aCheckRow) + aCheckCol].mColor == this.mBoard[this.mBoard.mIdxMult0 * (aCheckRow) + aLeftCol - 1].mColor) && (this.mBoard[this.mBoard.mIdxMult0 * (aCheckRow) + aLeftCol - 1].mWillPieceBeStill)) {
                                if(theIncludePiece == this.mBoard[this.mBoard.mIdxMult0 * (aCheckRow) + aLeftCol - 1]) {
                                    includedPiece = true;
                                }
                                aLeftCol--;
                            }
                            while((aRightCol < 7) && (this.mBoard[this.mBoard.mIdxMult0 * (aCheckRow) + aRightCol + 1] != null) && (this.mBoard[this.mBoard.mIdxMult0 * (aCheckRow) + aCheckCol].mColor == this.mBoard[this.mBoard.mIdxMult0 * (aCheckRow) + aRightCol + 1].mColor) && (this.mBoard[this.mBoard.mIdxMult0 * (aCheckRow) + aRightCol + 1].mWillPieceBeStill)) {
                                if(theIncludePiece == this.mBoard[this.mBoard.mIdxMult0 * (aCheckRow) + aRightCol + 1]) {
                                    includedPiece = true;
                                }
                                aRightCol++;
                            }
                            var aTopRow = aCheckRow;
                            var aBottomRow = aCheckRow;
                            while((aTopRow > 0) && (this.mBoard[this.mBoard.mIdxMult0 * (aTopRow - 1) + aCheckCol] != null) && (this.mBoard[this.mBoard.mIdxMult0 * (aCheckRow) + aCheckCol].mColor == this.mBoard[this.mBoard.mIdxMult0 * (aTopRow - 1) + aCheckCol].mColor) && (this.mBoard[this.mBoard.mIdxMult0 * (aTopRow - 1) + aCheckCol].mWillPieceBeStill)) {
                                if(theIncludePiece == this.mBoard[this.mBoard.mIdxMult0 * (aTopRow - 1) + aCheckCol]) {
                                    includedPiece = true;
                                }
                                aTopRow--;
                            }
                            while((aBottomRow < 7) && (this.mBoard[this.mBoard.mIdxMult0 * (aBottomRow + 1) + aCheckCol] != null) && (this.mBoard[this.mBoard.mIdxMult0 * (aCheckRow) + aCheckCol].mColor == this.mBoard[this.mBoard.mIdxMult0 * (aBottomRow + 1) + aCheckCol].mColor) && (this.mBoard[this.mBoard.mIdxMult0 * (aBottomRow + 1) + aCheckCol].mWillPieceBeStill)) {
                                if(theIncludePiece == this.mBoard[this.mBoard.mIdxMult0 * (aBottomRow + 1) + aCheckCol]) {
                                    includedPiece = true;
                                }
                                aBottomRow++;
                            }
                            aSwapPiece = this.mBoard[this.mBoard.mIdxMult0 * (aCheckRow) + aCheckCol];
                            this.mBoard[this.mBoard.mIdxMult0 * (aCheckRow) + aCheckCol] = this.mBoard[this.mBoard.mIdxMult0 * (aSwapRow) + aSwapCol];
                            this.mBoard[this.mBoard.mIdxMult0 * (aSwapRow) + aSwapCol] = aSwapPiece;
                            if(powerGemMove) {
                                if(((aRightCol - aLeftCol >= 3) && (horz)) || ((aBottomRow - aTopRow >= 3) && (vert))) {
                                    moveIsValid = true;
                                }
                                if(((aRightCol - aLeftCol >= 2) && (horz)) && ((aBottomRow - aTopRow >= 2) && (vert))) {
                                    moveIsValid = true;
                                }
                            }

                            else {
                                if(((aRightCol - aLeftCol >= 2) && (horz)) || ((aBottomRow - aTopRow >= 2) && (vert))) {
                                    moveIsValid = true;
                                }
                            }
                        }
                        if((moveIsValid) && (includedPiece)) {
                            if(aMoveNum == theMoveNum) {
                                if(theCoords != null) {
                                    theCoords[0] = aCheckCol;
                                    theCoords[1] = aCheckRow;
                                    theCoords[2] = aSwapCol;
                                    theCoords[3] = aSwapRow;
                                }
                                return true;
                            }

                            else {
                                ++aMoveNum;
                            }
                        }
                    }
                }
            }
            if(reverse) {
                aCheckRow--;
            } else {
                aCheckRow++;
            }
        }
        return false;
    },
    HasSet : function Game_Board$HasSet() {
        return this.HasSetEx(null);
    },
    HasSetEx : function Game_Board$HasSetEx(theCheckPiece) {
        var aRow;
        var aCol;
        for(aRow = 0; aRow < 8; aRow++) {
            var aMatchCount = 0;
            var aLastColor = Game.DM.EGemColor._INVALID;
            var foundCheckPiece = false;
            for(aCol = 0; aCol < 8; aCol++) {
                var aPiece = this.mBoard[this.mBoard.mIdxMult0 * (aRow) + aCol];
                if(aPiece != null) {
                    if((aPiece.mColor != Game.DM.EGemColor._INVALID) && (aPiece.mColor == aLastColor)) {
                        if(aPiece == theCheckPiece) {
                            foundCheckPiece = true;
                        }
                        if((++aMatchCount >= 3) && (foundCheckPiece)) {
                            return true;
                        }
                    }

                    else {
                        aLastColor = aPiece.mColor;
                        aMatchCount = 1;
                        foundCheckPiece = (aPiece == theCheckPiece) || (theCheckPiece == null);
                    }
                }

                else {
                    aLastColor = Game.DM.EGemColor._INVALID;
                }
            }
        }
        for(aCol = 0; aCol < 8; aCol++) {
            var aMatchCount_2 = 0;
            var aLastColor_2 = Game.DM.EGemColor._INVALID;
            var foundCheckPiece_2 = false;
            for(aRow = 0; aRow < 8; aRow++) {
                var aPiece_2 = this.mBoard[this.mBoard.mIdxMult0 * (aRow) + aCol];
                if(aPiece_2 != null) {
                    if((aPiece_2.mColor != Game.DM.EGemColor._INVALID) && (aPiece_2.mColor == aLastColor_2)) {
                        if(aPiece_2 == theCheckPiece) {
                            foundCheckPiece_2 = true;
                        }
                        if((++aMatchCount_2 >= 3) && (foundCheckPiece_2)) {
                            return true;
                        }
                    }

                    else {
                        aLastColor_2 = aPiece_2.mColor;
                        aMatchCount_2 = 1;
                        foundCheckPiece_2 = (aPiece_2 == theCheckPiece) || (theCheckPiece == null);
                    }
                }

                else {
                    aLastColor_2 = Game.DM.EGemColor._INVALID;
                }
            }
        }
        return false;
    },
    HasIllegalSet : function Game_Board$HasIllegalSet() {
        var aRow;
        var aCol;
        for(aRow = 0; aRow < 8; aRow++) {
            var aMatchCount = 0;
            var aLastColor = Game.DM.EGemColor._INVALID;
            var hasProtectedGem = false;
            for(aCol = 0; aCol < 8; aCol++) {
                var aPiece = this.mBoard[this.mBoard.mIdxMult0 * (aRow) + aCol];
                if(aPiece != null) {
                    var isGemProtected = (aPiece.mCreatedTick == this.mUpdateCnt) && (aPiece.IsFlagSet(Game.Piece.EFlag.POINT_MULTIPLIER));
                    if((aPiece.mColor != Game.DM.EGemColor._INVALID) && (aPiece.mColor == aLastColor)) {
                        if(isGemProtected) {
                            hasProtectedGem = true;
                        }
                        if((++aMatchCount >= 3) && (hasProtectedGem)) {
                            return true;
                        }
                    }

                    else {
                        aLastColor = aPiece.mColor;
                        aMatchCount = 1;
                        hasProtectedGem = isGemProtected;
                    }
                }

                else {
                    aLastColor = Game.DM.EGemColor._INVALID;
                }
            }
        }
        for(aCol = 0; aCol < 8; aCol++) {
            var aMatchCount_2 = 0;
            var aLastColor_2 = Game.DM.EGemColor._INVALID;
            var hasProtectedGem_2 = false;
            for(aRow = 0; aRow < 8; aRow++) {
                var aPiece_2 = this.mBoard[this.mBoard.mIdxMult0 * (aRow) + aCol];
                if(aPiece_2 != null) {
                    var isGemProtected_2 = (aPiece_2.mCreatedTick == this.mUpdateCnt) && (aPiece_2.IsFlagSet(Game.Piece.EFlag.POINT_MULTIPLIER));
                    if((aPiece_2.mColor != Game.DM.EGemColor._INVALID) && (aPiece_2.mColor == aLastColor_2)) {
                        if(isGemProtected_2) {
                            hasProtectedGem_2 = true;
                        }
                        if((++aMatchCount_2 >= 3) && (hasProtectedGem_2)) {
                            return true;
                        }
                    }

                    else {
                        aLastColor_2 = aPiece_2.mColor;
                        aMatchCount_2 = 1;
                        hasProtectedGem_2 = isGemProtected_2;
                    }
                }

                else {
                    aLastColor_2 = Game.DM.EGemColor._INVALID;
                }
            }
        }
        return false;
    },
    TriggerSpecial : function Game_Board$TriggerSpecial(thePiece) {
        return this.TriggerSpecialEx(thePiece, null);
    },
    TriggerSpecialEx : function Game_Board$TriggerSpecialEx(thePiece, theSrc) {
        if(thePiece.mDestructing) {
            return false;
        }
        if((thePiece.IsFlagSet(Game.Piece.EFlag.FLAME)) && (!thePiece.IsFlagSet(Game.Piece.EFlag.LASER))) {
            thePiece.mExplodeDelay = 1;
            thePiece.mExplodeSourceId = theSrc != null ? theSrc.mId : -1;
            thePiece.mExplodeSourceFlags |= theSrc != null ? theSrc.mFlags : 0;
            thePiece.mIsPieceStill = false;
            return true;
        }
        if(thePiece.IsFlagSet(Game.Piece.EFlag.BLAST_GEM)) {
            thePiece.mExplodeDelay = 1;
            thePiece.mExplodeSourceId = theSrc != null ? theSrc.mId : -1;
            thePiece.mExplodeSourceFlags |= theSrc != null ? theSrc.mFlags : 0;
            thePiece.mIsPieceStill = false;
            return true;
        }
        if((thePiece.IsFlagSet(Game.Piece.EFlag.HYPERCUBE)) && (this.FindStormIdxFor(thePiece) == -1)) {
            var aColor;
            if(theSrc != null) {
                if(theSrc.mColor == Game.DM.EGemColor._INVALID) {
                    aColor = theSrc.mLastColor;
                } else {
                    aColor = theSrc.mColor;
                }
            } else if(thePiece.mLastColor != Game.DM.EGemColor._INVALID) {
                aColor = thePiece.mLastColor;
            } else {
                aColor = (this.mRand.Next() % ((Game.DM.EGemColor._COUNT | 0)));
            }
            this.DoHypercubeColor(thePiece, aColor);
            return true;
        }
        if((thePiece.IsFlagSet(Game.Piece.EFlag.LASER)) && (this.FindStormIdxFor(thePiece) == -1)) {
            thePiece.mDestructing = true;
            if(thePiece.IsFlagSet(Game.Piece.EFlag.FLAME)) {
                this.AddToStatCred(Game.DM.EStat.SUPERNOVAS_USED, 1, thePiece.mMoveCreditId);
            }
            this.AddToStatCred(Game.DM.EStat.LASERGEMS_USED, 1, thePiece.mMoveCreditId);
            var aLightningStorm = new Game.LightningStorm(this, thePiece, Game.LightningStorm.EStormType.BOTH);
            this.mLightningStorms.push(aLightningStorm);
            return true;
        }
        if(thePiece.IsFlagSet(Game.Piece.EFlag.POINT_MULTIPLIER)) {
            thePiece.mDestructing = true;
            thePiece.mExplodeDelay = 1;
            thePiece.mIsPieceStill = false;
            thePiece.mExplodeSourceId = theSrc != null ? theSrc.mId : -1;
            thePiece.mExplodeSourceFlags |= theSrc != null ? theSrc.mFlags : 0;
            return true;
        }
        return false;
    },
    FindSets : function Game_Board$FindSets() {
        return this.FindSetsEx(false, null, null);
    },
    FindSetsEx : function Game_Board$FindSetsEx(fromUpdateSwapping, thePiece1, thePiece2) {
        var aPrevNumPoints = this.mPoints;
        var hadFutureMatches = false;
        var aFoundCount = 0;
        var aFoundChains = 0;
        var aCumSetX = 0;
        var aCumSetY = 0;
        var aBulgeTriggerPieceSet = [];
        var aDelayingPieceSet = [];
        var aTallyPieceSet = [];
        var aPowerupPieceSet = [];
        var aMatchedSets = [];
        var hasDelayableSwaps = false;
        for(var i = 0; i < (this.mSwapDataVector.length | 0); i++) {
            var aSwapData = this.mSwapDataVector[i];
            if((!aSwapData.mSwapPct.HasBeenTriggered()) && (aSwapData.mForceSwap)) {
                hasDelayableSwaps = true;
            }
        }
        var aMoveCreditSet = [];
        var aDeferPowerupMapPiece = [];
        var aDeferPowerupMapInt = [];
        var aDeferPowerupMapPieceBackup = [];
        var aDeferLaserSet = [];
        var aDeferExplodeVector = [];
        for(var i_2 = 0; i_2 < 2; i_2++) {
            for(var i1 = 0; i1 < 8; i1++) {
                var isFutureMatch = false;
                var aMatchCount = 0;
                var aLastType = -1;
                var aFirstMatchRow = 0;
                var aFirstMatchCol = 0;
                var aLastMatchRow = 0;
                var aLastMatchCol = 0;
                for(var i2 = 0; i2 < 8; i2++) {
                    var aCol;
                    var aRow;
                    if(i_2 == 0) {
                        aCol = i1;
                        aRow = i2;
                    }

                    else {
                        aCol = i2;
                        aRow = i1;
                    }
                    var aCurType = -1;
                    var pieceMatch = false;
                    var aPiece = this.mBoard[this.mBoard.mIdxMult0 * (aRow) + aCol];
                    var isPieceStill = (((aPiece != null) && (aPiece.mIsPieceStill)) || (aTallyPieceSet.indexOf(aPiece) != -1)) && (aDelayingPieceSet.indexOf(aPiece) == -1);
                    var matchablePiece = (aPiece != null) && ((aPiece.mWillPieceBeStill) || (aTallyPieceSet.indexOf(aPiece) != -1));
                    if(matchablePiece) {
                        if(aPiece.mChangedTick == this.mUpdateCnt) {
                            aCurType = (aPiece.mLastColor | 0);
                        } else {
                            aCurType = (aPiece.mColor | 0);
                        }
                        if((aCurType == aLastType) && (aCurType != -1)) {
                            if(!isPieceStill || hasDelayableSwaps) {
                                isFutureMatch = true;
                            }
                            aLastMatchCol = aCol;
                            aLastMatchRow = aRow;
                            pieceMatch = true;
                            ++aMatchCount;
                        }
                    }
                    if((!pieceMatch) || (i2 == 7)) {
                        if(aMatchCount >= 3) {
                            var aNewestTime = 0;
                            this.mIsBoardStill = false;
                            var justSwapped = false;
                            var aMatchSet = new Game.MatchSet();
                            var matchedCombo = false;
                            var needsSettling = false;
                            var aMoveCreditId = -1;
                            var aLastMoveCreditId = -1;
                            aMatchSet.mMatchId = this.mCurMoveCreditId++;
                            aMatchSet.mMoveCreditId = -1;
                            aMatchSet.mExplosionCount = 0;
                            var isSetBulging = false;
                            for(var aMarkRow = aFirstMatchRow; aMarkRow <= aLastMatchRow; aMarkRow++) {
                                for(var aMarkCol = aFirstMatchCol; aMarkCol <= aLastMatchCol; aMarkCol++) {
                                    var aMarkPiece = this.mBoard[this.mBoard.mIdxMult0 * (aMarkRow) + aMarkCol];
                                    if(aMarkPiece != null) {
                                        if(aBulgeTriggerPieceSet.indexOf(aMarkPiece) != -1) {
                                            isSetBulging = true;
                                        }
                                        var aGemsPerp = 0;
                                        var hadUnsettledPerp = false;
                                        var anOffsets = Array.Create2D(4, 2, 0, -1, 0, 1, 0, 0, -1, 0, 1);
                                        for(var anOffsetIdx = 0; anOffsetIdx < 4; anOffsetIdx++) {
                                            for(var aDist = 1; aDist < 8; aDist++) {
                                                var anAdjacentPiece = this.GetPieceAtRowCol(aMarkPiece.mRow + anOffsets[anOffsets.mIdxMult0 * (anOffsetIdx) + 0] * aDist, aMarkPiece.mCol + anOffsets[anOffsets.mIdxMult0 * (anOffsetIdx) + 1] * aDist);
                                                if((anAdjacentPiece != null) && (anAdjacentPiece.mColor == aMarkPiece.mColor)) {
                                                    var isUnsettled = (!anAdjacentPiece.mIsPieceStill) && (anAdjacentPiece.mWillPieceBeStill);
                                                    if((((anOffsetIdx / 2) | 0)) != i_2) {
                                                        aGemsPerp++;
                                                        if(isUnsettled) {
                                                            hadUnsettledPerp = true;
                                                        }
                                                    }

                                                    else {
                                                        if(isUnsettled) {
                                                            needsSettling = true;
                                                        }
                                                    }
                                                }

                                                else {
                                                    break;
                                                }
                                            }
                                        }
                                        if((aGemsPerp >= 2) && hadUnsettledPerp) {
                                            needsSettling = true;
                                        }
                                        if((aMarkPiece.mColor | 0) == aLastType) {
                                            if(aMarkPiece.mSwapTick == this.mUpdateCnt) {
                                                justSwapped = true;
                                            }
                                            aMatchSet.mPieces.push(aMarkPiece);
                                        }
                                        aMoveCreditId = (Math.max(aMoveCreditId, aMarkPiece.mMoveCreditId) | 0);
                                        aLastMoveCreditId = (Math.max(aLastMoveCreditId, aMarkPiece.mLastMoveCreditId) | 0);
                                    }
                                }
                            }
                            if(aMoveCreditId == -1) {
                                aMoveCreditId = aLastMoveCreditId;
                            }
                            aMatchSet.mMoveCreditId = aMoveCreditId;
                            if((isFutureMatch) || needsSettling) {
                                hadFutureMatches = true;
                                for(var aMarkRow_2 = aFirstMatchRow; aMarkRow_2 <= aLastMatchRow; aMarkRow_2++) {
                                    for(var aMarkCol_2 = aFirstMatchCol; aMarkCol_2 <= aLastMatchCol; aMarkCol_2++) {
                                        var aMarkPiece_2 = this.mBoard[this.mBoard.mIdxMult0 * (aMarkRow_2) + aMarkCol_2];
                                        if(aMarkPiece_2 != null) {
                                            aMarkPiece_2.mMoveCreditId = aMoveCreditId;
                                            if(aDelayingPieceSet.indexOf(aMarkPiece_2) == -1) {
                                                aDelayingPieceSet.push(aMarkPiece_2);
                                            }
                                        }
                                    }
                                }
                            }

                            else {
                                aFoundCount++;
                                if(!justSwapped) {
                                    aFoundChains++;
                                }
                                var aPowerupCandidates = [];
                                var aNewestPowerupCandidates = [];
                                for(var aMarkRow_3 = aFirstMatchRow; aMarkRow_3 <= aLastMatchRow; aMarkRow_3++) {
                                    for(var aMarkCol_3 = aFirstMatchCol; aMarkCol_3 <= aLastMatchCol; aMarkCol_3++) {
                                        var aMarkPiece_3 = this.mBoard[this.mBoard.mIdxMult0 * (aMarkRow_3) + aMarkCol_3];
                                        if(aMarkPiece_3 != null) {
                                            if(aMarkPiece_3.IsFlagSet(Game.Piece.EFlag.POINT_MULTIPLIER)) {
                                                this.IncPointMult(aMarkPiece_3);
                                                aMarkPiece_3.ClearFlag(Game.Piece.EFlag.POINT_MULTIPLIER);
                                                this.mPostFXManager.FreePieceEffect(aMarkPiece_3.mId);
                                            }
                                        }
                                    }
                                }
                                for(var aMarkRow_4 = aFirstMatchRow; aMarkRow_4 <= aLastMatchRow; aMarkRow_4++) {
                                    for(var aMarkCol_4 = aFirstMatchCol; aMarkCol_4 <= aLastMatchCol; aMarkCol_4++) {
                                        var aMarkPiece_4 = this.mBoard[this.mBoard.mIdxMult0 * (aMarkRow_4) + aMarkCol_4];
                                        if(aMarkPiece_4 != null) {
                                            aMarkPiece_4.mMatchId = aMatchSet.mMatchId;
                                            aMarkPiece_4.mMoveCreditId = aMoveCreditId;
                                            if(aMarkPiece_4.IsFlagSet(Game.Piece.EFlag.COIN)) {
                                                aMarkPiece_4.ClearFlag(Game.Piece.EFlag.COIN);
                                            }
                                            if(!matchedCombo) {
                                                matchedCombo = this.ComboProcess(aMarkPiece_4.mColor);
                                            }
                                            var isCandidate = false;
                                            if((aMarkPiece_4.IsFlagSet(Game.Piece.EFlag.FLAME)) || (aMarkPiece_4.IsFlagSet(Game.Piece.EFlag.BLAST_GEM))) {
                                                aDeferExplodeVector.push(aMarkPiece_4);
                                                aMatchSet.mExplosionCount++;
                                            }
                                            if((aMarkPiece_4.IsFlagSet(Game.Piece.EFlag.LASER)) && (aMarkPiece_4.mChangedTick != this.mUpdateCnt)) {
                                                var aStormIdx = this.FindStormIdxFor(aMarkPiece_4);
                                                if(aStormIdx == -1) {
                                                    this.AddToStatCred(Game.DM.EStat.LASERGEMS_USED, 1, aMoveCreditId);
                                                    var aStorm = new Game.LightningStorm(this, aMarkPiece_4, this.mFullLaser ? Game.LightningStorm.EStormType.BOTH : Game.LightningStorm.EStormType.SHORT);
                                                    this.mLightningStorms.push(aStorm);
                                                }
                                            } else if((aMarkPiece_4.mChangedTick == this.mUpdateCnt) && (aMarkPiece_4.mColor != Game.DM.EGemColor._INVALID)) {
                                                if((aMarkPiece_4.mFlags == 0) || (aMarkPiece_4.IsFlagSet(Game.Piece.EFlag.FLAME))) {
                                                    if(this.AllowPowerups()) {
                                                        if(this.WantsTutorial(Game.DM.ETutorial.LASER)) {
                                                            this.DeferTutorialDialog(Game.DM.ETutorial.LASER, aMarkPiece_4);
                                                            isSetBulging = true;
                                                        } else if(!isSetBulging) {
                                                            aMarkPiece_4.mScale.SetConstant(1.0);
                                                            aMarkPiece_4.mChangedTick = this.mUpdateCnt;
                                                            if(aPowerupPieceSet.indexOf(aMarkPiece_4) == -1) {
                                                                aPowerupPieceSet.push(aMarkPiece_4);
                                                            }
                                                            aMarkPiece_4.mMoveCreditId = aMoveCreditId;
                                                            if(aDeferLaserSet.indexOf(aMarkPiece_4) == -1) {
                                                                aDeferLaserSet.push(aMarkPiece_4);
                                                            }
                                                        }
                                                    }

                                                    else {
                                                    }
                                                    isCandidate = false;
                                                }
                                            } else if(aMarkPiece_4.mChangedTick != this.mUpdateCnt) {
                                                isCandidate = (aMarkPiece_4.mFlags == 0);
                                                if(justSwapped) {
                                                    aMarkPiece_4.mScale.SetCurve('b+1,1.2,0.333333,1,#+Ky         ~~###');
                                                } else if(this.WantBulgeCascades()) {
                                                    aMarkPiece_4.mScale.SetCurve('b+1,1.22,0.033333,1,#+Kx      uw*7u   ,~###');
                                                } else {
                                                    aMarkPiece_4.mScale.SetCurve('b+1,1.22,0.066667,1,#+Kx      uw*7t   ,~###');
                                                }
                                                aMarkPiece_4.mRotPct = 0.0;
                                                aMarkPiece_4.mScale.mIncRate *= this.GetMatchSpeed();
                                                aMarkPiece_4.mChangedTick = this.mUpdateCnt;
                                                aMarkPiece_4.mLastColor = aMarkPiece_4.mColor;
                                                if(aTallyPieceSet.indexOf(aMarkPiece_4) == -1) {
                                                    aTallyPieceSet.push(aMarkPiece_4);
                                                }
                                            }
                                            if(isCandidate) {
                                                if(aMarkPiece_4.mLastActiveTick > aNewestTime) {
                                                    aNewestTime = aMarkPiece_4.mLastActiveTick;
                                                    aNewestPowerupCandidates.length = 0;
                                                }
                                                if(aMarkPiece_4.mLastActiveTick == aNewestTime) {
                                                    aNewestPowerupCandidates.push(aMarkPiece_4);
                                                }
                                                aPowerupCandidates.push(aMarkPiece_4);
                                            }
                                        }
                                    }
                                }
                                if(aPowerupCandidates.length > 0) {
                                    var aPowerupPiece = aNewestPowerupCandidates[((((aNewestPowerupCandidates.length / 2) | 0)) | 0)];
                                    for(var anIdx = 0; anIdx < (aPowerupCandidates.length | 0); anIdx++) {
                                        var aTestPiece = aPowerupCandidates[anIdx];
                                        var aSide1;
                                        var aSide2;
                                        if(i_2 == 0) {
                                            aSide1 = this.GetPieceAtRowCol(aTestPiece.mRow, aTestPiece.mCol + 1);
                                            aSide2 = this.GetPieceAtRowCol(aTestPiece.mRow, aTestPiece.mCol - 1);
                                        }

                                        else {
                                            aSide1 = this.GetPieceAtRowCol(aTestPiece.mRow + 1, aTestPiece.mCol);
                                            aSide2 = this.GetPieceAtRowCol(aTestPiece.mRow - 1, aTestPiece.mCol);
                                        }
                                        if((aSide1 != null) && (aSide1.mColor == aTestPiece.mColor) && (aSide2 != null) && (aSide2.mColor == aTestPiece.mColor)) {
                                            aPowerupPiece = aTestPiece;
                                        }
                                    }
                                    var aStartDist = (Math.max(Math.abs(aFirstMatchCol - aPowerupPiece.mCol), Math.abs(aFirstMatchRow - aPowerupPiece.mRow)) | 0);
                                    var anEndDist = (Math.max(Math.abs(aLastMatchCol - aPowerupPiece.mCol), Math.abs(aLastMatchRow - aPowerupPiece.mRow)) | 0);
                                    var aPowerupPieceBackup = null;
                                    for(var aDist_2 = 1; aDist_2 <= 2; aDist_2++) {
                                        if(aStartDist > anEndDist) {
                                            if(i_2 == 0) {
                                                aPowerupPieceBackup = this.GetPieceAtRowCol(((Math.max(aFirstMatchRow, aPowerupPiece.mRow - aDist_2)) | 0), aPowerupPiece.mCol);
                                            } else {
                                                aPowerupPieceBackup = this.GetPieceAtRowCol(aPowerupPiece.mRow, ((Math.max(aFirstMatchCol, aPowerupPiece.mCol - aDist_2)) | 0));
                                            }
                                        }

                                        else {
                                            if(i_2 == 0) {
                                                aPowerupPieceBackup = this.GetPieceAtRowCol(((Math.min(aLastMatchRow, aPowerupPiece.mRow + aDist_2)) | 0), aPowerupPiece.mCol);
                                            } else {
                                                aPowerupPieceBackup = this.GetPieceAtRowCol(aPowerupPiece.mRow, ((Math.min(aLastMatchCol, aPowerupPiece.mCol + aDist_2)) | 0));
                                            }
                                        }
                                        if(aPowerupPieceBackup != null && aPowerupPieceBackup.mFlags == 0) {
                                            break;
                                        }
                                    }
                                    if(this.AllowPowerups()) {
                                        if((aMatchCount >= 6) && (aPowerupPiece.CanSetFlag(Game.Piece.EFlag.LASER)) && (aPowerupPiece.CanSetFlag(Game.Piece.EFlag.FLAME))) {
                                            if(this.WantsTutorial(Game.DM.ETutorial.SUPERNOVA)) {
                                                this.DeferTutorialDialog(Game.DM.ETutorial.SUPERNOVA, aPowerupPiece);
                                                isSetBulging = true;
                                            } else if(!isSetBulging) {
                                                aPowerupPiece.mMoveCreditId = aMoveCreditId;
                                                if(aPowerupPieceBackup != null) {
                                                    aPowerupPieceBackup.mMoveCreditId = aMoveCreditId;
                                                }
                                                var findIdx = aDeferPowerupMapPiece.indexOf(aPowerupPiece);
                                                if(findIdx != -1) {
                                                    aDeferPowerupMapPiece.removeAt(findIdx);
                                                }
                                                aDeferPowerupMapPiece.push(aPowerupPiece);
                                                aDeferPowerupMapInt.push(aMatchCount);
                                                aDeferPowerupMapPieceBackup.push(aPowerupPieceBackup);
                                            }
                                        } else if((aMatchCount >= 5) && (!aPowerupPiece.IsFlagSet(Game.Piece.EFlag.LASER)) && (aBulgeTriggerPieceSet.indexOf(aPowerupPiece) == -1)) {
                                            if(this.WantsTutorial(Game.DM.ETutorial.HYPERCUBE)) {
                                                this.DeferTutorialDialog(Game.DM.ETutorial.HYPERCUBE, aPowerupPiece);
                                                isSetBulging = true;
                                            } else if(!isSetBulging) {
                                                aPowerupPiece.mMoveCreditId = aMoveCreditId;
                                                if(aPowerupPieceBackup != null) {
                                                    aPowerupPieceBackup.mMoveCreditId = aMoveCreditId;
                                                }
                                                var findIdx_2 = aDeferPowerupMapPiece.indexOf(aPowerupPiece);
                                                if(findIdx_2 != -1) {
                                                    aDeferPowerupMapPiece.removeAt(findIdx_2);
                                                }
                                                aDeferPowerupMapPiece.push(aPowerupPiece);
                                                aDeferPowerupMapInt.push(aMatchCount);
                                                aDeferPowerupMapPieceBackup.push(aPowerupPieceBackup);
                                            }
                                        } else if(aMatchCount >= 4) {
                                            if(this.WantsTutorial(Game.DM.ETutorial.FLAME)) {
                                                this.DeferTutorialDialog(Game.DM.ETutorial.FLAME, aPowerupPiece);
                                                isSetBulging = true;
                                            } else if(!isSetBulging) {
                                                aPowerupPiece.mMoveCreditId = aMoveCreditId;
                                                if(aPowerupPieceBackup != null) {
                                                    aPowerupPieceBackup.mMoveCreditId = aMoveCreditId;
                                                }
                                                var findIdx_3 = aDeferPowerupMapPiece.indexOf(aPowerupPiece);
                                                if(findIdx_3 != -1) {
                                                    aDeferPowerupMapPiece.removeAt(findIdx_3);
                                                }
                                                aDeferPowerupMapPiece.push(aPowerupPiece);
                                                aDeferPowerupMapInt.push(aMatchCount);
                                                aDeferPowerupMapPieceBackup.push(aPowerupPieceBackup);
                                            }
                                        }
                                    }
                                    if(this.CreateMatchPowerup(aMatchCount, aPowerupPiece, aTallyPieceSet)) {
                                        aPowerupPiece.mScale.SetConstant(1.0);
                                    }
                                }
                                if(isSetBulging) {
                                    for(var aMarkRow_5 = aFirstMatchRow; aMarkRow_5 <= aLastMatchRow; aMarkRow_5++) {
                                        for(var aMarkCol_5 = aFirstMatchCol; aMarkCol_5 <= aLastMatchCol; aMarkCol_5++) {
                                            var aMarkPiece_5 = this.mBoard[this.mBoard.mIdxMult0 * (aMarkRow_5) + aMarkCol_5];
                                            if(aMarkPiece_5 != null) {
                                                if(aBulgeTriggerPieceSet.indexOf(aMarkPiece_5) == -1) {
                                                    aBulgeTriggerPieceSet.push(aMarkPiece_5);
                                                }
                                                var findIdx_4 = aDeferLaserSet.indexOf(aMarkPiece_5);
                                                if(findIdx_4 != -1) {
                                                    aDeferLaserSet.removeAt(findIdx_4);
                                                }
                                            }
                                        }
                                    }
                                }
                                aMatchedSets.push(aMatchSet);
                            }
                        }
                        aLastType = aCurType;
                        aMatchCount = 1;
                        isFutureMatch = !isPieceStill;
                        aFirstMatchCol = aCol;
                        aFirstMatchRow = aRow;
                        aLastMatchCol = aCol;
                        aLastMatchRow = aRow;
                    }
                }
            }
        }
        for(var anExplodeIdx = 0; anExplodeIdx < (aDeferExplodeVector.length | 0); anExplodeIdx++) {
            var aPiece_2 = aDeferExplodeVector[anExplodeIdx];
            aPiece_2.mExplodeDelay = 1;
            aPiece_2.mExplodeSourceId = aPiece_2.mId;
            aPiece_2.mExplodeSourceFlags |= aPiece_2.mFlags;
            aPiece_2.mScale.SetConstant(1.0);
            aPiece_2.mIsPieceStill = false;
        }
        for(var i_3 = 0; i_3 < aDeferLaserSet.length; ++i_3) {
            var aPiece_3 = aDeferLaserSet[i_3];
            if((aPiece_3.IsFlagSet(Game.Piece.EFlag.FLAME)) || (aPiece_3.IsFlagSet(Game.Piece.EFlag.BLAST_GEM))) {
                aPiece_3.mExplodeDelay = 1;
                aPiece_3.mExplodeSourceId = aPiece_3.mId;
                aPiece_3.mExplodeSourceFlags = aPiece_3.mFlags;
                aPiece_3.mIsPieceStill = false;
                aPiece_3.mFlags = 0;
            }
            if(this.AllowLaserGems()) {
                this.AddToStatCred(Game.DM.EStat.GEMS_CLEARED, 1, aPiece_3.mMoveCreditId);
                this.AddToStatCred(Game.DM.EStat.LASERGEMS_MADE, 1, aPiece_3.mMoveCreditId);
                this.Laserify(aPiece_3);
            }

            else {
                this.AddToStatCred(Game.DM.EStat.GEMS_CLEARED, 1, aPiece_3.mMoveCreditId);
                this.AddToStatCred(Game.DM.EStat.FLAMEGEMS_MADE, 1, aPiece_3.mMoveCreditId);
                this.Flamify(aPiece_3);
            }
        }
        for(var i_4 = 0; i_4 < aDeferPowerupMapPiece.length; ++i_4) {
            var aPowerupPiece_2 = aDeferPowerupMapPiece[i_4];
            if(aPowerupPiece_2.IsFlagSet(Game.Piece.EFlag.LASER)) {
                aPowerupPiece_2 = aDeferPowerupMapPieceBackup[i_4];
            }
            if((aPowerupPiece_2.mFlags == 0) && (aBulgeTriggerPieceSet.indexOf(aPowerupPiece_2) == -1)) {
                if(aPowerupPieceSet.indexOf(aPowerupPiece_2) == -1) {
                    aPowerupPieceSet.push(aPowerupPiece_2);
                }
                if(aDeferPowerupMapInt[i_4] > 5) {
                    this.AddToStatCred(Game.DM.EStat.GEMS_CLEARED, 1, aPowerupPiece_2.mMoveCreditId);
                    this.AddToStatCred(Game.DM.EStat.FLAMEGEMS_MADE, 1, aPowerupPiece_2.mMoveCreditId);
                    this.AddToStatCred(Game.DM.EStat.LASERGEMS_MADE, 1, aPowerupPiece_2.mMoveCreditId);
                    this.AddToStatCred(Game.DM.EStat.SUPERNOVAS_MADE, 1, aPowerupPiece_2.mMoveCreditId);
                    this.Laserify(aPowerupPiece_2);
                    this.Flamify(aPowerupPiece_2);
                    aPowerupPiece_2.mScale.SetConstant(1.0);
                } else if(aDeferPowerupMapInt[i_4] > 4) {
                    this.AddToStatCred(Game.DM.EStat.GEMS_CLEARED, 1, aPowerupPiece_2.mMoveCreditId);
                    this.AddToStatCred(Game.DM.EStat.HYPERCUBES_MADE, 1, aPowerupPiece_2.mMoveCreditId);
                    this.Hypercubeify(aPowerupPiece_2);
                    aPowerupPiece_2.mScale.SetConstant(1.0);
                } else {
                    this.Flamify(aPowerupPiece_2);
                    this.AddToStatCred(Game.DM.EStat.GEMS_CLEARED, 1, aPowerupPiece_2.mMoveCreditId);
                    this.AddToStatCred(Game.DM.EStat.FLAMEGEMS_MADE, 1, aPowerupPiece_2.mMoveCreditId);
                }
                aPowerupPiece_2.mChangedTick = this.mUpdateCnt;
                if((aPowerupPiece_2.mColor != Game.DM.EGemColor._INVALID) && (aPowerupPiece_2.mColor != Game.DM.EGemColor.HYPERCUBE)) {
                    aPowerupPiece_2.mLastColor = aPowerupPiece_2.mColor;
                }
                aPowerupPiece_2.mScale.SetConstant(1.0);
                aPowerupPiece_2.mIsPieceStill = false;
            }
        }
        if(aMatchedSets.length > 0) {
            this.ProcessMatches(aMatchedSets, aTallyPieceSet, fromUpdateSwapping);
        }
        var doMatchSounds = false;
        for(var aSetIdx = 0; aSetIdx < (aMatchedSets.length | 0); aSetIdx++) {
            var aMatchSet_2 = aMatchedSets[aSetIdx];
            var aSpecialPiece = null;
            var isLaserifying = false;
            var isBulging = false;
            var aTotalX = 0;
            var aTotalY = 0;
            for(var aPieceIdx = 0; aPieceIdx < (aMatchSet_2.mPieces.length | 0); aPieceIdx++) {
                var aPiece_4 = aMatchSet_2.mPieces[aPieceIdx];
                aPiece_4.mIsPieceStill = false;
                aTotalX += (aPiece_4.GetScreenX() | 0);
                aTotalY += (aPiece_4.GetScreenY() | 0);
                if(aPowerupPieceSet.indexOf(aPiece_4) != -1) {
                    aSpecialPiece = aPiece_4;
                }
                if((aPiece_4.IsFlagSet(Game.Piece.EFlag.LASER)) && (aPiece_4.mChangedTick != this.mUpdateCnt)) {
                    isLaserifying = true;
                }
                if(aBulgeTriggerPieceSet.indexOf(aPiece_4) != -1) {
                    isBulging = true;
                }
            }
            if((fromUpdateSwapping) && (this.mSpeedBonusFlameModePct > 0)) {
                var aLatestTick = 0;
                var aBestPiece = null;
                for(var aPieceIdx_2 = 0; aPieceIdx_2 < (aMatchSet_2.mPieces.length | 0); aPieceIdx_2++) {
                    var aPiece_5 = aMatchSet_2.mPieces[aPieceIdx_2];
                    if(aPiece_5.mSwapTick > aLatestTick) {
                        aBestPiece = aPiece_5;
                        aLatestTick = aPiece_5.mSwapTick;
                    }
                }
                if(aBestPiece != null) {
                    aBestPiece.SetFlag(Game.Piece.EFlag.INFERNO_SWAP);
                    this.AddToStat(Game.DM.EStat.BLAZING_SPEED_EXPLOSION, 1);
                    aBestPiece.mExplodeDelay = 1;
                    aBestPiece.mExplodeSourceId = aBestPiece.mId;
                    aBestPiece.mExplodeSourceFlags |= aBestPiece.mFlags;
                    aBestPiece.mIsPieceStill = false;
                }
            }
            if(isBulging) {
                for(var aPieceIdx_3 = 0; aPieceIdx_3 < (aMatchSet_2.mPieces.length | 0); aPieceIdx_3++) {
                    var aPiece_6 = aMatchSet_2.mPieces[aPieceIdx_3];
                    aPiece_6.mIsPieceStill = false;
                    aPiece_6.mScale.SetCurve('b+0,2,0.006667,1,PzL;  >l### ~H### P`### qK### fV###ZP###');
                    aPiece_6.mIsBulging = true;
                    aPiece_6.mExplodeDelay = 0;
                    aPiece_6.mExplodeSourceId = aPiece_6.mId;
                    aPiece_6.mExplodeSourceFlags |= aPiece_6.mFlags;
                    var aStormIdx_2 = this.FindStormIdxFor(aPiece_6);
                    if(aStormIdx_2 != -1) {
                        this.mLightningStorms.removeAt(aStormIdx_2);
                    }
                    if(aPowerupPieceSet.indexOf(aPiece_6) == -1) {
                        aPowerupPieceSet.push(aPiece_6);
                    }
                }
            }

            else {
                doMatchSounds = true;
                if(isLaserifying) {
                    for(var aPieceIdx_4 = 0; aPieceIdx_4 < (aMatchSet_2.mPieces.length | 0); aPieceIdx_4++) {
                        var aPiece_7 = aMatchSet_2.mPieces[aPieceIdx_4];
                        aPiece_7.mScale.SetConstant(1.0);
                        aPiece_7.mCanMatch = false;
                    }
                }

                else {
                    if(aSpecialPiece != null) {
                        for(var aPieceIdx_5 = 0; aPieceIdx_5 < (aMatchSet_2.mPieces.length | 0); aPieceIdx_5++) {
                            var aPiece_8 = aMatchSet_2.mPieces[aPieceIdx_5];
                            if((aPiece_8 != aSpecialPiece) && (aPiece_8.mFlags == 0)) {
                                aPiece_8.mIsPieceStill = false;
                                aPiece_8.mScale.SetCurve('b+0,1,0.033333,1,~zL>         %]Bt(|#:M@');
                                aPiece_8.mScale.mIncRate *= this.GetMatchSpeed();
                                aPiece_8.mDestPct.SetCurve('b+0,1,0.033333,1,#.ht         ~~W[d');
                                aPiece_8.mDestPct.mIncRate *= this.GetMatchSpeed();
                                aPiece_8.mAlpha.SetCurve('b+0,1,0.033333,1,~r)6         H;?D,X#>3Z');
                                aPiece_8.mAlpha.mIncRate *= this.GetMatchSpeed();
                                aPiece_8.mDestCol = aSpecialPiece.mCol;
                                aPiece_8.mDestRow = aSpecialPiece.mRow;
                                var aDirX = aSpecialPiece.mCol - aPiece_8.mCol;
                                var aDirY = aSpecialPiece.mRow - aPiece_8.mRow;
                                if(aSpecialPiece.IsFlagSet(Game.Piece.EFlag.FLAME)) {
                                    var anEffect = new Game.PopAnimEffect(Game.Resources['POPANIM_FLAMEGEMCREATION']);
                                    anEffect.mPieceIdRel = aPiece_8.mId;
                                    anEffect.mX = aPiece_8.CX();
                                    anEffect.mY = aPiece_8.CY();
                                    anEffect.mOverlay = true;
                                    anEffect.mDoubleSpeed = true;
                                    if(aDirX != 0) {
                                        anEffect.Play$2('smear horizontal');
                                        if(aDirX < 0) {
                                            anEffect.mAngle = Game.MathUtil.PI;
                                        }
                                    }

                                    else {
                                        anEffect.Play$2('smear vertical');
                                        if(aDirY < 0) {
                                            anEffect.mAngle = Game.MathUtil.PI;
                                        }
                                    }
                                    this.mPostFXManager.AddEffect(anEffect);
                                }
                            }
                        }
                    }
                }
                var aMatchCount_2 = (aMatchSet_2.mPieces.length | 0);
                var anAvgX = ((aTotalX / aMatchCount_2) | 0);
                var anAvgY = ((aTotalY / aMatchCount_2) | 0);
                aCumSetX += anAvgX;
                aCumSetY += anAvgY;
                var aNumPoints = 0;
                this.AddToStatCred(Game.DM.EStat.MATCHES, 1, aMatchSet_2.mMoveCreditId);
                var aComboCount = ((Math.max(1, this.GetMoveStat(aMatchSet_2.mMoveCreditId, Game.DM.EStat.MATCHES))) | 0);
                aNumPoints = 50 * aComboCount + (aMatchCount_2 - 3) * 50;
                if(aMatchCount_2 >= 5) {
                    aNumPoints += (aMatchCount_2 - 4) * 350;
                }
                this.AddPoints(anAvgX + ((Game.Board.GEM_WIDTH / 2) | 0), anAvgY + ((Game.Board.GEM_HEIGHT / 2) | 0) - 8, aNumPoints, Game.DM.gPointColors[(aMatchSet_2.mPieces[0].mColor | 0) + 1], aMatchSet_2.mMatchId, true, true, aMatchSet_2.mMoveCreditId, false, Game.Board.EPointType.MATCH);
                this.MaxStatCred(Game.DM.EStat.BIGGESTMATCH, aMatchCount_2, aMatchSet_2.mMoveCreditId);
                if(aMoveCreditSet.indexOf(aMatchSet_2.mMoveCreditId) == -1) {
                    aMoveCreditSet.push(aMatchSet_2.mMoveCreditId);
                }
            }
        }
        if(doMatchSounds) {
            var aPan = this.GetPanPosition(((aCumSetX / aFoundCount) | 0) + ((Game.Board.GEM_WIDTH / 2) | 0));
            if(aFoundCount > 1) {
                Game.SoundUtil.PlayEx(Game.Resources['SOUND_DOUBLESET'], aPan, 1.0);
            }
            var aComboSoundIdx = this.GetMaxMovesStat(Game.DM.EStat.CASCADES) + 1;
            if(aFoundChains == 0) {
                aComboSoundIdx = 1;
            }
            if(aComboSoundIdx > 6) {
                aComboSoundIdx = 6;
            }
            if((fromUpdateSwapping) && (this.mSpeedBonusCount > 0)) {
                if(this.mSpeedBonusNum > 0.01) {
                    Game.SoundUtil.PlayEx(Game.Resources['SOUND_FLAMESPEED1'], aPan, 1.0);
                }

                else {
                    Game.SoundUtil.PlayEx(GameFramework.BaseApp.mApp.mResourceManager.GetSoundResourceById('SOUND_SPEEDMATCH' + (Math.min(8 + 1, this.mSpeedBonusCount + 1) | 0)), aPan, 1.0);
                }
            }

            else {
                Game.SoundUtil.PlayEx(GameFramework.BaseApp.mApp.mResourceManager.GetSoundResourceById('SOUND_COMBO_' + (aComboSoundIdx + 1)), aPan, 1.0);
            }
            for(var i_5 = 0; i_5 < aMoveCreditSet.length; ++i_5) {
                this.AddToStatCred(Game.DM.EStat.CASCADES, 1, aMoveCreditSet[i_5]);
            }
        }
        for(var i_6 = 0; i_6 < aTallyPieceSet.length; ++i_6) {
            var aPiece_9 = aTallyPieceSet[i_6];
            aPiece_9.mIsPieceStill = false;
            if(!aPiece_9.mIsBulging) {
                this.TallyPiece(aPiece_9, aPowerupPieceSet.indexOf(aPiece_9) == -1);
            }
        }
        if(hadFutureMatches && fromUpdateSwapping) {
            if(aDelayingPieceSet.indexOf(thePiece1) != -1 || aDelayingPieceSet.indexOf(thePiece2) != -1) {
                return 2;
            }
        }
        return (aFoundCount > 0) ? 1 : 0;
    },
    ShowHint : function Game_Board$ShowHint(fromButton) {
        if(this.mAutohintOverridePieceId != -1) {
            var p = this.GetPieceById(this.mAutohintOverridePieceId);
            if(p != null) {
                this.ShowPieceHint(p, false);
            }
            this.mWantHintTicks = 0;
            return;
        }
        if(fromButton) {
            this.mHintCooldownTicks = 150;
        }
        this.mWantHintTicks = 0;
        if(!fromButton && !this.mShowAutohints) {
            return;
        }
        var aCoords = Array.Create(4, 0);
        if(this.FindRandomMove(aCoords)) {
            var aPiece = this.mBoard[this.mBoard.mIdxMult0 * (aCoords[3]) + aCoords[2]];
            var aPiece2 = this.mBoard[this.mBoard.mIdxMult0 * (aCoords[1]) + aCoords[0]];
            if((aPiece2 != null) && (aPiece2.IsFlagSet(Game.Piece.EFlag.HYPERCUBE))) {
                aPiece = aPiece2;
            }
            this.ShowPieceHint(aPiece, fromButton);
        }
    },
    ButtonDown : function Game_Board$ButtonDown(e) {
        Game.SoundUtil.Play(Game.Resources['SOUND_BUTTON_PRESS']);
    },
    HintButtonPressed : function Game_Board$HintButtonPressed(e) {
        var aStep = this.mTutorialMgr.GetCurrentStep();
        if(aStep != null) {
            if(!aStep.mAllowStandardHints) {
                return;
            }
            if(aStep.mSpecialBehavior == Game.TutorialStep.ESpecialBehavior.HintBtn) {
                aStep.Finish();
            }
        }
        Game.SoundUtil.Play(Game.Resources['SOUND_BUTTON_RELEASE']);
        this.ShowHint(true);
        this.mHintButton.SetMouseVisible(false);
        this.AddToStat(Game.DM.EStat.HINT_USED, 1);
    },
    MenuButtonPressed : function Game_Board$MenuButtonPressed(e) {
        Game.SoundUtil.Play(Game.Resources['SOUND_BUTTON_RELEASE']);
        var aMenu = new Game.OptionsDialog(true);
        Game.BejApp.mBejApp.mDialogMgr.AddDialog(aMenu);
        aMenu.mX = this.GetBoardCenterX() - aMenu.mWidth / 2;
        aMenu.mY = 200;
        aMenu.AddEventListener(GameFramework.widgets.DialogEvent.CLOSED, ss.Delegate.create(this, this.handleGameMenuClosed));
    },
    handleGameMenuClosed : function Game_Board$handleGameMenuClosed(e) {
        if((e).mCloseResult == (Game.OptionsDialog.EResult.BackToMain | 0)) {
            this.BackToMenu();
        } else if((e).mCloseResult == (Game.OptionsDialog.EResult.LaunchTutorial | 0)) {
            this.mWantReset = true;
        }
        if(!this.mTutorialMgr.GetTutorialEnabled() && this.IsTutorialBusy()) {
            this.mTutorialMgr.Kill();
            var d = Game.BejApp.mBejApp.mDialogMgr.GetDialog(Game.DM.EDialog.TUTORIAL);
            if(d != null) {
                d.Kill();
            }
        }
    },
    ResetButtonPressed : function Game_Board$ResetButtonPressed(e) {
        Game.SoundUtil.Play(Game.Resources['SOUND_BUTTON_RELEASE']);
        if(this.mTutorialMgr.IsBusy()) {
            return;
        }
        if(this.mGameOverCount == 0) {
            var aDialog = Game.BejApp.mBejApp.DoModalDialog('RESET', 'Abandon the current game and start over?', '', GameFramework.widgets.Dialog.BUTTONS_YES_NO, Game.DM.EDialog.RESET);
            var aWidth = 850;
            aDialog.Resize(this.GetBoardCenterX() - ((aWidth / 2) | 0), 350, aWidth, aDialog.GetPreferredHeight(aWidth));
            aDialog.AddEventListener(GameFramework.widgets.DialogEvent.CLOSED, ss.Delegate.create(this, this.handleResetDialogClosed));
        }
    },
    handleResetDialogClosed : function Game_Board$handleResetDialogClosed(theEvent) {
        if((theEvent).WasYesPressed()) {
            this.mWantReset = true;
        }
    },
    ShowPieceHint : function Game_Board$ShowPieceHint(thePiece, theShowArrow) {
        thePiece.mHintScale.SetCurve('b+1,1.5,0.033333,1,#+Kx  >~###       c####');
        thePiece.mHintAlpha.SetCurve('b+0,1,0.006667,1,#### ;~###       O~### 9####');
        thePiece.mHintArrowPos.SetCurve('b+80,64,0.006667,1,####  &}### |####  #~### z####  &~###');
        if(this.WantsCalmEffects()) {
            thePiece.mHintScale.mIncRate *= 0.5;
            thePiece.mHintAlpha.mIncRate *= 0.5;
            thePiece.mHintArrowPos.mIncRate *= 0.5;
        }
        if(theShowArrow) {
            var anEffect = new Game.ParticleEffect(Game.Resources['PIEFFECT_HINTFLASH']);
            anEffect.mPieceIdRel = thePiece.mId;
            anEffect.mDoubleSpeed = true;
            this.mPostFXManager.AddEffect(anEffect);
        }
    },
    FillInBlanks : function Game_Board$FillInBlanks() {
        this.FillInBlanksEx(true);
    },
    FillInBlanksEx : function Game_Board$FillInBlanksEx(allowCascades) {
        if(this.mNeverAllowCascades) {
            allowCascades = false;
        }
        if(this.mGameOverPiece != null) {
            return;
        }
        for(var aRow = this.mBottomFillRow; aRow >= 0; aRow--) {
            for(var aCol = 0; aCol < 8; aCol++) {
                var aPiece = this.mBoard[this.mBoard.mIdxMult0 * (aRow) + aCol];
                if((aPiece != null) && (aPiece.mExplodeDelay > 0)) {
                    return;
                }
            }
        }
        var aNewPieceVector = [];
        var aGravityFactor = 0.265 * this.GetGravityFactor();
        var movedPieces;
        do {
            movedPieces = false;
            for(var aCol_2 = 0; aCol_2 < 8; aCol_2++) {
                var colFalling = false;
                var aTopY = -this.GetBoardY();
                var aMoveCreditId = this.mNextColumnCredit[aCol_2];
                var aLastFallVelocity = this.mBumpVelocities[aCol_2];
                var aFallStart = 0;
                var aFallCount = 0;
                for(var aRow_2 = this.mBottomFillRow; aRow_2 >= 0; aRow_2--) {
                    var aPiece_2 = this.mBoard[this.mBoard.mIdxMult0 * (aRow_2) + aCol_2];
                    if(aPiece_2 != null) {
                        aPiece_2.mCanMatch = true;
                        if(aPiece_2.mY < aTopY) {
                            aTopY = (aPiece_2.mY | 0);
                        }
                        if((colFalling) && ((this.IsPieceSwapping(aPiece_2)) || (aPiece_2.mDestPct.IsDoingCurve()) || (aPiece_2.mDestRow == -1) || (this.IsPieceMatching(aPiece_2)))) {
                            aFallCount = 0;
                            this.mBoard[this.mBoard.mIdxMult0 * (aRow_2 + 1) + aCol_2] = null;
                            colFalling = false;
                        }
                        if(colFalling) {
                            movedPieces = true;
                            if(aPiece_2.mFallVelocity == 0.0) {
                                aPiece_2.mFallVelocity += this.mBumpVelocities[aCol_2] + 1;
                                aPiece_2.mLastActiveTick = this.mUpdateCnt;
                            }
                            aFallCount++;
                            aLastFallVelocity = aPiece_2.mFallVelocity;
                            aPiece_2.mRow++;
                            aPiece_2.mIsPieceStill = false;
                            this.mBoard[this.mBoard.mIdxMult0 * (aRow_2) + aCol_2] = null;
                            this.mBoard[this.mBoard.mIdxMult0 * (aRow_2 + 1) + aCol_2] = aPiece_2;
                            aMoveCreditId = aPiece_2.mMoveCreditId;
                        }
                    }

                    else {
                        if(colFalling) {
                            this.mBoard[this.mBoard.mIdxMult0 * (aRow_2 + 1) + aCol_2] = null;
                            aFallCount++;
                        }

                        else {
                            aFallStart = aRow_2;
                            aFallCount = 0;
                            colFalling = true;
                        }
                    }
                }
                if(colFalling) {
                    movedPieces = true;
                    var aPiece_3 = this.CreateNewPiece(0, aCol_2);
                    aPiece_3.mFallVelocity = aLastFallVelocity - 0.55;
                    aPiece_3.mMoveCreditId = aMoveCreditId;
                    aPiece_3.mIsPieceStill = false;
                    aPiece_3.mY = aTopY - Game.Board.GEM_HEIGHT - (this.mRand.Next() % 15) - 10.0;
                    if(aPiece_3.GetScreenY() > -Game.Board.GEM_HEIGHT) {
                        aPiece_3.mY = -Game.Board.GEM_HEIGHT - this.GetBoardY();
                    }
                    aNewPieceVector.push(aPiece_3);
                    var aPiecesAbove = 0;
                    for(var aRow_3 = this.mBottomFillRow; aRow_3 >= 0; aRow_3--) {
                        var aFillPiece = this.mBoard[this.mBoard.mIdxMult0 * (aRow_3) + aCol_2];
                        if(aFillPiece != null) {
                            var aY = aFillPiece.GetScreenY();
                            if(aFillPiece.GetScreenY() < -this.GetBoardY()) {
                                aPiecesAbove++;
                                aY = -aPiecesAbove * Game.Board.GEM_HEIGHT * 2 - this.GetBoardY();
                            }
                        }
                    }
                }
                this.mNextColumnCredit[aCol_2] = -1;
            }
        } while(movedPieces);
        if(aNewPieceVector.length > 0) {
            var aTryCount = 0;
            var done = this.AllowNoMoreMoves();
            var wantSpecial = this.WantSpecialPiece(aNewPieceVector);
            var specialDropped = false;
            var hyperMixerDropped = false;
            var aGemList = this.GetNewGemColors();
            for(; ;) {
                specialDropped = false;
                for(var aGemNum = 0; aGemNum < (aNewPieceVector.length | 0); aGemNum++) {
                    aNewPieceVector[aGemNum].ClearFlags();
                    aNewPieceVector[aGemNum].mColor = Game.DM.EGemColor._INVALID;
                    aNewPieceVector[aGemNum].mCanDestroy = true;
                    aNewPieceVector[aGemNum].mCanMatch = true;
                    aNewPieceVector[aGemNum].mCounter = 0;
                }
                if(wantSpecial) {
                    specialDropped = this.DropSpecialPiece(aNewPieceVector);
                }
                if(this.WantHyperMixers()) {
                    var doHyperCube = true;

                    {
                        var $srcArray14 = this.mBoard;
                        for(var $enum14 = 0; $enum14 < $srcArray14.length; $enum14++) {
                            var aPiece_4 = $srcArray14[$enum14];
                            if(aPiece_4 != null && this.IsHypermixerCancelledBy(aPiece_4)) {
                                doHyperCube = false;
                                break;
                            }
                        }
                    }
                    if(doHyperCube) {
                        var aCoords = Array.Create(4, 0);
                        var dropHyper = false;
                        if(this.WantHypermixerBottomCheck() && this.FindMove(aCoords, 0, true, true, true, null, false)) {
                            if(aCoords[1] < this.mHypermixerCheckRow && aCoords[3] < this.mHypermixerCheckRow) {
                                dropHyper = true;
                            }
                        }
                        if(!dropHyper && this.WantHypermixerEdgeCheck()) {
                            var pieceId = 0;
                            var foundL = false;
                            var foundR = false;
                            while((!foundL || !foundR) && this.FindMove(aCoords, pieceId++, true, true, false, null, false)) {
                                if(aCoords[0] <= 3 || aCoords[2] <= 3) {
                                    foundL = true;
                                }
                                if(aCoords[0] >= this.mColCount - 4 || aCoords[2] >= this.mColCount - 4) {
                                    foundR = true;
                                }
                            }
                            if(!foundL || !foundR) {
                                dropHyper = true;
                            }
                        }
                        if(dropHyper) {
                            for(; ;) {
                                var aPiece_5 = aNewPieceVector[((GameFramework.Utils.GetRandFloatU() * aNewPieceVector.length) | 0)];
                                if(aPiece_5.mFlags == 0) {
                                    aPiece_5.mColor = Game.DM.EGemColor._INVALID;
                                    aPiece_5.SetFlag(Game.Piece.EFlag.HYPERCUBE);
                                    hyperMixerDropped = true;
                                    this.HypermixerDropped();
                                    break;
                                }
                            }
                        }
                    }
                }
                for(var aGemNum_2 = 0; aGemNum_2 < (aNewPieceVector.length | 0); aGemNum_2++) {
                    var aPiece_6 = aNewPieceVector[aGemNum_2];
                    if(aPiece_6.mFlags == 0 || aPiece_6.IsFlagSet(Game.Piece.EFlag.BOMB) || aPiece_6.IsFlagSet(Game.Piece.EFlag.REALTIME_BOMB)) {
                        aPiece_6.mColor = aGemList[(this.mRand.NextRange((aGemList.length | 0)) | 0)];
                    }
                    var aTryThresh = this.mHasBoardSettled ? 200 : 200000;
                    if((aTryCount >= aTryThresh) && (aGemNum_2 == 0)) {
                        allowCascades = true;
                        done = true;
                    }
                }
                if(this.TryingDroppedPieces(aNewPieceVector, aTryCount)) {
                    if(this.FindMove(null, 0, true, true, false, null, aTryCount < this.GetPowerGemThreshold())) {
                        done = true;
                    }
                }
                if(!allowCascades) {
                    if(this.HasSet()) {
                        done = false;
                    }
                }
                if(this.HasIllegalSet()) {
                    done = false;
                }
                if(done) {
                    if(!this.PiecesDropped(aNewPieceVector)) {
                        done = false;
                    }
                }
                if(done) {
                    break;
                }
                aTryCount++;
            }
            if((aNewPieceVector.length == this.mColCount * this.mRowCount) && (this.mGameTicks > 0) && (this.WantAnnihilatorReplacement())) {
                for(var aCubeNum = 0; aCubeNum < 2; aCubeNum++) {
                    for(var aHyperTryCount = 0; aHyperTryCount < 64; aHyperTryCount++) {
                        var aPiece_7 = aNewPieceVector[((this.mRand.Next() % aNewPieceVector.length) | 0)];
                        if(aPiece_7.mFlags == 0) {
                            aPiece_7.mColor = Game.DM.EGemColor._INVALID;
                            aPiece_7.SetFlag(Game.Piece.EFlag.HYPERCUBE);
                            this.StartPieceEffect(aPiece_7);
                            break;
                        }
                    }
                }
            }
            if(hyperMixerDropped) {
                this.NewHyperMixer();
            }
            this.BlanksFilled(specialDropped);
            for(var aGemNum_3 = 0; aGemNum_3 < (aNewPieceVector.length | 0); aGemNum_3++) {
                var aPiece_8 = aNewPieceVector[aGemNum_3];
                this.StartPieceEffect(aPiece_8);
            }
        }
    },
    BlanksFilled : function Game_Board$BlanksFilled(specialDropped) {
    },
    MatchMade : function Game_Board$MatchMade(theSwapData) {
        var aNewTime = (((this.mIdleTicks - this.mLastMatchTick) * 1.67) | 0);
        this.mMoveCounter++;
        if(theSwapData != null && !theSwapData.mForceSwap) {
            this.DecrementAllCounterGems(false);
        }
        this.mLastMoveTicks = 0;
        this.mWantHintTicks = 0;
        this.mAutohintOverridePieceId = -1;
        this.mAutohintOverrideTime = -1;
        var aStep = this.mTutorialMgr.GetCurrentStep();
        if(aStep != null && aStep.mType == Game.TutorialStep.EType.ModalDialogMoveClear) {
            aStep.Finish();
        }
        if(!this.AllowSpeedBonus()) {
            return;
        }
        this.mMatchTallyCount++;
        if((this.mSpeedBonusCount >= 9) && (this.mSpeedBonusFlameModePct == 0) && ((this.GetTimeLimit() == 0) || (this.GetTicksLeft() >= 5))) {
            var aPctHit = 1.5;
            if(aNewTime >= Game.DM.SPEED_TIME_RIGHT) {
                aPctHit = Math.max(0.0, Math.min(1.5, 1.0 - ((aNewTime - Game.DM.SPEED_TIME_RIGHT) / (Game.DM.SPEED_TIME_RIGHT - Game.DM.SPEED_TIME_LEFT))));
            }
            var aDelta = (aPctHit - this.mSpeedBonusNum);
            if(aDelta > 0) {
                this.mSpeedBonusNum = Math.min(1.0, this.mSpeedBonusNum + Math.min(0.1, aDelta * this.GetSpeedBonusRamp()));
                if((this.mSpeedBonusNum >= 1.0) && (this.mSpeedBonusFlameModePct == 0)) {
                    this.mSpeedBonusNum = 1.0;
                    this.mSpeedBonusDisp.SetCurve('b+0,1,0.05,1,####         ~~###');
                    this.DoSpeedText(0);
                }
            }
        }
        if((this.mSpeedBonusCount > 0) || ((this.mLastMatchTime >= 0) && (aNewTime + this.mLastMatchTime <= 300))) {
            if(this.mSpeedBonusCount == 0) {
                this.mSpeedBonusDisp.SetCurve('b+0,1,0.05,1,####         ~~###');
            }
            this.mSpeedBonusCount++;
            this.mSpeedBonusTextShowPct.Intercept('b;0,1,0.01,0.25,####         ~~###');
            this.mSpeedBonusCountHighest = (Math.max(this.mSpeedBonusCountHighest, this.mSpeedBonusCount) | 0);
            this.mSpeedBonusPointsGlow.SetCurve('b+0,1,0.033333,1,#### ;I-7l        f####');
            this.mSpeedBonusPointsScale.SetCurve('b+1,2,0.033333,1,####  >4###       c####');

            {
                var $srcArray15 = this.mPointsManager.mPointsList;
                for(var $enum15 = 0; $enum15 < $srcArray15.length; $enum15++) {
                    var aPoints = $srcArray15[$enum15];
                    if(aPoints.mUpdateCnt == 0) {
                        var aNumPoints = (Math.min(200, (this.mSpeedBonusCount + 1) * 20) | 0);
                        this.mSpeedBonusPoints += ((aNumPoints * this.mPointMultiplier * this.GetModePointMultiplier()) | 0);
                        this.AddPoints((aPoints.mX | 0), (aPoints.mY | 0), aNumPoints, aPoints.mColor, aPoints.mId, false, true, aPoints.mMoveCreditId, false, Game.Board.EPointType.SPEED);
                        aPoints.mUpdateCnt++;
                        break;
                    }
                }
            }
        }
        this.mLastMatchTime = (aNewTime | 0);
        this.mLastMatchTick = this.mIdleTicks;
    },
    CreateMatchPowerup : function Game_Board$CreateMatchPowerup(theMatchCount, thePiece, thePieceSet) {
        return false;
    },
    UpdateSpeedBonus : function Game_Board$UpdateSpeedBonus() {
        if((Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.TUTORIAL) != null) || (this.mLightningStorms.length != 0)) {
            this.mLastMatchTick = this.mIdleTicks;
        }
        var aNewTime = (((this.mIdleTicks - this.mLastMatchTick) * 1.67) | 0);
        var aPctPrev = aNewTime / Game.DM.SPEED_TIME1;
        var aPctPrevPrev = (aNewTime + Math.min(this.mLastMatchTime, Game.DM.SPEED_TIME1)) / Game.DM.SPEED_TIME2;
        var aPct = Math.max(aPctPrev, aPctPrevPrev);
        var aTimeScalar = 1.0;
        if(this.mMoveCounter == 0) {
            aTimeScalar = 2.0;
        } else if(this.mMoveCounter == 1) {
            aTimeScalar = 1.5;
        }
        if(this.mMatchTallyCount == Game.DM.SPEED_START_THRESHOLD) {
            aPct = aPctPrev * 0.75;
        }
        var aSpeedTally = (Math.min(this.mMatchTallyCount - Game.DM.SPEED_START_THRESHOLD + 1, Game.DM.SPEED_MAX_THRESHOLD) | 0);
        var aGoalTime = (Game.DM.SPEED_TIME_LEFT + this.mSpeedBonusNum * (Game.DM.SPEED_TIME_RIGHT - Game.DM.SPEED_TIME_LEFT));
        aGoalTime *= aTimeScalar;
        if((aNewTime >= aGoalTime) && (this.mSpeedBonusNum > 0) && (this.mSpeedBonusFlameModePct == 0)) {
            this.mSpeedBonusNum = this.mSpeedBonusNum * 0.985;
        }
        this.mSpeedModeFactor.SetConstant((1.0 + this.mSpeedBonusNum * 0.65) * this.GetSpeedModeFactorScale());
        this.mSpeedNeedle += (((0.5 - this.mSpeedBonusNum) * 132.0) - this.mSpeedNeedle) * 0.1;
        var aMatchTimeAllowed = (100.0 + Math.min(10, this.mSpeedBonusCount + 1) * 13.75) * aTimeScalar;
        if((aNewTime >= aMatchTimeAllowed) && (this.mSpeedBonusCount > 0)) {
            this.EndSpeedBonus();
        }
    },
    EndSpeedBonus : function Game_Board$EndSpeedBonus() {
        this.mLastMatchTick = -1000;
        this.mLastMatchTime = 1000;
        this.mSpeedBonusLastCount = this.mSpeedBonusCount;
        this.mSpeedBonusTextShowPct.Intercept('b;0,1.2,0.01,0.7,o2be ~~###       ~####');
        this.mSpeedBonusCount = 0;
        this.mSpeedBonusNum = 0;
        this.mSpeedBonusDisp.SetCurve('b+0,1,0.003333,1,~###       +~###  @####X####');
        this.mSpeedBonusPointsScale.SetCurve('b+0,2,0.003333,1,P###  RF###  t`###    X####');
    },
    AllowUI : function Game_Board$AllowUI() {
        return this.mLevelCompleteCount <= 0 && this.mGameOverCount <= 0;
    },
    DoGemCountPopup : function Game_Board$DoGemCountPopup(theCount) {
        this.mGemCountValueDisp = theCount;
        this.mGemCountCurve.SetCurve('b+1,2,0.008,1,$###7h6t6qjk=] ,.n[(  c####     .####');
        this.mGemCountAlpha.SetCurve('b+0,1,0.01,1,~###         ~####');
        this.mGemScalarAlpha.SetCurve('b+0,1,0.01,1,~###         ~####');
    },
    DoCascadePopup : function Game_Board$DoCascadePopup(theCount) {
        this.mCascadeCountValueDisp = theCount;
        this.mCascadeCountCurve.SetCurve('b+1,2,0.008,1,$###7h6t6qjk=] ,.n[(  c####     .####');
        this.mCascadeCountAlpha.SetCurve('b+0,1,0.01,1,~###         ~####');
        this.mGemScalarAlpha.SetCurve('b+0,1,0.01,1,~###         ~####');
    },
    UpdateCountPopups : function Game_Board$UpdateCountPopups() {
        var aGemsCleared = this.GetTotalMovesStat(Game.DM.EStat.GEMS_CLEARED);
        if((aGemsCleared >= this.GetGemCountPopupThreshold()) && (aGemsCleared > this.mGemCountValueCheck)) {
            this.DoGemCountPopup(aGemsCleared);
        }
        if((aGemsCleared == 0) || (aGemsCleared > this.mGemCountValueCheck)) {
            this.mGemCountValueCheck = aGemsCleared;
        } else {
            if(aGemsCleared < this.mGemCountValueCheck - 4) {
                this.mGemCountValueCheck = aGemsCleared + 4;
            }
        }
        var aChainCount = this.GetMaxMovesStat(Game.DM.EStat.CASCADES);
        if((aChainCount >= 3) && (aChainCount > this.mCascadeCountValueCheck)) {
            this.DoCascadePopup(aChainCount);
        }
        this.mCascadeCountValueCheck = aChainCount;
    },
    CalcAwesomeness : function Game_Board$CalcAwesomeness(theMoveCreditId) {
        var anAwesomeness = (Math.max(0, Math.pow(Math.max(0, this.GetMoveStat(theMoveCreditId, Game.DM.EStat.CASCADES) - 1), 1.5)) | 0);
        var aStat = this.GetMoveStat(theMoveCreditId, Game.DM.EStat.FLAMEGEMS_USED);
        anAwesomeness += (Math.max(0, aStat * 2 - 1) | 0);
        aStat = this.GetMoveStat(theMoveCreditId, Game.DM.EStat.LASERGEMS_USED);
        anAwesomeness += (Math.max(0, ((aStat * 2.5) | 0) - 1) | 0);
        aStat = this.GetMoveStat(theMoveCreditId, Game.DM.EStat.HYPERCUBES_USED);
        anAwesomeness += (Math.max(0, aStat * 3 - 1) | 0);
        aStat = this.GetMoveStat(theMoveCreditId, Game.DM.EStat.FLAMEGEMS_MADE);
        anAwesomeness += aStat;
        aStat = this.GetMoveStat(theMoveCreditId, Game.DM.EStat.LASERGEMS_MADE);
        anAwesomeness += aStat;
        aStat = this.GetMoveStat(theMoveCreditId, Game.DM.EStat.HYPERCUBES_MADE);
        anAwesomeness += aStat * 2;
        aStat = this.GetMoveStat(theMoveCreditId, Game.DM.EStat.BIGGESTMATCH);
        anAwesomeness += (Math.max(0, (aStat - 5) * 8) | 0);
        anAwesomeness += (Math.pow(this.GetMoveStat(theMoveCreditId, Game.DM.EStat.GEMS_CLEARED) / 15.0, 1.5) | 0);
        return anAwesomeness;
    },
    UpdateComplements : function Game_Board$UpdateComplements() {
        if(!this.WantPointComplements()) {
            return;
        }
        var aValue = 0;
        for(var aMoveDataIdx = 0; aMoveDataIdx < (this.mMoveDataVector.length | 0); aMoveDataIdx++) {
            aValue += this.CalcAwesomeness(this.mMoveDataVector[aMoveDataIdx].mMoveCreditId);
        }
        var aCurComplementLevel = -1;
        for(var i = this.UpdateComplements_gComplementPoints.length - 1; i >= 0; i--) {
            if(aValue >= this.UpdateComplements_gComplementPoints[i]) {
                aCurComplementLevel = i;
                if(i > this.mLastComplement) {
                    if(i >= this.GetMinComplementLevel()) {
                        this.DoComplement(i);
                    }
                }
                break;
            }
        }
        if((aValue == 0) || (aCurComplementLevel > this.mLastComplement)) {
            this.mLastComplement = aCurComplementLevel;
        } else {
            if(aCurComplementLevel < this.mLastComplement - 1) {
                this.mLastComplement = aCurComplementLevel + 1;
            }
        }
        if((this.mComplementNum != -1)) {
            this.mComplementAlpha.IncInVal();
        }
    },
    DoCombineAnim : function Game_Board$DoCombineAnim(i_fromPiece, i_tgtPiece) {
        if((i_fromPiece != i_tgtPiece) && (i_fromPiece.mFlags == 0)) {
            i_fromPiece.mIsPieceStill = false;
            i_fromPiece.mScale.SetCurve('b+0,1,0.033333,1,~zL>         %]Bt(|#:M@');
            i_fromPiece.mDestPct.SetCurve('b+0,1,0.033333,1,#.ht         ~~W[d');
            i_fromPiece.mDestPct.mIncRate *= this.GetMatchSpeed();
            i_fromPiece.mAlpha.SetCurve('b+0,1,0.033333,1,~r)6         H;?D,X#>3Z');
            i_fromPiece.mDestCol = i_tgtPiece.mCol;
            i_fromPiece.mDestRow = i_tgtPiece.mRow;
            var aDirX = i_tgtPiece.mCol - i_fromPiece.mCol;
            var aDirY = i_tgtPiece.mRow - i_fromPiece.mRow;
            if(i_tgtPiece.IsFlagSet(Game.Piece.EFlag.FLAME)) {
                var anEffect = new Game.PopAnimEffect(Game.Resources['POPANIM_FLAMEGEMCREATION']);
                anEffect.mPieceIdRel = i_fromPiece.mId;
                anEffect.mX = i_fromPiece.CX();
                anEffect.mY = i_fromPiece.CY();
                anEffect.mOverlay = true;
                if(aDirX != 0) {
                    anEffect.Play$2('smear horizontal');
                    if(aDirX < 0) {
                        anEffect.mAngle = Game.MathUtil.PI;
                    }
                }

                else {
                    anEffect.Play$2('smear vertical');
                    if(aDirY < 0) {
                        anEffect.mAngle = Game.MathUtil.PI;
                    }
                }
                this.mPostFXManager.AddEffect(anEffect);
            }
        }
    },
    ProcessMatches : function Game_Board$ProcessMatches(theMatches, theTallySet, fromUpdateSwapping) {
    },
    DecrementAllCounterGems : function Game_Board$DecrementAllCounterGems(immediate) {

        {
            var $srcArray16 = this.mBoard;
            for(var $enum16 = 0; $enum16 < $srcArray16.length; $enum16++) {
                var aPiece = $srcArray16[$enum16];
                if((aPiece != null) && !aPiece.IsFlagSet(Game.Piece.EFlag.REALTIME_BOMB) && !aPiece.IsFlagSet(Game.Piece.EFlag.DOOM)) {
                    this.DecrementCounterGem(aPiece, immediate);
                }
            }
        }
        return false;
    },
    DecrementAllDoomGems : function Game_Board$DecrementAllDoomGems(immediate) {

        {
            var $srcArray17 = this.mBoard;
            for(var $enum17 = 0; $enum17 < $srcArray17.length; $enum17++) {
                var aPiece = $srcArray17[$enum17];
                if((aPiece != null) && aPiece.IsFlagSet(Game.Piece.EFlag.DOOM)) {
                    this.DecrementCounterGem(aPiece, immediate);
                }
            }
        }
    },
    DecrementCounterGem : function Game_Board$DecrementCounterGem(thePiece, immediate) {
        if(thePiece.mCounter > 0) {
            if(immediate) {
                thePiece.mCounter--;
                if(thePiece.mCounter == 0) {
                    if(thePiece.IsFlagSet(Game.Piece.EFlag.COUNTER)) {
                        if(this.mGameOverCount == 0) {
                            this.GameOver();
                        }
                    }
                }
            }

            else {
                if(thePiece.IsFlagSet(Game.Piece.EFlag.COUNTER)) {
                    thePiece.mSpinFrame = 1;
                    thePiece.mSpinSpeed = 0.33;
                }
            }
        }
        return false;
    },
    SetMoveCredit : function Game_Board$SetMoveCredit(thePiece, theMoveCreditId) {
        thePiece.mMoveCreditId = (Math.max(thePiece.mMoveCreditId, theMoveCreditId) | 0);
    },
    HasClearedTutorial : function Game_Board$HasClearedTutorial(theTutorial) {
        return this.mTutorialMgr.HasClearedTutorial((theTutorial | 0));
    },
    SetTutorialCleared : function Game_Board$SetTutorialCleared(theTutorial, isCleared, sendTutorialCleared) {
        if(isCleared === undefined) {
            isCleared = true;
        }
        if(sendTutorialCleared === undefined) {
            sendTutorialCleared = true;
        }
        if(((this.mTutorialMgr.GetTutorialFlags() & (1 << (theTutorial | 0))) == 0) && (isCleared) && (sendTutorialCleared)) {
            var aTutorialName = Game.DM.gTutorialNames[(theTutorial | 0)];
            if(aTutorialName != null) {
                Game.BejApp.mBejApp.SubmitStandardMetrics('tutorial_cleared', [new GameFramework.misc.KeyVal('GameId', this.mGameId), new GameFramework.misc.KeyVal('TutorialType', aTutorialName), new GameFramework.misc.KeyVal('TutorialsEnabled', Game.BejApp.mBejApp.mProfile.mTutorialEnabled)]);
            }
        }
        Game.BejApp.mBejApp.mProfile.SetTutorialCleared((theTutorial | 0), isCleared);
    },
    DeferTutorialDialog : function Game_Board$DeferTutorialDialog(theTutorialFlag, thePiece) {
        var aDeferredTutorial = new Game.DeferredTutorial();
        aDeferredTutorial.mTutorialFlag = theTutorialFlag;
        aDeferredTutorial.mPieceId = thePiece.mId;
        this.mDeferredTutorialVector.push(aDeferredTutorial);
        this.SetTutorialCleared(theTutorialFlag, true, false);
    },
    CheckForTutorialDialogs : function Game_Board$CheckForTutorialDialogs() {
        if((Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.TUTORIAL) != null) || (Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.HELP) != null)) {
            return;
        }
        if((this.mLevelCompleteCount != 0) || (this.mGameOverCount != 0) || !this.mTutorialMgr.GetTutorialEnabled()) {
            this.mDeferredTutorialVector.clear();
            return;
        }
        while(this.mDeferredTutorialVector.length > 0) {
            if(this.mTimeExpired) {
                this.mDeferredTutorialVector.clear();
                return;
            }
            var aDeferredTutorial = this.mDeferredTutorialVector[0];
            if(this.GetPieceById(aDeferredTutorial.mPieceId) == null) {
                this.SetTutorialCleared(aDeferredTutorial.mTutorialFlag, false);
                this.mDeferredTutorialVector.removeAt(0);
                continue;
            }
            var aHeader = '';
            var aText = '';
            switch(aDeferredTutorial.mTutorialFlag) {
                case Game.DM.ETutorial.FLAME:
                {
                    aHeader = 'FLAME GEM';
                    aText = 'You made a ^007700^FLAME GEM^000000^ by matching 4 Gems in a row. Match it for an explosion!';
                    break;
                }
                case Game.DM.ETutorial.LASER:
                {
                    aHeader = 'STAR GEM';
                    aText = 'You made a ^007700^STAR GEM^000000^ by creating\ntwo intersecting matches!';
                    break;
                }
                case Game.DM.ETutorial.HYPERCUBE:
                {
                    aHeader = 'HYPERCUBE';
                    aText = 'You made a ^007700^HYPERCUBE^000000^ by matching 5 Gems in a row. Swap it to trigger!';
                    break;
                }
                case Game.DM.ETutorial.SUPERNOVA:
                {
                    aHeader = 'SUPERNOVA GEM';
                    aText = 'You made a ^007700^SUPERNOVA GEM^000000^ by matching 6+ Gems in a row. This powerful Gem explodes with the force of a million suns when matched.';
                    break;
                }
                case Game.DM.ETutorial.MULTIPLIER:
                {
                    aHeader = 'MULTIPLIER GEM';
                    aText = 'You have received a ^007700^MULTIPLIER GEM^000000^! Match it to multiply your score for the rest of the game.';
                    break;
                }
                case Game.DM.ETutorial.TIME_BONUS:
                {
                    aHeader = 'TIME GEM';
                    aText = 'You have received a ^007700^TIME GEM^000000^! Collect them to extend your game after the timer bar empties!';
                    break;
                }
            }
            var aDialog = new Game.HintDialog(aHeader, aText, true);
            aDialog.mTutorialFlag = aDeferredTutorial.mTutorialFlag;
            Game.BejApp.mBejApp.mDialogMgr.AddDialog(aDialog);
            aDialog.AddEventListener(GameFramework.widgets.DialogEvent.CLOSED, ss.Delegate.create(this, this.HandleHintDialogClosed));
            aDialog.mFlushPriority = 1;
            var aPiece = this.GetPieceById(aDeferredTutorial.mPieceId);
            if(aPiece != null) {
                if(aPiece.mRow < 4) {
                    aDialog.Move(this.GetBoardCenterX() - aDialog.mWidth / 2, aPiece.GetScreenY() + Game.Board.GEM_HEIGHT + 15);
                } else {
                    aDialog.Move(this.GetBoardCenterX() - aDialog.mWidth / 2, aPiece.GetScreenY() - 15 - aDialog.mHeight);
                }
            }
            this.mTutorialPieceIrisPct.SetCurve('b;0,1,0.028571,1,####         ~~###');
            break;
        }
    },
    HandleHintDialogClosed : function Game_Board$HandleHintDialogClosed(theEvent) {
        var aHintDialog = theEvent.target;
        if(aHintDialog.mNoHintsCheckbox.IsChecked()) {
            this.mTutorialMgr.SetTutorialEnabled(false);
            this.mDeferredTutorialVector.clear();
        }
        if(aHintDialog.mTutorialFlag != Game.DM.ETutorial.NONE) {
            this.SetTutorialCleared(aHintDialog.mTutorialFlag, false);
            this.SetTutorialCleared(aHintDialog.mTutorialFlag, true);
        }
        if(this.mDeferredTutorialVector.length > 0) {
            var aDeferredTutorial = this.mDeferredTutorialVector[0];
            this.mDeferredTutorialVector.removeAt(0);
        }
        this.mTutorialPieceIrisPct.SetConstant(0);
    },
    SetColorCount : function Game_Board$SetColorCount(theColorCount) {
        if(this.mColorCount != theColorCount) {
            this.mColorCount = theColorCount;
            GameFramework.Utils.Trace('ColorCount:' + this.mColorCount);
            this.mNewGemColors = [];
            for(var aGemColor = 0; aGemColor < theColorCount; aGemColor++) {
                if((theColorCount <= (Game.DM.EGemColor.BLUE | 0)) && (aGemColor == (Game.DM.EGemColor.ORANGE | 0))) {
                    aGemColor = (Game.DM.EGemColor.BLUE | 0);
                }
                this.mNewGemColors.push(aGemColor);
                this.mNewGemColors.push(aGemColor);
            }
        }
    },
    UpdateBulging : function Game_Board$UpdateBulging() {
        var hasBulging = false;

        {
            var $srcArray18 = this.mBoard;
            for(var $enum18 = 0; $enum18 < $srcArray18.length; $enum18++) {
                var aPiece = $srcArray18[$enum18];
                if((aPiece != null) && aPiece.mIsBulging) {
                    hasBulging = true;
                    if(!aPiece.mScale.IncInVal()) {
                        aPiece.mScale.SetConstant(1.0);
                        aPiece.mIsBulging = false;
                    }
                }
            }
        }
        return hasBulging;
    },
    FlipHeldSwaps : function Game_Board$FlipHeldSwaps() {
        for(var i = 0; i < (this.mSwapDataVector.length | 0); i++) {
            var aSwapData = this.mSwapDataVector[i];
            if((aSwapData.mHoldingSwap > 0) && (aSwapData.mPiece1 != null) && (aSwapData.mPiece2 != null)) {
                this.SwapPieceLocations(aSwapData.mPiece1, aSwapData.mPiece2, false);
                aSwapData.mSwapDir.x = -aSwapData.mSwapDir.x;
                aSwapData.mSwapDir.y = -aSwapData.mSwapDir.y;
            }
        }
    },
    UpdateSwapping : function Game_Board$UpdateSwapping() {
        for(var aSwapDataIdx = 0; aSwapDataIdx < (this.mSwapDataVector.length | 0); aSwapDataIdx++) {
            var aSwapData = this.mSwapDataVector[aSwapDataIdx];
            var done = false;
            aSwapData.mGemScale.IncInVal();
            if(!aSwapData.mSwapPct.IncInVal()) {
                done = true;
            }
            var aSwapCenterX = this.GetColX(aSwapData.mPiece1.mCol) + ((aSwapData.mSwapDir.x * Game.Board.GEM_WIDTH / 2) | 0);
            var aSwapCenterY = this.GetRowY(aSwapData.mPiece1.mRow) + ((aSwapData.mSwapDir.y * Game.Board.GEM_WIDTH / 2) | 0);
            aSwapData.mPiece1.mX = aSwapCenterX - aSwapData.mSwapPct.get_v() * aSwapData.mSwapDir.x * Game.Board.GEM_WIDTH / 2;
            aSwapData.mPiece1.mY = aSwapCenterY - aSwapData.mSwapPct.get_v() * aSwapData.mSwapDir.y * Game.Board.GEM_WIDTH / 2;
            if(!aSwapData.mDestroyTarget && aSwapData.mPiece2 != null) {
                aSwapData.mPiece2.mX = aSwapCenterX + aSwapData.mSwapPct.get_v() * aSwapData.mSwapDir.x * Game.Board.GEM_WIDTH / 2;
                aSwapData.mPiece2.mY = aSwapCenterY + aSwapData.mSwapPct.get_v() * aSwapData.mSwapDir.y * Game.Board.GEM_WIDTH / 2;
            }
            if(done) {
                var aPrevSize = (this.mSwapDataVector.length | 0);
                if((aSwapData.mForwardSwap)) {
                    var forceSwap = aSwapData.mForceSwap || this.ForceSwaps();
                    var aSwapRow = aSwapData.mPiece1.mRow + aSwapData.mSwapDir.y;
                    var aSwapCol = aSwapData.mPiece1.mCol + aSwapData.mSwapDir.x;
                    for(var aSwapPass = 0; aSwapPass < 2; aSwapPass++) {
                        if(aSwapData.mDestroyTarget) {
                            this.PieceDestroyedInSwap(aSwapData.mPiece2);
                            aSwapData.mPiece2 = null;
                            aSwapData.mPiece2 = null;
                        }
                        if(aSwapData.mPiece2 != null) {
                            this.SwapPieceLocations(aSwapData.mPiece1, aSwapData.mPiece2, false);
                        }

                        else {
                            this.mBoard[this.mBoard.mIdxMult0 * (aSwapData.mPiece1.mRow) + aSwapData.mPiece1.mCol] = null;
                            aSwapData.mPiece1.mCol = aSwapCol;
                            aSwapData.mPiece1.mRow = aSwapRow;
                            this.mBoard[this.mBoard.mIdxMult0 * (aSwapData.mPiece1.mRow) + aSwapData.mPiece1.mCol] = aSwapData.mPiece1;
                        }
                        aSwapData.mIgnore = aSwapPass == 0;
                        aSwapData.mPiece1.mSwapTick = this.mUpdateCnt;
                        if(aSwapData.mPiece2 != null) {
                            aSwapData.mPiece2.mSwapTick = this.mUpdateCnt;
                        }
                        this.mLastComboCount = this.mComboCount;
                        var foundSets = 0;
                        if(aSwapData.mPiece1 != null) {
                            aSwapData.mPiece1.mIsPieceStill = true;
                            aSwapData.mPiece1.mWillPieceBeStill = true;
                        }
                        if(aSwapData.mPiece2 != null) {
                            aSwapData.mPiece2.mIsPieceStill = true;
                            aSwapData.mPiece2.mWillPieceBeStill = true;
                        }
                        if(aSwapPass != 1) {
                            foundSets = this.FindSetsEx(true, aSwapData.mPiece1, aSwapData.mPiece2);
                        }
                        if(aSwapData.mPiece1 != null) {
                            aSwapData.mPiece1.mIsPieceStill = false;
                            aSwapData.mPiece1.mWillPieceBeStill = false;
                        }
                        if(aSwapData.mPiece2 != null) {
                            aSwapData.mPiece2.mIsPieceStill = false;
                            aSwapData.mPiece2.mWillPieceBeStill = false;
                        }
                        if((aSwapPass == 1) || (foundSets != 0) || (forceSwap)) {
                            if((foundSets == 2 && !forceSwap) || (aSwapData.mPiece1 != null && aSwapData.mPiece1.mIsBulging) || (aSwapData.mPiece2 != null && aSwapData.mPiece2.mIsBulging)) {
                                aSwapData.mHoldingSwap++;
                                if(aSwapData.mHoldingSwap > 400) {
                                    foundSets = 0;
                                    aSwapData.mHoldingSwap = 0;
                                }

                                else {
                                    done = false;
                                    continue;
                                }
                            }
                            if(foundSets != 0) {
                                this.MatchMade(aSwapData);
                            }

                            else {
                                if(forceSwap) {
                                    this.DecrementAllDoomGems(false);
                                }
                            }
                            if((aSwapPass == 0) && (this.mLastComboCount == this.mComboCount) && aSwapData.mPiece1.mColor == this.mLastPlayerSwapColor) {
                                this.ComboFailed();
                            }
                            if(aSwapPass == 0) {
                                if(aSwapData.mDragSwap) {
                                    this.IncStat(Game.DM.EStat.NUM_MOVES_DRAG);
                                } else {
                                    this.IncStat(Game.DM.EStat.NUM_MOVES_CLICK);
                                }
                                this.IncStat(Game.DM.EStat.NUM_MOVES);
                                this.IncStat(Game.DM.EStat.NUM_GOOD_MOVES);
                                this.SwapSucceeded(aSwapData);
                            }
                            break;
                        }
                        if(aSwapData.mDragSwap) {
                            this.IncStat(Game.DM.EStat.NUM_MOVES_DRAG);
                        } else {
                            this.IncStat(Game.DM.EStat.NUM_MOVES_CLICK);
                        }
                        this.IncStat(Game.DM.EStat.NUM_MOVES);
                        this.SwapFailed(aSwapData);
                        Game.SoundUtil.Play(Game.Resources['SOUND_BADMOVE']);
                        aSwapData.mHoldingSwap = 0;
                        aSwapData.mForwardSwap = false;
                        aSwapData.mSwapPct.SetCurve('b+-1,1,0.022222,1,#$)h B####    cObb4   z~LPQ');
                        aSwapData.mGemScale.SetCurve('b+-0.075,0.075,0.022222,1,P#FJ FP###    C~###    :PL=H');
                        aSwapData.mIgnore = false;
                        done = false;
                    }
                }
                if((done)) {
                    for(var aCheckSwapIdx = 0; aCheckSwapIdx < (this.mSwapDataVector.length | 0); aCheckSwapIdx++) {
                        var aCheckSwapData = this.mSwapDataVector[aCheckSwapIdx];
                        if(aCheckSwapData == aSwapData) {
                            this.mSwapDataVector.removeAt(aCheckSwapIdx);
                            aCheckSwapIdx--;
                            break;
                        }
                    }
                }
            }
        }
    },
    UpdateFalling : function Game_Board$UpdateFalling() {
        if(!this.CanPiecesFall()) {
            if(this.mGemFallDelay > 0) {
                --this.mGemFallDelay;
            }

            {
                var $srcArray19 = this.mBoard;
                for(var $enum19 = 0; $enum19 < $srcArray19.length; $enum19++) {
                    var aPiece = $srcArray19[$enum19];
                    if((aPiece != null) && (aPiece.mFallVelocity != 0)) {
                        aPiece.mFallVelocity = 0.01;
                    }
                }
            }
            for(var i = 0; i < this.mColCount; i++) {
                this.mBumpVelocities[i] = 0;
            }
            return;
        }
        var aHitCount = 0;
        var aCumHitX = 0;
        var aFallVel = this.GetGravityFactor() * 0.4675;
        {
            for(var aCol = 0; aCol < this.mColCount; aCol++) {
                var aLastY = 1200;
                var aLastVelY = 0;
                for(var aRow = this.mRowCount - 1; aRow >= 0; aRow--) {
                    var aPiece_2 = this.mBoard[this.mBoard.mIdxMult0 * (aRow) + aCol];
                    if((aPiece_2 != null) && ((aPiece_2.mIsPieceStill) || ((!this.IsPieceSwapping(aPiece_2)) && (!this.IsPieceMatching(aPiece_2))) || (aPiece_2.mFallVelocity < 0))) {
                        aPiece_2.mY += aPiece_2.mFallVelocity * 1.67;
                        var hit;
                        hit = aPiece_2.mY >= this.GetRowY(aRow);
                        if(hit) {
                            aPiece_2.mY = this.GetRowY(aRow);
                            if(aPiece_2.mFallVelocity >= 2.0) {
                                aHitCount++;
                                aCumHitX += (aPiece_2.GetScreenX() | 0) + ((Game.Board.GEM_WIDTH / 2) | 0);
                            }
                            if(aPiece_2.mFallVelocity > 0) {
                                aPiece_2.mFallVelocity = 0;
                            }
                        } else if(aPiece_2.mY >= aLastY - Game.Board.GEM_HEIGHT) {
                            aPiece_2.mY = aLastY - Game.Board.GEM_HEIGHT;
                            aPiece_2.mFallVelocity = aLastVelY;
                            this.mIsBoardStill = false;
                            aPiece_2.mIsPieceStill = false;
                        } else {
                            this.mIsBoardStill = false;
                            aPiece_2.mIsPieceStill = false;
                            aPiece_2.mFallVelocity += aFallVel;
                        }
                        if(aPiece_2.mFallVelocity != 0) {
                            aPiece_2.mLastActiveTick = this.mUpdateCnt;
                        }
                        aLastY = aPiece_2.mY;
                        aLastVelY = aPiece_2.mFallVelocity;
                    }
                }
            }
        }
        if((aHitCount > 0) && (Math.abs(this.mLastHitSoundTick - this.mUpdateCnt) >= 5)) {
            this.mLastHitSoundTick = this.mUpdateCnt;
            Game.SoundUtil.PlayEx(Game.Resources['SOUND_GEM_HIT'], this.GetPanPosition(((aCumHitX / aHitCount) | 0)), 1.0);
        }
    },
    UpdateHint : function Game_Board$UpdateHint() {
        if((this.mIsBoardStill) && (this.mBoardHidePct == 0) && (this.CanPlay()) && Game.BejApp.mBejApp.mDialogMgr.GetDialog(Game.DM.EDialog.TUTORIAL) == null && (!this.mTutorialMgr.IsBusy() || this.mTutorialMgr.AllowHints())) {
            this.mLastMoveTicks++;
            this.mWantHintTicks++;
            var hintTime = (this.mAutohintOverrideTime != -1 ? this.mAutohintOverrideTime : this.GetHintTime()) * 60;
            if(this.mWantHintTicks == hintTime) {
                this.ShowHint(false);
            }
        }
    },
    UpdateLevelBar : function Game_Board$UpdateLevelBar() {
        var aLevelPct = this.GetLevelPct();
        if(this.mLevelBarPct < aLevelPct) {
            if(this.mTimerAlpha.get_v() == 0) {
                this.mLevelBarPct = Math.min(aLevelPct, this.mLevelBarPct + (aLevelPct - this.mLevelBarPct) * 0.0255 + 0.0012);
            } else {
                this.mLevelBarPct = Math.min(aLevelPct, this.mLevelBarPct + (aLevelPct - this.mLevelBarPct) * 0.025 + 0.0005);
            }
        }

        else {
            this.mLevelBarPct = Math.max(aLevelPct, this.mLevelBarPct + (aLevelPct - this.mLevelBarPct) * 0.05 - 0.0001);
        }
        this.UpdateLevelBarEffect();
        this.CheckWin();
    },
    UpdateLevelBarEffect : function Game_Board$UpdateLevelBarEffect() {
        var aBarRect = this.GetLevelBarRect();
    },
    UpdateCountdownBar : function Game_Board$UpdateCountdownBar() {
        var aCountdownPct = this.GetCountdownPct();
        if(this.mCountdownBarPct < aCountdownPct) {
            if(this.mTimerAlpha.get_v() == 0) {
                this.mCountdownBarPct = Math.min(aCountdownPct, this.mCountdownBarPct + (aCountdownPct - this.mCountdownBarPct) * 0.0275 + 0.00125);
            } else {
                this.mCountdownBarPct = Math.min(aCountdownPct, this.mCountdownBarPct + (aCountdownPct - this.mCountdownBarPct) * 0.025 + 0.0005);
            }
        }

        else {
            this.mCountdownBarPct = Math.max(aCountdownPct, this.mCountdownBarPct + (aCountdownPct - this.mCountdownBarPct) * 0.05 - 0.0001);
        }
        var aBarRect = this.GetCountdownBarRect();
        this.CheckCountdownBar();
    },
    CheckCountdownBar : function Game_Board$CheckCountdownBar() {
        var aCountdownPct = Math.max(0.0, this.GetTicksLeft() / (this.GetTimeLimit() * 60.0));
        if((this.GetTimeLimit() > 0) && (aCountdownPct <= 0.0) && (this.CanTimeUp()) && this.mDeferredTutorialVector.length == 0 && (this.mGameOverCount == 0)) {
            this.mTimeExpired = true;
            this.GameOver();
        }
    },
    CheckWin : function Game_Board$CheckWin() {
        var aLevelPoints = this.GetLevelPoints();
        var aTimeLimit = this.GetTimeLimit();
        if(aTimeLimit == 0) {
            var aLevelPointsTotal = this.GetLevelPointsTotal();
            if((this.mLevelBarPct >= 1.0) && (aLevelPointsTotal >= aLevelPoints) && (this.mSpeedBonusFlameModePct == 0)) {
                this.LevelUp();
                return true;
            }
        }

        else {
            if(aLevelPoints > 0 && this.GetLevelPointsTotal() >= aLevelPoints) {
                this.LevelUp();
                return true;
            }
        }
        return false;
    },
    WantWarningGlow : function Game_Board$WantWarningGlow() {
        var aTimeLimit = this.GetTimeLimit();
        var aTicksLeft = this.GetTicksLeft();
        var aWarningStartTick = (aTimeLimit > 60) ? 1500 : 1000;
        return ((aTimeLimit > 0) && (aTicksLeft < aWarningStartTick));
    },
    GetSpeedBonusRamp : function Game_Board$GetSpeedBonusRamp() {
        return 0.075;
    },
    GetWarningGlowColor : function Game_Board$GetWarningGlowColor() {
        var aTicksLeft = this.GetTicksLeft();
        var aWarningStartTick = (this.GetTimeLimit() > 60) ? 1500 : 1000;
        var aMult = (aWarningStartTick - aTicksLeft) / aWarningStartTick;
        if(aTicksLeft == 0) {
            var aTimeLimit = this.GetTimeLimit();
            aMult *= Math.max(0, 120 - ((this.mGameTicks - 150) - aTimeLimit * 60)) / 120;
            aMult *= Math.max(0, 1.0 - this.mGameOverCount / 20.0);
        }
        var c = (((Math.sin(this.mUpdateCnt * 0.15) * 127 + 127) * aMult * this.GetPieceAlpha()) | 0);
        return GameFramework.gfx.Color.RGBAToInt(255, 255, 255, c);
    },
    WantBottomLevelBar : function Game_Board$WantBottomLevelBar() {
        return this.GetTimeLimit() == 0;
    },
    WantBottomFrame : function Game_Board$WantBottomFrame() {
        return true;
    },
    WantTopFrame : function Game_Board$WantTopFrame() {
        return true;
    },
    WantDrawButtons : function Game_Board$WantDrawButtons() {
        return true;
    },
    WantDrawScore : function Game_Board$WantDrawScore() {
        return true;
    },
    WantDrawBackground : function Game_Board$WantDrawBackground() {
        return true;
    },
    WantCountdownBar : function Game_Board$WantCountdownBar() {
        return this.GetTimeLimit() > 0;
    },
    UpdateMoveData : function Game_Board$UpdateMoveData() {
        for(var aMoveDataIdx = 0; aMoveDataIdx < (this.mMoveDataVector.length | 0); aMoveDataIdx++) {
            var aMoveData = this.mMoveDataVector[aMoveDataIdx];
            if(this.mLightningStorms.length == 0) {
                var found = false;

                {
                    var $srcArray20 = this.mBoard;
                    for(var $enum20 = 0; $enum20 < $srcArray20.length; $enum20++) {
                        var aPiece = $srcArray20[$enum20];
                        if(aPiece != null) {
                            if(aPiece.mMoveCreditId == aMoveData.mMoveCreditId) {
                                if(this.IsPieceStill(aPiece)) {
                                    aPiece.mLastMoveCreditId = aPiece.mMoveCreditId;
                                    aPiece.mMoveCreditId = -1;
                                    aPiece.mLastActiveTick = 0;
                                }

                                else {
                                    found = true;
                                }
                            }
                        }
                    }
                }
                for(var aCol = 0; aCol < this.mColCount; aCol++) {
                    if(this.mNextColumnCredit[aCol] == aMoveData.mMoveCreditId) {
                        found = true;
                    }
                }
                if(!found) {

                    {
                        var $srcArray21 = this.mBoard;
                        for(var $enum21 = 0; $enum21 < $srcArray21.length; $enum21++) {
                            var aPiece_2 = $srcArray21[$enum21];
                            if((aPiece_2 != null) && aPiece_2.mLastMoveCreditId == aMoveData.mMoveCreditId) {
                                aPiece_2.mLastMoveCreditId = -1;
                            }
                        }
                    }
                    this.mMoveDataVector.removeAt(aMoveDataIdx);
                    aMoveDataIdx--;
                    continue;
                }
            }
        }
    },
    GetRandSeedOverride : function Game_Board$GetRandSeedOverride() {
        if(this.mTutorialMgr.GetTutorialSequence() != null && this.mTutorialMgr.GetTutorialSequence().mBoardSeed != 0) {
            return this.mTutorialMgr.GetTutorialSequence().mBoardSeed;
        }
        return 0;
    },
    DrawSpeedBonus : function Game_Board$DrawSpeedBonus(g) {
        if(this.mSpeedBonusPointsScale.GetOutVal() > 0) {
            var aTransform = new GameFramework.geom.Matrix();
            aTransform.translate(0.0, -30.0);
            aTransform.scale(this.mSpeedBonusPointsScale.GetOutVal(), this.mSpeedBonusPointsScale.GetOutVal());
            aTransform.translate(0.0, 30.0);
            aTransform.translate(238.0, 60.0);
            var _t22 = g.PushMatrix(aTransform);
            try {

                {
                }

            } finally {
                _t22.Dispose();
            }
        }
    },
    UpdateTooltip : function Game_Board$UpdateTooltip() {
        if(!this.AllowTooltips()) {
            return;
        }
    },
    GetTooltipText : function Game_Board$GetTooltipText(thePiece, theHeader, theBody) {
        var usePiece = false;
        if(thePiece.IsFlagSet(Game.Piece.EFlag.FLAME)) {
            if(thePiece.IsFlagSet(Game.Piece.EFlag.LASER)) {
                theHeader = 'SUPERNOVA GEM';
                theBody = 'Created by matching 6+ Gems in a row, this powerful Gem explodes with the force of a million suns when matched.';
            }

            else {
                theHeader = 'FLAME GEM';
                theBody = 'Created by forming 4 Gems of the same color in a line. Explodes when matched!';
            }
            usePiece = true;
        } else if(thePiece.IsFlagSet(Game.Piece.EFlag.LASER)) {
            theHeader = 'STAR GEM';
            theBody = 'Created by making two intersecting matches. Match it to fire lightning 4 ways!';
            usePiece = true;
        } else if(thePiece.IsFlagSet(Game.Piece.EFlag.HYPERCUBE)) {
            theHeader = 'HYPERCUBE';
            theBody = 'Created by matching 5 Gems in a line. Swap it with a Gem to zap all Gems of the same color onscreen.';
            usePiece = true;
        } else if(thePiece.IsFlagSet(Game.Piece.EFlag.POINT_MULTIPLIER)) {
            theHeader = 'MULTIPLIER GEM';
            theBody = 'Randomly drops onto your board. Match it to increase your score multiplier by 1!';
            usePiece = true;
        } else if(thePiece.IsFlagSet(Game.Piece.EFlag.DETONATOR)) {
            theHeader = 'DETONATOR';
            theBody = 'Click to detonate all Special Gems on the board.';
            usePiece = true;
        } else if(thePiece.IsFlagSet(Game.Piece.EFlag.BOMB) || thePiece.IsFlagSet(Game.Piece.EFlag.REALTIME_BOMB)) {
            theHeader = 'TIME BOMB';
            theBody = 'Match this Gem before the counter reaches zero!';
            usePiece = true;
        }
        return usePiece;
    },
    UpdatePoints : function Game_Board$UpdatePoints() {
        if(this.mUpdateCnt % 4 == 0) {
            if(this.mDispPoints < this.mPoints) {
                this.mDispPoints = (Math.min(this.mPoints, this.mDispPoints + (((this.mPoints - this.mDispPoints) * 0.2) | 0) + 1) | 0);
            } else if(this.mDispPoints > this.mPoints) {
                this.mDispPoints = (Math.max(this.mPoints, this.mDispPoints + (((this.mPoints - this.mDispPoints) * 0.2) | 0) - 1) | 0);
            }
        }
    },
    UpdateGame : function Game_Board$UpdateGame() {
        if(this.mAnnouncements.length > 0) {
            this.mAnnouncements[0].Update();
        }
        this.mSunPosition.IncInVal();
        this.mAlpha.IncInVal();
        this.mSideAlpha.IncInVal();
        this.mSideXOff.IncInVal();
        this.mScale.IncInVal();
        this.mPrevPointMultAlpha.IncInVal();
        this.mPointMultPosPct.IncInVal();
        this.mPointMultTextMorph.IncInVal();
        this.mSpeedBonusDisp.IncInVal();
        this.mSpeedBonusPointsGlow.IncInVal();
        this.mSpeedBonusPointsScale.IncInVal();
        this.mTutorialPieceIrisPct.IncInVal();
        this.mGemCountCurve.IncInVal();
        this.mGemCountAlpha.IncInVal();
        this.mGemScalarAlpha.IncInVal();
        this.mCascadeCountCurve.IncInVal();
        this.mCascadeCountAlpha.IncInVal();
        this.mGemScalarAlpha.IncInVal();
        this.mBoostShowPct.IncInVal();
        this.mTimerInflate.IncInVal();
        this.mTimerAlpha.IncInVal();
        if(this.mKilling) {
            return;
        }
        if(this.mPointMultPosPct.CheckUpdatesFromEndThreshold(1)) {
            this.mPointMultTextMorph.SetCurve('b+0,1,0.02,1,####         ~~###');
        }
        if(!this.IsGameSuspended()) {
            Game.Board.mTotalTicks++;
            this.mGameTicks++;
            if((this.mGameTicks % 6 == 0) && (this.mLastMoveTicks < 60 * 60)) {
                this.IncStat(Game.DM.EStat.SECONDS_PLAYED);
            }
            this.UpdateDeferredSounds();
        }
        this.FlipHeldSwaps();
        this.FindSets();
        this.FlipHeldSwaps();
        if(this.mGameOverPiece != null) {
            this.UpdateBombExplode();
        }

        else {
            if(this.mLightningStorms.length == 0) {
                this.FillInBlanks();
            }
            this.UpdateMoveData();
            this.UpdateSwapping();
            this.UpdateFalling();
        }
        this.mPointMultSoundDelay = (Math.max(0, this.mPointMultSoundDelay - 1) | 0);
        if(this.mPointMultSoundDelay == 0 && this.mPointMultSoundQueue.length > 0) {
            Game.SoundUtil.Play(this.mPointMultSoundQueue[0]);
            this.mPointMultSoundQueue.removeAt(0);
            this.mPointMultSoundDelay = ((40 / 1.67) | 0);
        }
        if(!this.CanPlay()) {
            var aSelectedPiece = this.GetSelectedPiece();
            if(aSelectedPiece != null) {
                aSelectedPiece.mSelected = false;
                aSelectedPiece.mSelectorAlpha.SetConstant(0.0);
            }
        }
        for(var aCol = 0; aCol < this.mColCount; aCol++) {
            this.mBumpVelocities[aCol] = Math.min(0, this.mBumpVelocities[aCol] + 0.275 * 1.67);
        }

        {
            var $srcArray23 = this.mBoard;
            for(var $enum23 = 0; $enum23 < $srcArray23.length; $enum23++) {
                var aPiece = $srcArray23[$enum23];
                if(aPiece != null) {
                    if(aPiece.mImmunityCount != 0) {
                        --aPiece.mImmunityCount;
                    }
                    if((aPiece.IsFlagSet(Game.Piece.EFlag.BOMB) || aPiece.IsFlagSet(Game.Piece.EFlag.REALTIME_BOMB) || aPiece.IsFlagSet(Game.Piece.EFlag.DOOM)) && (aPiece.mCounter == 0) && (this.mIsBoardStill)) {
                        this.BombExploded(aPiece);
                    }
                    if(aPiece.mSpinSpeed != 0) {
                        var aFrameCount = 20;
                        aPiece.mSpinFrame += aPiece.mSpinSpeed;
                        if(aPiece.mSpinFrame < 0) {
                            aPiece.mSpinFrame += aFrameCount;
                        }
                        if(aPiece.IsFlagSet(Game.Piece.EFlag.COUNTER)) {
                            if(aPiece.mSpinFrame >= aFrameCount) {
                                aPiece.mSpinFrame = 0;
                                aPiece.mSpinSpeed = 0;
                            }
                            if((aPiece.mSpinSpeed != 0) && aPiece.mSpinFrame >= 5 && aPiece.mSpinFrame <= 10) {
                                aPiece.mCounter--;
                                aPiece.mSpinFrame = 16;
                            }
                        }
                    }
                    if(aPiece.IsFlagSet(Game.Piece.EFlag.REALTIME_BOMB) && (this.mGameOverCount == 0) && (this.mLevelCompleteCount == 0) && (!this.IsGameSuspended())) {
                        aPiece.mTimer = (aPiece.mTimer + 1) % aPiece.mTimerThreshold;
                        if(aPiece.mTimer == 0) {
                            this.DecrementCounterGem(aPiece, false);
                        }
                    }
                }
            }
        }
        this.ExamineBoard();
        var doBoom = false;
        var doElectroBoom = false;
        var didMultiplierBoom = false;
        var anExplodeCount = 0;
        var anExplodeAccumX = 0;

        {
            var $srcArray24 = this.mBoard;
            for(var $enum24 = 0; $enum24 < $srcArray24.length; $enum24++) {
                var aPiece_2 = $srcArray24[$enum24];
                if((aPiece_2 != null) && (aPiece_2.mExplodeDelay > 0) && (--aPiece_2.mExplodeDelay == 0)) {
                    if(aPiece_2.IsFlagSet(Game.Piece.EFlag.INFERNO_SWAP)) {
                        var aPrevImmunity = aPiece_2.mImmunityCount;
                        aPiece_2.mImmunityCount = 1;
                        anExplodeAccumX += (aPiece_2.CX() | 0);
                        anExplodeCount++;
                        this.ExplodeAt((aPiece_2.CX() | 0), (aPiece_2.CY() | 0));
                        doBoom = true;
                        aPiece_2.mImmunityCount = aPrevImmunity;
                        aPiece_2.ClearFlag(Game.Piece.EFlag.INFERNO_SWAP);
                    }

                    else {
                        if((aPiece_2.IsFlagSet(Game.Piece.EFlag.FLAME)) || (aPiece_2.IsFlagSet(Game.Piece.EFlag.BLAST_GEM)) || ((aPiece_2.IsFlagSet(Game.Piece.EFlag.LASER)) && (aPiece_2.mImmunityCount > 0))) {
                            if(aPiece_2.IsFlagSet(Game.Piece.EFlag.BLAST_GEM)) {
                                var aBlastCount = this.mGameStats[(Game.DM.EStat.BLASTGEMS_USED | 0)];
                                this.AddPoints((aPiece_2.CX() | 0), (aPiece_2.CY() | 0), 1000 * aBlastCount, Game.DM.gGemColors[(aPiece_2.mColor | 0)], aPiece_2.mMatchId, false, false, -1, false, Game.Board.EPointType.SPECIAL);
                                this.AddToStatCred(Game.DM.EStat.BLASTGEMS_USED, 1, aPiece_2.mMoveCreditId);
                                var aCurMoveCreditId = aPiece_2.mMoveCreditId;
                                var aSpecialCount = 0;

                                {
                                    var $srcArray25 = this.mBoard;
                                    for(var $enum25 = 0; $enum25 < $srcArray25.length; $enum25++) {
                                        var aSubPiece = $srcArray25[$enum25];
                                        if((aSubPiece != null) && (aSubPiece.IsFlagSet(Game.Piece.EFlag.FLAME) || aSubPiece.IsFlagSet(Game.Piece.EFlag.HYPERCUBE) || aSubPiece.IsFlagSet(Game.Piece.EFlag.LASER) || aSubPiece.IsFlagSet(Game.Piece.EFlag.COIN) || aSubPiece.IsFlagSet(Game.Piece.EFlag.POINT_MULTIPLIER) || aSubPiece.IsFlagSet(Game.Piece.EFlag.BLAST_GEM))) {
                                            if(aSubPiece.IsFlagSet(Game.Piece.EFlag.COIN)) {
                                                if(aSpecialCount == 0) {
                                                    aSpecialCount++;
                                                }
                                                aSubPiece.ClearFlag(Game.Piece.EFlag.COIN);
                                                continue;
                                            }
                                            aSubPiece.mMoveCreditId = aCurMoveCreditId;
                                            aSubPiece.mExplodeDelay = 1 + aSpecialCount * 15;
                                            aSubPiece.mImmunityCount = 0;
                                            aSpecialCount++;
                                        }
                                    }
                                }
                            }

                            else {
                                this.AddToStatCred(Game.DM.EStat.FLAMEGEMS_USED, 1, aPiece_2.mMoveCreditId);
                            }
                            anExplodeAccumX += (aPiece_2.CX() | 0);
                            anExplodeCount++;
                            this.AddPoints((aPiece_2.CX() | 0), (aPiece_2.CY() | 0), 20, GameFramework.gfx.Color.WHITE_RGB, aPiece_2.mMatchId, true, true, aPiece_2.mMoveCreditId, false, Game.Board.EPointType.SPECIAL);
                            this.ExplodeAt((aPiece_2.CX() | 0), (aPiece_2.CY() | 0));
                            doBoom = true;
                        } else if(((aPiece_2.IsFlagSet(Game.Piece.EFlag.HYPERCUBE)) || (aPiece_2.IsFlagSet(Game.Piece.EFlag.LASER)) || (aPiece_2.IsFlagSet(Game.Piece.EFlag.COIN)) || (aPiece_2.IsFlagSet(Game.Piece.EFlag.POINT_MULTIPLIER))) && (this.TriggerSpecialEx(aPiece_2, null))) {
                        } else {
                            if(aPiece_2.IsFlagSet(Game.Piece.EFlag.POINT_MULTIPLIER)) {
                                if(!didMultiplierBoom) {
                                    didMultiplierBoom = true;
                                }
                            }

                            else {
                                doElectroBoom = true;
                            }
                            if((aPiece_2.IsFlagSet(Game.Piece.EFlag.DETONATOR)) || (aPiece_2.IsFlagSet(Game.Piece.EFlag.SCRAMBLE))) {
                                this.AddPoints((aPiece_2.CX() | 0), (aPiece_2.CY() | 0), 300, GameFramework.gfx.Color.WHITE_RGB, aPiece_2.mMatchId, true, true, aPiece_2.mMoveCreditId, false, Game.Board.EPointType.SPECIAL);
                            }
                            this.SmallExplodeAt(aPiece_2, aPiece_2.CX(), aPiece_2.CY(), true, false);
                        }
                    }
                }
            }
        }
        if(doBoom) {
            if(this.WantsCalmEffects()) {
                if(anExplodeCount > 0) {
                    Game.SoundUtil.PlayEx(Game.Resources['SOUND_PREBLAST'], 0.0, 0.5);
                    Game.SoundUtil.PlayEx(Game.Resources['SOUND_GEM_SHATTERS'], this.GetPanPosition(((anExplodeAccumX / anExplodeCount) | 0)), 0.5);
                }
                Game.SoundUtil.PlayEx(Game.Resources['SOUND_BOMB_EXPLODE'], 0.0, 0.5);
            }

            else {
                if(anExplodeCount > 0) {
                    Game.SoundUtil.Play(Game.Resources['SOUND_PREBLAST']);
                    Game.SoundUtil.PlayEx(Game.Resources['SOUND_GEM_SHATTERS'], this.GetPanPosition(((anExplodeAccumX / anExplodeCount) | 0)), 1.0);
                }
                Game.SoundUtil.Play(Game.Resources['SOUND_BOMB_EXPLODE']);
            }
        } else if(doElectroBoom) {
            if(this.WantsCalmEffects()) {
                Game.SoundUtil.PlayEx(Game.Resources['SOUND_SMALL_EXPLODE'], 0, 0.5);
            } else {
                Game.SoundUtil.Play(Game.Resources['SOUND_SMALL_EXPLODE']);
            }
        }

        {
            var $srcArray26 = this.mBoard;
            for(var $enum26 = 0; $enum26 < $srcArray26.length; $enum26++) {
                var aPiece_3 = $srcArray26[$enum26];
                if((aPiece_3 != null) && !aPiece_3.mScale.IncInVal()) {
                    if((aPiece_3.mScale.get_v() > 1.0)) {
                        aPiece_3.mScale.SetCurve('b+0,1.2,0.05,1,~###         ~#Blc');
                    } else if(aPiece_3.mScale.get_v() == 1.0) {
                        aPiece_3.mScale.SetConstant(1.0);
                    } else if((aPiece_3.mScale.get_v() == 0.0) && (!aPiece_3.mDestPct.IsDoingCurve())) {
                        this.DeletePiece(aPiece_3);
                    }
                }
            }
        }

        {
            var $srcArray27 = this.mBoard;
            for(var $enum27 = 0; $enum27 < $srcArray27.length; $enum27++) {
                var aPiece_4 = $srcArray27[$enum27];
                if(aPiece_4 != null) {
                    aPiece_4.mSelectorAlpha.IncInVal();
                    if((aPiece_4.mRotPct != 0.0) || (aPiece_4.mSelected)) {
                        aPiece_4.mRotPct += 0.02 * 1.67;
                        if(aPiece_4.mRotPct >= 1.0) {
                            aPiece_4.mRotPct = 0.0;
                        }
                    }
                }
            }
        }

        {
            var $srcArray28 = this.mBoard;
            for(var $enum28 = 0; $enum28 < $srcArray28.length; $enum28++) {
                var aPiece_5 = $srcArray28[$enum28];
                if(aPiece_5 != null) {
                    if(aPiece_5.mDestPct.get_v() != 0.0) {
                        aPiece_5.mX = this.GetColX(aPiece_5.mCol) * (1.0 - aPiece_5.mDestPct.get_v()) + this.GetColX(aPiece_5.mDestCol) * aPiece_5.mDestPct.get_v();
                        aPiece_5.mY = this.GetRowY(aPiece_5.mRow) * (1.0 - aPiece_5.mDestPct.get_v()) + this.GetRowY(aPiece_5.mDestRow) * aPiece_5.mDestPct.get_v();
                    }

                    else {
                        aPiece_5.mFlyVY += aPiece_5.mFlyAY * 1.67;
                        aPiece_5.mX += aPiece_5.mFlyVX * 1.67;
                        aPiece_5.mY += aPiece_5.mFlyVY * 1.67;
                    }
                }
            }
        }
        if(this.mLightningStorms.length == 0) {
            this.FillInBlanks();
        }
        if(this.mIsBoardStill) {
            this.CheckForTutorialDialogs();
            if((this.mGameOverCount == 0) && (!this.ForceSwaps()) && (!this.FindMove(null, 0, true, true, false, null, false)) && (!this.mWantLevelup)) {
                this.GameOver();
            }
        }
        this.UpdateLightning();
        if(this.IsGameIdle()) {
            this.mIdleTicks++;
        }
        if((this.mComboFlashPct.IsInitialized()) && (!this.mComboFlashPct.HasBeenTriggered())) {
            this.mComboCountDisp = Math.min(this.mComboLen, this.mComboCountDisp + 0.04);
        } else if(this.mComboCountDisp < this.mComboCount) {
            this.mComboCountDisp = Math.min(this.mComboCount, this.mComboCountDisp + 0.04);
        } else {
            this.mComboCountDisp = Math.max(this.mComboCount, this.mComboCountDisp - 0.04);
        }
        if((this.mComboFlashPct.IsInitialized()) && (!this.mComboFlashPct.IncInVal())) {
            this.NewCombo();
        }
        this.UpdateSpeedBonus();
        this.UpdateCountPopups();
        this.UpdateComplements();
        this.UpdateLevelBar();
        this.UpdateCountdownBar();
        this.UpdateHint();
        if(this.mGameOverCount > 0 && this.mDeferredTutorialVector.length == 0) {
            this.mDeferredTutorialVector.length = 0;
            if((++this.mGameOverCount == 240) && (Game.DialogMgr.mDialogMgr.mDialogList.length == 0)) {
                this.GameOverExit();
            }
        }
        this.mPostFXManager.mAlpha = this.GetPieceAlpha();
        this.mPreFXManager.mAlpha = this.GetPieceAlpha();
        if(this.mIsBoardStill) {
            var aMovesPerSecond = Math.max(0.1, this.mGameStats[(Game.DM.EStat.NUM_MOVES | 0)] / (this.mGameTicks / 60.0));
            if(((GameFramework.Utils.GetRandFloatU() < 0.01) && (this.mLastSunTick == 0) && (this.mUpdateCnt >= 50)) || ((GameFramework.BaseApp.mApp.mCurFPS >= 45) && (GameFramework.Utils.GetRandFloatU() < 0.003 * aMovesPerSecond) && (!this.mSunFired)) || ((GameFramework.BaseApp.mApp.mCurFPS >= 45) && (GameFramework.Utils.GetRandFloatU() < 0.0006 * aMovesPerSecond))) {
                this.mSunPosition.SetCurve('b+-200,1500,0.006667,1,#0zN         ~~W7v');
                this.mSunFired = true;
                this.mLastSunTick = this.mUpdateCnt;
            }
        }

        else {
            this.mSunFired = false;
        }
        if(this.mComboFlashPct.get_v() == 0) {
            var aComboSpace = ((44 - this.mComboLen * 5.5) | 0);
            var anAngle = -this.mComboCount * aComboSpace + (((this.mComboLen - 1) * aComboSpace / 2) | 0);
            this.mComboSelectorAngle += ((anAngle - this.mComboSelectorAngle) / 20) * 1.67;
        }
        if((this.mWantLevelup) && (this.mIsBoardStill) && (this.mDeferredTutorialVector.length == 0)) {
            this.SubmitStats(false);
            for(var i = 0; i < (Game.DM.EStat._COUNT | 0); i++) {
                this.mLevelStats[i] = 0;
            }
            var anAnnouncement = new Game.Announcement(this, 'LEVEL\nCOMPLETE');
            anAnnouncement.mBlocksPlay = false;
            anAnnouncement.mDarkenBoard = false;
            Game.SoundUtil.Play(Game.Resources['SOUND_VOICE_LEVELCOMPLETE']);
            if((GameFramework.BaseApp.mApp.get_Is3D()) && (!Game.BejApp.mBejApp.mIsSlow)) {
                this.mHyperspace = new Game.HyperspaceUltra(this);
                Game.BejApp.mBejApp.mGameLayerWidget.AddWidget(this.mHyperspace);
            }

            else {
                this.mHyperspace = new Game.HyperspaceFallback(this);
                var aParentWidget = this.mParent;
                this.RemoveSelf();
                aParentWidget.AddWidget(this.mHyperspace);
                aParentWidget.AddWidget(this);
                this.mAppState.SetFocus(this);
            }
            {
                this.mHyperspace.Resize(-160, 0, 1920, 1200);
            }
            this.mWantLevelup = false;
        }
        if(this.mPointMultDarkenPct.get_v() > 0 && !this.mTimeExpired) {
            if(this.mLightningStorms.length > 0) {
                this.mBoardDarken = Math.max(this.mBoardDarken, this.mPointMultDarkenPct.get_v());
            } else {
                this.mBoardDarken = this.mPointMultDarkenPct.get_v();
            }
        }
        if(this.mBoardDarkenAnnounce > 0) {
            this.mBoardDarken = Math.max(this.mBoardDarken, this.mBoardDarkenAnnounce);
        }
        if(this.mHintCooldownTicks > 0) {
            --this.mHintCooldownTicks;
            this.mHintButton.SetMouseVisible(false);
        }

        else {
            this.mHintButton.SetMouseVisible(true);
        }
        if((this.mLightningStorms.length == 0) && (this.mSpeedBonusFlameModePct > 0)) {
            this.mSpeedBonusFlameModePct = Math.max(0, this.mSpeedBonusFlameModePct - 0.00125 * 1.67);
            if(this.mSpeedBonusFlameModePct == 0) {
                this.mSpeedBonusNum = 0;
            }
        }
        if(this.mSettlingDelay > 0) {
            this.mSettlingDelay--;
        }
        if(this.mScrambleDelayTicks > 0) {
            this.mScrambleDelayTicks--;
        }
        if(this.mFlameSound == null) {
            this.mFlameSound = GameFramework.BaseApp.mApp.GetSoundInst(Game.Resources['SOUND_SPEEDBOARD_FLAMELOOP']);
            if(this.mFlameSound != null) {
                this.mFlameSound.SetVolume(0.0);
                this.mFlameSound.PlayEx(true, false);
            }
        }
        if(this.mFlameSound != null) {
            this.mFlameSound.SetVolume(Math.max(this.mFlameSoundBlazingVol.GetOutVal(), Math.max(0.0, 1.0 - (1.0 - this.mSpeedBonusNum) * 2.5)) * this.mAlpha.GetOutVal() * this.GetPieceAlpha());
        }
        {
            if(Game.BejApp.mBejApp.mAutoPlay == Game.DM.EAutoplay.TestHyper) {
                if(this.GetLevelPct() < 0.95) {
                    this.mLevelPointsTotal = ((Math.max(this.mLevelPointsTotal, ((this.GetLevelPoints() * 0.95) | 0))) | 0);
                    Game.BejApp.mBejApp.mAutoLevelUpCount = 0;
                } else if(this.GetLevelPct() >= 1.0) {
                    Game.BejApp.mBejApp.mAutoLevelUpCount = ((Math.max(0, Game.BejApp.mBejApp.mAutoLevelUpCount + 1)) | 0);
                    if(Game.BejApp.mBejApp.mAutoLevelUpCount == 1) {
                        for(var i_2 = 0; i_2 < 3; ++i_2) {
                            var randPiece = this.GetPieceAtRowCol(Game.Util.Rand() % this.mRowCount, Game.Util.Rand() % this.mColCount);
                            if(randPiece != null && this.IsPieceStill(randPiece)) {
                                this.Hypercubeify(randPiece);
                            }
                        }
                    }
                }
            }
            if(!this.WantFreezeAutoplay() && (Game.BejApp.mBejApp.mAutoPlay != Game.DM.EAutoplay.None) && (this.CanPlay()) && (((this.IsBoardStill()) && (Game.Util.Rand() % 40 == 0)) || (Game.BejApp.mBejApp.mAutoPlay == Game.DM.EAutoplay.NoDelay || Game.BejApp.mBejApp.mAutoPlay == Game.DM.EAutoplay.NoDelayWithInvalidMoves || Game.BejApp.mBejApp.mAutoPlay == Game.DM.EAutoplay.TestHyper || Game.Util.Rand() % 60 == 0))) {
                var tryQueueSwap = false;
                if(Game.Util.Rand() % 8 < 8) {
                    tryQueueSwap = true;
                    var aCoords = Array.Create(4, 0);
                    if((Game.BejApp.mBejApp.mAutoPlay == Game.DM.EAutoplay.TestHyper && this.FindRandomMoveCoords(aCoords, true)) || this.FindRandomMove(aCoords)) {
                        var aPiece_6 = this.mBoard[this.mBoard.mIdxMult0 * (aCoords[3]) + aCoords[2]];
                        var aPiece2 = this.mBoard[this.mBoard.mIdxMult0 * (aCoords[1]) + aCoords[0]];
                        this.QueueSwap(aPiece_6, aPiece2.mRow, aPiece2.mCol, false, true);
                    }
                }
                if(!tryQueueSwap || (Game.BejApp.mBejApp.mAutoPlay == Game.DM.EAutoplay.NoDelayWithInvalidMoves && this.mUpdateCnt % 1 == 0) || (Game.BejApp.mBejApp.mAutoPlay == Game.DM.EAutoplay.TestHyper && this.mUpdateCnt % 40 == 0)) {
                    var aPiece_7 = this.mBoard[this.mBoard.mIdxMult0 * (Game.Util.Rand() % this.mRowCount) + Game.Util.Rand() % this.mColCount];
                    if(aPiece_7 != null) {
                        var anOffsets = Array.Create2D(4, 2, 0, -1, 0, 1, 0, 0, -1, 0, 1);
                        var aDir = Game.Util.Rand() % 4;
                        this.QueueSwap(aPiece_7, aPiece_7.mRow + anOffsets[anOffsets.mIdxMult0 * (aDir) + 1], aPiece_7.mCol + anOffsets[anOffsets.mIdxMult0 * (aDir) + 0], false, true);
                    }
                }
            }
        }
    },
    WantFreezeAutoplay : function Game_Board$WantFreezeAutoplay() {
        if(Game.BejApp.mBejApp.mAutoPlay == Game.DM.EAutoplay.TestHyper) {
            return Game.BejApp.mBejApp.mAutoLevelUpCount >= 300;
        } else {
            return this.mWantLevelup;
        }
    },
    GameOverExit : function Game_Board$GameOverExit() {
    },
    IsTutorialBusy : function Game_Board$IsTutorialBusy() {
        return this.mTutorialMgr.IsBusy() || Game.BejApp.mBejApp.mDialogMgr.GetDialog(Game.DM.EDialog.TUTORIAL) != null;
    },
    DoUpdate : function Game_Board$DoUpdate() {
        {
            for(var i = 0; i < 2; i++) {
                if(this.mSpeedFireBarPIEffect[i] != null) {
                    this.mSpeedFireBarPIEffect[i].Update();
                    if(!this.mSpeedFireBarPIEffect[i].IsActive()) {
                        this.mSpeedFireBarPIEffect[i] = null;
                    }
                }
            }
        }
        if(Game.BejApp.mBejApp.mDialogMgr.GetDialog(Game.DM.EDialog.END_LEVEL) != null) {
            return;
        }

        {
            var $srcArray29 = this.mBoard;
            for(var $enum29 = 0; $enum29 < $srcArray29.length; $enum29++) {
                var aPiece = $srcArray29[$enum29];
                if(aPiece != null) {
                    aPiece.mIsPieceStill = this.IsPieceStill(aPiece);
                    aPiece.mWillPieceBeStill = this.WillPieceBeStill(aPiece);
                }
            }
        }
        this.mIsBoardStill = this.IsBoardStill();
        this.mPreFXManager.Update();
        if((this.mAlpha.get_v() == 1) && (this.mScale.get_v() == 1) && (this.mUpdateCnt >= 200)) {
            this.UpdateTooltip();
        }
        if((this.mUserPaused || ((Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.QUEST_HELP) != null && this.mTimerAlpha.GetOutVal() == 1.0) || Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.OPTIONS) != null || Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.MAIN_MENU_CONFIRM) != null || Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.RESET) != null)) && this.WantsHideOnPause()) {
            this.mBoardHidePct = Math.min(1.0, this.mBoardHidePct + 0.035);
            if((Game.DialogMgr.mDialogMgr.mDialogList.length == 0) && (this.mStartDelay == 0)) {
                this.mVisPausePct = Math.min(1.0, this.mVisPausePct + 0.035);
            }
            if(this.mBoardHidePct >= 0.75) {
                return;
            }
        } else if(this.mScale.get_v() == 1.0) {
            this.mBoardHidePct = Math.max(0.0, this.mBoardHidePct - 0.075);
            this.mVisPausePct = Math.max(0.0, this.mVisPausePct - 0.075);
        }
        if(Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.HELP) != null || Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.OPTIONS) != null) {
            return;
        }
        if(this.mStartDelay > 0) {
            if(this.mStartDelay == 10) {
                this.CheckForTutorialDialogs();
                if(Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.HELP) != null) {
                    return;
                }
            }
            if(--this.mStartDelay == 0) {
                this.DisableUI(false);
            }
            return;
        }

        {
            var $srcArray30 = this.mBoard;
            for(var $enum30 = 0; $enum30 < $srcArray30.length; $enum30++) {
                var aPiece_2 = $srcArray30[$enum30];
                if(aPiece_2 != null) {
                    aPiece_2.Update();
                }
            }
        }
        if((this.mAlpha.get_v() == 1) && (this.mScale.get_v() == 1) && (Game.DialogMgr.mDialogMgr.mDialogList.length == 0) && (this.mGameOverCount == 0) && (this.mHasBoardSettled) && !this.IsTutorialBusy()) {
            if(this.mReadyDelayCount > 0) {
                if(--this.mReadyDelayCount == 110) {
                    if(true) {
                        var anAnnouncement = new Game.Announcement(this, 'GET READY');
                        anAnnouncement.mBlocksPlay = false;
                        anAnnouncement.mAlpha.mIncRate *= 3.0;
                        anAnnouncement.mScale.mIncRate *= 3.0;
                        anAnnouncement.mDarkenBoard = false;
                    }
                    Game.SoundUtil.PlayVoice(Game.Resources['SOUND_VOICE_GETREADY']);
                }
            }
            if(((this.mTimerInflate.get_v() == 0) || (this.GetTimeLimit() == 0) || (this.mGoDelayCount > 1)) && ((this.mGoDelayCount >= 0) && (--this.mGoDelayCount == 0))) {
                var anAnnouncement_2 = new Game.Announcement(this, 'GO!');
                anAnnouncement_2.mBlocksPlay = false;
                anAnnouncement_2.mAlpha.mIncRate *= 3.0;
                anAnnouncement_2.mScale.mIncRate *= 3.0;
                anAnnouncement_2.mDarkenBoard = false;
                Game.SoundUtil.PlayVoice(Game.Resources['SOUND_VOICE_GO']);
            }
        }
        for(var aQueuedMoveIdx = 0; aQueuedMoveIdx < (this.mQueuedMoveVector.length | 0); aQueuedMoveIdx++) {
            var aQueuedMove = this.mQueuedMoveVector[aQueuedMoveIdx];
            if(this.mUpdateCnt >= aQueuedMove.mUpdateCnt) {
                if(aQueuedMove.mUpdateCnt == this.mUpdateCnt) {
                    var aSelectedPiece = this.GetPieceById(aQueuedMove.mSelectedId);
                    if(aSelectedPiece != null) {
                        this.TrySwapEx(aSelectedPiece, aQueuedMove.mSwappedRow, aQueuedMove.mSwappedCol, aQueuedMove.mForceSwap, aQueuedMove.mPlayerSwapped, false, aQueuedMove.mDragSwap);
                    }
                }
                var anOldestWanted = this.mUpdateCnt - 1;
                if(this.mMoveDataVector.length > 0) {
                    anOldestWanted = this.mMoveDataVector[0].mUpdateCnt;
                }
                if(aQueuedMove.mUpdateCnt < anOldestWanted) {
                    this.mQueuedMoveVector.removeAt(aQueuedMoveIdx);
                    aQueuedMoveIdx--;
                }
            }
        }

        {
            var $srcArray31 = this.mBoard;
            for(var $enum31 = 0; $enum31 < $srcArray31.length; $enum31++) {
                var aPiece_3 = $srcArray31[$enum31];
                if(aPiece_3 != null) {
                    aPiece_3.mDestPct.IncInVal();
                    aPiece_3.mAlpha.IncInVal();
                    aPiece_3.mHintAlpha.IncInVal();
                    aPiece_3.mHintArrowPos.IncInVal();
                    aPiece_3.mHintFlashScale.IncInVal();
                    aPiece_3.mHintFlashAlpha.IncInVal();
                }
            }
        }
        if(this.UpdateBulging()) {

            {
                var $srcArray32 = this.mBoard;
                for(var $enum32 = 0; $enum32 < $srcArray32.length; $enum32++) {
                    var aPiece_4 = $srcArray32[$enum32];
                    if(aPiece_4 != null) {
                        aPiece_4.mSelectorAlpha.IncInVal();
                        if((aPiece_4.mRotPct != 0.0) || (aPiece_4.mSelected)) {
                            aPiece_4.mRotPct += 0.02;
                            if(aPiece_4.mRotPct >= 1.0) {
                                aPiece_4.mRotPct = 0.0;
                            }
                        }
                    }
                }
            }
            return;
        }
        this.UpdatePoints();
        GameFramework.widgets.ClassicWidget.prototype.Update.apply(this);
        this.UpdateGame();
    },
    UpdateCheckReset : function Game_Board$UpdateCheckReset() {
        if(this.mWantReset) {
            this.mWantReset = false;
            this.Init();
            this.NewGame();
            return true;
        }
        return false;
    },
    Update : function Game_Board$Update() {
        if(this.UpdateCheckReset()) {
            return;
        }
        if(Game.BejApp.mBejApp.mDialogMgr.GetDialog(Game.DM.EDialog.OPTIONS) == null && Game.BejApp.mBejApp.mDialogMgr.GetDialog(Game.DM.EDialog.RESET) == null) {
            this.mTutorialMgr.Update();
        }
        var allBtns = Array.Create(3, null, this.mHintButton, this.mMenuButton, this.mResetButton);

        {
            var $srcArray33 = allBtns;
            for(var $enum33 = 0; $enum33 < $srcArray33.length; $enum33++) {
                var btn = $srcArray33[$enum33];
                if(btn != null) {
                    btn.mAlpha = this.mAlpha.get_v();
                }
            }
        }
        if((GameFramework.BaseApp.mApp.get_Is3D()) && (!Game.BejApp.mBejApp.mIsSlow)) {
            GameFramework.BaseApp.mApp.mResourceManager.PauseStreaming((this.mHyperspace == null) || (this.mHyperspace.mUpdateCnt < 96));
        } else {
            GameFramework.BaseApp.mApp.mResourceManager.PauseStreaming(this.mHyperspace == null);
        }
        if(this.mBackground != null) {
            this.mBackground.mVisible = !Game.BejApp.mBejApp.mMainMenu.IsTransitioning() || !GameFramework.BaseApp.mApp.get_Is3D();
        }
        if(!this.AllowUI()) {
            this.DisableUI(true);
        }
        var aWantSpeed = 1.0;
        var anInterpVal = 0.95;
        this.Update_aSpeed = anInterpVal * this.Update_aSpeed + (1.0 - anInterpVal) * aWantSpeed;
        if(Math.abs(this.Update_aSpeed - aWantSpeed) < 0.01) {
            this.Update_aSpeed = aWantSpeed;
        }
        this.Update_aSpeed *= this.GetGameSpeed();
        this.mUpdateAcc += this.Update_aSpeed;
        var aNumUpdates = (this.mUpdateAcc | 0);
        this.mUpdateAcc -= aNumUpdates;
        var aPrevUpdateCnt = this.mUpdateCnt;
        for(var i = 0; i < aNumUpdates; i++) {
            this.DoUpdate();
        }
        this.mPreFXManager.mAlpha = this.GetPieceAlpha();
        this.mPostFXManager.mAlpha = this.GetPieceAlpha();
        if(Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.AWARD) != null) {
            this.mNeedsMaskCleared = true;
            if(this.mGameOverCount > 0) {
                this.mGameOverCount = 400;
            }
            this.DoUpdate();
        }
        this.mMenuButton.mMouseVisible = this.GetAlpha() * this.mSideAlpha.get_v() == 1.0;
        if((this.mHintButton != null) && (this.mHintCooldownTicks == 0)) {
            this.mHintButton.mMouseVisible = this.mMenuButton.mMouseVisible;
        }
        if(this.mResetButton != null) {
            this.mResetButton.mMouseVisible = this.mMenuButton.mMouseVisible;
        }
        this.mHintButton.mVisible = ((this.mSideXOff.get_v() == 0) && (this.mScale.get_v() >= 0.8));
        this.mMenuButton.mVisible = ((this.mSideXOff.get_v() == 0) && (this.mScale.get_v() >= 0.8));
        if((this.mAlpha.get_v() == 0) && (this.mKilling) && (Game.BejApp.mBejApp.mBoard == this)) {
        }
        if(((this.mUpdateCnt % 20 == 0) && (this.mUpdateCnt != aPrevUpdateCnt)) || (this.mBarInstanceVector.length < 3)) {
            var aBarInstance = new Game.BarInstance();
            aBarInstance.mSrcX = GameFramework.Utils.GetRandFloatU();
            aBarInstance.mSrcY = GameFramework.Utils.GetRandFloatU();
            aBarInstance.mAlpha = 0;
            aBarInstance.mDAlpha = 0.018 + GameFramework.Utils.GetRandFloatU() * 0.003;
            this.mBarInstanceVector.push(aBarInstance);
        }
        for(var aBarIdx = 0; aBarIdx < this.mBarInstanceVector.length; aBarIdx++) {
            var aBarInstance_2 = this.mBarInstanceVector[aBarIdx];
            aBarInstance_2.mAlpha += aBarInstance_2.mDAlpha;
            if(aBarInstance_2.mAlpha >= 1.0) {
                aBarInstance_2.mAlpha = 1.0;
                aBarInstance_2.mDAlpha = -aBarInstance_2.mDAlpha;
            } else if(aBarInstance_2.mAlpha <= 0.0) {
                this.mBarInstanceVector.removeAt(aBarIdx);
                aBarIdx--;
            }
        }
        if(this.mGameOverCount == 400) {
            this.Init();
            this.NewGame();
        }
        if(this.mBackground != null) {
            this.mBackground.mWantAnim = ((this.mHyperspace == null) || (this.mScale.get_v() == 1.0)) && (this.GetAlpha() == 1.0) && (this.mScale.get_v() == 1.0) && (this.mHasBoardSettled) && (Game.BejApp.mBejApp.mDialogMgr.mDialogList.length == 0);
        }
        if(this.mUpdateCnt % 60 == 0) {
            this.AddToStat(Game.DM.EStat.FPS_SAMPLE_COUNT, 1);
            this.AddToStat(Game.DM.EStat.FPS_SAMPLE_TOTAL, GameFramework.BaseApp.mApp.mCurFPS);
            this.MaxStat(Game.DM.EStat.FPS_MAX, GameFramework.BaseApp.mApp.mCurFPS);
            if((GameFramework.BaseApp.mApp.mCurFPS < this.mLevelStats[(Game.DM.EStat.FPS_MIN | 0)]) || (this.mLevelStats[(Game.DM.EStat.FPS_MIN | 0)] == 0)) {
                this.mLevelStats[(Game.DM.EStat.FPS_MIN | 0)] = GameFramework.BaseApp.mApp.mCurFPS;
            }
            if((GameFramework.BaseApp.mApp.mCurFPS < this.mGameStats[(Game.DM.EStat.FPS_MIN | 0)]) || (this.mGameStats[(Game.DM.EStat.FPS_MIN | 0)] == 0)) {
                this.mGameStats[(Game.DM.EStat.FPS_MIN | 0)] = GameFramework.BaseApp.mApp.mCurFPS;
            }
        }
    },
    DrawGemLighting : function Game_Board$DrawGemLighting(g, thePiece) {
        if((!GameFramework.BaseApp.mApp.get_Is3D()) || (thePiece.mColor == Game.DM.EGemColor.HYPERCUBE) || (thePiece.mScale.get_v() != 1.0) || (thePiece.mRotPct != 0.0) || (this.GetPieceAlpha() != 1.0)) {
            return;
        }
        if(this.mPostFXManager.mEffects[(Game.Effect.EFxType.LIGHT | 0)] != null) {
            var aLights = null;
            var aXOfs = this.GetBoardX() + ((Game.Board.GEM_WIDTH / 2) | 0);
            var aYOfs = this.GetBoardY() + ((Game.Board.GEM_WIDTH / 2) | 0);

            {
                var $srcArray34 = this.mPostFXManager.mEffects[(Game.Effect.EFxType.LIGHT | 0)];
                for(var $enum34 = 0; $enum34 < $srcArray34.length; $enum34++) {
                    var anEffect = $srcArray34[$enum34];
                    var aX = anEffect.mX - aXOfs;
                    var aY = anEffect.mY - aYOfs;
                    if(aLights == null) {
                        aLights = Game.Board.mGemLightData;
                        Game.Board.mGemLightData[0] = 0;
                        Game.Board.mGemLightData[1] = 0;
                        Game.Board.mGemLightData[2] = 0;
                        Game.Board.mGemLightData[3] = 0;
                        Game.Board.mGemLightData[4] = 0;
                        Game.Board.mGemLightData[5] = 0;
                        Game.Board.mGemLightData[6] = 0;
                        Game.Board.mGemLightData[7] = 0;
                        Game.Board.mGemLightData[8] = 0;
                    }
                    {
                        var aDX = (aX - thePiece.mX) / anEffect.mScale;
                        var aDY = (aY - thePiece.mY) / anEffect.mScale;
                        var aDistSq = aDX * aDX + aDY * aDY;
                        var anIntensity = Math.min(anEffect.mValue[2], anEffect.mValue[0] / Math.max(1.0, aDistSq + anEffect.mValue[1]));
                        if(anIntensity <= 0.2) {
                            continue;
                        }
                        var aDXDY = aDX / aDY;
                        var aDYDX = aDX / aDY;
                        var aDir = 8;
                        if(aDistSq < 500) {
                            aDir = 8;
                        } else if(aDY < 0) {
                            if(aDXDY >= 2.414) {
                                aDir = 2;
                            } else if(aDXDY >= 0.414) {
                                aDir = 1;
                            } else if(aDXDY >= -0.414) {
                                aDir = 0;
                            } else if(aDXDY >= -2.414) {
                                aDir = 7;
                            } else {
                                aDir = 6;
                            }
                        } else {
                            if(aDXDY <= -2.414) {
                                aDir = 2;
                            } else if(aDXDY <= -0.414) {
                                aDir = 3;
                            } else if(aDXDY <= 0.414) {
                                aDir = 4;
                            } else if(aDXDY <= 2.414) {
                                aDir = 5;
                            } else {
                                aDir = 6;
                            }
                        }
                        aLights[aDir] = Math.min(1.0, aLights[aDir] + anIntensity * anEffect.mAlpha);
                    }
                }
            }
            if(aLights != null) {
                var anOfsX = ((thePiece.GetScreenX() + thePiece.mShakeOfsX) | 0);
                var anOfsY = ((thePiece.GetScreenY() + thePiece.mShakeOfsY) | 0);
                for(var aLightDir = 0; aLightDir < aLights.length; aLightDir++) {
                    if((aLights[aLightDir] != 0.0) && (thePiece.mColor != Game.DM.EGemColor.HYPERCUBE)) {
                        Game.Resources['IMAGE_GEMLIGHTING'].mAdditive = true;
                        var _t35 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(aLights[aLightDir]));
                        try {
                            g.DrawImageCel(Game.Resources['IMAGE_GEMLIGHTING'].get_OffsetImage(), anOfsX, anOfsY, (thePiece.mColor | 0) * 9 + aLightDir);
                        } finally {
                            _t35.Dispose();
                        }
                    }
                }
            }
        }
        if((this.mSunPosition.IsInitialized()) && (!this.mSunPosition.HasBeenTriggered())) {
            Game.Resources['IMAGE_GEMLIGHTING'].mAdditive = true;
            var aPieceDist = ((thePiece.CX() - this.GetBoardX()) + (thePiece.CY() - this.GetRowY(0))) * 0.707;
            var aSunDist = aPieceDist - this.mSunPosition.get_v();
            if(Math.abs(aSunDist) > 160) {
                return;
            }
            var anOfsX_2 = ((thePiece.GetScreenX() + thePiece.mShakeOfsX) | 0);
            var anOfsY_2 = ((thePiece.GetScreenY() + thePiece.mShakeOfsY) | 0);
            var aLightUL = Math.min(0.5, 8.0 / Math.max(1, (Math.abs(aSunDist - 32.0))));
            if(aLightUL > 0) {
                var _t36 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(aLightUL));
                try {
                    g.DrawImageCel(Game.Resources['IMAGE_GEMLIGHTING'].get_OffsetImage(), anOfsX_2, anOfsY_2, (thePiece.mColor | 0) * 9 + 1);
                } finally {
                    _t36.Dispose();
                }
            }
            var aLightTop = Math.min(0.5, 8.0 / Math.max(1, (Math.abs(aSunDist) - 0)));
            if(aLightTop > 0) {
                var _t37 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(aLightTop));
                try {
                    g.DrawImageCel(Game.Resources['IMAGE_GEMLIGHTING'].get_OffsetImage(), anOfsX_2, anOfsY_2, (thePiece.mColor | 0) * 9 + 8);
                } finally {
                    _t37.Dispose();
                }
            }
            var aLightLR = Math.min(0.5, 8.0 / Math.max(1, (Math.abs(aSunDist + 32.0))));
            if(aLightLR > 0) {
                var _t38 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(aLightLR));
                try {
                    g.DrawImageCel(Game.Resources['IMAGE_GEMLIGHTING'].get_OffsetImage(), anOfsX_2, anOfsY_2, (thePiece.mColor | 0) * 9 + 5);
                } finally {
                    _t38.Dispose();
                }
            }
        }
    },
    DrawHypercube : function Game_Board$DrawHypercube(g, thePiece) {
        var aHyperFrame = ((((Game.BejApp.mBejApp.mUpdateCnt / 3) | 0)) | 0) % 60;
        g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.GetPieceAlpha()));
        g.DrawImageCel(Game.Resources['IMAGE_HYPERCUBE_FRAME'].get_OffsetImage(), thePiece.GetScreenX() - 16, thePiece.GetScreenY() - 16, aHyperFrame);
        //JS
        gCanvasAllowAdditive = true;
        //-JS
        var img = Game.Resources['IMAGE_HYPERCUBE_COLORGLOW'];
        img.mAdditive = true;
        g.DrawImageCel(img.get_OffsetImage(), img.mOffsetX + thePiece.GetScreenX() - 16, img.mOffsetY + thePiece.GetScreenY() - 16, aHyperFrame);
        img.mAdditive = false;
        g.PopColor();
        //JS
        gCanvasAllowAdditive = false;
        //-JS
    },
    DrawBombGem : function Game_Board$DrawBombGem(g, thePiece) {
    },
    DrawDoomGem : function Game_Board$DrawDoomGem(g, thePiece) {
    },
    DrawPieceShadow : function Game_Board$DrawPieceShadow(g, thePiece) {
        var aScale = thePiece.mScale.get_v();
        var anOfsX = ((thePiece.GetScreenX() + thePiece.mShakeOfsX) | 0);
        var anOfsY = ((thePiece.GetScreenY() + thePiece.mShakeOfsY) | 0);
        if(aScale != 1.0) {
            g.PushScale(aScale, aScale, thePiece.GetScreenX() + ((Game.Board.GEM_WIDTH / 2) | 0), thePiece.GetScreenY() + ((Game.Board.GEM_HEIGHT / 2) | 0));
        }
        var anAlpha;
        if(this.mHyperspace != null) {
            anAlpha = thePiece.mAlpha.get_v() * this.mHyperspace.GetPieceAlpha();
        } else {
            anAlpha = thePiece.mAlpha.get_v() * this.GetPieceAlpha();
        }
        g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255 * anAlpha) | 0)));
        if(thePiece.IsFlagSet(Game.Piece.EFlag.POINT_MULTIPLIER)) {
            var aFrame = (Math.min(thePiece.mRotPct * Game.Resources['IMAGE_GEMS_RED'].mNumFrames, Game.Resources['IMAGE_GEMS_RED'].mNumFrames - 1) | 0);
            g.DrawImageCel(Game.BejUtil.GetGemColorImageShadow(thePiece.mColor).get_OffsetImage(), anOfsX, anOfsY, aFrame);
        } else if(((thePiece.mColor | 0) > -1 && (thePiece.mColor | 0) < 7) || thePiece.IsFlagSet(Game.Piece.EFlag.LASER)) {
            var aFrame_2 = (Math.min(((thePiece.mRotPct * Game.Resources['IMAGE_GEMS_RED'].mNumFrames) | 0), Game.Resources['IMAGE_GEMS_RED'].mNumFrames - 1) | 0);
            g.DrawImageCel(Game.BejUtil.GetGemColorImageShadow(thePiece.mColor).get_OffsetImage(), anOfsX, anOfsY, aFrame_2);
        }
        g.PopColor();
        if(aScale != 1.0) {
            g.PopMatrix();
        }
    },
    DrawPiece : function Game_Board$DrawPiece(g, thePiece, theScale, fromHyperspace) {
        if(fromHyperspace === undefined) {
            fromHyperspace = false;
        }
        var aScale = thePiece.mScale.get_v();
        var anAlpha;
        if((this.mHyperspace != null) && (!fromHyperspace)) {
            anAlpha = thePiece.mAlpha.get_v() * this.mHyperspace.GetPieceAlpha();
        } else {
            anAlpha = thePiece.mAlpha.get_v() * this.GetPieceAlpha();
        }
        if(anAlpha == 0) {
            return;
        }
        if(thePiece.IsFlagSet(Game.Piece.EFlag.POINT_MULTIPLIER)) {
            aScale += this.mBoostShowPct.get_v() * 0.25;
        }
        aScale *= theScale;
        var anOfsX = ((thePiece.GetScreenX() + thePiece.mShakeOfsX) | 0);
        var anOfsY = ((thePiece.GetScreenY() + thePiece.mShakeOfsY) | 0);
        var drawGem = false;
        if(aScale != 1.0) {
            g.PushScale(aScale, aScale, thePiece.GetScreenX() + ((Game.Board.GEM_WIDTH / 2) | 0), thePiece.GetScreenY() + ((Game.Board.GEM_HEIGHT / 2) | 0));
        }
        if(this.mShowMoveCredit) {
            g.PushColor(GameFramework.gfx.Color.WHITE_RGB);
            g.SetFont(Game.Resources['FONT_HUMANST19']);
            if(thePiece.mMoveCreditId != -1) {
                g.DrawString(GameFramework.Utils.ToString(thePiece.mMoveCreditId), thePiece.GetScreenX() + 10, thePiece.GetScreenY() + 20);
            }
            if(thePiece.mCounter != 0) {
                g.DrawString(GameFramework.Utils.ToString(thePiece.mCounter), thePiece.GetScreenX() + 80, thePiece.GetScreenY() + 20);
            }
            g.PopColor();
        }
        g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255 * anAlpha) | 0)));
        if(thePiece.IsFlagSet(Game.Piece.EFlag.HYPERCUBE)) {
            this.DrawHypercube(g, thePiece);
        } else if(thePiece.IsFlagSet(Game.Piece.EFlag.BOMB) || thePiece.IsFlagSet(Game.Piece.EFlag.REALTIME_BOMB)) {
            this.DrawBombGem(g, thePiece);
        } else if(thePiece.IsFlagSet(Game.Piece.EFlag.DOOM)) {
            this.DrawDoomGem(g, thePiece);
        } else if(thePiece.IsFlagSet(Game.Piece.EFlag.DIG)) {
            if(thePiece.mColor >= 0) {
                drawGem = true;
            }
        } else {
            drawGem = true;
        }
        if(drawGem && thePiece.mColor >= 0) {
            if(this.CanBakeShadow(thePiece)) {
                g.DrawImageCel(Game.Resources['IMAGE_GEMS_SHADOWED'].get_OffsetImage(), anOfsX, anOfsY, (thePiece.mColor | 0));
            }

            else {
                var gemColors = Array.Create(7, null, GameFramework.gfx.Color.RGBToInt(255, 255, 255), GameFramework.gfx.Color.RGBToInt(192, 192, 192), GameFramework.gfx.Color.RGBToInt(32, 192, 32), GameFramework.gfx.Color.RGBToInt(224, 192, 32), GameFramework.gfx.Color.RGBToInt(255, 255, 255), GameFramework.gfx.Color.RGBToInt(255, 160, 32), GameFramework.gfx.Color.RGBToInt(255, 255, 255));
                if(thePiece.IsFlagSet(Game.Piece.EFlag.LASER)) {
                    g.PushColor(GameFramework.gfx.Color.UInt_AToInt(gemColors[(thePiece.mColor | 0)], ((255.0 * thePiece.mAlpha.get_v() * this.GetPieceAlpha()) | 0)));
                }
                var anImage = Game.BejUtil.GetGemColorImage(thePiece.mColor);
                var aFrameF = thePiece.mRotPct * anImage.mNumFrames;
                {
                    g.DrawImageCel(anImage.get_OffsetImage(), anOfsX, anOfsY, (aFrameF | 0));
                }
                if(thePiece.IsFlagSet(Game.Piece.EFlag.LASER)) {
                    g.PopColor();
                }
            }
            if(thePiece.IsFlagSet(Game.Piece.EFlag.POINT_MULTIPLIER)) {
            }
        }
        g.PopColor();
        if(aScale != 1.0) {
            g.PopMatrix();
        }
        if(thePiece.IsFlagSet(Game.Piece.EFlag.COUNTER) && !thePiece.IsShrinking()) {
            if((thePiece.mSpinFrame < 5 || thePiece.mSpinFrame > 15)) {
            }
        }
        if(thePiece.mHidePct > 0) {
            var aHidePct = 0.15 + (thePiece.mHidePct * 0.85);
            g.PushColor(GameFramework.gfx.Color.RGBAToInt(128, 128, 128, ((aHidePct * 255) | 0)));
            g.FillRect(thePiece.GetScreenX() + 1, thePiece.GetScreenY() + 1, Game.Board.GEM_WIDTH - 2, Game.Board.GEM_HEIGHT - 2);
            g.PopColor();
        }
        if(thePiece.mSelectorAlpha.get_v() != 0) {
            g.PushColor(GameFramework.gfx.Color.FAlphaToInt(thePiece.mSelectorAlpha.get_v() * this.GetPieceAlpha()));
            g.DrawImage(Game.Resources['IMAGE_SELECTOR'], thePiece.GetScreenX(), thePiece.GetScreenY());
            g.PopColor();
        }
    },
    DrawFrame : function Game_Board$DrawFrame(g) {
        {
            this.DrawTopFrame(g);
            this.DrawBottomFrame(g);
        }
    },
    DrawTopFrame : function Game_Board$DrawTopFrame(g) {
        g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * this.GetBoardAlpha()) | 0)));
        if(this.WantTopFrame()) {
            g.DrawImage(Game.Resources['IMAGE_BOARD_TOP_FRAME'].get_CenteredImage(), this.GetBoardCenterX(), this.GetBoardY() - 5);
            if(this.WantWarningGlow()) {
                g.PushColor(this.GetWarningGlowColor());
                var img = Game.Resources['IMAGE_BOARD_TOP_FRAME_GLOW'];
                img.mAdditive = true;
                g.DrawImage(img.get_CenteredImage(), this.GetBoardCenterX(), this.GetBoardY() - 5);
                img.mAdditive = false;
                g.PopColor();
            }
        }
        g.PopColor();
    },
    DrawBottomFrame : function Game_Board$DrawBottomFrame(g) {
        if(this.WantCountdownBar()) {
            this.DrawCountdownBar(g);
            if(this.WantBottomFrame()) {
                var _t39 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * this.GetBoardAlpha()) | 0)));
                try {
                    g.DrawImage(Game.Resources['IMAGE_BOARD_BOTTOM_FRAME'].get_CenteredImage(), this.GetBoardCenterX(), this.GetBoardY() + Game.Board.GEM_HEIGHT * this.mRowCount + 33);
                } finally {
                    _t39.Dispose();
                }
            }
        } else if(this.WantBottomLevelBar()) {
            this.DrawLevelBar(g);
            if(this.WantBottomFrame()) {
                var _t40 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * this.GetBoardAlpha()) | 0)));
                try {
                    g.DrawImage(Game.Resources['IMAGE_BOARD_BOTTOM_FRAME'].get_CenteredImage(), this.GetBoardCenterX(), this.GetBoardY() + Game.Board.GEM_HEIGHT * this.mRowCount + 33);
                } finally {
                    _t40.Dispose();
                }
            }
        } else if(this.WantBottomFrame()) {
            var _t41 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * this.GetBoardAlpha()) | 0)));
            try {
                g.DrawImage(Game.Resources['IMAGE_BOARD_THIN_BOTTOM_FRAME'].get_CenteredImage(), this.GetBoardCenterX(), this.GetBoardY() + Game.Board.GEM_HEIGHT * this.mRowCount + 11);
            } finally {
                _t41.Dispose();
            }
        }
        if(this.WantBottomFrame() && this.WantWarningGlow()) {
            var _t42 = g.PushColor(this.GetWarningGlowColor());
            try {
                if(this.WantBottomLevelBar() || this.GetTimeLimit() > 0) {
                    g.DrawImage(Game.Resources['IMAGE_BOARD_BOTTOM_FRAME_GLOW'].get_CenteredImage(), this.GetBoardCenterX(), this.GetBoardY() + Game.Board.GEM_HEIGHT * this.mRowCount + 33);
                }

                else {
                    g.DrawImage(Game.Resources['IMAGE_BOARD_THIN_BOTTOM_FRAME_GLOW'].get_CenteredImage(), this.GetBoardCenterX(), this.GetBoardY() + Game.Board.GEM_HEIGHT * this.mRowCount + 11);
                }
            } finally {
                _t42.Dispose();
            }
        }
    },
    DrawLevelBar : function Game_Board$DrawLevelBar(g) {
        var anAlpha = Math.pow(this.GetBoardAlpha(), 4.0);
        var _t43 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((this.GetBoardAlpha() * 255.0) | 0)));
        try {
            g.DrawImage(Game.Resources['IMAGE_BOARD_BOTTOM_FRAME_BACK'].get_CenteredImage(), this.GetBoardCenterX(), this.GetBoardY() + 1054);
            var aBarRect = this.GetLevelBarRect();
            var noAdditive = !GameFramework.BaseApp.mApp.get_Is3D();
            aBarRect.mWidth = ((aBarRect.mWidth * this.mLevelBarPct) | 0);
            var aSnappedStartX = g.GetSnappedX(aBarRect.mX);
            var aSnappedEndX = g.GetSnappedX(aBarRect.mX + aBarRect.mWidth);
            var aSnappedWidth = aSnappedEndX - aSnappedStartX;
            if(!noAdditive) {
                var _t44 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(12, 35, 47, 255));
                try {
                    g.FillRect(aSnappedStartX, aBarRect.mY, aSnappedWidth, aBarRect.mHeight);
                } finally {
                    _t44.Dispose();
                }
            }
            {
                for(var aBarIdx = 0; aBarIdx < this.mBarInstanceVector.length; aBarIdx++) {
                    var aBarInstance = this.mBarInstanceVector[aBarIdx];
                    var anImageInst = Game.Resources['IMAGE_BARFILL'].CreateImageInstRect(((aBarInstance.mSrcX * 1000 * g.mScale) | 0), ((aBarInstance.mSrcY * 210 * g.mScale) | 0), ((aSnappedWidth * g.mScale) | 0), ((aBarRect.mHeight * g.mScale) | 0));
                    if(!noAdditive) {
                        anImageInst.mAdditive = true;
                    }
                    var _t45 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((aBarInstance.mAlpha * anAlpha * 255.0) | 0)));
                    try {
                        g.DrawImage(anImageInst, aSnappedStartX, aBarRect.mY);
                    } finally {
                        _t45.Dispose();
                    }
                }
                if(noAdditive) {
                    var _t46 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(128, 200, 255, 100));
                    try {
                        g.FillRect(aSnappedStartX, aBarRect.mY, aSnappedWidth, aBarRect.mHeight);
                    } finally {
                        _t46.Dispose();
                    }
                }
            }
        } finally {
            _t43.Dispose();
        }
    },
    DrawCountdownBar : function Game_Board$DrawCountdownBar(g) {
        var anAlpha = Math.pow(this.GetBoardAlpha(), 4.0);
        var aX;
        var aY;
        var aBarRect = this.GetCountdownBarRect();
        var _t47 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((this.GetBoardAlpha() * 255.0) | 0)));
        try {
            aX = this.GetBoardCenterX();
            aY = this.GetBoardY() + Game.Board.GEM_HEIGHT * this.mRowCount + 30;
            g.DrawImage(Game.Resources['IMAGE_BOARD_BOTTOM_FRAME_BACK'].get_CenteredImage(), aX, aY);
        } finally {
            _t47.Dispose();
        }
        var _t48 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(0xbc, 0x43, 0x89, ((anAlpha * 100.0) | 0)));
        try {
            if(this.WantWarningGlow()) {
                var aColor = this.GetWarningGlowColor();
                if(aColor > 0xffffff) {
                    var _t49 = g.PushColor(aColor);
                    try {
                        g.DrawImage(Game.Resources['IMAGE_BOARD_BOTTOM_FRAME_BACK'].get_CenteredImage(), aX, aY);
                    } finally {
                        _t49.Dispose();
                    }
                }
            }
            aBarRect.mWidth = ((this.mCountdownBarPct * aBarRect.mWidth + this.mLevelBarSizeBias) | 0);
            g.FillRect(aBarRect.mX, aBarRect.mY, aBarRect.mWidth, aBarRect.mHeight);
            if(this.mLevelBarBonusAlpha.get_v() > 0) {
                var aCountdownBar = this.GetCountdownBarRect();
                aCountdownBar.mWidth = ((aCountdownBar.mWidth * this.GetLevelPct()) | 0);
                var _t50 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(240, 255, 200, ((this.mLevelBarBonusAlpha.get_v() * 255.0) | 0)));
                try {
                    g.FillRect(aCountdownBar.mX, aCountdownBar.mY, aCountdownBar.mWidth, aCountdownBar.mHeight);
                } finally {
                    _t50.Dispose();
                }
            }
        } finally {
            _t48.Dispose();
        }
    },
    DrawCountPopups : function Game_Board$DrawCountPopups(g) {
        if(!GameFramework.BaseApp.mApp.get_Is3D()) {
            return;
        }
        var aCX = this.GetBoardX() + -95;
        var aCY;
        if(this.mGemCountAlpha.get_v() > 0) {
            var aColor = GameFramework.gfx.Color.RGBToInt(96, 96, 255);
            aCY = ((this.GetRowY(3) + Game.Board.GEM_HEIGHT * -0.185) | 0);
            var anAlpha = this.mGemScalarAlpha.get_v() * this.GetPieceAlpha();
            var aScale = 2.0 + (1.0 - this.mGemScalarAlpha.get_v()) * 2.0;
            var aString = GameFramework.Utils.ToString(this.mGemCountValueDisp);
            var aFont = Game.Resources['FONT_POPUP_COUNT'];
            var aDrawWidth = (aFont.StringWidth(aString) | 0);
            var aDrawHeight = (aFont.GetAscent() | 0);
            g.SetFont(aFont);
            g.PushScale(aScale, aScale, aCX, aCY);
            g.PushColor(GameFramework.gfx.Color.RGBAToInt(96, 96, 255, ((255.0 * anAlpha) | 0)));
            g.DrawString(aString, aCX - ((aDrawWidth / 2) | 0), aCY + ((aDrawHeight / 2) | 0));
            g.PopColor();
            aScale = this.mGemCountCurve.get_v() * 0.9;
            anAlpha = this.mGemCountAlpha.get_v() * this.GetPieceAlpha();
            g.PopMatrix();
            g.PushScale(aScale, aScale, aCX, aCY);
            g.PushColor(GameFramework.gfx.Color.UInt_AToInt(0, ((128.0 * anAlpha) | 0)));
            g.DrawString(aString, aCX - ((aDrawWidth / 2) | 0) + 8, aCY + ((aDrawHeight / 2) | 0) + 8);
            g.PopColor();
            g.PushColor(GameFramework.gfx.Color.UInt_AToInt(aColor, ((255.0 * anAlpha) | 0)));
            g.DrawString(aString, aCX - ((aDrawWidth / 2) | 0), aCY + ((aDrawHeight / 2) | 0));
            g.PopColor();
            g.SetFont(Game.Resources['FONT_POPUP_TEXT']);
            aString = 'GEMS';
            var aTextX = aCX - (((g.StringWidth(aString) | 0) / 2) | 0) + 10;
            aCY += 130;
            g.PushColor(GameFramework.gfx.Color.FAlphaToInt(anAlpha));
            g.DrawString(aString, aTextX, aCY);
            g.PopColor();
            g.PopMatrix();
        }
        if(this.mCascadeCountAlpha.get_v() > 0) {
            var aColor_2 = GameFramework.gfx.Color.RGBToInt(255, 64, 64);
            aCY = this.GetRowY(4) + ((0.6 * Game.Board.GEM_HEIGHT) | 0);
            var anAlpha_2 = this.mCascadeScalarAlpha.get_v() * this.GetPieceAlpha();
            var aScale_2 = 1.0 + (1.0 - this.mCascadeScalarAlpha.get_v()) * 0.9;
            var aString_2 = GameFramework.Utils.ToString(this.mCascadeCountValueDisp);
            var aFont_2 = Game.Resources['FONT_POPUP_COUNT'];
            var aDrawWidth_2 = (aFont_2.StringWidth(aString_2) | 0);
            var aDrawHeight_2 = (aFont_2.GetAscent() | 0);
            g.SetFont(aFont_2);
            g.PushScale(aScale_2, aScale_2, aCX, aCY);
            g.PushColor(GameFramework.gfx.Color.UInt_AToInt(aColor_2, ((255.0 * anAlpha_2) | 0)));
            g.DrawString(aString_2, aCX - ((aDrawWidth_2 / 2) | 0), aCY + ((aDrawHeight_2 / 2) | 0));
            g.PopColor();
            aScale_2 = this.mCascadeCountCurve.get_v() * 1.0;
            anAlpha_2 = this.mCascadeCountAlpha.get_v() * this.GetPieceAlpha();
            g.PopMatrix();
            g.PushScale(aScale_2, aScale_2, aCX, aCY);
            var aShadowColor = GameFramework.gfx.Color.UInt_AToInt(0, ((128.0 * anAlpha_2) | 0));
            g.PushColor(GameFramework.gfx.Color.UInt_AToInt(0, ((128.0 * anAlpha_2) | 0)));
            g.DrawString(aString_2, aCX - ((aDrawWidth_2 / 2) | 0) + 8, aCY + ((aDrawHeight_2 / 2) | 0) + 8);
            g.PopColor();
            g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 64, 64, ((255.0 * anAlpha_2) | 0)));
            g.DrawString(aString_2, aCX - ((aDrawWidth_2 / 2) | 0), aCY + ((aDrawHeight_2 / 2) | 0));
            g.PopColor();
            g.SetFont(Game.Resources['FONT_POPUP_TEXT']);
            aString_2 = 'CASCADES';
            var aTextX_2 = aCX - (((g.StringWidth(aString_2) | 0) / 2) | 0) + 0;
            aCY += 130;
            g.PushColor(GameFramework.gfx.Color.FAlphaToInt(anAlpha_2));
            g.DrawString(aString_2, aTextX_2, aCY);
            g.PopColor();
            g.PopMatrix();
        }
    },
    DrawComplements : function Game_Board$DrawComplements(g) {
        if((this.mComplementAlpha.get_v() != 0) && this.mComplementNum != -1 && (GameFramework.BaseApp.mApp.get_Is3D())) {
            var gWordId = Array.Create(7, "", Game.Resources.IMAGE_COMPLEMENT_GOOD_ID, Game.Resources.IMAGE_COMPLEMENT_EXCELLENT_ID, Game.Resources.IMAGE_COMPLEMENT_AWESOME_ID, Game.Resources.IMAGE_COMPLEMENT_SPECTACULAR_ID, Game.Resources.IMAGE_COMPLEMENT_EXTRAORDINARY_ID, Game.Resources.IMAGE_COMPLEMENT_UNBELIEVABLE_ID, Game.Resources.IMAGE_COMPLEMENT_BLAZINGSPEED_ID);
            g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.mComplementAlpha.get_v() * this.GetPieceAlpha()));
            g.PushScale(this.mComplementScale.get_v(), this.mComplementScale.get_v(), this.GetBoardCenterX(), 450.0);
            g.DrawImage(GameFramework.BaseApp.mApp.mResourceManager.GetImageResourceById(gWordId[this.mComplementNum]).get_CenteredImage(), this.GetBoardCenterX(), 450.0);
            g.PopMatrix();
            g.PopColor();
        }
    },
    DrawPointMultiplier : function Game_Board$DrawPointMultiplier(g, front) {
        if(!this.mShowPointMultiplier) {
            return;
        }
        var aMultX = 241;
        var aMultY = 255;
        var aSidebarPos = new GameFramework.geom.TPoint(aMultX + -3, aMultY + -2);
        aSidebarPos.x += this.mPointMultSidebarOffset.x;
        aSidebarPos.y += this.mPointMultSidebarOffset.y;
        if(!front) {
            if((this.mPrevPointMultAlpha.get_v() != 0) && (this.mPointMultiplier > 2)) {
            }
            if(this.mPointMultPosPct.get_v() == 1 && (this.mPointMultiplier >= 1 || (this.mTimeExpired && this.mPointMultiplier > 0))) {
                Game.Resources['FONT_MULTIPLIER'].PushLayerColor('MAIN', GameFramework.gfx.Color.RGBAToInt(255, 255, 255, 230));
                Game.Resources['FONT_MULTIPLIER'].PushLayerColor('OUTLINE', GameFramework.gfx.Color.RGBAToInt(128, 0, 80, 230));
                Game.Resources['FONT_MULTIPLIER'].PushLayerColor('GLOW', GameFramework.gfx.Color.RGBAToInt(255, 0, 160, 128));
                g.SetFont(Game.Resources['FONT_MULTIPLIER']);
                var aString = 'x' + GameFramework.Utils.ToString(this.mPointMultiplier);
                var _t51 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.GetAlpha()));
                try {
                    g.DrawString(aString, aMultX - Game.Resources['FONT_MULTIPLIER'].StringWidth(aString) * 0.5 + Game.DM.UI_SLIDE_LEFT * this.mSlideUIPct.get_v() + this.mPointMultSidebarOffset.x, aMultY + 20 + this.mPointMultSidebarOffset.y);
                } finally {
                    _t51.Dispose();
                }
                Game.Resources['FONT_MULTIPLIER'].PopLayerColor('MAIN');
                Game.Resources['FONT_MULTIPLIER'].PopLayerColor('OUTLINE');
                Game.Resources['FONT_MULTIPLIER'].PopLayerColor('GLOW');
            }
            return;
        }
        if(this.mPointMultiplier > 1 && (this.mPointMultTextMorph.IsDoingCurve() || this.mPointMultAlpha.IsDoingCurve())) {
            var aString_2 = 'x' + GameFramework.Utils.ToString(this.mPointMultiplier);
            var aSrcPos = this.mSrcPointMultPos;
            var aCenterPos = new GameFramework.geom.TPoint(this.GetBoardCenterX(), 500);
            var aPoint = new GameFramework.geom.TPoint();
            if(this.mTimeExpired) {
                aPoint.x = Math.max(0.0, 1.0 - (this.mPointMultPosPct.get_v())) * aSrcPos.x + Math.max(0.0, (this.mPointMultPosPct.get_v())) * aSidebarPos.x;
                aPoint.y = Math.max(0.0, 1.0 - (this.mPointMultPosPct.get_v())) * aSrcPos.y + Math.max(0.0, (this.mPointMultPosPct.get_v())) * aSidebarPos.y;
            }

            else {
                aPoint.x = Math.max(0.0, 1.0 - (this.mPointMultPosPct.get_v() * 2.0)) * aSrcPos.x + (1.0 - Math.abs((this.mPointMultPosPct.get_v() - 0.5) * 2)) * aCenterPos.x + Math.max(0.0, 2 * (this.mPointMultPosPct.get_v() - 0.5)) * aSidebarPos.x;
                aPoint.y = Math.max(0.0, 1.0 - (this.mPointMultPosPct.get_v() * 2.0)) * aSrcPos.y + (1.0 - Math.abs((this.mPointMultPosPct.get_v() - 0.5) * 2)) * aCenterPos.y + Math.max(0.0, 2 * (this.mPointMultPosPct.get_v() - 0.5)) * aSidebarPos.y;
            }
            aPoint.y += this.mPointMultYAdd.get_v();
            var aScaleCenter = new GameFramework.geom.TPoint(aPoint.x, aPoint.y);
            if(!this.mTimeExpired) {
                var pct = (Math.abs((this.mPointMultPosPct.get_v() - 0.5) * 2.0));
                aScaleCenter.x = (1.0 - pct) * this.GetBoardCenterX() + pct * (aPoint.x);
                aScaleCenter.y = (1.0 - pct) * 480.0 + pct * (aPoint.y);
            }
            var didPushScale = true;
            if(this.mTimeExpired) {
                g.PushScale(0.292, 0.292, aScaleCenter.x, aScaleCenter.y);
            } else if(this.mPointMultScale.get_v() != 1.0) {
                g.PushScale(this.mPointMultScale.get_v(), this.mPointMultScale.get_v(), aScaleCenter.x, aScaleCenter.y);
            } else {
                didPushScale = false;
            }
            if(this.mPointMultiplier <= 9) {
                var aColor = GameFramework.Utils.LerpColor(this.mPointMultColor, 0xffffff, this.mPointMultAlpha.get_v());
                aColor = GameFramework.gfx.Color.UInt_AToInt(aColor, ((255 * this.GetPieceAlpha() * (1.0 - this.mSlideUIPct.get_v()) * this.mPointMultAlpha.get_v() * (1.0 - this.mPointMultTextMorph.get_v()) * 0.5) | 0));
                g.PushColor(aColor);
                g.DrawImageCel(Game.Resources['IMAGE_MULTIPLIER_LARGE_BACK'].get_CenteredImage(), aPoint.x, aPoint.y, ((Math.min(9, this.mPointMultiplier) - 1) | 0));
                g.PopColor();
                aColor = GameFramework.gfx.Color.UInt_AToInt(aColor, ((255 * this.GetPieceAlpha() * (1.0 - this.mSlideUIPct.get_v()) * (1.0 - this.mPointMultTextMorph.get_v())) | 0));
                g.PushColor(aColor);
                g.DrawImageCel(Game.Resources['IMAGE_MULTIPLIER_LARGE_FRONT'].get_CenteredImage(), aPoint.x, aPoint.y, ((Math.min(9, this.mPointMultiplier) - 1) | 0));
                g.PopColor();
            }
            if(didPushScale) {
                g.PopMatrix();
            }
        }
    },
    DrawOverlay : function Game_Board$DrawOverlay(g) {
        this.DrawPointMultiplier(g, false);
        if(this.WantDrawTimer()) {
            this.DrawTimer(g);
        }
        if((!Game.BejApp.mBejApp.mIsSlow) && (GameFramework.BaseApp.mApp.get_Is3D())) {
            if(this.mSpeedFireBarPIEffect[0] != null) {
                this.mSpeedFireBarPIEffect[0].Draw(g);
            }
            if(this.mSpeedFireBarPIEffect[1] != null) {
                this.mSpeedFireBarPIEffect[1].Draw(g);
            }
        }
        if(this.mBoardDarken > 0) {
            var aRect = new GameFramework.TRect(0, 0, Game.BejApp.mBejApp.mWidth, Game.BejApp.mBejApp.mHeight);
            g.PushColor(GameFramework.gfx.Color.RGBAToInt(0, 0, 0, ((this.GetBoardAlpha() * this.mBoardDarken * 128.0) | 0)));
            g.FillRect(this.mWidescreenX - 50, -50, 1920 + 100, 1200 + 100);
            g.PopColor();
            this.DrawPieces(g, true);
        }
        this.DrawLightning(g);
        if(this.WantsHideOnPause()) {
            if(this.mVisPausePct > 0) {
                var aString = 'PAUSED';
                g.SetFont(Game.Resources['FONT_HUGE']);
                g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.mVisPausePct));
                g.DrawString(aString, this.GetBoardCenterX() - g.GetFont().StringWidth(aString) / 2, 540);
                g.PopColor();
            }
        }
        this.mPointsManager.DrawOverlay(g);
        this.DrawCountPopups(g);
        this.DrawComplements(g);
        this.DrawPointMultiplier(g, true);
        var tutorialIrisPiece = this.GetTutorialIrisPiece();
        if(tutorialIrisPiece != null) {
        }
        if(this.mAnnouncements.length > 0) {
            this.mAnnouncements[0].Draw(g);
        }
        if(Game.BejApp.mBejApp.mDebugKeysEnabled) {
            g.SetFont(Game.Resources['FONT_DEFAULT']);
            g.DrawStringEx(GameFramework.Utils.ToString(GameFramework.BaseApp.mApp.mCurFPS), 1585, 1185, 0, 1);
        }
        if(this.WantBaseDrawSpeedBonusText()) {
            this.DrawSpeedBonusDynImage(g);
        }
        this.mTutorialMgr.Draw(g);
        if(this.mTutorialMgr.IsBusy() && this.mScale.get_v() == 1.0) {
            var _t52 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(0.5));
            try {
                var _t53 = g.PushTranslate(this.mMenuButton.mX + ((this.mSideXOff.get_v() * 4.0) | 0), this.mMenuButton.mY);
                try {
                    this.mMenuButton.Draw(g);
                } finally {
                    _t53.Dispose();
                }
            } finally {
                _t52.Dispose();
            }
        }
        if(this.mTutorialMgr.WantDrawFxOnTop()) {
            this.mPostFXManager.Draw(g);
        }
    },
    WantBaseDrawSpeedBonusText : function Game_Board$WantBaseDrawSpeedBonusText() {
        return true;
    },
    DbgDrawMarkers : function Game_Board$DbgDrawMarkers(g) {
    },
    Draw : function Game_Board$Draw(g) {
        if((this.mSlideUIPct.get_v() >= 1) && (this.mGameOverCount > 0)) {
            return;
        }
        var tx = 0.0;
        if(this.mSideXOff.get_v() != 0) {
            tx = this.mSideXOff.get_v();
        }

        else {
            tx = Game.DM.UI_SLIDE_RIGHT * this.mSlideUIPct.get_v();
        }
        var _t54 = g.PushTranslate(this.mSideXOff.get_v(), 0.0);
        try {
            var anAng = this.mSpeedBonusFlameModePct * 60;
            var aC1Normal = GameFramework.gfx.Color.UInt_AToInt(this.mBoardColors[0], ((((0xff000000 & this.mBoardColors[0]) >>> 24) * this.GetBoardAlpha()) | 0));
            var aC1Blaze = GameFramework.gfx.Color.RGBAToInt(180, 100 + ((Math.sin(anAng) * 14) | 0), 48 + ((Math.sin(anAng) * 8) | 0), ((200 * this.GetBoardAlpha()) | 0));
            var aC1 = GameFramework.Utils.LerpColor(aC1Normal, aC1Blaze, Math.min(1.0, this.mSpeedBonusFlameModePct * 5.0));
            var aC2Normal = GameFramework.gfx.Color.UInt_AToInt(this.mBoardColors[1], ((((0xff000000 & this.mBoardColors[1]) >>> 24) * this.GetBoardAlpha()) | 0));
            var aC2Blaze = GameFramework.gfx.Color.RGBAToInt(160, 90 + ((Math.sin(anAng) * 12) | 0), 40 + ((Math.sin(anAng) * 7) | 0), ((200 * this.GetBoardAlpha()) | 0));
            var aC2 = GameFramework.Utils.LerpColor(aC2Normal, aC2Blaze, Math.min(1.0, this.mSpeedBonusFlameModePct * 5.0));
            var aColXs = Array.Create(this.mColCount + 1, 0);
            for(var aCol = 0; aCol < this.mColCount + 1; aCol++) {
                aColXs[aCol] = this.GetColScreenX(aCol);
            }
            if(this.mBoardUIOffsetY != 0) {
                g.PushTranslate(0, this.mBoardUIOffsetY);
            }
            this.DrawGrid(g);
            if(this.mWarningGlowAlpha > 0.0) {
                var bw = this.mColCount * Game.Board.GEM_WIDTH;
                var bh = this.mRowCount * Game.Board.GEM_HEIGHT;
                var bx = this.GetBoardX();
                var by = this.GetBoardY();
                var scale = 0.5 + 2.5 * Math.pow(this.mWarningGlowAlpha, 0.5);
                var h = ((Game.Resources['IMAGE_DANGERBORDERUP'].mHeight * scale) | 0);
                var w = ((Game.Resources['IMAGE_DANGERBORDERLEFT'].mWidth * scale) | 0);
                var _t55 = g.PushColor(GameFramework.gfx.Color.UInt_FAToInt(this.mWarningGlowColor, this.mWarningGlowAlpha));
                try {
                    g.DrawImage(Game.Resources['IMAGE_DANGERBORDERUP'], bx, by);
                    g.DrawImage(Game.Resources['IMAGE_DANGERBORDERLEFT'], bx, by);
                    var t = new GameFramework.geom.Matrix();
                    t.scale(bw, 0 - scale);
                    var _t56 = g.PushMatrix(t);
                    try {
                        g.DrawImage(Game.Resources['IMAGE_DANGERBORDERUP'], bx + ((bw / 2) | 0), bh + ((Game.Resources['IMAGE_DANGERBORDERUP'].mHeight / 2) | 0));
                    } finally {
                        _t56.Dispose();
                    }
                } finally {
                    _t55.Dispose();
                }
            }
            if(this.mBoardUIOffsetY != 0) {
                g.PopMatrix();
            }
            if(this.mScale.get_v() >= 0.8) {
                this.DrawSideUI(g);
            }
            {
                this.DrawGameElements(g);
            }
        } finally {
            _t54.Dispose();
        }
    },
    DrawGrid : function Game_Board$DrawGrid(g) {
        var aColXs = Array.Create(this.mColCount + 1, 0);
        for(var aCol = 0; aCol < this.mColCount + 1; aCol++) {
            aColXs[aCol] = this.GetColScreenX(aCol);
        }
        var anAng = this.mSpeedBonusFlameModePct * 60;
        var aC1Normal = GameFramework.gfx.Color.UInt_AToInt(this.mBoardColors[0], ((((0xff000000 & this.mBoardColors[0]) >>> 24) * this.GetBoardAlpha()) | 0));
        var aC1Blaze = GameFramework.gfx.Color.RGBAToInt(180, 100 + ((Math.sin(anAng) * 14) | 0), 48 + ((Math.sin(anAng) * 8) | 0), ((200 * this.GetBoardAlpha()) | 0));
        var aC1 = GameFramework.Utils.LerpColor(aC1Normal, aC1Blaze, Math.min(1.0, this.mSpeedBonusFlameModePct * 5.0));
        var aC2Normal = GameFramework.gfx.Color.UInt_AToInt(this.mBoardColors[1], ((((0xff000000 & this.mBoardColors[1]) >>> 24) * this.GetBoardAlpha()) | 0));
        var aC2Blaze = GameFramework.gfx.Color.RGBAToInt(160, 90 + ((Math.sin(anAng) * 12) | 0), 40 + ((Math.sin(anAng) * 7) | 0), ((200 * this.GetBoardAlpha()) | 0));
        var aC2 = GameFramework.Utils.LerpColor(aC2Normal, aC2Blaze, Math.min(1.0, this.mSpeedBonusFlameModePct * 5.0));
        for(var aRow = 0; aRow < this.mRowCount; aRow++) {
            var aStartY = this.GetRowScreenY(aRow);
            var anEndY = this.GetRowScreenY(aRow + 1);
            for(var aCol_2 = 0; aCol_2 < this.mColCount; aCol_2++) {
                var aStartX = aColXs[aCol_2];
                var anEndX = aColXs[aCol_2 + 1];
                if((aRow + aCol_2) % 2 == 0) {
                    g.PushColor(aC1);
                } else {
                    g.PushColor(aC2);
                }
                g.FillRect(aStartX, aStartY, anEndX - aStartX, anEndY - aStartY);
                g.PopColor();
            }
        }
    },
    GetBoardMatrix : function Game_Board$GetBoardMatrix() {
        return new GameFramework.geom.Matrix();
    },
    DrawSideUI : function Game_Board$DrawSideUI(g) {
        if(this.mSideAlpha.get_v() != 1) {
            g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.mSideAlpha.get_v()));
        }
        if(this.mSideXOff.get_v() != 0) {
            g.PushTranslate(((this.mSideXOff.get_v() * 4.0) | 0), 0.0);
        }
        this.DrawTopWidget(g);
        if(this.WantDrawScore()) {
            this.DrawScore(g);
        }
        this.DrawBottomWidget(g);
        if(this.mSideXOff.get_v() != 0) {
            g.PopMatrix();
        }
        if(this.mSideAlpha.get_v() != 1) {
            g.PopColor();
        }
    },
    DrawBottomWidget : function Game_Board$DrawBottomWidget(g) {
        var _t57 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * this.GetBoardAlpha()) | 0)));
        try {
            switch(this.mUiConfig) {
                case Game.Board.EUIConfig.Standard:
                {
                    g.DrawImage(Game.Resources['IMAGE_BOARD_BOTTOM_WIDGET_CLASSIC'].get_OffsetImage(), this.mWidescreenX, this.GetBottomWidgetOffset());
                    break;
                }
                case Game.Board.EUIConfig.WithReset:
                {
                    g.DrawImage(Game.Resources['IMAGE_BOARD_BOTTOM_WIDGET_LIGHTNING'].get_OffsetImage(), this.mWidescreenX, this.GetBottomWidgetOffset());
                    break;
                }
            }
        } finally {
            _t57.Dispose();
        }
    },
    DrawTimer : function Game_Board$DrawTimer(g) {
        var aTimeLimit = this.GetTimeLimit();
        if(aTimeLimit == 0) {
            return;
        }
        var aTimeLeft = this.GetTicksLeft();
        var aBarRect = this.GetCountdownBarRect();
        var aSrcPoint = new GameFramework.geom.TPoint(this.GetBoardCenterX(), 500);
        var aDestPoint = new GameFramework.geom.TPoint(this.GetTimeDrawX(), aBarRect.mY + aBarRect.mHeight / 2);
        var aPoint = aDestPoint;
        var aScale = 0.22 + this.mTimerInflate.get_v() * 1.0;
        var aString = GameFramework.Utils.ToString((((((aTimeLeft + 59) / 60) | 0)) | 0) % 60);
        if(aString.length == 1) {
            aString = '0' + aString;
        }
        aString = GameFramework.Utils.ToString((((((((aTimeLeft + 59) / 60) | 0) / 60) | 0)) | 0)) + ':' + aString;
        if(this.IsTurnBased()) {
            aString = GameFramework.Utils.ToString(((aTimeLeft / 60) | 0));
        }
        if(this.mTimerInflate.get_v() > 0) {
            g.SetFont(Game.Resources['FONT_TIMER_LARGE']);
            var _t58 = g.PushScale(aScale, aScale, aPoint.x, aPoint.y);
            try {
                var _t59 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * this.GetAlpha() * this.mTimerAlpha.get_v() * (1.0 - this.mVisPausePct * this.mTimerInflate.get_v())) | 0)));
                try {
                    g.DrawStringEx(aString, aPoint.x, aPoint.y + 30, -1, 0);
                } finally {
                    _t59.Dispose();
                }

            } finally {
                _t58.Dispose();
            }
        } else if(this.mTimerInflate.get_v() == 0) {
            g.SetFont(Game.Resources['FONT_TIMER_SMALL']);
            Game.Resources['FONT_TIMER_SMALL'].PushLayerColor('GLOW', GameFramework.gfx.Color.BLACK_RGB);
            var _t60 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * this.GetAlpha() * this.mTimerAlpha.get_v()) | 0)));
            try {
                g.DrawStringEx(aString, aPoint.x, aPoint.y + 14, -1, 0);
            } finally {
                _t60.Dispose();
            }
            Game.Resources['FONT_TIMER_SMALL'].PopLayerColor('GLOW');
        }
    },
    DrawButtons : function Game_Board$DrawButtons(g) {
        if(this.mScale.get_v() < 0.8) {
            return;
        }
        g.PushTranslate(this.mHintButton.mX + ((this.mSideXOff.get_v() * 4.0) | 0), this.mHintButton.mY);
        this.mHintButton.Draw(g);
        g.PopMatrix();
        g.PushTranslate(this.mMenuButton.mX + ((this.mSideXOff.get_v() * 4.0) | 0), this.mMenuButton.mY);
        this.mMenuButton.Draw(g);
        g.PopMatrix();
        if(this.mResetButton != null) {
            g.PushTranslate(this.mResetButton.mX + ((this.mSideXOff.get_v() * 4.0) | 0), this.mResetButton.mY);
            this.mResetButton.Draw(g);
            g.PopMatrix();
        }
        if(this.mZenOptionsButton != null) {
            g.PushTranslate(this.mZenOptionsButton.mX + ((this.mSideXOff.get_v() * 4.0) | 0), this.mZenOptionsButton.mY);
            this.mZenOptionsButton.Draw(g);
            g.PopMatrix();
        }
    },
    DrawSpeedBonusDynImage : function Game_Board$DrawSpeedBonusDynImage(g) {
        if((!this.AllowSpeedBonus()) || (this.mSpeedBonusDisp.GetOutVal() == 0.0)) {
            return;
        }
        var _t61 = g.PushScale(this.mSpeedBonusPointsScale.GetOutVal(), this.mSpeedBonusPointsScale.GetOutVal(), 244, 100);
        try {
            var _t62 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * this.GetAlpha() * this.mSideAlpha.get_v()) | 0)));
            try {
                Game.Resources['FONT_SPEED_SCORE'].PushLayerColor('OUTLINE', GameFramework.gfx.Color.BLACK_RGB);
                Game.Resources['FONT_SPEED_SCORE'].PushLayerColor('GLOW', GameFramework.gfx.Color.FAlphaToInt(this.mSpeedBonusPointsGlow.GetOutVal()));
                Game.Resources['FONT_SPEED_TEXT'].PushLayerColor('OUTLINE', GameFramework.gfx.Color.BLACK_RGB);
                g.SetFont(Game.Resources['FONT_SPEED_TEXT']);
                g.DrawStringCentered(String.format('{0} MATCH CHAIN', (this.mSpeedBonusCount == 0) ? this.mSpeedBonusLastCount : this.mSpeedBonusCount), 244, 120);
                if(this.mSpeedBonusTextShowPct.get_v() > 0.0 || this.mSpeedBonusCount > 0) {
                    g.SetFont(Game.Resources['FONT_SPEED_SCORE']);
                    var fullString = String.format('SPEED +{0}', ((Math.min(200.0, ((this.mSpeedBonusCount == 0 ? this.mSpeedBonusLastCount : this.mSpeedBonusCount) + 1.0) * 20.0) * this.GetModePointMultiplier()) | 0));
                    var fullStringW = g.GetFont().StringWidth(fullString);
                    if(this.mSpeedBonusTextShowPct.get_v() > 0.0) {
                        var _t63 = g.PushScale(this.mSpeedBonusTextShowPct.get_v(), this.mSpeedBonusTextShowPct.get_v(), 244.0, 96.0 - g.GetFont().GetHeight() / 2);
                        try {
                            g.DrawString(fullString, 244 - fullStringW / 2, 66);
                        } finally {
                            _t63.Dispose();
                        }
                    }
                    if(this.mSpeedBonusCount > 0) {
                        var pctString = '';
                        var tgtPct = Math.max(0.0, this.mSpeedBonusNum * 1.25 - 0.25);
                        var tgtStringW = fullStringW * tgtPct;
                        var testStringW = 0.0;
                        var stringLen = 0;
                        for(stringLen = 1; stringLen <= fullString.length; ++stringLen) {
                            var testString = fullString.substr(0, stringLen);
                            testStringW = g.GetFont().StringWidth(testString);
                            pctString = testString;
                            if(testStringW > tgtStringW) {
                                break;
                            }
                        }
                        var pctStringFullW = g.GetFont().StringWidth(pctString);
                        var pctStringLastLetter = '';
                        if(pctString.length > 0) {
                            pctStringLastLetter = pctString.substr(pctString.length - 1);
                            pctString = pctString.substr(0, pctString.length - 1);
                        }
                        var pctStringW = g.GetFont().StringWidth(pctString);
                        var deltaW = pctStringFullW - pctStringW;
                        var overflowPct = 1.0;
                        if(deltaW > 0.0) {
                            overflowPct = (tgtStringW - pctStringW) / deltaW;
                        }
                        if(this.mSpeedBonusNum > 0.0) {
                            if((!GameFramework.BaseApp.mApp.get_Is3D()) && (Game.Resources['FONT_SPEED_SCORE_ORANGE'] != null)) {
                                g.SetFont(Game.Resources['FONT_SPEED_SCORE_ORANGE']);
                                if(pctString.length > 0) {
                                    var _t64 = g.PushColor(0xffffffff);
                                    try {
                                        g.DrawString(pctString, 244 - fullStringW / 2, 66);
                                    } finally {
                                        _t64.Dispose();
                                    }
                                }
                                if(pctStringLastLetter.length > 0) {
                                    var _t65 = g.PushColor(GameFramework.gfx.Color.UInt_FAToInt(0xffffff, overflowPct));
                                    try {
                                        g.DrawString(pctStringLastLetter, 244 - fullStringW / 2 + g.GetFont().StringWidth(pctString + '0') - g.GetFont().StringWidth('0'), 66);
                                    } finally {
                                        _t65.Dispose();
                                    }
                                }
                            }

                            else {
                                if(pctString.length > 0) {
                                    var _t66 = g.PushColor(0xffe09040);
                                    try {
                                        g.SetFont(Game.Resources['FONT_SPEED_SCORE']);
                                        g.DrawString(pctString, 244 - fullStringW / 2, 66);
                                    } finally {
                                        _t66.Dispose();
                                    }
                                }
                                if(pctStringLastLetter.length > 0) {
                                    var _t67 = g.PushColor(GameFramework.gfx.Color.UInt_FAToInt(0xe09040, overflowPct));
                                    try {
                                        g.DrawString(pctStringLastLetter, 244 - fullStringW / 2 + g.GetFont().StringWidth(pctString + '0') - g.GetFont().StringWidth('0'), 66);
                                    } finally {
                                        _t67.Dispose();
                                    }
                                }
                            }
                        }
                    }
                }
                Game.Resources['FONT_SPEED_SCORE'].PopLayerColor('OUTLINE');
                Game.Resources['FONT_SPEED_SCORE'].PopLayerColor('GLOW');
                Game.Resources['FONT_SPEED_TEXT'].PopLayerColor('OUTLINE');
            } finally {
                _t62.Dispose();
            }
        } finally {
            _t61.Dispose();
        }
    },
    DrawGameElements : function Game_Board$DrawGameElements(g) {
        if(this.WantDrawButtons()) {
            var _t68 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * this.GetAlpha() * this.mSideAlpha.get_v()) | 0)));
            try {
                this.DrawButtons(g);
            } finally {
                _t68.Dispose();
            }
        }
        var _t69 = g.PushTranslate(Game.DM.UI_SLIDE_RIGHT * this.mSlideUIPct.get_v(), 0);
        try {
            this.DrawFrame(g);
            if(this.mDrawGameElements) {
                this.DrawPieces(g, false);

                {
                    var $srcArray70 = this.mBoard;
                    for(var $enum70 = 0; $enum70 < $srcArray70.length; $enum70++) {
                        var aPiece = $srcArray70[$enum70];
                        if((aPiece != null) && (aPiece.mHintAlpha.get_v() != 0)) {
                            var _t71 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((this.GetPieceAlpha() * aPiece.mHintAlpha.get_v() * 255.0) | 0)));
                            try {
                                var aTrans = new GameFramework.geom.Matrix();
                                aTrans.translate(0, aPiece.mHintArrowPos.get_v());
                                var aOfs = Array.Create(4, null, new GameFramework.geom.TPoint(1, 0), new GameFramework.geom.TPoint(0, 0), new GameFramework.geom.TPoint(0, 0), new GameFramework.geom.TPoint(0, 1));
                                for(var i = 0; i < 4; i++) {
                                    var aMat = aTrans.clone();
                                    aMat.translate(aPiece.CX() + aOfs[i].x, aPiece.CY() + aOfs[i].y);
                                    g.PushMatrix(aMat);
                                    g.DrawImage(Game.Resources['IMAGE_HINTARROW'].get_CenteredImage(), 0, 0);
                                    g.PopMatrix();
                                    aTrans.rotate(Game.MathUtil.PI_D2);
                                }
                            } finally {
                                _t71.Dispose();
                            }
                        }
                    }
                }
            }
        } finally {
            _t69.Dispose();
        }
    },
    DrawPieces : function Game_Board$DrawPieces(g, thePostFX) {
        var gemMask = 0;
        if(!thePostFX) {

            {
                var $srcArray72 = this.mBoard;
                for(var $enum72 = 0; $enum72 < $srcArray72.length; $enum72++) {
                    var aPiece = $srcArray72[$enum72];
                    if((aPiece != null) && !aPiece.IsFlagSet(Game.Piece.EFlag.FLAME) && !aPiece.IsFlagSet(Game.Piece.EFlag.TIME_BONUS) && !this.CanBakeShadow(aPiece)) {
                        this.DrawPieceShadow(g, aPiece);
                    }
                }
            }
            this.mPreFXManager.Draw(g);
            gemMask = 0xffffffff;
        }

        else {
            for(var anIdx = 0; anIdx < this.mLightningStorms.length; anIdx++) {
                if(this.mLightningStorms[anIdx].mStormType == Game.LightningStorm.EStormType.HYPERCUBE) {
                    gemMask |= ((1 << ((this.mLightningStorms[anIdx].mColor | 0) + 1)) | 0);
                }
            }
        }

        {
            var $srcArray73 = this.mBoard;
            for(var $enum73 = 0; $enum73 < $srcArray73.length; $enum73++) {
                var aPiece_2 = $srcArray73[$enum73];
                if((aPiece_2 != null) && !this.IsPieceSwapping(aPiece_2) && aPiece_2 != this.mGameOverPiece && (!thePostFX || aPiece_2.mElectrocutePercent > 0 || (gemMask & ((1 << ((aPiece_2.mColor | 0) + 1)) | 0)) != 0) && (!thePostFX || (!aPiece_2.IsFlagSet(Game.Piece.EFlag.SCRAMBLE) && !aPiece_2.IsFlagSet(Game.Piece.EFlag.DETONATOR)))) {
                    this.DrawPiece(g, aPiece_2, 1.0);
                }
            }
        }

        {
            var $srcArray74 = this.mBoard;
            for(var $enum74 = 0; $enum74 < $srcArray74.length; $enum74++) {
                var aPiece_3 = $srcArray74[$enum74];
                if((aPiece_3 != null) && !this.IsPieceSwapping(aPiece_3) && aPiece_3 != this.mGameOverPiece && (!thePostFX || aPiece_3.mElectrocutePercent > 0 || (gemMask & ((1 << ((aPiece_3.mColor | 0) + 1)) | 0)) != 0) && (!thePostFX || (!aPiece_3.IsFlagSet(Game.Piece.EFlag.SCRAMBLE) && !aPiece_3.IsFlagSet(Game.Piece.EFlag.DETONATOR)))) {
                    this.DrawGemLighting(g, aPiece_3);
                }
            }
        }
        for(var i = 0; i < (this.mSwapDataVector.length | 0); i++) {
            var aSwapData = this.mSwapDataVector[i];
            var aScale = aSwapData.mGemScale.get_v();
            if(!aSwapData.mDestroyTarget && (aSwapData.mPiece2 != null) && aSwapData.mSwapPct.get_v() <= Game.MathUtil.PI) {
                this.DrawPiece(g, aSwapData.mPiece2, 1.0 - aScale);
            }
            this.DrawPiece(g, aSwapData.mPiece1, 1.0 + aScale);
            if(!aSwapData.mDestroyTarget && (aSwapData.mPiece2 != null) && aSwapData.mSwapPct.get_v() > Game.MathUtil.PI) {
                this.DrawPiece(g, aSwapData.mPiece2, 1.0 - aScale);
            }
        }
        if((this.mCursorSelectPos.x != -1) && (this.GetSelectedPiece() == null)) {
            g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * this.GetPieceAlpha()) | 0)));
            g.DrawImage(Game.Resources['IMAGE_SELECTOR'], this.GetBoardX() + this.GetColX(this.mCursorSelectPos.x), this.GetBoardY() + this.GetRowY(this.mCursorSelectPos.y));
            g.PopColor();
        }
    },
    DrawIris : function Game_Board$DrawIris(g, theCX, theCY, theAlpha, theScale) {
        theAlpha *= this.GetBoardAlpha();
        {
            Game.Resources['IMAGE_TRANSPARENT_HOLE'].mPixelSnapping = GameFramework.resources.PixelSnapping.Always;
            Game.Resources['IMAGE_TRANSPARENT_HOLE'].mSizeSnapping = true;
            var aWidth = ((Game.Resources['IMAGE_TRANSPARENT_HOLE'].mWidth / theScale * 6) | 0);
            var aHeight = ((Game.Resources['IMAGE_TRANSPARENT_HOLE'].mHeight / theScale * 6) | 0);
            var aDestRect = new GameFramework.TRect(theCX - ((aWidth / 2) | 0), theCY - ((aHeight / 2) | 0), aWidth, aHeight);
            g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * theAlpha) | 0)));
            g.PopColor();
            g.PushColor(GameFramework.gfx.Color.RGBAToInt(0, 0, 0, ((255.0 * theAlpha) | 0)));
            g.FillRect(0, 0, this.mWidth, aDestRect.mY);
            g.FillRect(0, aDestRect.mY, aDestRect.mX, aDestRect.mHeight);
            g.FillRect(aDestRect.mX + aDestRect.mWidth, aDestRect.mY, this.mWidth - (aDestRect.mX + aDestRect.mWidth), aDestRect.mHeight);
            g.FillRect(0, aDestRect.mY + aDestRect.mHeight, this.mWidth, this.mHeight - (aDestRect.mY + aDestRect.mHeight));
            g.PopColor();
        }
    },
    GetLeftUIOffsetX : function Game_Board$GetLeftUIOffsetX() {
        return 0;
    },
    DrawTopWidget : function Game_Board$DrawTopWidget(g) {
        var aLabelIdx = this.WantExpandedTopWidget();
        this.DrawSpeedBonus(g);
        var _t75 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * this.GetAlpha()) | 0)));
        try {
            var img = Game.Resources['IMAGE_BOARD_TOP_WIDGET'];
            g.DrawImageCel(img, this.GetLeftUIOffsetX() + img.mOffsetX - 160, img.mOffsetY, 0);
            g.SetFont(Game.Resources['FONT_LEVEL']);
            g.DrawStringEx(GameFramework.Utils.CommaSeperate(this.mLevel + 1), this.GetLeftUIOffsetX() + 243, 250, 0, 0);
        } finally {
            _t75.Dispose();
        }
    },
    DrawAll : function Game_Board$DrawAll(g) {
        if(this.mAlpha.get_v() == 0) {
            return;
        }
        var hasScale = this.mScale.get_v() != 1.0;
        this.DeferOverlay();
        if(hasScale) {
            g.PushScale(this.mScale.get_v(), this.mScale.get_v(), ((1600 / 2) | 0), ((1200 / 2) | 0));
        }
        if(this.mDrawAll) {
            g.mMatrix.tx += this.mOfsX;
            g.mMatrix.ty += this.mOfsY;
            GameFramework.widgets.ClassicWidget.prototype.DrawAll.apply(this, [g]);
            g.mMatrix.tx -= this.mOfsX;
            g.mMatrix.ty -= this.mOfsY;
        }
        if(hasScale) {
            g.PopMatrix();
        }
    },
    IsGridLockedAt : function Game_Board$IsGridLockedAt(theCol, theRow) {
        return this.mTutorialMgr.WantsBlockUi() && this.mTutorialMgr.IsGridLockedAt(theCol, theRow);
    },
    MouseDown : function Game_Board$MouseDown(x, y) {
        GameFramework.widgets.ClassicWidget.prototype.MouseDown.apply(this, [x, y]);
        if(!this.mIsOver) {
            return;
        }
        if((this.mAlpha.get_v() != 1.0) || (this.mScale.get_v() != 1.0)) {
            return;
        }
        if((this.mUserPaused) || (this.mVisPausePct > 0.5)) {
            this.mUserPaused = false;
            return;
        }
        if(!this.CanPlay()) {
            return;
        }
        this.mCursorSelectPos = new GameFramework.geom.TIntPoint(-1, -1);
        this.mMouseDown = true;
        this.mMouseDownX = (x | 0);
        this.mMouseDownY = (y | 0);
        var theBtnNum = 0;
        var aCol = this.GetColAt((x | 0) - this.GetBoardX());
        var aRow = this.GetRowAt((y | 0) - this.GetBoardY());
        GameFramework.Utils.Trace(String.format('{0},{1}', aCol, aRow));
        if(this.IsGridLockedAt(aCol, aRow)) {
            return;
        }
        var aSelectedPiece = this.GetSelectedPiece();
        if(theBtnNum != 0) {
            if(aSelectedPiece != null) {
                aSelectedPiece.mSelected = false;
                aSelectedPiece.mSelectorAlpha.SetConstant(0.0);
            }
            return;
        }
        var aClickPiece = this.GetPieceAtScreenXY((x | 0), (y | 0));
        if(aSelectedPiece == aClickPiece) {
            return;
        }
        var failed = false;
        if(aClickPiece == null) {
            aClickPiece = this.GetPieceAtRowCol(aRow, aCol);
            if(aClickPiece != null) {
                failed = true;
            }
        }

        else {
            aCol = aClickPiece.mCol;
            aRow = aClickPiece.mRow;
        }
        if(aClickPiece != null && !aClickPiece.mCanSwap) {
            failed = true;
        }
        if((!failed) && (aClickPiece != aSelectedPiece)) {
            if(aSelectedPiece != null) {
                if((this.mLightningStorms.length == 0) && (!this.QueueSwap(aSelectedPiece, aRow, aCol, false, true, false, false))) {
                    aSelectedPiece.mSelected = false;
                    aSelectedPiece.mSelectorAlpha.SetConstant(0.0);
                    if(Game.BejApp.mBejApp.mProfile.mStats[(Game.DM.EStat.NUM_GOOD_MOVES | 0)] < 3) {
                        Game.SoundUtil.Play(Game.Resources['SOUND_BADMOVE']);
                    } else if(aClickPiece != null) {
                        aClickPiece.mSelected = true;
                        aClickPiece.mSelectorAlpha.SetConstant(1.0);
                    }
                }
            }

            else {
                if(aClickPiece != null) {
                    if(aClickPiece.IsButton()) {
                        this.QueueSwap(aClickPiece, aClickPiece.mRow, aClickPiece.mCol, false, true, false, false);
                    }

                    else {
                        aClickPiece.mSelected = true;
                        aClickPiece.mSelectorAlpha.SetConstant(1.0);
                        Game.SoundUtil.Play(Game.Resources['SOUND_SELECT']);
                    }
                }
            }
        }

        else {
            if(aSelectedPiece != null) {
                aSelectedPiece.mSelected = false;
                aSelectedPiece.mSelectorAlpha.SetConstant(0.0);
            }
            return;
        }
    },
    MouseUp : function Game_Board$MouseUp(x, y) {
        GameFramework.widgets.ClassicWidget.prototype.MouseUp.apply(this, [x, y]);
        this.mMouseDown = false;
        var aSelectedPiece = this.GetSelectedPiece();
        if(aSelectedPiece != null && aSelectedPiece == this.mMouseUpPiece && !this.IsPieceSwapping(aSelectedPiece)) {
            aSelectedPiece.mSelected = false;
            aSelectedPiece.mSelectorAlpha.SetConstant(0.0);
            this.mMouseUpPiece = null;
        }

        else {
            this.mMouseUpPiece = aSelectedPiece;
        }
    },
    MouseMove : function Game_Board$MouseMove(x, y) {
        this.mLastMouseX = x;
        this.mLastMouseY = y;
        GameFramework.widgets.ClassicWidget.prototype.MouseMove.apply(this, [x, y]);
        if((this.mIsDown) || (this.mAppState.IsKeyDown(GameFramework.KeyCode.Control))) {
            this.MouseDrag((x | 0), (y | 0));
        }
    },
    MouseDrag : function Game_Board$MouseDrag(x, y) {
        if(!this.CanPlay()) {
            return;
        }
        var aSelectedPiece = this.GetSelectedPiece();
        if(aSelectedPiece == null) {
            return;
        }
        var aXDif = x - this.mMouseDownX;
        var aYDif = y - this.mMouseDownY;
        if((Math.abs(aXDif) >= 40) || (Math.abs(aYDif) >= 40)) {
            var aSwapPoint = new GameFramework.geom.TIntPoint(-1, -1);
            if(Math.abs(aXDif) > Math.abs(aYDif)) {
                if(aXDif > 0 && aSelectedPiece.mCol < this.mColCount - 1) {
                    aSwapPoint = new GameFramework.geom.TIntPoint(aSelectedPiece.mCol + 1, aSelectedPiece.mRow);
                } else if(aXDif < 0 && aSelectedPiece.mCol > 0) {
                    aSwapPoint = new GameFramework.geom.TIntPoint(aSelectedPiece.mCol - 1, aSelectedPiece.mRow);
                }
            }

            else {
                if(aYDif > 0 && aSelectedPiece.mRow < this.mRowCount - 1) {
                    aSwapPoint = new GameFramework.geom.TIntPoint(aSelectedPiece.mCol, aSelectedPiece.mRow + 1);
                } else if(aYDif < 0 && aSelectedPiece.mRow > 0) {
                    aSwapPoint = new GameFramework.geom.TIntPoint(aSelectedPiece.mCol, aSelectedPiece.mRow - 1);
                }
            }
            if(aSwapPoint != new GameFramework.geom.TIntPoint(-1, -1)) {
                if(this.IsGridLockedAt(aSwapPoint.x, aSwapPoint.y)) {
                    return;
                }
                this.QueueSwap(aSelectedPiece, aSwapPoint.y, aSwapPoint.x, false, true, false, true);
            }
        }
    },
    KeyUp : function Game_Board$KeyUp(theKeyCode) {
        GameFramework.widgets.ClassicWidget.prototype.KeyUp.apply(this, [theKeyCode]);
        if(theKeyCode == GameFramework.KeyCode.Control) {
            var aSelectedPiece = this.GetSelectedPiece();
            if(aSelectedPiece != null) {
                aSelectedPiece.mSelected = false;
                aSelectedPiece.mSelectorAlpha.SetConstant(0.0);
                this.mMouseUpPiece = null;
            }
        }
    },
    KeyDown : function Game_Board$KeyDown(theKeyCode) {
        if(!this.CanPlay() || this.mTutorialMgr.IsBusy()) {
            return;
        }
        var aDir = new GameFramework.geom.TIntPoint();
        var selectPiece = false;
        var moveCursor = false;
        switch(theKeyCode) {
            case GameFramework.KeyCode.Control:
            {
                this.MouseDown(this.mLastMouseX, this.mLastMouseY);
                this.mMouseDown = false;
                this.mIsDown = false;
                break;
            }
            case GameFramework.KeyCode.Escape:
            {
                break;
            }
            case GameFramework.KeyCode.Left:
            {
                moveCursor = true;
                aDir = new GameFramework.geom.TIntPoint(-1, 0);
                break;
            }
            case GameFramework.KeyCode.Right:
            {
                moveCursor = true;
                aDir = new GameFramework.geom.TIntPoint(1, 0);
                break;
            }
            case GameFramework.KeyCode.Up:
            {
                moveCursor = true;
                aDir = new GameFramework.geom.TIntPoint(0, -1);
                break;
            }
            case GameFramework.KeyCode.Down:
            {
                moveCursor = true;
                aDir = new GameFramework.geom.TIntPoint(0, 1);
                break;
            }
            case 32:

            {
                var aPiece = this.GetSelectedPiece();
                if(aPiece != null) {
                    aPiece.mSelected = false;
                    aPiece.mSelectorAlpha.SetConstant(0.0);
                }

                else {
                    selectPiece = true;
                }
            }

                break;
            case 65:
            {
                selectPiece = true;
                aDir = new GameFramework.geom.TIntPoint(-1, 0);
                break;
            }
            case 68:
            {
                selectPiece = true;
                aDir = new GameFramework.geom.TIntPoint(1, 0);
                break;
            }
            case 87:
            {
                selectPiece = true;
                aDir = new GameFramework.geom.TIntPoint(0, -1);
                break;
            }
            case 83:
            {
                selectPiece = true;
                aDir = new GameFramework.geom.TIntPoint(0, 1);
                break;
            }
        }
        var aSwapPiece = null;
        if(!this.mTimeExpired && this.CanPlay()) {
            if((selectPiece) && (this.GetSelectedPiece() == null)) {
                var aPiece_2 = null;
                if(this.mCursorSelectPos.x == -1) {
                    aPiece_2 = this.GetPieceAtScreenXY((this.mLastMouseX | 0), (this.mLastMouseY | 0));
                }

                else {
                    aPiece_2 = this.GetPieceAtScreenXY(this.GetBoardX() + this.GetColX(this.mCursorSelectPos.x) + ((Game.Board.GEM_WIDTH / 2) | 0), this.GetBoardY() + this.GetRowY(this.mCursorSelectPos.y) + ((Game.Board.GEM_HEIGHT / 2) | 0));
                }
                if(aPiece_2 != null) {
                    if((aPiece_2.IsFlagSet(Game.Piece.EFlag.DETONATOR)) || (aPiece_2.IsFlagSet(Game.Piece.EFlag.SCRAMBLE))) {
                        if(this.mCursorSelectPos.x != -1) {
                            aSwapPiece = aPiece_2;
                        }
                    } else if((aDir.x != 0) || (aDir.y != 0) || (this.mCursorSelectPos.x != -1)) {
                        if(!this.IsPieceSwapping(aPiece_2)) {
                            aPiece_2.mSelected = true;
                            aPiece_2.mSelectorAlpha.SetConstant(1.0);
                        }
                    }
                }
            }
            if((aDir.x != 0) || (aDir.y != 0) || (aSwapPiece != null)) {
                var aPiece_3 = aSwapPiece;
                if(aPiece_3 == null) {
                    aPiece_3 = this.GetSelectedPiece();
                }
                if(aPiece_3 != null) {
                    aSwapPiece = this.GetPieceAtRowCol(aPiece_3.mRow + aDir.y, aPiece_3.mCol + aDir.x);
                    if((this.IsGameSuspended()) || (!this.QueueSwap(aPiece_3, aPiece_3.mRow + aDir.y, aPiece_3.mCol + aDir.x, false, true, false, true))) {
                        aPiece_3.mSelected = false;
                        aPiece_3.mSelectorAlpha.SetCurve('b+0,1,0.066667,1,~###         ~#@yd');
                        return;
                    }
                }
                if(this.mCursorSelectPos.x == -1) {
                    if(!selectPiece) {
                        this.mCursorSelectPos = new GameFramework.geom.TIntPoint(((3 + Math.max(0, aDir.x)) | 0), ((3 + Math.max(0, aDir.y)) | 0));
                    }
                } else if(moveCursor) {
                    this.mCursorSelectPos.x = ((Math.max(0, Math.min(this.mColCount - 1, this.mCursorSelectPos.x + aDir.x))) | 0);
                    this.mCursorSelectPos.y = ((Math.max(0, Math.min(this.mRowCount - 1, this.mCursorSelectPos.y + aDir.y))) | 0);
                }
            }
        }
    },
    KeyChar : function Game_Board$KeyChar(theChar) {
        GameFramework.widgets.ClassicWidget.prototype.KeyChar.apply(this, [theChar]);
        if(Game.BejApp.mBejApp.mDebugKeysEnabled) {
            var aCursorPiece = this.GetPieceAtScreenXY((this.mLastMouseX | 0), (this.mLastMouseY | 0));
            if(theChar == 116) {
                if(this.mMessager != null) {
                    this.mMessager.AddMessage('tutorial reset');
                }
                this.mTutorialMgr.SetTutorialFlags(0);
                this.mTutorialMgr.SetTutorialEnabled(true);
            } else if(theChar == 120) {
                this.mSunPosition.SetCurve('b+-200,1500,0.006667,1,#0zN         ~~W7v');
            } else if(theChar == 122) {
                var aLight = this.mPostFXManager.AllocEffect(Game.Effect.EFxType.LIGHT);
                aLight.mFlags = (Game.Effect.EFlag.ALPHA_FADEINOUT | 0);
                aLight.mX = this.mLastMouseX;
                aLight.mY = this.mLastMouseY;
                aLight.mLightIntensity = 1.0;
                aLight.mZ = 0.08;
                aLight.mValue[0] = 5000;
                aLight.mValue[1] = -4000;
                aLight.mValue[2] = 1.0;
                aLight.mAlpha = 0.3;
                aLight.mDAlpha = 0.06 * 1.67;
                aLight.mScale = 1.0;
                this.mPostFXManager.AddEffect(aLight);
            } else if(theChar == 65) {
                Game.BejApp.mBejApp.mAutoPlay = (((Game.BejApp.mBejApp.mAutoPlay | 0) + 1) % (Game.DM.EAutoplay._COUNT | 0));
                this.mMessager.AddMessage(String.format('Autoplay: {0}', Game.DM.gAutoplayDesc[(Game.BejApp.mBejApp.mAutoPlay | 0)]));
                this.mMessager.AddMessage(String.format('Ticks elapsed u:{0},g:{1}', this.mUpdateCnt, this.mGameTicks));
            } else if(theChar == 33) {
                this.mMessager.AddMessage('Reset tutorial sequence');
                var oldIdx = -1;
                this.SetTutorialCleared(Game.DM.ETutorial.CLASSIC_TUTORIAL_MAKE_MORE_MATCHES, false);
                this.SetTutorialCleared(Game.DM.ETutorial.SPEED_TUTORIAL_TIME_GEM, false);
                if(this.mTutorialMgr.GetTutorialSequence() != null) {
                    oldIdx = this.mTutorialMgr.GetTutorialSequence().mCurStepIdx;
                }
                this.mTutorialMgr.SetTutorialSequence(this.GetTutorialSequence());
                if(this.mTutorialMgr.GetTutorialSequence() != null) {
                    this.mTutorialMgr.GetTutorialSequence().mCurStepIdx = oldIdx - 1;
                    this.mTutorialMgr.GetTutorialSequence().AdvanceStep();
                }
            } else if((theChar >= 48) && (theChar <= 55)) {
                if(aCursorPiece == null) {
                    aCursorPiece = this.CreateNewPiece(this.GetRowAt((this.mLastMouseY | 0)), this.GetColAt((this.mLastMouseX | 0) - this.GetBoardX()));
                }
                aCursorPiece.mColor = (GameFramework.Utils.GetCharCode(theChar) - GameFramework.Utils.GetCharCode(48));
                aCursorPiece.mColor = (((aCursorPiece.mColor | 0)) % (Game.DM.EGemColor._COUNT | 0));
                aCursorPiece.mFlags = 0;
            }
            if(aCursorPiece != null) {
                if(theChar == 72) {
                    var thePiece = this.mBoard[this.mBoard.mIdxMult0 * (0) + 0];
                    thePiece.mHintScale.SetCurve('b+1,1.5,0.033333,1,#+Kx  >~###       c####');
                    thePiece.mHintAlpha.SetCurve('b+0,1,0.006667,1,#### ;~###       O~### 9####');
                    thePiece.mHintArrowPos.SetCurve('b+80,64,0.006667,1,####  &}### |####  #~### z####  &~###');
                } else if(theChar == 102) {
                    this.Flamify(aCursorPiece);
                } else if(theChar == 108) {
                    this.Laserify(aCursorPiece);
                } else if(theChar == 104) {
                    this.Hypercubeify(aCursorPiece);
                } else if(theChar == 109) {
                    if(this.NumPiecesWithFlag(Game.Piece.EFlag.POINT_MULTIPLIER) < (8 - this.mPointMultiplier)) {
                        aCursorPiece.ClearFlags();
                        aCursorPiece.SetFlag(Game.Piece.EFlag.POINT_MULTIPLIER);
                        this.StartMultiplierGemEffect(aCursorPiece);
                    }
                } else if(GameFramework.Utils.GetCharCode(theChar) == 8) {
                    this.DeletePiece(aCursorPiece);
                    aCursorPiece = null;
                } else if(theChar == 33) {
                    aCursorPiece.mColor = Game.DM.EGemColor._INVALID;
                    aCursorPiece.SetFlag(Game.Piece.EFlag.DETONATOR);
                    aCursorPiece.mCanDestroy = false;
                    this.StartPieceEffect(aCursorPiece);
                } else if(theChar == 64) {
                    aCursorPiece.mColor = Game.DM.EGemColor._INVALID;
                    aCursorPiece.SetFlag(Game.Piece.EFlag.SCRAMBLE);
                    aCursorPiece.mCanDestroy = false;
                    this.StartPieceEffect(aCursorPiece);
                }
            }
            if(theChar == 45) {
                GameFramework.BaseApp.mApp.mTimeScale *= 0.75;
                //JS
                gTimeScale *= 0.75;
                //-JS
            } else if(theChar == 43) {
                GameFramework.BaseApp.mApp.mTimeScale /= 0.75;
                //JS
                gTimeScale /= 0.75;
                //-JS
            } else if(theChar == 61) {
                GameFramework.BaseApp.mApp.mTimeScale = 1.0;
                //JS
                gTimeScale = 1.0;
                //-JS
            } else if(theChar == 82) {
                Game.BejApp.mBejApp.ChangeArtRes((GameFramework.BaseApp.mApp.mArtRes == 768) ? 480 : 768);
            } else if(theChar == 93) {
                for(var i = 0; i < 500; i++) {
                    this.Update();
                }
            } else if(theChar == 91) {
                this.mGameTicks = this.GetTimeLimit() * 60;
            }
            if(theChar == 70) {
                this.mSpeedBonusNum = 1.0;
                this.mSpeedBonusCount = 10;
                this.mSpeedBonusTextShowPct.Intercept('b;0,1,0.01,0.25,####         ~~###');
                this.mSpeedBonusDisp.SetCurve('b+0,1,0.05,1,####         ~~###');
                this.DoSpeedText(0);
                this.mSpeedBonusPoints = 1000;
                this.mSpeedBonusPointsGlow.SetCurve('b+0,1,0.033333,1,#### ;I-7l        f####');
                this.mSpeedBonusPointsScale.SetCurve('b+1,2,0.033333,1,####  >4###       c####');
            } else if(theChar == 78) {
                this.LevelUp();
            } else if(theChar == 113) {

                {
                    var $srcArray76 = this.mBoard;
                    for(var $enum76 = 0; $enum76 < $srcArray76.length; $enum76++) {
                        var aPiece = $srcArray76[$enum76];
                        if(aPiece != null) {
                            aPiece.mColor = ((aPiece.mCol + aPiece.mRow) % 7);
                        }
                    }
                }
            } else if(theChar == 77) {
                this.MatchMade(null);
                this.DecrementAllCounterGems(false);
            } else if(theChar == 90) {
                if(this.mBackground != null) {
                    this.mBackground.RemoveSelf();
                }
                this.SetupBackground(-1);
                this.mAppState.SetFocus(this);
                this.mMessager.AddMessage(String.format('Background changed to idx: {0}\n', this.mBackgroundIdx));
            } else if(theChar == 88) {
                if(this.mBackground != null) {
                    this.mBackground.RemoveSelf();
                }
                this.SetupBackground(1);
                this.mAppState.SetFocus(this);
                this.mMessager.AddMessage(String.format('Background changed to idx: {0}\n', this.mBackgroundIdx));
            }
            if(theChar == 112) {
                this.AddPoints(800, 600, 100);
            } else if(theChar == 80) {
                this.AddPoints(800, 600, 2000);
            } else if(theChar == 114) {
                this.mMessager.AddMessageColor('RESET STATS', 0xffff6666);
                for(var i_2 = 0; i_2 < (Game.DM.EStat._COUNT | 0); i_2++) {
                    Game.BejApp.mBejApp.mProfile.mStats[i_2] = 0;
                }
            } else if(theChar == 82) {
                this.mMessager.AddMessageColor('RESET PROFILE', 0xffff6666);
                Game.BejApp.mBejApp.mProfile = new Game.Profile();
            } else if(theChar == 72) {
                this.mMessager.AddMessageColor('RESET HIGH SCORES', 0xffff6666);
                Game.BejApp.mBejApp.mHighScoreMgr = new Game.HighScoreMgr();
                Game.BejApp.mBejApp.InitDefaultHighScores();
                Game.BejApp.mBejApp.mHighScoreMgr.Save();
            }
        }
        if((theChar == 32) && (this.mCursorSelectPos.x == -1) && (this.WantsHideOnPause() || this.mUserPaused) && !this.IsTutorialBusy()) {
            this.mUserPaused = !this.mUserPaused;
        }
    },
    ButtonDepress : function Game_Board$ButtonDepress(theId) {
        if(!this.AllowUI()) {
            return;
        }
    },
    SliderVal : function Game_Board$SliderVal(theId, theVal) {
        this.mSliderSetTicks = 0;
    },
    DialogButtonDepress : function Game_Board$DialogButtonDepress(theDialogId, theButtonId) {
    },
    WantExpandedTopWidget : function Game_Board$WantExpandedTopWidget() {
        return 0;
    },
    DisableUI : function Game_Board$DisableUI(disabled) {
    },
    GetSidebarTextY : function Game_Board$GetSidebarTextY() {
        return 320;
    },
    DrawScore : function Game_Board$DrawScore(g) {
        g.SetFont(Game.Resources['FONT_SCORE']);
        Game.Resources['FONT_SCORE'].PushLayerColor('GLOW', 0x9f000000);
        var aScore = GameFramework.Utils.CommaSeperate(this.mDispPoints);
        if(this.mShowLevelPoints) {
            aScore += ' of ' + GameFramework.Utils.CommaSeperate(this.GetLevelPoints());
        }
        g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * this.GetAlpha()) | 0)));
        g.DrawStringEx(aScore, this.GetLeftUIOffsetX() + 242, 202.0, 0, 0);
        g.PopColor();
        Game.Resources['FONT_SCORE'].PopLayerColor('GLOW');
    },
    HandleAnnouncementAdded : function Game_Board$HandleAnnouncementAdded(theAnnouncement) {
        this.mAnnouncements.push(theAnnouncement);
    },
    HandleAnnouncementComplete : function Game_Board$HandleAnnouncementComplete(theAnnouncement) {
        for(var idx = 0; idx < this.mAnnouncements.length; ++idx) {
            if(this.mAnnouncements[idx] == theAnnouncement) {
                this.mAnnouncements.removeAt(idx);
            } else {
                ++idx;
            }
        }
    }
}
Game.Board.staticInit = function Game_Board$staticInit() {
    Game.Board.GEM_WIDTH = 128;
    Game.Board.GEM_HEIGHT = 128;
    Game.Board.NUM_COLS = 8;
    Game.Board.NUM_ROWS = 8;
    Game.Board.PIECE_NEIGHBORS = Array.Create2D(4, 2, 0, 1, 0, -1, 0, 0, 1, 0, -1);
    Game.Board.BACKGROUND_NAMES = Array.Create(20, "", 'canyon_wall_castle.pam', 'crystal_mountain_peak.pam', 'dark_cave_thing.pam', 'desert_pyramids_sunset.pam', 'fairy_cave_village.pam', 'floating_rock_city.pam', 'flying_sail_boat.pam', 'horse_forest_tree.pam', 'jungle_ruins_path.pam', 'lantern_plants_world.pam', 'Lion_tower_cascade.pam', 'pointy_ice_path.pam', 'rock_city_lake.pam', 'bridge_shroom_castles.pam', 'snowy_cliffs_castle.pam', 'treehouse_waterfall.pam', 'tube_forest_night.pam', 'water_bubble_city.pam', 'water_fall_cliff.pam', 'pointy_ice_path_purple.pam');
    Game.Board.DESIRED_ORDER_LIST = Array.Create(19, 19, 10, 7, 5, 9, 14, 11, 8, 18, 12, 16, 2, 17, 4, 0, 15, 13, 1, 3, 6);
    Game.Board.mTotalTicks = 0;
    Game.Board.BumpColumn_MAX_DIST = Game.Board.GEM_HEIGHT * 2.0;
    Game.Board.mGemLightData = Array.Create(9, null);
}

JS_AddInitFunc(function() {
    Game.Board.registerClass('Game.Board', GameFramework.widgets.ClassicWidget);
});
JS_AddStaticInitFunc(function() {
    Game.Board.staticInit();
});
Game.Board.Widgets = {};
Game.Board.Widgets.staticInit = function Game_Board_Widgets$staticInit() {
    Game.Board.Widgets.BUTTON_HINT = 0;
    Game.Board.Widgets.BUTTON_MENU = 1;
    Game.Board.Widgets.BUTTON_RESET = 2;
    Game.Board.Widgets.BUTTON_REPLAY = 3;
    Game.Board.Widgets.BUTTON_QUEST_HELP = 4;
    Game.Board.Widgets.BUTTON_ZEN_OPTIONS = 5;
    Game.Board.Widgets.__COUNT = 6;
}
JS_AddInitFunc(function() {
    Game.Board.Widgets.staticInit();
});
Game.Board.EPointType = {};
Game.Board.EPointType.staticInit = function Game_Board_EPointType$staticInit() {
    Game.Board.EPointType.MATCH = 0;
    Game.Board.EPointType.SPECIAL = 1;
    Game.Board.EPointType.SPEED = 2;
    Game.Board.EPointType.COLUMN_CLEAR = 3;
    Game.Board.EPointType.COLUMN_COMBO = 4;
    Game.Board.EPointType.__COUNT = 5;
}
JS_AddInitFunc(function() {
    Game.Board.EPointType.staticInit();
});
Game.Board.EUIConfig = {};
Game.Board.EUIConfig.staticInit = function Game_Board_EUIConfig$staticInit() {
    Game.Board.EUIConfig.Standard = 0;
    Game.Board.EUIConfig.WithReset = 1;
}
JS_AddInitFunc(function() {
    Game.Board.EUIConfig.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\Board.cs
//LineMap:2=3 7=15 20=20 33=28 55=40 78=52 83=56 88=57 89=60 94=54 99=64 107=66 117=71 120=73 122=73 123=73 137=79 142=108 143=83 152=87 154=87 157=88 170=102 172=105 181=113 184=142 186=119 188=122 189=143 191=146 193=149 198=155 200=158 202=161 204=166 206=169 227=172 
//LineMap:231=177 232=179 236=184 238=187 239=189 240=192 242=195 246=201 247=203 248=205 252=210 255=214 257=217 259=220 261=223 263=226 267=231 275=240 276=242 290=257 292=260 294=263 295=263 299=268 301=273 302=275 303=277 306=279 310=284 311=286 312=288 313=290 314=292 
//LineMap:316=295 317=298 320=302 321=304 327=311 333=318 339=325 345=339 346=347 351=359 369=368 372=428 374=410 378=417 382=422 383=429 391=438 392=440 401=450 405=453 406=455 407=460 409=463 411=466 412=468 414=472 419=478 427=489 429=492 433=498 436=502 480=512 483=516 
//LineMap:484=518 486=521 488=524 490=527 493=531 495=534 499=539 504=545 511=553 512=555 514=558 516=561 518=564 520=567 525=573 529=581 541=592 546=598 548=616 550=619 552=622 558=629 560=630 562=633 565=633 567=643 572=649 573=651 575=654 577=657 579=662 581=665 583=668 
//LineMap:584=670 587=674 590=678 596=686 597=688 598=707 610=718 612=721 614=725 617=729 620=733 624=738 625=740 629=745 631=748 634=752 635=754 636=756 637=759 640=763 642=767 644=770 654=779 655=781 663=790 674=802 681=810 684=814 685=816 686=818 689=822 690=824 696=831 
//LineMap:698=834 699=836 706=841 708=845 713=851 715=852 719=857 725=864 727=867 729=867 733=869 742=879 743=881 749=888 750=890 758=899 759=902 767=911 774=919 775=922 783=931 790=939 794=959 800=966 802=969 807=975 810=979 812=989 813=991 819=1015 824=1021 830=382 
//LineMap:835=370 838=372 848=1027 851=1038 853=1039 871=1046 876=1048 891=1056 910=1064 929=1072 934=1074 946=1077 963=1084 968=1088 976=1092 981=1098 985=1103 1003=1123 1012=1130 1031=1138 1034=1486 1036=1219 1037=1225 1038=1238 1039=1241 1040=1251 1041=1253 1042=1259 
//LineMap:1043=1282 1044=1285 1048=1292 1050=1297 1051=1308 1054=1321 1055=1341 1056=1343 1059=1353 1067=1362 1070=1371 1073=1376 1076=1380 1078=1391 1080=1396 1081=1422 1083=1427 1086=1431 1087=1435 1089=1448 1095=1459 1096=1461 1098=1466 1100=1469 1101=7560 1103=1487 
//LineMap:1108=2191 1111=2195 1121=2206 1123=2206 1125=2210 1131=2214 1133=2218 1135=2221 1137=2224 1140=2225 1142=2229 1143=2231 1146=2235 1148=2238 1154=2245 1155=2247 1157=2247 1159=2251 1167=1214 1169=1217 1171=1220 1190=1240 1206=1262 1273=1338 1274=1340 1279=1348 
//LineMap:1281=1351 1310=1385 1339=1424 1378=9663 1380=1493 1383=1497 1394=1509 1403=1519 1404=1521 1410=1528 1412=1531 1417=1537 1426=1547 1429=1551 1430=1551 1431=1554 1433=1555 1445=1568 1453=1575 1456=1579 1457=1581 1459=1584 1463=1586 1467=1588 1473=1595 1475=1598 
//LineMap:1476=1600 1477=1602 1480=1606 1481=1608 1486=1614 1488=1617 1490=1620 1492=1623 1515=1647 1529=1662 1532=1668 1535=1672 1539=1677 1545=1684 1548=1688 1553=1694 1555=1702 1556=1704 1559=1708 1560=1710 1562=1713 1563=1716 1564=1718 1566=1721 1567=1723 1570=1727 
//LineMap:1571=1729 1572=1731 1574=1734 1575=1736 1576=1738 1581=1744 1584=1748 1587=1752 1589=1755 1593=1760 1595=1765 1596=1768 1597=1770 1598=1776 1603=1782 1604=1784 1605=1787 1606=1789 1607=1791 1609=1794 1611=1797 1612=1799 1613=1801 1618=1807 1621=1815 1628=1825 
//LineMap:1632=1830 1643=1852 1652=1860 1664=1875 1672=1882 1674=1885 1677=1887 1682=1891 1687=1895 1692=1899 1697=1903 1701=1908 1703=1911 1706=1913 1711=1917 1716=1921 1718=1926 1726=1935 1728=1938 1730=1941 1732=1944 1734=1947 1736=1950 1738=1950 1742=1952 1744=1957 
//LineMap:1750=1964 1768=1990 1773=1994 1778=2003 1788=2012 1793=2016 1798=2020 1803=2024 1808=2028 1813=2032 1818=2036 1823=2040 1828=2044 1833=2048 1838=2052 1843=2056 1848=2060 1853=2064 1858=2068 1863=2072 1868=2076 1873=2080 1883=2091 1885=2094 1886=2096 1887=2098 
//LineMap:1888=2100 1890=2103 1891=2105 1900=2113 1905=2117 1910=2121 1912=2124 1914=2129 1917=2131 1923=2135 1924=2138 1926=2141 1931=2149 1933=2166 1935=2169 1936=2174 1938=2177 1947=2273 1958=2285 1960=2288 1961=2290 1962=2293 1966=2298 1972=2305 1974=2310 1977=2314 
//LineMap:1978=2316 1979=2318 1980=2320 1982=2323 1984=2326 1985=2328 1990=2334 1993=2340 1997=2345 2001=2348 2010=2358 2011=2360 2016=2366 2017=2368 2022=2374 2028=2381 2034=2386 2036=2389 2040=2394 2051=2406 2052=2408 2053=2410 2064=2420 2069=2424 2074=2428 2084=2439 
//LineMap:2087=2443 2093=2450 2101=2457 2106=2461 2111=2467 2119=2474 2124=2478 2132=2485 2140=2492 2154=2507 2157=2511 2161=2513 2165=2515 2173=2521 2177=2522 2183=2526 2185=2527 2188=2531 2189=2542 2190=2552 2191=2562 2192=2566 2199=2574 2203=2580 2208=2584 2212=2587 
//LineMap:2228=2604 2229=2607 2230=2609 2234=2614 2238=2619 2239=2621 2242=2623 2245=2636 2246=2638 2259=2650 2263=2675 2265=2678 2268=2698 2272=2703 2275=2705 2279=2710 2280=2712 2283=2714 2288=2718 2292=2723 2296=2726 2307=2738 2310=2742 2311=2744 2315=2749 2318=2755 
//LineMap:2320=2758 2321=2760 2327=2769 2330=2795 2332=2795 2333=2795 2334=2795 2335=2795 2336=2795 2337=2795 2338=2795 2339=2797 2342=2801 2343=2803 2346=2805 2353=2813 2368=2826 2369=2828 2374=2834 2384=2845 2389=2851 2390=2853 2394=2859 2403=2869 2405=2872 2408=2876 
//LineMap:2411=2880 2414=2887 2419=2893 2420=2896 2426=2905 2435=2916 2448=2930 2451=2934 2454=2938 2459=2945 2463=2950 2478=2968 2484=2973 2485=2976 2487=2977 2490=2986 2491=2986 2492=2989 2494=2990 2496=2995 2502=3002 2505=3004 2506=3004 2507=3007 2509=3008 2512=3010 
//LineMap:2513=3010 2514=3013 2516=3014 2519=3016 2520=3016 2521=3019 2523=3020 2528=3024 2529=3024 2530=3027 2536=3034 2540=3037 2541=3037 2542=3040 2544=3041 2546=3046 2556=3055 2557=3055 2558=3058 2560=3068 2562=3076 2570=3083 2584=3096 2596=3106 2597=3108 2599=3113 
//LineMap:2600=3115 2602=3120 2603=3124 2605=3127 2606=3131 2609=3140 2611=3143 2613=3146 2615=3149 2616=3151 2617=3154 2623=3162 2626=3166 2630=3171 2631=3174 2633=3177 2635=3180 2640=3186 2645=3192 2647=3196 2650=3200 2652=3203 2654=3206 2656=3209 2659=3213 2660=3215 
//LineMap:2664=3220 2668=3225 2669=3227 2671=3230 2676=3236 2682=3243 2691=3253 2695=3259 2697=3262 2704=3268 2710=3275 2716=3282 2717=3293 2722=3299 2724=3302 2734=3313 2736=3316 2741=3322 2742=3325 2750=3335 2761=3345 2766=3349 2770=3354 2776=3361 2777=3363 2787=3372 
//LineMap:2791=3377 2793=3380 2799=3387 2802=3389 2806=3394 2809=3398 2813=3403 2817=3406 2821=3411 2830=3419 2834=3424 2842=3433 2846=3438 2847=3438 2848=3440 2854=3447 2858=3452 2866=3461 2867=3463 2869=3466 2877=3475 2880=3479 2883=3483 2888=3489 2889=3491 2892=3495 
//LineMap:2900=3504 2904=3509 2907=3513 2912=3519 2913=3521 2914=3523 2917=3527 2924=3535 2929=3541 2931=3544 2934=3548 2939=3555 2941=3556 2944=3562 2951=3570 2955=3575 2962=3587 2966=3607 2971=3613 2973=3616 2976=3620 2981=3626 2982=3637 2986=3642 2992=3649 2997=3655 
//LineMap:2999=3658 3001=3661 3112=3770 3116=3772 3118=3778 3134=3795 3142=3801 3146=3803 3161=3819 3168=3828 3174=3835 3178=3840 3184=3847 3190=3855 3195=3859 3198=3864 3204=3871 3214=3882 3221=3890 3265=3943 3270=3953 3279=3963 3281=3963 3285=3965 3287=3968 3293=3975 
//LineMap:3295=3978 3300=3984 3303=3988 3307=3993 3309=3993 3313=3995 3315=3999 3332=4017 3340=4040 3343=4044 3344=4046 3345=4048 3375=4079 3377=4079 3381=4081 3383=4084 3400=4102 3409=4112 3410=4114 3414=4119 3421=4127 3422=4129 3423=4131 3424=4133 3425=4135 3429=4140 
//LineMap:3432=4146 3438=4153 3443=4157 3444=4159 3459=4175 3461=4178 3462=4180 3464=4183 3467=4187 3469=4190 3471=4193 3473=4196 3476=4216 3478=4216 3479=4216 3480=4216 3481=4216 3482=4218 3484=4230 3485=4232 3495=4243 3498=4269 3507=4279 3509=4282 3511=4285 3513=4292 
//LineMap:3514=4294 3516=4297 3521=4303 3523=4306 3524=4308 3525=4310 3527=4313 3533=4320 3539=4327 3545=4334 3551=4341 3555=4346 3558=4350 3563=4356 3578=4372 3588=4383 3590=4384 3601=4396 3604=4400 3607=4404 3612=4410 3641=4441 3647=4448 3652=4455 3656=4460 3658=4464 
//LineMap:3660=4467 3663=4471 3668=4478 3674=4485 3675=4487 3687=4497 3689=4501 3694=4507 3696=4510 3698=4513 3700=4516 3702=4519 3706=4524 3708=4527 3709=4529 3719=4538 3724=4544 3728=4550 3732=4555 3735=4559 3736=4567 3737=4569 3738=4572 3740=4572 3744=4574 3746=4577 
//LineMap:3751=4583 3752=4596 3754=4600 3758=4605 3759=4607 3760=4607 3761=4609 3767=4616 3769=4617 3770=4624 3771=4626 3774=4630 3782=4639 3785=4643 3789=4648 3791=4651 3795=4653 3797=4657 3799=4660 3801=4663 3807=4668 3811=4673 3813=4676 3816=4680 3820=4685 3826=4692 
//LineMap:3828=4696 3829=4698 3835=4705 3836=4707 3838=4710 3844=4717 3847=4721 3862=4737 3864=4740 3870=4747 3871=4749 3873=4752 3875=4755 3877=4758 3885=4767 3896=4779 3898=4782 3899=4784 3902=4788 3903=4790 3908=4800 3918=4809 3921=4817 3929=4826 3932=4830 3936=4835 
//LineMap:3937=4837 3942=4843 3945=4848 3956=4858 3963=4866 3964=4868 3966=4868 3970=4870 3978=4881 3986=4890 3988=4893 4027=4935 4029=4938 4035=4945 4038=4949 4052=4964 4053=4966 4054=4968 4055=4970 4059=4975 4069=4984 4072=4988 4074=4991 4075=4993 4079=4998 4080=5000 
//LineMap:4082=5003 4095=5017 4097=5020 4104=5028 4111=5034 4118=5042 4120=5045 4127=5053 4131=5058 4135=5063 4137=5066 4140=5070 4146=5077 4148=5080 4155=5086 4158=5090 4160=5094 4161=5096 4163=5099 4165=5102 4166=5104 4168=5107 4188=5126 4206=5145 4209=5149 4210=5151 
//LineMap:4213=5159 4222=5169 4232=5177 4234=5181 4239=5187 4249=5201 4254=5207 4264=5218 4277=5233 4281=5238 4285=5243 4286=5246 4291=5253 4295=5262 4297=5267 4299=5270 4304=5276 4306=5279 4308=5282 4312=5304 4321=5314 4325=5319 4336=5329 4342=5336 4346=5341 4349=5345 
//LineMap:4350=5347 4352=5350 4355=5354 4361=5361 4363=5364 4370=5370 4373=5374 4375=5378 4376=5380 4378=5383 4380=5386 4381=5388 4383=5391 4401=5410 4419=5429 4422=5434 4425=5442 4438=5456 4445=5464 4451=5471 4463=5484 4465=5489 4470=5495 4472=5498 4476=5503 4479=5507 
//LineMap:4483=5512 4486=5516 4488=5520 4494=5527 4498=5532 4500=5535 4514=5550 4528=5565 4531=5569 4541=5578 4545=5583 4556=5595 4560=5598 4565=5604 4570=5610 4578=5617 4582=5623 4587=5629 4602=5643 4609=5649 4612=5653 4617=5659 4632=5673 4639=5679 4642=5683 4649=5692 
//LineMap:4654=5698 4660=5705 4670=5714 4677=5720 4680=5724 4685=5730 4691=5737 4701=5746 4708=5752 4711=5785 4723=5798 4731=5807 4739=5816 4742=5820 4749=5825 4750=5828 4753=5832 4756=5836 4759=5841 4761=5844 4766=5850 4771=5856 4775=5861 4778=5880 4786=5892 4787=5894 
//LineMap:4791=5900 4795=5905 4796=5907 4797=5910 4803=5917 4804=5919 4807=5923 4809=5927 4820=5939 4824=5944 4832=5951 4835=5955 4836=5957 4837=5959 4838=5962 4839=5964 4846=5972 4853=5980 4856=5984 4860=5992 4861=5996 4862=5998 4863=6000 4866=6004 4868=6007 4871=6011 
//LineMap:4872=6014 4881=6024 4883=6029 4891=6038 4892=6043 4901=6051 4907=6056 4910=6060 4912=6066 4918=6073 4923=6079 4926=6083 4929=6087 4946=6103 4947=6105 4949=6108 4951=6112 4967=6130 4976=6140 4978=6143 4980=6146 4982=6149 4984=6155 4985=6157 4990=6163 4992=6169 
//LineMap:5000=6174 5002=6185 5011=6192 5013=6197 5015=6200 5017=6203 5018=6205 5026=6215 5029=6215 5031=6220 5032=6223 5034=6226 5037=6231 5044=6239 5051=6247 5053=6250 5058=6258 5063=6265 5074=6275 5077=6279 5080=6283 5082=6286 5083=6288 5095=6299 5100=6305 5103=6312 
//LineMap:5107=6323 5112=6326 5114=6330 5117=6334 5122=6340 5127=6342 5129=6348 5134=6351 5136=6355 5139=6359 5144=6365 5149=6367 5151=6374 5156=6377 5158=6381 5161=6385 5166=6391 5172=6400 5177=6407 5188=6419 5195=6427 5198=6431 5201=6435 5209=6444 5213=6449 5218=6457 
//LineMap:5221=6461 5223=6464 5224=6466 5229=6472 5238=6480 5243=6486 5245=6489 5248=6493 5252=6498 5258=6505 5262=6507 5264=6511 5266=6514 5269=6518 5271=6519 5272=6521 5275=6525 5276=6527 5278=6530 5282=6537 5286=6542 5287=6545 5290=6549 5295=6556 5298=6563 5299=6565 
//LineMap:5301=6568 5303=6571 5305=6574 5308=6591 5312=6596 5321=6606 5331=6617 5342=6629 5345=6635 5347=6638 5354=6644 5355=6646 5357=6649 5367=6658 5385=6677 5393=6686 5402=6694 5406=6699 5412=6706 5415=6710 5417=6713 5418=6719 5419=6740 5420=6742 5423=6746 5424=6758 
//LineMap:5425=6760 5429=6765 5432=6780 5434=6783 5436=6786 5441=6792 5445=6797 5458=6820 5463=6826 5470=6834 5477=6842 5487=6853 5490=6857 5492=6860 5493=6862 5495=6865 5500=6871 5502=6876 5514=6889 5518=6894 5521=6898 5524=6902 5530=6910 5534=6915 5542=6924 5544=6927 
//LineMap:5547=6931 5556=6941 5558=6944 5573=6960 5575=6967 5578=6971 5584=6978 5587=6983 5598=6993 5602=6998 5604=7002 5613=7012 5614=7014 5615=7016 5616=7018 5619=7022 5624=7028 5625=7030 5627=7033 5630=7037 5633=7041 5635=7044 5641=7051 5649=7060 5661=7071 5669=7078 
//LineMap:5675=7085 5678=7089 5679=7091 5682=7095 5685=7099 5686=7101 5687=7103 5690=7107 5693=7111 5701=7129 5703=7132 5704=7134 5706=7138 5707=7140 5708=7142 5711=7146 5712=7148 5715=7153 5723=7162 5725=7166 5730=7169 5734=7171 5736=7174 5745=7184 5750=7190 5752=7193 
//LineMap:5755=7198 5766=7213 5768=7218 5771=7222 5776=7228 5788=7241 5791=7245 5795=7250 5796=7252 5798=7258 5802=7263 5807=7269 5812=7275 5814=7278 5819=7284 5821=7287 5823=7290 5840=7308 5842=7311 5843=7315 5846=7321 5851=7327 5855=7333 5858=7337 5859=7339 5861=7342 
//LineMap:5865=7347 5868=7351 5870=7354 5872=7357 5873=7359 5878=7365 5890=7378 5894=7383 5896=7386 5899=7390 5901=7390 5905=7392 5920=7409 5922=7412 5927=7418 5929=7421 5933=7426 5934=7429 5936=7432 5937=7434 5939=7437 5940=7439 5946=7454 5947=7456 5948=7458 5955=7466 
//LineMap:5957=7469 5961=7475 5993=7508 5995=7511 5997=7514 6000=7518 6011=7530 6015=7538 6017=7541 6023=7552 6025=7555 6026=7557 6029=7562 6033=7570 6036=7574 6037=7576 6050=7590 6052=7593 6054=7597 6057=7602 6074=7620 6081=7628 6090=7636 6094=7641 6105=7653 6107=7653 
//LineMap:6111=7655 6113=7659 6124=7668 6128=7670 6130=7673 6136=7678 6143=7686 6147=7691 6155=7698 6162=7706 6170=7726 6175=7730 6177=7730 6178=7730 6179=7732 6182=7736 6187=7744 6195=7753 6203=7762 6208=7768 6215=7776 6216=7786 6218=7789 6222=7800 6224=7803 6225=7803 
//LineMap:6227=7806 6231=7808 6237=7812 6243=7816 6249=7820 6255=7824 6262=7833 6267=7839 6275=7848 6283=7857 6285=7861 6288=7865 6290=7868 6293=7872 6296=7878 6298=7889 6306=7898 6307=7900 6310=7904 6314=7909 6323=7919 6325=7919 6329=7921 6331=7924 6345=7940 6351=7947 
//LineMap:6362=7959 6363=7961 6366=7965 6368=7968 6370=7971 6375=7977 6378=7981 6381=7985 6383=7988 6391=7997 6398=8003 6399=8005 6401=8008 6403=8011 6405=8014 6407=8017 6408=8019 6409=8024 6419=8035 6421=8038 6431=8049 6433=8052 6435=8056 6438=8060 6444=8065 6448=8070 
//LineMap:6455=8076 6460=8082 6462=8085 6464=8088 6474=8099 6476=8102 6482=8128 6486=8133 6491=8139 6496=8145 6514=8165 6516=8165 6520=8167 6522=8170 6528=8177 6530=8181 6533=8186 6538=8192 6541=8196 6544=8200 6546=8203 6554=8212 6559=8214 6561=8219 6563=8222 6566=8226 
//LineMap:6568=8227 6570=8231 6572=8234 6574=8237 6580=8244 6589=8271 6591=8275 6602=8287 6604=8290 6611=8296 6612=8305 6613=8307 6621=8327 6624=8331 6626=8334 6633=8340 6634=8350 6635=8364 6641=8371 6652=8383 6657=8389 6664=8395 6670=8402 6678=8412 6690=8425 6691=8427 
//LineMap:6697=8434 6698=8436 6741=8480 6744=8484 6746=8484 6750=8486 6762=8497 6770=8506 6774=8508 6778=8510 6780=8513 6784=8518 6796=8531 6798=8534 6813=8547 6825=8554 6831=8612 6834=8616 6844=8625 6849=8628 6851=8632 6855=8634 6857=8638 6861=8640 6863=8644 6867=8646 
//LineMap:6869=8650 6873=8652 6875=8656 6879=8661 6888=8671 6892=8677 6896=8682 6917=8704 6919=8707 6923=8733 6925=8736 6926=8739 6927=8741 6929=8744 6931=8747 6934=8751 6941=8757 6943=8762 6947=8767 6948=8769 6951=8773 6954=8777 6956=8780 6963=8788 6965=8794 6967=8794 
//LineMap:6971=8796 6975=8801 6977=8804 6980=8808 6985=8814 6992=8823 6995=8827 6999=8832 7002=8836 7010=8846 7011=8849 7016=8855 7018=8855 7022=8857 7024=8868 7030=8875 7038=8891 7045=8899 7046=8903 7047=8905 7049=8905 7053=8907 7055=8916 7059=8921 7062=8925 7071=8933 
//LineMap:7073=8934 7075=8937 7081=8941 7084=8948 7086=8949 7090=8954 7096=8959 7098=8962 7100=8966 7120=8985 7128=8990 7130=8995 7135=9003 7137=9003 7141=9005 7143=9008 7145=9011 7147=9011 7149=9015 7151=9015 7153=9019 7158=9026 7160=9026 7164=9028 7176=9041 7178=9041 
//LineMap:7182=9043 7192=9052 7201=9062 7209=9071 7210=9073 7212=9076 7214=9079 7219=9085 7225=9092 7227=9095 7233=9102 7235=9107 7238=9111 7248=9120 7250=9123 7256=9130 7258=9134 7261=9138 7265=9178 7268=9182 7273=9186 7274=9188 7280=9197 7281=9205 7283=9228 7285=9231 
//LineMap:7292=9239 7294=9242 7301=9248 7302=9250 7310=9266 7312=9269 7314=9273 7323=9283 7327=9302 7335=9308 7337=9312 7338=9314 7349=9326 7360=9338 7363=9342 7377=9357 7385=9366 7389=9371 7396=9389 7404=9399 7409=9406 7411=9454 7413=9454 7417=9456 7424=9462 7425=9464 
//LineMap:7426=9466 7428=9469 7430=9478 7431=9480 7433=9483 7436=9484 7438=9489 7441=9493 7443=9496 7445=9499 7449=9506 7453=9512 7457=9517 7459=9517 7463=9519 7469=9534 7486=9552 7496=9577 7509=9593 7519=9604 7521=9604 7525=9606 7536=9618 7540=9620 7544=9622 7556=9633 
//LineMap:7558=9636 7563=9665 7572=9675 7581=9685 7583=9688 7585=9691 7588=9692 7592=9694 7600=9703 7602=9730 7604=9767 7606=9775 7609=9779 7610=9781 7613=9785 7614=9804 7616=9810 7618=9813 7621=9817 7625=9822 7630=9828 7632=9831 7635=9836 7644=9846 7653=9853 7655=9857 
//LineMap:7659=9862 7664=9868 7666=9876 7671=9882 7678=9919 7682=9924 7685=9928 7687=9931 7689=9931 7693=9933 7695=9936 7708=9950 7713=9956 7715=9959 7717=9962 7721=9967 7723=9970 7724=9970 7725=9972 7726=9972 7727=9974 7731=9979 7733=9980 7735=9983 7736=9983 7737=9985 
//LineMap:7738=9985 7739=9987 7743=9992 7751=10001 7759=10007 7769=10013 7772=10017 7776=10022 7778=10025 7784=10029 7791=10032 7797=10036 7804=10039 7810=10043 7820=10098 7822=10102 7828=10110 7838=10121 7842=10149 7846=10158 7849=10162 7851=10165 7853=10168 7854=10170 
//LineMap:7858=10175 7859=10177 7864=10180 7866=10184 7869=10188 7870=10190 7876=10194 7877=10196 7879=10199 7883=10204 7885=10207 7887=10210 7888=10212 7890=10216 7895=10222 7903=10231 7905=10234 7906=10236 7910=10238 7912=10242 7914=10242 7916=10246 7918=10246 7920=10250 
//LineMap:7925=10256 7929=10262 7934=10266 7935=10277 7939=10282 7940=10284 7941=10301 7944=10306 7949=10312 7953=10414 7954=10416 7956=10431 7962=10477 7965=10481 7969=10486 7977=10495 7979=10498 7988=10508 7991=10512 8001=10523 8014=10535 8022=10535 8024=10541 8030=10546 
//LineMap:8038=10546 8040=10552 8043=10554 8050=10559 8055=10563 8062=10569 8072=10575 8074=10580 8075=10583 8078=10585 8079=10591 8080=10608 8081=10610 8082=10615 8084=10618 8085=10620 8090=10623 8097=10626 8098=10642 8101=10646 8107=10650 8114=10653 8119=10656 8134=10701 
//LineMap:8136=10706 8137=10708 8140=10713 8151=10721 8154=10723 8157=10727 8162=10731 8170=10736 8172=10739 8179=10745 8193=10774 8197=10779 8199=10782 8202=10786 8203=10789 8205=10792 8206=10794 8209=10798 8210=10801 8211=10803 8214=10808 8216=10811 8217=10813 8218=10815 
//LineMap:8221=10819 8224=10824 8226=10827 8228=10830 8231=10834 8233=10837 8236=10841 8237=10844 8239=10847 8240=10849 8243=10853 8244=10855 8245=10857 8248=10862 8250=10865 8251=10867 8252=10869 8253=10871 8256=10877 8259=10882 8262=10886 8266=10891 8275=10910 8287=10929 
//LineMap:8289=10932 8292=10936 8297=10950 8302=10956 8304=10959 8307=10961 8313=10964 8317=10969 8319=10972 8322=10976 8324=10979 8325=10981 8333=10988 8336=10992 8337=10994 8344=11002 8345=11004 8347=11007 8350=11011 8357=11019 8362=11025 8367=11033 8370=11046 8372=11049 
//LineMap:8376=11054 8379=11058 8382=11066 8385=11070 8387=11073 8388=11075 8393=11081 8399=11090 8400=11092 8403=11096 8407=11152 8409=11169 8412=11174 8414=11177 8418=11182 8419=11184 8421=11187 8424=11189 8427=11190 8439=11194 8450=11206 8454=11214 8458=11219 8466=11226 
//LineMap:8468=11229 8471=11231 8472=11233 8478=11240 8481=11244 8483=11247 8484=11249 8490=11256 8491=11258 8493=11261 8496=11263 8498=11268 8503=11272 8515=11277 8517=11280 8519=11284 8529=11290 8534=11296 8535=11298 8541=11305 8545=11310 8549=11315 8553=11320 8570=11338 
//LineMap:8574=11343 8575=11345 8577=11348 8578=11350 8580=11353 8591=11363 8592=11363 8594=11366 8597=11367 8610=11375 8615=11381 8616=11383 8617=11386 8619=11390 8621=11397 8625=11402 8627=11405 8630=11410 8633=11411 8636=11413 8649=11413 8651=11420 8653=11423 8656=11425 
//LineMap:8662=11428 8670=11437 8673=11441 8676=11445 8682=11452 8694=11465 8697=11467 8700=11469 8703=11473 8705=11476 8707=11479 8708=11481 8710=11484 8715=11488 8722=11493 8729=11501 8733=11506 8734=11508 8737=11512 8738=11514 8745=11522 8749=11532 8754=11538 8759=11541 
//LineMap:8766=11544 8780=11554 8782=11555 8787=11559 8795=11564 8811=11577 8826=11584 8828=11588 8833=11592 8840=11629 8843=11631 8844=11633 8847=11638 8849=11638 8853=11640 8855=11643 8858=11645 8859=11647 8860=11649 8861=11651 8886=11667 8889=11671 8893=11673 8897=11675 
//LineMap:8899=11680 8903=11685 8904=11687 8909=11691 8915=11698 8917=11698 8921=11700 8923=11710 8929=11714 8933=11716 8935=11726 8942=11734 8945=11738 8946=11740 8949=11746 8960=11770 8963=11774 8965=11777 8966=11780 8967=11782 8968=11784 8985=11802 8986=11804 8989=11808 
//LineMap:8991=11811 8992=11813 9000=11835 9002=11853 9004=11863 9005=11865 9006=11867 9020=11939 9025=11948 9028=11960 9030=11963 9032=11966 9037=11972 9039=11975 9040=11977 9044=11982 9046=11985 9049=11989 9059=12000 9060=12002 9062=12005 9072=12014 9075=12018 9077=12021 
//LineMap:9085=12030 9089=12032 9091=12039 9099=12046 9108=12054 9118=12063 9130=12076 9131=12078 9132=12080 9141=12088 9156=12105 9158=12108 9159=12110 9161=12113 9163=12116 9166=12120 9170=12125 9175=12129 9177=12132 9179=12135 9183=12140 9188=12146 9191=12150 9194=12154 
//LineMap:9207=12168 9210=12172 9211=12172 9213=12175 9218=12178 9220=12182 9222=12182 9228=12186 9234=12190 9240=12194 9246=12198 9247=12200 9249=12201 9257=12208 9260=12210 9261=12210 9267=12214 9273=12218 9279=12222 9287=12231 9298=12241 9299=12243 9306=12248 9308=12252 
//LineMap:9316=12261 9324=12270 9331=12281 9336=12284 9338=12288 9348=12300 9351=12304 9358=12309 9360=12314 9362=12314 9364=12318 9378=12330 9380=12334 9381=12336 9384=12337 9386=12341 9392=12348 9393=12350 9399=12353 9401=12358 9403=12362 9405=12365 9407=12369 9409=12380 
//LineMap:9412=12384 9416=12386 9417=12393 9418=12393 9419=12395 9420=12395 9421=12399 9422=12399 9424=12402 9431=12406 9433=12442 9434=12444 9436=12444 9438=12448 9443=12451 9445=12455 9451=12462 9458=12464 9460=12471 9465=12471 9467=12478 9472=12478 9474=12485 9476=12485 
//LineMap:9478=12489 9481=12490 9483=12494 9485=12497 9492=12505 9496=12507 9498=12511 9500=12511 9502=12515 9504=12515 9508=12517 9515=12519 9517=12525 9520=12526 9522=12530 9528=12534 9530=12538 9536=12545 9540=12547 9542=12551 9544=12551 9546=12555 9550=12557 9552=12561 
//LineMap:9555=12562 9557=12566 9563=12736 9564=12738 9573=12786 9582=12841 9591=12861 9600=12871 9601=12873 9603=12876 9606=12880 9627=1140 9631=1145 9632=1147 9633=1172 9634=1206 9635=4439 9636=9917 9641=1174 9644=1176 9650=1183 9656=1188 9661=1194 9667=1199 
//Start:ClassicBoard
/**
 * @constructor
 */
Game.ClassicBoard = function Game_ClassicBoard(theApp) {
    Game.ClassicBoard.initializeBase(this, [theApp]);
    this.mBoardX = Game.Util.ImgCXOfs(Game.Resources['IMAGE_BOARD_MARKER_CHECKERBOARD_CLASSIC']) + this.mWidescreenX;
    this.mBoardY = Game.Util.ImgCYOfs(Game.Resources['IMAGE_BOARD_MARKER_CHECKERBOARD_CLASSIC']) - 60;
}
Game.ClassicBoard.prototype = {

    GetGameType : function Game_ClassicBoard$GetGameType() {
        return 'Classic';
    },
    Init : function Game_ClassicBoard$Init() {
        Game.Board.prototype.Init.apply(this);
        var aMusicFade = new GameFramework.CurvedVal();
        aMusicFade.SetCurveRef('ClassicBoard_cs_11_21_11__05_39_07_684');
        Game.BejApp.mBejApp.PlayMusic(Game.Resources.SOUND_MUSIC_CLASSIC_ID, aMusicFade);
    },
    GameOverAnnounce : function Game_ClassicBoard$GameOverAnnounce() {
        new Game.Announcement(this, 'NO MORE\nMOVES');
        Game.SoundUtil.Play(Game.Resources['SOUND_VOICE_NOMOREMOVES']);
    },
    GameOverExit : function Game_ClassicBoard$GameOverExit() {
        var table = Game.BejApp.mBejApp.mHighScoreMgr.GetOrCreateTable('Classic');
        if(table.Submit(Game.BejApp.mBejApp.mProfile.mProfileName, this.mPoints)) {
            Game.BejApp.mBejApp.SaveHighscores(false);
        }
        var anEndLevelDialog = new Game.ClassicEndLevelDialog(this);
        Game.BejApp.mBejApp.mDialogMgr.AddDialog(anEndLevelDialog);
        anEndLevelDialog.SetQuestName('Classic');
        Game.BejApp.mBejApp.mProfile.WriteProfile();
    },
    ExtraTutorialSetup : function Game_ClassicBoard$ExtraTutorialSetup() {
        if(this.mTutorialMgr.GetTutorialSequence() != null) {
            this.mGoDelayCount = 50;
            this.SetTutorialCleared(Game.DM.ETutorial.FLAME);
            this.SetTutorialCleared(Game.DM.ETutorial.CLASSIC_TUTORIAL_VERT_MATCH, false);
            this.SetTutorialCleared(Game.DM.ETutorial.CLASSIC_TUTORIAL_HORIZ_MATCH, false);
            this.SetTutorialCleared(Game.DM.ETutorial.CLASSIC_TUTORIAL_SPECIAL_GEM_CREATE, false);
            this.SetTutorialCleared(Game.DM.ETutorial.CLASSIC_TUTORIAL_SPECIAL_GEM_MATCH, false);
            this.SetTutorialCleared(Game.DM.ETutorial.CLASSIC_TUTORIAL_HINT_BUTTON, false);
            this.SetTutorialCleared(Game.DM.ETutorial.CLASSIC_TUTORIAL_MAKE_MORE_MATCHES, false);
            var gridLayout = '02335324' + '02545012' + '13450523' + '02412450' + '51223201' + '44501132' + '45012345' + '12342012';
            for(var i = 0; i < gridLayout.length; ++i) {
                this.mBoard[this.mBoard.mIdxMult0 * (((i / Game.Board.NUM_COLS) | 0)) + i % Game.Board.NUM_COLS].mColor = (gridLayout.charCodeAt(i) - 48);
            }
        }
    },
    GetTutorialSequence : function Game_ClassicBoard$GetTutorialSequence() {
        if(!this.WantsTutorial(Game.DM.ETutorial.CLASSIC_TUTORIAL_MAKE_MORE_MATCHES)) {
            return null;
        }
        var ret = new Game.TutorialSequence();
        ret.mBoardSeed = 1234;
        var aStep = new Game.TutorialStep();
        aStep.mType = Game.TutorialStep.EType.ModalDialogMoveClear;
        aStep.mTextHeader = 'Make Sets of 3';
        aStep.mText = 'Swap the red and white gems to make a set of 3.';
        aStep.mTutorialId = Game.DM.ETutorial.CLASSIC_TUTORIAL_VERT_MATCH;
        aStep.mDialogAnchorX = 650.0;
        aStep.mDialogAnchorY = 150.0;
        aStep.mDialogWidth = 740.0;
        aStep.mDelay = 70;
        aStep.mAutohintPieceLoc = new GameFramework.geom.TIntPoint(0, 3);
        aStep.mAutohintTime = 2;
        aStep.mBlockDuringDelay = true;
        aStep.PointArrowAt(this, 0, 3, Game.TutorialStep.EArrowDir.Up);
        aStep.AddGemGridXY(this, 0, 0, false);
        aStep.AddGemGridXY(this, 0, 1, false);
        aStep.AddGemGridXY(this, 0, 2);
        aStep.AddGemGridXY(this, 0, 3);
        ret.Add(aStep);
        aStep = new Game.TutorialStep();
        aStep.mType = Game.TutorialStep.EType.ModalDialogMoveClear;
        aStep.mTextHeader = 'Swap Gems';
        aStep.mText = 'Create horizontal or vertical sets of 3 gems.';
        aStep.mTutorialId = Game.DM.ETutorial.CLASSIC_TUTORIAL_HORIZ_MATCH;
        aStep.mDialogAnchorX = 632.0;
        aStep.mDialogAnchorY = 240.0;
        aStep.mDialogWidth = 740.0;
        aStep.mDelay = 0;
        aStep.mAutohintPieceLoc = new GameFramework.geom.TIntPoint(5, 0);
        aStep.mAutohintTime = 2;
        aStep.mBlockDuringDelay = true;
        aStep.PointArrowAt(this, 5, 0, Game.TutorialStep.EArrowDir.Left);
        aStep.AddGemGridXY(this, 2, 0, false);
        aStep.AddGemGridXY(this, 3, 0, false);
        aStep.AddGemGridXY(this, 4, 0);
        aStep.AddGemGridXY(this, 5, 0);
        ret.Add(aStep);
        aStep = new Game.TutorialStep();
        aStep.mType = Game.TutorialStep.EType.ModalDialogMoveClear;
        aStep.mTextHeader = 'Special Gems';
        aStep.mText = 'Match 4 or more gems to create a ^007700^SPECIAL GEM^oldclr^.';
        aStep.mTutorialId = Game.DM.ETutorial.CLASSIC_TUTORIAL_SPECIAL_GEM_CREATE;
        aStep.mDialogAnchorX = 630.0;
        aStep.mDialogAnchorY = 710.0;
        aStep.mDialogWidth = 750.0;
        aStep.mDelay = 0;
        aStep.mAutohintPieceLoc = new GameFramework.geom.TIntPoint(4, 3);
        aStep.mAutohintTime = 2;
        aStep.mBlockDuringDelay = true;
        aStep.PointArrowAt(this, 4, 3, Game.TutorialStep.EArrowDir.Down);
        aStep.AddGemGridXY(this, 2, 3, false);
        aStep.AddGemGridXY(this, 3, 3, false);
        aStep.AddGemGridXY(this, 4, 3);
        aStep.AddGemGridXY(this, 5, 3, false);
        aStep.AddGemGridXY(this, 2, 4, false);
        aStep.AddGemGridXY(this, 3, 4, false);
        aStep.AddGemGridXY(this, 4, 4);
        aStep.AddGemGridXY(this, 5, 4, false);
        ret.Add(aStep);
        aStep = new Game.TutorialStep();
        aStep.mType = Game.TutorialStep.EType.ModalDialogMoveClear;
        aStep.mTextHeader = 'Flame Gem';
        aStep.mText = 'Match your special gem to create a ^ff0000^FIERY BLAST^oldclr^.';
        aStep.mTutorialId = Game.DM.ETutorial.CLASSIC_TUTORIAL_SPECIAL_GEM_MATCH;
        aStep.mDialogAnchorX = 266.0;
        aStep.mDialogAnchorY = 480.0;
        aStep.mDialogWidth = 690.0;
        aStep.mDelay = 0;
        aStep.mAutohintPieceLoc = new GameFramework.geom.TIntPoint(4, 4);
        aStep.mAutohintTime = 2;
        aStep.mBlockDuringDelay = true;
        aStep.mWantDrawFxOnTop = true;
        aStep.PointArrowAt(this, 4, 4, Game.TutorialStep.EArrowDir.Down);
        aStep.AddGemGridXY(this, 4, 4);
        aStep.AddGemGridXY(this, 4, 5);
        aStep.AddGemGridXY(this, 4, 6, false);
        aStep.AddGemGridXY(this, 4, 7, false);
        ret.Add(aStep);
        if(this.WantsTutorial(Game.DM.ETutorial.CLASSIC_TUTORIAL_HINT_BUTTON)) {
            aStep = new Game.TutorialStep();
            aStep.mType = Game.TutorialStep.EType.ModalDialog;
            aStep.mTextHeader = 'Hints';
            aStep.mText = 'If you are stuck, use the ^007700^HINT^oldclr^ Button to find a match.';
            aStep.mTutorialId = Game.DM.ETutorial.CLASSIC_TUTORIAL_HINT_BUTTON;
            aStep.mSpecialBehavior = Game.TutorialStep.ESpecialBehavior.HintBtn;
            aStep.mArrowDir = Game.TutorialStep.EArrowDir.Down;
            aStep.mArrowX = this.mHintButton.mX + this.mHintButton.mWidth / 2;
            aStep.mArrowY = this.mHintButton.mY + this.mHintButton.mHeight / 2 - 50;
            aStep.mDialogAnchorX = 426.0;
            aStep.mDialogAnchorY = 708.0;
            aStep.mDialogWidth = 700.0;
            aStep.mWantDrawFxOnTop = true;
            aStep.mAllowStandardHints = true;
            var oversizeScale = 1.65;
            var xDelta = this.mHintButton.mWidth * (oversizeScale - 1.0) / 2.0;
            var yDelta = this.mHintButton.mHeight * (oversizeScale - 1.0) / 2.0;
            aStep.mHighlightRect = new GameFramework.TRect(this.mHintButton.mX - xDelta, this.mHintButton.mY - yDelta, this.mHintButton.mWidth * oversizeScale, this.mHintButton.mHeight * oversizeScale);
            aStep.mDelay = 0;
            aStep.mBlockDuringDelay = true;
            ret.Add(aStep);
        }
        aStep = new Game.TutorialStep();
        aStep.mType = Game.TutorialStep.EType.ModalDialogMoveClear;
        aStep.mTextHeader = 'Make More\nMatches';
        aStep.mText = 'Go ahead and play by making more matches. Use the Hint Button if you are stuck.';
        aStep.mTutorialId = Game.DM.ETutorial.CLASSIC_TUTORIAL_MAKE_MORE_MATCHES;
        aStep.mDialogWidth = 500.0;
        aStep.mDialogHeight = 650.0;
        aStep.mDialogAnchorX = -6.0;
        aStep.mDialogAnchorY = 80.0;
        aStep.mDialogInsets = new GameFramework.Insets(64, 64, 64, 64);
        aStep.mDialogSpaceAfterHeader = 50;
        aStep.mLimitUiAccessibleGems = false;
        aStep.mDelay = 0;
        aStep.mBlockDuringDelay = true;
        aStep.mAllowStandardHints = true;
        ret.Add(aStep);
        return ret;
    },
    GetModePointMultiplier : function Game_ClassicBoard$GetModePointMultiplier() {
        return 1.0 + this.mLevel * 1.0;
    },
    GetRankPointMultiplier : function Game_ClassicBoard$GetRankPointMultiplier() {
        return 1.0;
    },
    MenuButtonPressed : function Game_ClassicBoard$MenuButtonPressed(e) {
        Game.Board.prototype.MenuButtonPressed.apply(this, [e]);
    },
    handleMenuDialogClosed : function Game_ClassicBoard$handleMenuDialogClosed(theE) {
        if((theE).WasYesPressed()) {
            this.BackToMenu();
        }
    }
}
Game.ClassicBoard.staticInit = function Game_ClassicBoard$staticInit() {
}

JS_AddInitFunc(function() {
    Game.ClassicBoard.registerClass('Game.ClassicBoard', Game.Board);
});
JS_AddStaticInitFunc(function() {
    Game.ClassicBoard.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\ClassicBoard.cs
//LineMap:2=3 5=13 7=12 8=14 14=18 22=27 38=44 41=48 44=53 46=56 49=60 56=68 57=77 66=87 68=90 86=109 104=128 126=151 145=171 161=188 169=197 181=210 185=215 203=238 
//Start:ClassicEndLevelDialog
/**
 * @constructor
 */
Game.ClassicEndLevelDialog = function Game_ClassicEndLevelDialog(theBoard) {
    Game.ClassicEndLevelDialog.initializeBase(this, [theBoard]);
    this.mClassicBoard = theBoard;
    this.NudgeButtons(-40);
    this.mRankBar.mY += 30;
}
Game.ClassicEndLevelDialog.prototype = {
    mClassicBoard : null,
    DrawStatsLabels : function Game_ClassicEndLevelDialog$DrawStatsLabels(g) {
        g.DrawStringEx('Level Achieved', (230), (475) + (48) * 0, -1, -1);
        g.DrawStringEx('Best Move', (230), (475) + (48) * 1, -1, -1);
        g.DrawStringEx('Longest Cascade', (230), (475) + (48) * 2, -1, -1);
        g.DrawStringEx('Total Time', (230), (475) + (48) * 3, -1, -1);
    },
    DrawStatsText : function Game_ClassicEndLevelDialog$DrawStatsText(g) {
        g.DrawStringEx(GameFramework.Utils.CommaSeperate(this.mLevel + 1), (760), (475) + (48) * 0, -1, 1);
        g.DrawStringEx(GameFramework.Utils.CommaSeperate(this.mGameStats[(Game.DM.EStat.BIGGESTMOVE | 0)]), (760), (475) + (48) * 1, -1, 1);
        g.DrawStringEx(GameFramework.Utils.CommaSeperate(this.mGameStats[(Game.DM.EStat.BIGGESTMATCH | 0)]), (760), (475) + (48) * 2, -1, 1);
        var aSeconds = ((this.mGameStats[(Game.DM.EStat.SECONDS_PLAYED | 0)] / 10) | 0);
        g.DrawStringEx(String.format('{0}:{1:00}', ((aSeconds / 60) | 0), aSeconds % 60), (760), (475) + (48) * 3, -1, 1);
    },
    DrawNewHighScoreFrame : function Game_ClassicEndLevelDialog$DrawNewHighScoreFrame(g, theOffsetX, theOffsetY) {
        var _t1 = g.PushTranslate(theOffsetX, theOffsetY - 90);
        try {
            var x = this.mWidth / 2.0;
            var y = 400.0;
            g.SetFont(Game.Resources['FONT_GAMEOVER_DIALOG']);
            g.GetFont().PushLayerColor('MAIN', 0xff884818);
            g.GetFont().PushLayerColor('OUTLINE', 0xffffffff);
            g.GetFont().PushLayerColor('GLOW', 0);
            g.DrawStringCentered('New Top Score:', x, y + 4);
            g.GetFont().PopLayerColor('MAIN');
            g.GetFont().PopLayerColor('OUTLINE');
            g.GetFont().PopLayerColor('GLOW');
            var _t2 = g.PushColor(0xfff4f4d0);
            try {
                g.SetFont(Game.Resources['FONT_GAMEOVER_DIALOG']);
                Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('MAIN', ~0);
                Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('OUTLINE', 0xff404000);
                Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('GLOW', 0);
                g.DrawStringCentered('Please enter your name:', x, y + 100.0);
            } finally {
                _t2.Dispose();
            }
            this.mNameWidget.Resize(this.mWidth / 2 - ((500 / 2) | 0) + theOffsetX, 500 + theOffsetY, 500, 50);
            this.mNameWidget.mAlpha = this.mNewHighScoreNameEntryShowPct.get_v();
            this.mHighScoreAcceptBtn.Move(this.mWidth / 2 - this.mHighScoreAcceptBtn.mWidth / 2 + theOffsetX, 570 + theOffsetY);
            this.mHighScoreAcceptBtn.mAlpha = this.mNewHighScoreNameEntryShowPct.get_v();
            Game.Resources['FONT_GAMEOVER_DIALOG'].PopLayerColor('MAIN');
            Game.Resources['FONT_GAMEOVER_DIALOG'].PopLayerColor('OUTLINE');
            Game.Resources['FONT_GAMEOVER_DIALOG'].PopLayerColor('GLOW');
        } finally {
            _t1.Dispose();
        }
    },
    DrawFrames : function Game_ClassicEndLevelDialog$DrawFrames(g) {
        var _t3 = g.PushTranslate(0, 60);
        try {
            g.DrawImageBox(Game.Resources['IMAGE_GAMEOVER_SECTION_LABEL'], 195, 385 - 0, 600, Game.Resources['IMAGE_GAMEOVER_SECTION_LABEL'].mHeight, 0);
            var _t4 = g.PushTranslate(0, 60);
            try {
                g.DrawImageBox(Game.Resources['IMAGE_GAMEOVER_LIGHT_BOX'], 195.0, 385.0, 602.0, 282.0, 0);
            } finally {
                _t4.Dispose();
            }
            if(this.mNewHighScoreNameEntryShowPct.get_v() > 0.0 && this.mNameWidget != null) {
                if(this.mNewHighScoreNameEntryShowPct.get_v() < 1.0) {
                    g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.mNewHighScoreNameEntryShowPct.get_v()));
                }
                this.DrawNewHighScoreFrame(g, -300.0, 120.0);
                if(this.mNewHighScoreNameEntryShowPct.get_v() < 1.0) {
                    g.PopColor();
                }
            }
            if(this.mNewHighScoreNameEntryShowPct.get_v() < 1.0) {
                if(this.mNewHighScoreNameEntryShowPct.get_v() > 0.0) {
                    g.PushColor(GameFramework.gfx.Color.FAlphaToInt(1.0 - this.mNewHighScoreNameEntryShowPct.get_v()));
                }
                this.DrawLabeledStatsFrame(g);
                if(this.mNewHighScoreNameEntryShowPct.get_v() > 0.0) {
                    g.PopColor();
                }
            }
            this.DrawLabeledHighScores(g);
        } finally {
            _t3.Dispose();
        }
        if(this.mNameWidget != null) {
            this.mNameWidget.mAlpha = this.mNewHighScoreNameEntryShowPct.get_v();
        }
        if(this.mHighScoreAcceptBtn != null) {
            this.mHighScoreAcceptBtn.mAlpha = this.mNewHighScoreNameEntryShowPct.get_v();
        }
        var _t5 = g.PushTranslate(0, 10);
        try {
            this.DrawSpecialGemDisplay(g);
        } finally {
            _t5.Dispose();
        }
    }
}
Game.ClassicEndLevelDialog.staticInit = function Game_ClassicEndLevelDialog$staticInit() {
}

JS_AddInitFunc(function() {
    Game.ClassicEndLevelDialog.registerClass('Game.ClassicEndLevelDialog', Game.EndLevelDialog);
});
JS_AddStaticInitFunc(function() {
    Game.ClassicEndLevelDialog.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\ClassicEndLevelDialog.cs
//LineMap:2=10 5=15 7=14 8=16 16=21 35=42 38=44 40=47 44=52 45=54 48=58 51=60 61=67 65=76 75=82 80=86 81=88 84=90 90=93 92=96 94=99 95=101 98=105 102=110 103=112 106=116 112=119 116=124 120=129 123=130 
//Start:ColorCycle
/**
 * @constructor
 */
Game.ColorCycle = function Game_ColorCycle() {
    this.mCycleColors = [];
    for(var i = 0; i < Game.ColorCycle.gCycleColors.length; i++) {
        this.mCycleColors.push(Game.ColorCycle.gCycleColors[i]);
    }
    this.mBrightness = 0;
    this.mLooping = true;
    this.mAlpha = 1.0;
    this.Restart();
}
Game.ColorCycle.prototype = {
    mColor : GameFramework.gfx.Color.WHITE_RGB,
    mCyclePos : 0,
    mSpeed : 0,
    mBrightness : 0,
    mAlpha : 0,
    mLooping : null,
    mCycleColors : null,
    Dispose : function Game_ColorCycle$Dispose() {
    },
    SetSpeed : function Game_ColorCycle$SetSpeed(aSpeed) {
        this.mSpeed = aSpeed;
    },
    Update : function Game_ColorCycle$Update() {
        if(this.mSpeed == 0.0) {
            return;
        }
        if(this.mCycleColors.length == 0) {
            this.mColor = 0;
            return;
        }
        if(this.mCycleColors.length == 1) {
            this.mColor = this.mCycleColors[0];
            return;
        }
        this.mCyclePos += this.mSpeed * 0.01;
        if(this.mCyclePos >= 1.0 && !this.mLooping) {
            this.mCyclePos = 1.0;
            this.mColor = this.mCycleColors[this.mCycleColors.length - 1];
            return;
        }
        while(this.mCyclePos >= 1.0) {
            this.mCyclePos -= 1.0;
        }
        var aFloatIndex = this.mCyclePos * this.mCycleColors.length;
        var anIndex = (aFloatIndex | 0);
        var aNextIndex = (anIndex + 1) % (this.mCycleColors.length | 0);
        if(!this.mLooping && aNextIndex < anIndex) {
            aNextIndex = anIndex;
        }
        var aColor = Array.Create(2, null);
        aColor[0] = GameFramework.gfx.Color.CreateFromInt(this.mCycleColors[anIndex]);
        aColor[1] = GameFramework.gfx.Color.CreateFromInt(this.mCycleColors[aNextIndex]);
        var aFraction = aFloatIndex - anIndex;
        this.mColor = GameFramework.gfx.Color.RGBAToInt(((aFraction * aColor[1].mRed + (1.0 - aFraction) * aColor[0].mRed) | 0), ((aFraction * aColor[1].mGreen + (1.0 - aFraction) * aColor[0].mGreen) | 0), ((aFraction * aColor[1].mBlue + (1.0 - aFraction) * aColor[0].mBlue) | 0), ((this.mAlpha * (aFraction * aColor[1].mAlpha + (1.0 - aFraction) * aColor[0].mAlpha)) | 0));
    },
    GetColor : function Game_ColorCycle$GetColor() {
        return this.mColor;
    },
    SetPosition : function Game_ColorCycle$SetPosition(thePos) {
        while(thePos >= 1.0) {
            thePos -= 1.0;
        }
        this.mCyclePos = thePos;
        this.Update();
    },
    SetBrightness : function Game_ColorCycle$SetBrightness(theBrightness) {
        this.mBrightness = theBrightness;
    },
    Restart : function Game_ColorCycle$Restart() {
        this.mCyclePos = 0.0;
        this.mSpeed = 1.0;
    },
    ClearColors : function Game_ColorCycle$ClearColors() {
        this.mCycleColors.clear();
        this.mCyclePos = 0;
    },
    PushColor : function Game_ColorCycle$PushColor(theColor) {
        this.mCycleColors.push(theColor);
    }
}
Game.ColorCycle.staticInit = function Game_ColorCycle$staticInit() {
    Game.ColorCycle.gCycleColors = Array.Create(6, null, 0xffff0000, 0xffffff00, 0xff00ff00, 0xff00ffff, 0xff0000ff, 0xffff00ff);
}

JS_AddInitFunc(function() {
    Game.ColorCycle.registerClass('Game.ColorCycle', null);
});
JS_AddStaticInitFunc(function() {
    Game.ColorCycle.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\ColorCycle.cs
//LineMap:2=3 5=28 7=23 8=29 12=34 13=36 15=39 19=15 27=42 36=50 40=55 45=61 50=67 51=69 57=76 59=79 62=83 64=86 65=88 67=91 68=93 71=116 76=120 80=125 81=127 84=129 89=133 101=144 108=25 
//Start:CrystalBall
/**
 * @constructor
 */
Game.CrystalBall = function Game_CrystalBall(theLabel, theId) {
    this.mImage = null;
    this.mImageSrcRect = new GameFramework.TIntRect(0, 0, 0, 0);
    this.mFullPct = new GameFramework.CurvedVal();
    this.mScale = new GameFramework.CurvedVal();
    this.mOffset = new GameFramework.geom.TPoint();
    this.mXBob = new GameFramework.CurvedVal();
    this.mYBob = new GameFramework.CurvedVal();
    this.mLeftArrowPct = new GameFramework.CurvedVal();
    this.mRightArrowPct = new GameFramework.CurvedVal();
    this.mDists = Array.Create(Game.CrystalBall.NUM_DIST_POINTS, null);
    this.mTexDists = Array.Create(Game.CrystalBall.NUM_DIST_POINTS, null);
    this.mAlphas = Array.Create(Game.CrystalBall.NUM_DIST_POINTS, null);
    this.mDistMults = Array.Create(Game.CrystalBall.NUM_RADIAL_POINTS + 1, null);
    this.mSins = Array.Create(Game.CrystalBall.NUM_RADIAL_POINTS + 1, null);
    this.mCoss = Array.Create(Game.CrystalBall.NUM_RADIAL_POINTS + 1, null);
    Game.CrystalBall.initializeBase(this, [theId]);
    this.mFlushPriority = -1;
    this.mScale.SetConstant(0.17);
    this.mZ = 0.0;
    this.mLabel = theLabel;
    this.mTextAlpha = 1;
    this.mMouseOverPct = 0;
    this.mBaseAlpha = 0;
    this.mLocked = false;
    this.mDoBob = true;
    this.mUpdateCnt = 0;
    this.mTextIsQuestionMark = false;
    this.mExtraFontScaling = 0.0;
    this.mGlowEffect = Game.Resources['PIEFFECT_CRYSTALBALL'].Duplicate();
    this.mGlowEffect.mEmitAfterTimeline = true;
    this.mRayEffect = Game.Resources['PIEFFECT_CRYSTALRAYS'].Duplicate();
    this.mRayEffect.mEmitAfterTimeline = true;
    this.mFontColor = GameFramework.gfx.Color.RGBAToInt(128, 0, 64, 160);
    {
        this.mXBob.SetCurve('b;-3,3,0.003333,1,####     $~###    }####');
        this.mXBob.SetMode(GameFramework.CurvedVal.MODE_REPEAT);
        this.mXBob.mInitAppUpdateCount = GameFramework.Utils.GetRand() % 100;
        this.mYBob.SetCurve('b;-3,3,0.005,1,####     $~###    }####');
        this.mYBob.SetMode(GameFramework.CurvedVal.MODE_REPEAT);
        this.mYBob.mInitAppUpdateCount = GameFramework.Utils.GetRand() % 100;
    }
}
Game.CrystalBall.prototype = {
    mImage : null,
    mImageSrcRect : null,
    mGlowEffect : null,
    mRayEffect : null,
    mFullPct : null,
    mScale : null,
    mOffset : null,
    mZ : 0,
    mXBob : null,
    mYBob : null,
    mTextAlpha : 0,
    mLeftArrowPct : null,
    mRightArrowPct : null,
    mMouseOverPct : 0,
    mBaseAlpha : 0,
    mColor : ~0,
    mFontColor : ~0,
    mExtraFontScaling : 0,
    mFlushPriority : 0,
    mLocked : null,
    mDoBob : null,
    mShowShadow : true,
    mTextIsQuestionMark : null,
    mDists : null,
    mTexDists : null,
    mAlphas : null,
    mDistMults : null,
    mSins : null,
    mCoss : null,
    Contains : function Game_CrystalBall$Contains(x, y) {
        var xDelta = x - this.mWidth / 2.0;
        var yDelta = y - this.mHeight / 2.0;
        var distSq = xDelta * xDelta + yDelta * yDelta;
        return distSq * 0.1675 / this.mScale.get_v() < 15000;
    },
    Move : function Game_CrystalBall$Move(x, y) {
        GameFramework.widgets.ButtonWidget.prototype.Move.apply(this, [x, y]);
        var aTrans = new GameFramework.geom.Matrix();
        aTrans.identity();
        var aScale = this.mScale.GetOutVal();
        if(this.mZ > 0) {
            aScale *= 0.00195 / this.mZ;
        }
        aTrans.scale(aScale * 5.3 * (1.0 + this.mFullPct.GetOutVal() * 0.5), aScale * 5.3 * (1.0 + this.mFullPct.GetOutVal() * 0.2));
        this.mGlowEffect.mDrawTransform = aTrans.clone();
        this.mRayEffect.mDrawTransform = aTrans.clone();
    },
    Draw : function Game_CrystalBall$Draw(g) {
        if((this.mParent != null) && (this.mWidth == 0)) {
            return;
        }
        var aTrans = new GameFramework.geom.Matrix();
        aTrans.translate(this.mOffset.x, this.mOffset.y);
        g.PushMatrix(aTrans);
        var aScale = this.mScale.GetOutVal();
        if(this.mZ > 0) {
            aScale *= 0.00255 / this.mZ;
        }
        var drawEffects = (Game.BejApp.mBejApp.mBoard == null) || ((!Game.BejApp.mBejApp.mIsSlow) && (GameFramework.BaseApp.mApp.get_Is3D()));
        var _t1 = g.PushTranslate(this.mWidth / 2, this.mHeight / 2);
        try {
            if(!this.mLocked && this.mDoBob) {
                g.PushTranslate((this.mXBob.GetOutVal() * (1.0 - this.mFullPct.GetOutVal())), (this.mYBob.GetOutVal() * (1.0 - this.mFullPct.GetOutVal())));
            }
            var aScaleX = aScale * 5.3 * (1.0 + this.mFullPct.GetOutVal() * 0.5);
            var aScaleY = aScale * 5.3 * (1.0 + this.mFullPct.GetOutVal() * 0.2);
            var aVisibility = 1.0 - this.mFullPct.GetOutVal();
            var c = ((Math.max(0, aVisibility * 255)) | 0);
            this.mRayEffect.mColor = GameFramework.gfx.Color.RGBToInt(c, c, c);
            this.mGlowEffect.mColor = GameFramework.gfx.Color.RGBToInt(c, c, c);
            if(!this.mLocked) {
                this.mRayEffect.mDrawTransform.identity();
                this.mRayEffect.mDrawTransform.scale(aScaleX, aScaleY);
                if(drawEffects) {
                    this.mRayEffect.Draw(g);
                }
            }
            var clr;
            if(this.mLocked) {
                clr = GameFramework.gfx.Color.UInt_AToInt(this.mColor & 0xffffff, ((255.0 * GameFramework.gfx.Color.GetAlphaFromInt(this.mColor) * 0.5) | 0));
            } else {
                clr = this.mColor;
            }
            var _t2 = g.PushColor(clr);
            try {
                var cel = this.mLocked ? 0 : ((((this.mUpdateCnt / 4) | 0)) % 40);
                var aTransform = new GameFramework.geom.Matrix();
                aTransform.scale(Math.min(1.0, aScaleX), Math.min(1.0, aScaleY));
                var _t3 = g.PushMatrix(aTransform);
                try {
                    if(this.mShowShadow) {
                        g.DrawImage(Game.Resources['IMAGE_CRYSTALBALL_SHADOW'].get_CenteredImage(), 0, 0);
                    }
                } finally {
                    _t3.Dispose();
                }
                aTransform = new GameFramework.geom.Matrix();
                aTransform.scale(aScaleX, aScaleY);
                var _t4 = g.PushMatrix(aTransform);
                try {
                    g.DrawImageCel(Game.Resources['IMAGE_CRYSTALBALL'].get_CenteredImage(), 0, 0, cel);
                } finally {
                    _t4.Dispose();
                }
            } finally {
                _t2.Dispose();
            }
            if(!this.mLocked) {
                for(var aDistIdx = 0; aDistIdx < Game.CrystalBall.NUM_DIST_POINTS; aDistIdx++) {
                    this.mDists[aDistIdx] = aDistIdx / (Game.CrystalBall.NUM_DIST_POINTS - 2.5);
                    this.mTexDists[aDistIdx] = Math.pow(this.mDists[aDistIdx], 1.0 + (1.0 - this.mFullPct.GetOutVal()) * 1.0);
                    this.mDists[aDistIdx] *= aScale;
                    this.mAlphas[aDistIdx] = (this.mBaseAlpha + (this.mFullPct.GetOutVal() * (1.0 - this.mBaseAlpha)) - (this.mTexDists[aDistIdx] * 0.5) * (1.0 - this.mFullPct.GetOutVal()));
                    this.mTexDists[aDistIdx] *= 0.75 + (this.mFullPct.GetOutVal() * 0.25);
                    if(aDistIdx == Game.CrystalBall.NUM_DIST_POINTS - 1) {
                        this.mAlphas[aDistIdx] = 1.0 - (1.0 - this.mFullPct.GetOutVal()) * 10.0;
                    }
                }
                for(var aRadIdx = 0; aRadIdx <= Game.CrystalBall.NUM_RADIAL_POINTS; aRadIdx++) {
                    var anAngle = ((aRadIdx + 0.5) / Game.CrystalBall.NUM_RADIAL_POINTS) * 3.14159 * 2.0;
                    this.mSins[aRadIdx] = Math.sin(anAngle);
                    this.mCoss[aRadIdx] = Math.cos(anAngle);
                    this.mDistMults[aRadIdx] = 1.0 + (this.mFullPct.GetOutVal() * Math.pow(Math.abs(Math.sin(anAngle * 2.0)), 6.0) * 0.2);
                }
                if(this.mImage != null) {
                    var aVertices = Array.Create2D(Game.CrystalBall.NUM_RADIAL_POINTS, Game.CrystalBall.NUM_DIST_POINTS, null);
                    for(var aDistIdx_2 = 0; aDistIdx_2 < Game.CrystalBall.NUM_DIST_POINTS; aDistIdx_2++) {
                        for(var aRadIdx_2 = 0; aRadIdx_2 < Game.CrystalBall.NUM_RADIAL_POINTS; aRadIdx_2++) {
                            var aDist = this.mDists[aDistIdx_2] * this.mDistMults[aRadIdx_2];
                            var aRadX = 1200.0 / 2.0 + (1920.0 - 1200.0) / 2.0 * this.mFullPct.GetOutVal();
                            var aRadY = 1200.0 / 2.0;
                            var aTexStretch = (aRadX / aRadY) / (1920.0 / 1200.0);
                            var aTexStretchY = 1.0;
                            var aTexDist = this.mTexDists[aDistIdx_2] * this.mDistMults[aRadIdx_2];
                            var aTexOffset = 0.0;
                            if(this.mImageSrcRect.mWidth != 0.0) {
                                aTexStretch *= (this.mImage.mHeight / this.mImage.mWidth) / (1200.0 / 1920.0);
                                aTexOffset = (this.mImageSrcRect.mX + ((this.mImageSrcRect.mWidth / 2) | 0)) / this.mImage.mWidth - 0.5;
                            }

                            else {
                                aTexStretch *= (this.mImage.mHeight / this.mImage.mWidth) / (1200.0 / 1920.0);
                            }
                            var anAlpha = this.mAlphas[aDistIdx_2];
                            var aVtx = new GameFramework.gfx.TriVertex(this.mCoss[aRadIdx_2] * aRadX * aDist, this.mSins[aRadIdx_2] * aRadY * aDist, 0.5 + this.mCoss[aRadIdx_2] * 0.5 * aTexDist * aTexStretch + aTexOffset, 0.5 + this.mSins[aRadIdx_2] * 0.5 * aTexDist * aTexStretchY, GameFramework.gfx.Color.FAlphaToInt(Math.max(0.0, anAlpha)));
                            aVertices[aVertices.mIdxMult0 * (aRadIdx_2) + aDistIdx_2] = aVtx;
                        }
                    }
                    var aTriStrip = Array.Create(Game.CrystalBall.NUM_RADIAL_POINTS * 2 + 2, null);
                    for(var aDistIdx_3 = 0; aDistIdx_3 < Game.CrystalBall.NUM_DIST_POINTS - 1; aDistIdx_3++) {
                        for(var aRadIdx_3 = 0; aRadIdx_3 <= Game.CrystalBall.NUM_RADIAL_POINTS; aRadIdx_3++) {
                            aTriStrip[aRadIdx_3 * 2] = aVertices[aVertices.mIdxMult0 * ((aRadIdx_3) % Game.CrystalBall.NUM_RADIAL_POINTS) + aDistIdx_3];
                            aTriStrip[aRadIdx_3 * 2 + 1] = aVertices[aVertices.mIdxMult0 * ((aRadIdx_3) % Game.CrystalBall.NUM_RADIAL_POINTS) + aDistIdx_3 + 1];
                        }
                        if(Game.BejApp.mBejApp.get_Is3D()) {
                            var aTriIdx = 0;
                            var aTriVertIdx = 0;
                            var aNumVertices = Game.CrystalBall.NUM_RADIAL_POINTS * 2;
                            var aTriangles = Array.Create2D(aNumVertices, 3, null);
                            aTriangles[aTriangles.mIdxMult0 * (aTriIdx) + 0] = aTriStrip[aTriVertIdx++];
                            aTriangles[aTriangles.mIdxMult0 * (aTriIdx) + 1] = aTriStrip[aTriVertIdx++];
                            aTriangles[aTriangles.mIdxMult0 * (aTriIdx++) + 2] = aTriStrip[aTriVertIdx++];
                            --aNumVertices;
                            while(aNumVertices > 0) {
                                aTriangles[aTriangles.mIdxMult0 * (aTriIdx) + 0] = aTriStrip[aTriVertIdx - 2];
                                aTriangles[aTriangles.mIdxMult0 * (aTriIdx) + 1] = aTriStrip[aTriVertIdx - 1];
                                aTriangles[aTriangles.mIdxMult0 * (aTriIdx++) + 2] = aTriStrip[aTriVertIdx++];
                                --aNumVertices;
                            }
                            g.DrawTrianglesTex(this.mImage, aTriangles);
                        }
                    }
                }
                this.mGlowEffect.mDrawTransform.identity();
                this.mGlowEffect.mDrawTransform.scale(aScaleX, aScaleY);
                if(drawEffects) {
                    this.mGlowEffect.Draw(g);
                }
            }
        } finally {
            _t1.Dispose();
        }
        g.PopMatrix();
        {
            g.PopMatrix();
        }
        var aScaleCurve = new GameFramework.CurvedVal();
        aScaleCurve.SetCurve('b+1,1.3,0,1,####         ~~###');
        aScale *= (aScaleCurve.GetOutValAt(this.mMouseOverPct) * 4.0 + this.mExtraFontScaling);
        var aTextAlpha = (1.0 - this.mFullPct.GetOutVal() * 2.0) * this.mTextAlpha;
        if(this.mLabel.length > 0 && aTextAlpha > 0) {
            g.SetFont(Game.Resources['FONT_PLAYBUTTONS']);
            var _t5 = g.PushScale(aScale, aScale, (this.mWidth / 2), (this.mHeight / 2));
            try {
                var _t6 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * aTextAlpha) | 0)));
                try {
                    g.DrawString(this.mLabel, this.mWidth / 2 - Game.Resources['FONT_PLAYBUTTONS'].StringWidth(this.mLabel) / 2, this.mHeight / 2 + 34);
                } finally {
                    _t6.Dispose();
                }
            } finally {
                _t5.Dispose();
            }
        }
    },
    Update : function Game_CrystalBall$Update() {
        GameFramework.widgets.ButtonWidget.prototype.Update.apply(this);
        if(!this.mVisible) {
            return;
        }
        ++this.mUpdateCnt;
        this.mGlowEffect.Update();
        this.mRayEffect.Update();
        if(this.mIsOver) {
            this.mMouseOverPct = Math.min(1.0, this.mMouseOverPct + 0.05);
        } else {
            this.mMouseOverPct = Math.max(0.0, this.mMouseOverPct - 0.05);
        }
    },
    MouseDown : function Game_CrystalBall$MouseDown(x, y) {
        GameFramework.widgets.ButtonWidget.prototype.MouseDown.apply(this, [x, y]);
    }
}
Game.CrystalBall.staticInit = function Game_CrystalBall$staticInit() {
    Game.CrystalBall.NUM_DIST_POINTS = 10;
    Game.CrystalBall.NUM_RADIAL_POINTS = 30;
}

JS_AddInitFunc(function() {
    Game.CrystalBall.registerClass('Game.CrystalBall', GameFramework.widgets.ButtonWidget);
});
JS_AddStaticInitFunc(function() {
    Game.CrystalBall.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\CrystalBall.cs
//LineMap:2=3 5=55 7=16 8=19 9=22 12=26 14=29 16=44 19=48 22=54 23=56 27=62 34=70 35=72 39=77 40=80 44=85 66=33 72=40 81=91 89=101 91=105 92=107 94=110 95=112 97=115 98=117 106=126 109=130 110=132 112=136 113=138 116=140 120=145 122=150 124=154 126=158 133=166 138=172 
//LineMap:141=174 142=176 147=180 154=184 170=203 182=216 185=220 187=223 189=226 192=230 197=236 199=239 202=243 203=245 211=252 213=267 214=269 215=272 218=276 219=278 226=286 230=291 236=298 243=306 247=333 257=342 258=360 261=364 264=368 265=396 268=403 271=414 274=416 
//LineMap:291=434 293=437 296=441 309=13 
//Start:CurvedValTable
/**
 * @constructor
 */
Game.CurvedValTable = function Game_CurvedValTable() {
}
Game.CurvedValTable.prototype = {

}
Game.CurvedValTable.staticInit = function Game_CurvedValTable$staticInit() {
    Game.CurvedValTable['Board_cs_02_09_11__17_30_09_511'] = 'b+0,1,0.005,1,#### %n###   N<###     P~###';
    Game.CurvedValTable['Board_cs_02_09_11__18_28_41_069'] = 'b+0,0,0,1,####         ~U###';
    Game.CurvedValTable['Board_cs_02_10_11__17_45_37_203'] = 'b#0,1,0.005,1,# VP  @6      -#';
    Game.CurvedValTable['EndLevelDialog_cs_11_04_11__13_54_55_550'] = 'b;0,1,0.01,0.3,~pMZ         ~D###';
    Game.CurvedValTable['EndLevelDialog_cs_11_04_11__15_01_52_045'] = 'b+0,1,0.01,0.3,G*ak         ~~###';
    Game.CurvedValTable['EndLevelDialog_cs_11_07_11__19_27_27_965'] = 'b;0,2,0.01,1.2,P###    NP###%P)(^  |W###  RPCi|';
    Game.CurvedValTable['Hyperspace_cs_11_10_11__11_45_36_674'] = 'b-0,1,0.0025,1,~###     M~### b#### S####y~###D~###';
    Game.CurvedValTable['Hyperspace_cs_11_10_11__12_06_32_324'] = 'b+0,1,0,1,~###       N~###  R)###';
    Game.CurvedValTable['Hyperspace_cs_11_10_11__12_08_47_105'] = 'b+0,1,0,1,~###     w~###   >####j####';
    Game.CurvedValTable['Board_cs_11_09_11__15_41_50_476'] = 'b;0,1,0.01,0.5,~###         ~####';
    Game.CurvedValTable['Board_cs_11_09_11__15_42_57_607'] = 'b;0,0,0,0.5,####         ~~###';
    Game.CurvedValTable['TutorialMgr_cs_11_11_11__15_19_51_707'] = 'b;0,1,0.01,0.15,#0F>         ~~###';
    Game.CurvedValTable['BejApp_cs_11_14_11__13_34_40_701'] = 'b+0,0,0,1,_###    [C### |o###   G_###';
    Game.CurvedValTable['HintDialog_cs_11_14_11__18_37_44_846'] = 'b;0,1,0.01,0.2,#-mh         ~~###';
    Game.CurvedValTable['HintDialog_cs_11_14_11__18_38_10_200'] = 'b;0,1,0.01,0.5,~s9y         ~####';
    Game.CurvedValTable['TutorialMgr_cs_11_14_11__18_50_05_912'] = 'b;0,1,0.01,1,~###         ~####';
    Game.CurvedValTable['TutorialMgr_cs_11_14_11__19_05_53_409'] = 'b;0,1,0.01,0.2,~of_         ~#M>5';
    Game.CurvedValTable['SpeedBoard_cs_11_15_11__17_35_36_339'] = 'b+0,1,0.01,5,####    t#### *~###    &~###';
    Game.CurvedValTable['ClassicBoard_cs_11_21_11__05_39_07_684'] = 'b+0,1,0.01,1,~###         ~####';
    Game.CurvedValTable['BejApp_cs_11_21_11__05_46_54_679'] = 'b+0,1,0.007692,1,~###         ~####';
    Game.CurvedValTable['SpeedBoard_cs_11_21_11__05_51_47_583'] = 'b+0,1,0.01,1,~###         ~####';
    Game.CurvedValTable['SpeedBoard_cs_11_21_11__05_58_39_924'] = 'b+0,1,0.02,1,~###         ~####';
    Game.CurvedValTable['DialogMgr_cs_11_28_11__18_12_06_572'] = 'b;0,1,0.01,0.4,#.<s         ~~###';
    Game.CurvedValTable['DialogMgr_cs_11_28_11__18_12_32_358'] = 'b;0,1,0.01,0.15,~pia         ~####';
    Game.CurvedValTable['MainMenu_cs_11_29_11__14_35_51_418'] = 'b;0,1,0.01,0.4,####         ~~###';
    Game.CurvedValTable['MainMenu_cs_11_29_11__14_37_36_539'] = 'b;0,1,0.01,0.4,~###         ~####';
    Game.CurvedValTable['MainMenu_cs_11_21_11__15_34_43_243'] = 'b;0,1,0.01,2,####    }####     $~###';
    Game.CurvedValTable['TutorialMgr_cs_11_14_11__19_18_09_946'] = 'b;0,1,0.01,0.1,~###         ~#B}2';
}

JS_AddInitFunc(function() {
    Game.CurvedValTable.registerClass('Game.CurvedValTable', null);
});
JS_AddStaticInitFunc(function() {
    Game.CurvedValTable.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\CurvedValTable.cs
//LineMap:2=5 14=9 
//Start:DeferredSound
/**
 * @constructor
 */
Game.DeferredSound = function Game_DeferredSound(theSound, theOnGameTick, theVolume) {
    this.mId = theSound;
    this.mOnGameTick = theOnGameTick;
    this.mVolume = theVolume;
}
Game.DeferredSound.prototype = {
    mId : null,
    mOnGameTick : 0,
    mVolume : 0
}
Game.DeferredSound.staticInit = function Game_DeferredSound$staticInit() {
}

JS_AddInitFunc(function() {
    Game.DeferredSound.registerClass('Game.DeferredSound', null);
});
JS_AddStaticInitFunc(function() {
    Game.DeferredSound.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\DeferredSound.cs
//LineMap:2=3 5=9 7=10 
//Start:DialogMgr
/**
 * @constructor
 */
Game.DialogMgr = function Game_DialogMgr() {
    this.mDialogList = [];
    this.mDialogMap = {};
    this.mDialogDarkenBackPct = GameFramework.CurvedVal.CreateAsConstant(0.0);
    Game.DialogMgr.initializeBase(this);
    JS_Assert(Game.DialogMgr.mDialogMgr == null);
    Game.DialogMgr.mDialogMgr = this;
}
Game.DialogMgr.prototype = {
    mDialogList : null,
    mDialogMap : null,
    mDialogDarkenBackPct : null,
    KillDialog : function Game_DialogMgr$KillDialog(theDialogId, removeWidget, deleteWidget) {
        if(removeWidget === undefined) {
            removeWidget = true;
        }
        if(deleteWidget === undefined) {
            deleteWidget = true;
        }
        var aDialog = this.mDialogMap[(theDialogId | 0)];
        if(aDialog != null) {
            if(aDialog.mResult == -1) {
                aDialog.mResult = 0;
            }
            var findIdx = this.mDialogList.indexOf(aDialog);
            if(findIdx != -1) {
                this.mDialogList.removeAt(findIdx);
            }
            delete this.mDialogMap[(theDialogId | 0)];
            if((removeWidget || deleteWidget) && (aDialog.mParent != null)) {
                aDialog.mParent.RemoveWidget(aDialog);
            }
            if(aDialog.IsModal()) {
            }
            if(deleteWidget) {
            }
            return true;
        }
        return false;
    },
    DrawAll : function Game_DialogMgr$DrawAll(g) {
        this.mAppState.FlushDeferDraws();
        var aMatrixDepth = g.mMatrixDepth;
        var aColorDepth = g.mColorVector.length;
        this.Draw(g);
        JS_Assert(aMatrixDepth == g.mMatrixDepth, 'Matrix stack error - pops don\'t match pushes');
        JS_Assert(aColorDepth == g.mColorVector.length, 'Color stack error - pops don\'t match pushes');
        var darkenWidgetIdx;
        for(darkenWidgetIdx = this.mWidgets.length - 1; darkenWidgetIdx >= 0; --darkenWidgetIdx) {
            var d = Type.safeCast(this.mWidgets[darkenWidgetIdx], Game.Bej3Dialog);
            if(d == null || !d.mIsKilling) {
                break;
            }
        }
        if(darkenWidgetIdx < 0) {
            darkenWidgetIdx = 0;
        }
        for(var i = 0; i < this.mWidgets.length; ++i) {
            var aWidget = Type.safeCast(this.mWidgets[i], GameFramework.widgets.ClassicWidget);
            if(aWidget.mVisible) {
                if(i == darkenWidgetIdx) {
                    this.drawBackground(g);
                }
                var _t1 = g.PushTranslate(aWidget.mX, aWidget.mY);
                try {
                    aWidget.mLastDrawX = g.mMatrix.tx;
                    aWidget.mLastDrawY = g.mMatrix.ty;
                    aWidget.DrawAll(g);
                } finally {
                    _t1.Dispose();
                }
            }
            JS_Assert(aMatrixDepth == g.mMatrixDepth, 'Matrix stack error - pops don\'t match pushes');
            JS_Assert(aColorDepth == g.mColorVector.length, 'Color stack error - pops don\'t match pushes');
        }
        if(this.mWidgets.length == 0) {
            this.drawBackground(g);
        }
    },
    drawBackground : function Game_DialogMgr$drawBackground(g) {
        if(this.mDialogDarkenBackPct.get_v() != 0.0) {
            var _t2 = g.PushColor(GameFramework.gfx.Color.UInt_FAToInt(0, this.mDialogDarkenBackPct.get_v() * 0.65));
            try {
                g.FillRect(GameFramework.BaseApp.mApp.mX, GameFramework.BaseApp.mApp.mY, GameFramework.BaseApp.mApp.mDrawWidth, GameFramework.BaseApp.mApp.mDrawHeight);
            } finally {
                _t2.Dispose();
            }
        }
    },
    Update : function Game_DialogMgr$Update() {
        GameFramework.widgets.ClassicWidget.prototype.Update.apply(this);
        if(this.mDialogDarkenBackPct.get_v() != 0.0 && this.mDialogDarkenBackPct.GetOutFinalVal() != 0.0 && (this.mDialogList.length == 0 || ((Type.tryCast(this.mDialogList[this.mDialogList.length - 1], Game.Bej3Dialog)) && (!(this.mDialogList[this.mDialogList.length - 1]).mWantsDarken || (this.mDialogList.length == 1 && ((this.mDialogList[this.mDialogList.length - 1]).mIsKilling) || (this.mDialogList.length == 2 && (this.mDialogList[this.mDialogList.length - 1]).mIsKilling && !(this.mDialogList[0]).mWantsDarken)))))) {
            this.mDialogDarkenBackPct.Intercept('DialogMgr_cs_11_28_11__18_12_32_358');
        }
    },
    AddDialog : function Game_DialogMgr$AddDialog(theDialog) {
        var dialogId = theDialog.mDialogId;
        this.KillDialog(dialogId);
        if(theDialog.mWidth == 0) {
            var aWidth = this.mWidth / 2.0;
            theDialog.Resize((this.mWidth - aWidth) / 2, this.mHeight / 5, aWidth, theDialog.GetPreferredHeight(aWidth));
        }
        if(theDialog.mWantsDarken && (this.mDialogList.length == 0 || ((Type.tryCast(this.mDialogList[this.mDialogList.length - 1], Game.Bej3Dialog)) && (!(this.mDialogList[this.mDialogList.length - 1]).mWantsDarken || (this.mDialogList[this.mDialogList.length - 1]).mIsKilling)))) {
            this.mDialogDarkenBackPct.Intercept('DialogMgr_cs_11_28_11__18_12_06_572');
        }
        this.mDialogMap[(dialogId | 0)] = theDialog;
        this.mDialogList.push(theDialog);
        this.AddWidget(theDialog);
        if(theDialog.IsModal()) {
        }
    },
    GetDialog : function Game_DialogMgr$GetDialog(theDialogId) {
        return this.mDialogMap[(theDialogId | 0)];
    }
}
Game.DialogMgr.staticInit = function Game_DialogMgr$staticInit() {
    Game.DialogMgr.mDialogMgr = null;
}

JS_AddInitFunc(function() {
    Game.DialogMgr.registerClass('Game.DialogMgr', GameFramework.widgets.ClassicWidget);
});
JS_AddStaticInitFunc(function() {
    Game.DialogMgr.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\DialogMgr.cs
//LineMap:2=3 5=26 7=19 8=21 9=23 11=27 20=35 22=35 23=35 24=37 25=39 27=43 29=46 32=50 33=52 35=55 38=61 41=67 43=70 49=77 51=80 52=82 54=85 60=92 63=96 65=99 74=109 77=111 86=117 89=121 102=133 111=138 114=143 116=151 124=160 126=164 129=168 131=174 133=177 135=180 
//LineMap:141=188 
//Start:Effect
/**
 * @constructor
 */
Game.Effect = function Game_Effect(theType) {
    this.mDoubleSpeed = false;
    this.mType = theType;
    this.mOverlay = false;
    this.mX = 0;
    this.mY = 0;
    this.mZ = 0;
    this.mPieceIdRel = -1;
    this.mDX = this.mDY = this.mDZ = 0;
    this.mDXScalar = this.mDYScalar = this.mDZScalar = 1.0;
    this.mGravity = 0;
    this.mDelay = 0;
    this.mLightSize = 0;
    this.mLightIntensity = 0;
    this.mScale = 1.0;
    this.mDScale = 0.0;
    this.mMinScale = 0.0;
    this.mMaxScale = 10000.0;
    this.mFrame = 0;
    this.mAngle = this.mDAngle = 0;
    this.mColor = GameFramework.gfx.Color.WHITE_RGB;
    this.mIsCyclingColor = false;
    this.mCurHue = 0;
    this.mUpdateDiv = 1;
    this.mAlpha = 1.0;
    this.mDAlpha = -0.01;
    this.mMaxAlpha = 1.0;
    this.mImage = null;
    this.mFlags = 0;
    this.mIsAdditive = false;
    switch(this.mType) {
        case Game.Effect.EFxType.STEAM:
        {
            this.mImage = Game.Resources['IMAGE_FX_STEAM'];
            this.mGravity = (-0.005) * 1.67;
            if(GameFramework.BaseApp.mApp.get_Is3D()) {
                this.mAngle = GameFramework.Utils.GetRandFloat() * 3.141593;
                this.mDAngle = (GameFramework.Utils.GetRandFloat() * 0.04) * 1.67;
            }

            this.mAlpha = 0.85;
            this.mDAlpha = 0;
            this.mValue = Array.Create(3, null);
            this.mValue[0] = (0.5) * 1.67;
            this.mValue[1] = (-0.02) * 1.67;
            this.mValue[2] = 0.93;
            break;
        }
        case Game.Effect.EFxType.SPARKLE_SHARD:
        {
            this.mUpdateDiv = (Game.Util.Rand() % 2) + 2;
            this.mDX = (-1.0 + ((Game.Util.Rand() % 20) * 0.1)) * 1.67;
            this.mDY = (((Game.Util.Rand() % 50)) * 0.1) * 1.67;
            this.mColor = GameFramework.gfx.Color.RGBAToInt(255, 255, 255, 255);
            break;
        }
        case Game.Effect.EFxType.GEM_SHARD:
        {
            this.mValue = Array.Create(4, null);
            this.mFrame = Game.Util.Rand() % 40;
            this.mUpdateDiv = 0;
            this.mAlpha = 1.0;
            this.mDAlpha = (-0.005 + Math.abs(GameFramework.Utils.GetRandFloat()) * -0.01) * 1.67;
            this.mDecel = 1.0;
            break;
        }
        case Game.Effect.EFxType.GLITTER_SPARK:
        {
            this.mImage = Game.Resources['IMAGE_GEM_FRUIT_SPARK'];
            this.mIsAdditive = true;
            this.mGravity = 0.01;
            this.mAlpha = 1.0;
            this.mDAlpha = 0.0;
            this.mScale = 0.5;
            this.mDScale = -0.005;
            break;
        }
        case Game.Effect.EFxType.FRUIT_SPARK:
        {
            this.mGravity = 0.005;
            this.mDX = GameFramework.Utils.GetRandFloat() * 1.0;
            this.mDY = GameFramework.Utils.GetRandFloat() * 1.0;
            this.mScale = 0.2;
            this.mAlpha = 1.0;
            this.mDAlpha = -0.005;
            this.mAngle = GameFramework.Utils.GetRandFloat() * 3.141593;
            break;
        }
        case Game.Effect.EFxType.EMBER_FADEINOUT_BOTTOM:
        case Game.Effect.EFxType.EMBER_FADEINOUT:
        case Game.Effect.EFxType.EMBER_BOTTOM:
        case Game.Effect.EFxType.EMBER:
        {
            this.mImage = Game.Resources['IMAGE_FIREPARTICLE'];
            this.mColor = GameFramework.gfx.Color.RGBAToInt(255, Game.Util.Rand() % 64 + 64, Game.Util.Rand() % 32 + 30, 255);
            this.mGravity = -0.0;
            this.mScale = 0.75;
            this.mDScale = 0.005;
            this.mAngle = GameFramework.Utils.GetRandFloat() * 3.141593;
            this.mDAngle = 0.0;
            if((this.mType == Game.Effect.EFxType.EMBER_FADEINOUT) || (this.mType == Game.Effect.EFxType.EMBER_FADEINOUT_BOTTOM)) {
                this.mAlpha = 0.01;
                this.mDAlpha = 0.02;
                this.mStage = 0;
            }

            break;
        }
        case Game.Effect.EFxType.COUNTDOWN_SHARD:

        {
            var aType = Game.Util.Rand() % 2;
            var anAngle = Game.Util.Rand() % 2 * 3.141593;
            anAngle += GameFramework.Utils.GetRandFloat() * 3.141593 * 0.3;
            var aSpeed = Game.Board.GEM_WIDTH * (0.02 + Math.abs(GameFramework.Utils.GetRandFloat()) * 0.05);
            if(aType != 0) {
                this.mAngle = anAngle;
                this.mDAngle = GameFramework.Utils.GetRandFloat() * 3.141593 * 0.01;
            }

            else {
                this.mAngle = 0;
            }
            this.mAngle = GameFramework.Utils.GetRandFloat() * 3.141593;
            this.mDAngle = GameFramework.Utils.GetRandFloat() * 0.2;
            this.mFrame = Game.Util.Rand() % this.mImage.mNumFrames;
            this.mColor = GameFramework.gfx.Color.WHITE_RGB;
            this.mDX = Math.cos(anAngle) * aSpeed * 1.25;
            this.mDY = -Math.abs(Math.sin(anAngle) * aSpeed) * 1.5;
            this.mGravity = 0.15;
            this.mDAlpha = -0.0 + Math.abs(GameFramework.Utils.GetRandFloat()) * -0.0;
            this.mAlpha = 1.0;
            this.mScale = 0.5 + Math.abs(GameFramework.Utils.GetRandFloat()) * 0.2;
            this.mDScale = -0.0 + Math.abs(GameFramework.Utils.GetRandFloat()) * -0.01;
            this.mTimer = 0.5 + Math.abs(GameFramework.Utils.GetRandFloat()) * 0.75;
        }

            break;
        case Game.Effect.EFxType.SMOKE_PUFF:
        {
            this.mImage = Game.Resources['IMAGE_SMOKE'];
            this.mGravity = -0.005;
            this.mAlpha = 0.5;
            this.mDAlpha = -0.005;
            break;
        }
        case Game.Effect.EFxType.DROPLET:
        {
            this.mImage = Game.Resources['IMAGE_DRIP'];
            this.mDAlpha = 0;
            this.mGravity = 0.05;
            break;
        }
        case Game.Effect.EFxType.STEAM_COMET:
        {
            this.mValue = Array.Create(2, null);
            this.mImage = Game.Resources['IMAGE_FX_STEAM'];
            this.mGravity = -0.005;
            this.mAngle = GameFramework.Utils.GetRandFloat() * 3.141593;
            this.mDAngle = GameFramework.Utils.GetRandFloat() * 0.04;
            this.mAlpha = 0.85;
            this.mDAlpha = 0;
            break;
        }
        case Game.Effect.EFxType.LIGHT:
        {
            this.mValue = Array.Create(3, null);
            break;
        }
    }
    this.mDeleteMe = false;
    this.mRefCount = 0;
}
Game.Effect.prototype = {
    mType : null,
    mOverlay : null,
    mX : 0,
    mY : 0,
    mZ : 0,
    mDX : 0,
    mDY : 0,
    mDZ : 0,
    mPieceIdRel : 0,
    mDXScalar : 0,
    mDYScalar : 0,
    mDZScalar : 0,
    mGravity : 0,
    mFrame : 0,
    mDelay : 0,
    mGemType : 0,
    mDecel : 0,
    mAlpha : 0,
    mDAlpha : 0,
    mMaxAlpha : 0,
    mScale : 0,
    mDScale : 0,
    mLightSize : 0,
    mLightIntensity : 0,
    mMinScale : 0,
    mMaxScale : 0,
    mColor : GameFramework.gfx.Color.WHITE_RGB,
    mColor2 : GameFramework.gfx.Color.WHITE_RGB,
    mAngle : 0,
    mDAngle : 0,
    mStage : 0,
    mTimer : 0,
    mImage : null,
    mDoubleSpeed : null,
    mUpdateDiv : 0,
    mIsCyclingColor : null,
    mCurHue : 0,
    mIsAdditive : null,
    mValue : null,
    mPieceId : 0,
    mFlags : 0,
    mDeleteMe : null,
    mRefCount : 0,
    mFXManager : null,
    Dispose : function Game_Effect$Dispose() {
    },
    Update : function Game_Effect$Update() {
    },
    Draw : function Game_Effect$Draw(g) {
    }
}
Game.Effect.staticInit = function Game_Effect$staticInit() {
}

JS_AddInitFunc(function() {
    Game.Effect.registerClass('Game.Effect', null, GameFramework.IExplicitDisposable);
});
JS_AddStaticInitFunc(function() {
    Game.Effect.staticInit();
});
Game.Effect.EFxType = {};
Game.Effect.EFxType.staticInit = function Game_Effect_EFxType$staticInit() {
    Game.Effect.EFxType.NONE = 0;
    Game.Effect.EFxType.CUSTOMCLASS = 1;
    Game.Effect.EFxType.BLAST_RING = 2;
    Game.Effect.EFxType.SMOKE_PUFF = 3;
    Game.Effect.EFxType.DROPLET = 4;
    Game.Effect.EFxType.STEAM_COMET = 5;
    Game.Effect.EFxType.GEM_SHARD = 6;
    Game.Effect.EFxType.STEAM = 7;
    Game.Effect.EFxType.EMBER_BOTTOM = 8;
    Game.Effect.EFxType.EMBER_FADEINOUT_BOTTOM = 9;
    Game.Effect.EFxType.EMBER = 10;
    Game.Effect.EFxType.EMBER_FADEINOUT = 11;
    Game.Effect.EFxType.FRUIT_SPARK = 12;
    Game.Effect.EFxType.COUNTDOWN_SHARD = 13;
    Game.Effect.EFxType.SPARKLE_SHARD = 14;
    Game.Effect.EFxType.GLITTER_SPARK = 15;
    Game.Effect.EFxType.CURSOR_RING = 16;
    Game.Effect.EFxType.LIGHT = 17;
    Game.Effect.EFxType.WALL_ROCK = 18;
    Game.Effect.EFxType.QUAKE_DUST = 19;
    Game.Effect.EFxType.HYPERCUBE_ENERGIZE = 20;
    Game.Effect.EFxType.TIME_BONUS = 21;
    Game.Effect.EFxType.PI = 22;
    Game.Effect.EFxType.POPANIM = 23;
    Game.Effect.EFxType.TIME_BONUS_TOP = 24;
    Game.Effect.EFxType.__COUNT = 25;
}
JS_AddInitFunc(function() {
    Game.Effect.EFxType.staticInit();
});
Game.Effect.EFlag = {};
Game.Effect.EFlag.staticInit = function Game_Effect_EFlag$staticInit() {
    Game.Effect.EFlag.SCALE_FADEINOUT = 1 << 0;
    Game.Effect.EFlag.ALPHA_FADEINOUT = 1 << 1;
    Game.Effect.EFlag.ALPHA_FADEINDELAY = 1 << 2;
    Game.Effect.EFlag.HYPERSPACE_ONLY = 1 << 3;
}
JS_AddInitFunc(function() {
    Game.Effect.EFlag.staticInit();
});
/**
 * @constructor
 */
Game.TextNotifyEffect = function Game_TextNotifyEffect() {
    Game.TextNotifyEffect.initializeBase(this, [Game.Effect.EFxType.CUSTOMCLASS]);
    this.mUpdateCnt = 0;
    this.mDuration = 200;
    this.mFont = Game.Resources['FONT_HUGE'];
    this.mDAlpha = 0;
    this.Draw_cvScaleIn = new GameFramework.CurvedVal().SetCurve('b+0,1.3,0,0.2,#6g<     8~###    ii###');
    this.Draw_cvScaleOut = new GameFramework.CurvedVal().SetCurve('b+0,1,0,0.2,~###         ~#>Hu');
}
Game.TextNotifyEffect.prototype = {
    mText : null,
    mUpdateCnt : 0,
    mDuration : 0,
    mFont : null,
    Draw_cvScaleIn : null,
    Draw_cvScaleOut : null,
    Draw : function Game_TextNotifyEffect$Draw(g) {
        {
            var scale = 1.0;
            var secStart = this.mUpdateCnt / 100.0;
            var secEnd = (this.mUpdateCnt - (this.mDuration - ((this.Draw_cvScaleOut.mInMax * 100) | 0))) / 100.0;
            if(secStart < this.Draw_cvScaleIn.mInMax) {
                scale = this.Draw_cvScaleIn.GetOutValAt(secStart);
            } else if(secEnd > 0.0) {
                scale = this.Draw_cvScaleOut.GetOutValAt(secEnd);
            }
            if(Math.abs(scale - 1.0) > 0.005) {
            }
        }
    },
    Update : function Game_TextNotifyEffect$Update() {
        if(this.mDelay > 0) {
            --this.mDelay;
            return;
        }
        ++this.mUpdateCnt;
        if(this.mUpdateCnt < 0) {
            return;
        }
        if(this.mUpdateCnt >= this.mDuration) {
            this.mDeleteMe = true;
        }
    }
}
Game.TextNotifyEffect.staticInit = function Game_TextNotifyEffect$staticInit() {
}

JS_AddInitFunc(function() {
    Game.TextNotifyEffect.registerClass('Game.TextNotifyEffect', Game.Effect);
});
JS_AddStaticInitFunc(function() {
    Game.TextNotifyEffect.staticInit();
});
/**
 * @constructor
 */
Game.ParticleEffect = function Game_ParticleEffect(thePIEffect) {
    Game.ParticleEffect.initializeBase(this, [Game.Effect.EFxType.PI]);
    this.mPIEffect = thePIEffect.Duplicate();
    this.mDoDrawTransform = false;
    this.mDAlpha = 0;
    this.mIsFirstUpdate = true;
}
Game.ParticleEffect.prototype = {
    mPIEffect : null,
    mIsFirstUpdate : null,
    mDoDrawTransform : null,
    Dispose : function Game_ParticleEffect$Dispose() {
        Game.Effect.prototype.Dispose.apply(this);
        this.mPIEffect.Dispose();
        this.mPIEffect = null;
    },
    Update : function Game_ParticleEffect$Update() {
        Game.Effect.prototype.Update.apply(this);
        var trans = new GameFramework.geom.Matrix();
        trans.scale(this.mScale, this.mScale);
        trans.rotate(this.mAngle);
        var aPieceRel = null;
        if(this.mPieceIdRel != -1) {
            if(this.mFXManager.mBoard != null) {
                aPieceRel = this.mFXManager.mBoard.GetPieceById(this.mPieceIdRel);
            }
            if(aPieceRel == null) {
                this.Stop();
                this.mPieceIdRel = -1;
            }
        }
        if(aPieceRel != null) {
            this.mX = aPieceRel.CX();
            this.mY = aPieceRel.CY();
            if(this.mFXManager.mBoard != null) {
                this.mX += Game.DM.UI_SLIDE_RIGHT * this.mFXManager.mBoard.mSlideUIPct.get_v();
            }
            if((this.mFXManager.mBoard != null) && (this.mFXManager.mBoard.mPostFXManager == this.mFXManager)) {
                this.mX += this.mFXManager.mBoard.mSideXOff.get_v();
            }
            if(aPieceRel.mHidePct > 0) {
                this.mPIEffect.mColor = GameFramework.gfx.Color.Mult(this.mPIEffect.mColor, GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255 - aPieceRel.mHidePct * 255) | 0)));
            }
        }
        trans.translate(this.mX, this.mY);
        if(this.mDoDrawTransform) {
            trans.scale(1.0, 1.0);
            this.mPIEffect.mDrawTransform = trans;
        }

        else {
            this.mPIEffect.mDrawTransform.identity();
            this.mPIEffect.mEmitterTransform = trans;
        }
        if(this.mIsFirstUpdate) {
            this.mPIEffect.ResetAnim();
            this.mIsFirstUpdate = false;
        }

        else {
            this.mPIEffect.Update();
        }
        if(!this.mPIEffect.IsActive()) {
            this.mDeleteMe = true;
        }
    },
    Draw : function Game_ParticleEffect$Draw(g) {
        if(this.mIsFirstUpdate) {
            return;
        }
        this.mPIEffect.mColor = GameFramework.gfx.Color.FAlphaToInt(this.mFXManager.mAlpha * this.mAlpha);
        this.mPIEffect.Draw(g);
    },
    SetEmitAfterTimeline : function Game_ParticleEffect$SetEmitAfterTimeline(emitAfterTimeline) {
        this.mPIEffect.mEmitAfterTimeline = emitAfterTimeline;
    },
    SetLineEmitterPoint : function Game_ParticleEffect$SetLineEmitterPoint(theLayerIdx, theEmitterIdx, thePointIdx, theKeyFrame, thePoint) {
        var aLayer = this.mPIEffect.GetLayer(theLayerIdx);
        if(aLayer == null) {
            return false;
        }
        var anEmitter = aLayer.GetEmitter(theEmitterIdx);
        if(anEmitter == null) {
            return false;
        }
        if(anEmitter.mEmitterInstanceDef.mEmitterGeom != GameFramework.resources.PIEmitterInstanceDef.Geom.LINE) {
            return false;
        }
        if(thePointIdx >= (anEmitter.mEmitterInstanceDef.mPoints.length | 0)) {
            return false;
        }
        if(theKeyFrame >= (anEmitter.mEmitterInstanceDef.mPoints[thePointIdx].mValuePoint2DVector.length | 0)) {
            return false;
        }
        anEmitter.mEmitterInstanceDef.mPoints[thePointIdx].mValuePoint2DVector[theKeyFrame].mValue = new GameFramework.geom.TPoint(thePoint.x, thePoint.y);
        return true;
    },
    SetEmitterTint : function Game_ParticleEffect$SetEmitterTint(theLayerIdx, theEmitterIdx, theColor) {
        var aLayer = this.mPIEffect.GetLayer(theLayerIdx);
        if(aLayer == null) {
            return false;
        }
        var anEmitter = aLayer.GetEmitter(theEmitterIdx);
        if(anEmitter == null) {
            return false;
        }
        anEmitter.mTintColor = theColor;
        return true;
    },
    Stop : function Game_ParticleEffect$Stop() {
        this.SetEmitAfterTimeline(false);
        if(this.mPIEffect.mFrameNum < this.mPIEffect.mLastFrameNum - 1) {
            this.mPIEffect.mFrameNum = this.mPIEffect.mLastFrameNum - 1;
        }
    },
    GetLayer : function Game_ParticleEffect$GetLayer(theIdx) {
        return this.mPIEffect.GetLayer(theIdx);
    },
    GetLayer$2 : function Game_ParticleEffect$GetLayer$2(theName) {
        return this.mPIEffect.GetLayer$2(theName);
    }
}
Game.ParticleEffect.staticInit = function Game_ParticleEffect$staticInit() {
}

JS_AddInitFunc(function() {
    Game.ParticleEffect.registerClass('Game.ParticleEffect', Game.Effect);
});
JS_AddStaticInitFunc(function() {
    Game.ParticleEffect.staticInit();
});
/**
 * @constructor
 */
Game.PopAnimEffect = function Game_PopAnimEffect(thePopAnim) {
    Game.PopAnimEffect.initializeBase(this, [Game.Effect.EFxType.POPANIM]);
    this.mPopAnim = thePopAnim.Duplicate();
    this.mDAlpha = 0;
    this.mDoubleSpeedPopAnim = true;
}
Game.PopAnimEffect.prototype = {
    mPopAnim : null,
    mDoubleSpeedPopAnim : null,
    Dispose : function Game_PopAnimEffect$Dispose() {
        if(this.mPopAnim != null) {
            this.mPopAnim.Dispose();
        }
        Game.Effect.prototype.Dispose.apply(this);
    },
    Play : function Game_PopAnimEffect$Play() {
        this.mPopAnim.Play();
    },
    Play$2 : function Game_PopAnimEffect$Play$2(theComposition) {
        this.mPopAnim.Play(theComposition);
    },
    Update : function Game_PopAnimEffect$Update() {
        Game.Effect.prototype.Update.apply(this);
        var aScale = this.mScale;
        var aWidth = this.mPopAnim.mWidth * aScale;
        var aHeight = this.mPopAnim.mHeight * aScale;
        var trans = new GameFramework.geom.Matrix();
        trans.scale(aScale, aScale);
        trans.translate(-aWidth / 2, -aHeight / 2);
        trans.rotate(this.mAngle);
        trans.translate(aWidth / 2, aHeight / 2);
        var aPieceRel = null;
        if(this.mPieceIdRel != -1) {
            if(this.mFXManager.mBoard != null) {
                aPieceRel = this.mFXManager.mBoard.GetPieceById(this.mPieceIdRel);
            }
            if(aPieceRel == null) {
                this.Stop();
                this.mPieceIdRel = -1;
            }
        }
        if(aPieceRel != null) {
            this.mX = aPieceRel.CX();
            this.mY = aPieceRel.CY();
            if(this.mFXManager.mBoard != null) {
                this.mX += Game.DM.UI_SLIDE_RIGHT * this.mFXManager.mBoard.mSlideUIPct.get_v();
            }
        }
        trans.translate(this.mX - aWidth / 2, this.mY - aHeight / 2);
        this.mPopAnim.mTransform = trans;
        this.mPopAnim.Update();
        if(this.mDoubleSpeedPopAnim) {
            this.mPopAnim.Update();
        }
        if(!this.mPopAnim.IsActive()) {
            this.mDeleteMe = true;
        }
    },
    Draw : function Game_PopAnimEffect$Draw(g) {
        this.mPopAnim.mColor = GameFramework.gfx.Color.FAlphaToInt(this.mFXManager.mAlpha);
        this.mPopAnim.Draw(g);
    },
    Stop : function Game_PopAnimEffect$Stop() {
    }
}
Game.PopAnimEffect.staticInit = function Game_PopAnimEffect$staticInit() {
}

JS_AddInitFunc(function() {
    Game.PopAnimEffect.registerClass('Game.PopAnimEffect', Game.Effect);
});
JS_AddStaticInitFunc(function() {
    Game.PopAnimEffect.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\Effect.cs
//LineMap:1=2 2=4 5=104 7=105 17=116 18=118 24=125 25=127 26=129 29=133 30=135 33=139 34=141 35=143 36=145 37=145 39=148 47=155 55=161 57=164 63=168 65=171 73=177 75=180 84=187 86=190 95=197 96=199 114=216 116=216 117=219 119=220 123=225 125=228 131=235 133=240 135=244 
//LineMap:137=247 147=256 148=256 150=259 156=263 158=266 163=269 165=272 174=279 176=282 180=287 211=81 230=291 238=303 248=14 251=16 276=42 279=46 282=48 288=363 291=371 293=370 294=372 298=377 312=392 314=395 318=400 319=402 325=415 332=423 333=425 335=439 345=447 
//LineMap:348=456 350=455 351=457 362=463 372=474 373=478 374=481 375=483 376=485 380=490 386=497 397=509 398=511 406=518 407=520 409=523 416=529 417=531 421=534 425=539 429=542 434=546 439=552 442=556 444=559 446=562 448=567 449=569 452=571 457=577 460=583 461=585 464=587 
//LineMap:471=593 476=597 487=606 490=613 492=612 493=614 502=619 522=640 525=644 528=649 530=652 531=654 535=659 541=666 548=674 549=676 550=678 553=682 
//Start:EffectsManager
/**
 * @constructor
 */
Game.EffectsManager = function Game_EffectsManager(theBoard) {
    this.mEffects = Array.Create((Game.Effect.EFxType.__COUNT | 0), null);
    Game.EffectsManager.initializeBase(this);
    this.mBoard = theBoard;
    this.mApplyBoardTransformToDraw = false;
    this.mDisableMask = false;
    this.mAlpha = 1.0;
    this.mUpdateCnt = 0;
    this.mX = this.mY = 0;
    this.mMouseVisible = false;
    this.mHeightImageDirty = false;
    this.mRewindEffect = false;
    for(var i = 0; i < this.mEffects.length; ++i) {
        this.mEffects[i] = null;
    }
}
Game.EffectsManager.prototype = {
    mBoard : null,
    mEffects : null,
    mApplyBoardTransformToDraw : null,
    mDisableMask : null,
    mDoDistorts : null,
    mHeightImageDirty : null,
    mRewindEffect : null,
    mAlpha : 0,
    Dispose : function Game_EffectsManager$Dispose() {
        this.Clear();
    },
    Update : function Game_EffectsManager$Update() {
        GameFramework.widgets.ClassicWidget.prototype.Update.apply(this);
        if((this.mBoard != null) && (this.mBoard.mBoardHidePct == 1.0)) {
            return;
        }
        this.mWidth = GameFramework.BaseApp.mApp.mWidth;
        this.mHeight = GameFramework.BaseApp.mApp.mHeight;

        {
            var $srcArray1 = this.mEffects;
            for(var $enum1 = 0; $enum1 < $srcArray1.length; $enum1++) {
                var fxArr = $srcArray1[$enum1];
                if(fxArr == null) {
                    continue;
                }
                for(var i = 0; i < fxArr.length;) {
                    var anEffect = fxArr[i];
                    var anUpdateDiv = (anEffect.mUpdateDiv == 0) ? 1 : anEffect.mUpdateDiv;
                    if(anUpdateDiv != 1) {
                        anEffect.mX += anEffect.mDX / anUpdateDiv;
                        anEffect.mY += anEffect.mDY / anUpdateDiv;
                        anEffect.mZ += anEffect.mDZ / anUpdateDiv;
                    }

                    else {
                        anEffect.mX += anEffect.mDX;
                        anEffect.mY += anEffect.mDY;
                        anEffect.mZ += anEffect.mDZ;
                    }
                    if((anUpdateDiv == 1) || (this.mUpdateCnt % anUpdateDiv == 0)) {
                        anEffect.mDY += anEffect.mGravity;
                        anEffect.mDX *= anEffect.mDXScalar;
                        anEffect.mDY *= anEffect.mDYScalar;
                        anEffect.mDZ *= anEffect.mDZScalar;
                        if((anEffect.mFlags & (Game.Effect.EFlag.ALPHA_FADEINDELAY | 0)) != 0 && anEffect.mDelay > 0) {
                            anEffect.mDelay -= 0.01;
                            if(anEffect.mDelay <= 0) {
                                anEffect.mDelay = 0;
                            }
                        }

                        else {
                            anEffect.mAlpha += anEffect.mDAlpha;
                            anEffect.mScale += anEffect.mDScale;
                        }
                    }
                    switch(anEffect.mType) {
                        case Game.Effect.EFxType.SPARKLE_SHARD:
                        {
                            anEffect.mDX *= 0.95;
                            anEffect.mDY *= 0.95;
                            if(this.mUpdateCnt % anEffect.mUpdateDiv == 0) {
                                anEffect.mFrame = (anEffect.mFrame + 1) % 40;
                            }
                            if(anEffect.mFrame == 14) {
                                anEffect.mDeleteMe = true;
                            }
                            break;
                        }
                        case Game.Effect.EFxType.EMBER_BOTTOM:
                        case Game.Effect.EFxType.EMBER:
                        case Game.Effect.EFxType.EMBER_FADEINOUT:

                        {
                            anEffect.mScale += anEffect.mDScale;
                            anEffect.mAngle += anEffect.mDAngle;
                            if((anEffect.mType == Game.Effect.EFxType.EMBER_FADEINOUT) || (anEffect.mType == Game.Effect.EFxType.EMBER_FADEINOUT_BOTTOM)) {
                                anEffect.mAlpha += anEffect.mDAlpha;
                                if(anEffect.mAlpha >= 1) {
                                    anEffect.mDeleteMe = true;
                                }
                                anEffect.mFrame = ((12.0 * anEffect.mAlpha) | 0);
                            }

                            else {
                                if((anEffect.mColor & 0xff00ff) != 0) {
                                }

                                else {
                                    anEffect.mScale += 0.02;
                                    anEffect.mAlpha -= 0.01;
                                    if(anEffect.mAlpha <= 0) {
                                        anEffect.mDeleteMe = true;
                                    }
                                }
                            }
                        }

                            break;
                        case Game.Effect.EFxType.COUNTDOWN_SHARD:

                        {
                            anEffect.mAngle += anEffect.mDAngle;
                            var aSmoke = this.AllocEffect(Game.Effect.EFxType.SMOKE_PUFF);
                            aSmoke.mScale *= anEffect.mScale * (0.0 + Math.abs(GameFramework.Utils.GetRandFloat()) * 0.45);
                            aSmoke.mAlpha *= 0.3 + Math.abs(GameFramework.Utils.GetRandFloat()) * 0.05;
                            aSmoke.mAlpha *= anEffect.mAlpha;
                            aSmoke.mAngle = GameFramework.Utils.GetRandFloat() * 3.141593;
                            aSmoke.mDAngle = GameFramework.Utils.GetRandFloat() * 3.141593 * 0.1;
                            aSmoke.mIsAdditive = anEffect.mIsAdditive;
                            aSmoke.mGravity = 0;
                            aSmoke.mDY = -1.0;
                            aSmoke.mX = anEffect.mX;
                            aSmoke.mY = anEffect.mY;
                            this.AddEffect(aSmoke);
                            if(anEffect.mScale < 0.02) {
                                anEffect.mDeleteMe = true;
                            }
                        }

                            break;
                        case Game.Effect.EFxType.SMOKE_PUFF:
                        {
                            anEffect.mDX *= 0.95;
                            break;
                        }
                        case Game.Effect.EFxType.STEAM_COMET:
                        {
                            if(anEffect.mScale < 0.1) {
                                anEffect.mAlpha = 0;
                            } else {
                                if(this.mUpdateCnt % 10 == 9) {
                                    anEffect.mDX += 1.3 * GameFramework.Utils.GetRandFloat();
                                    anEffect.mDY += 1.3 * GameFramework.Utils.GetRandFloat();
                                }
                                if(this.mUpdateCnt % 2 != 0) {
                                    var anNewEffect = this.AllocEffect(Game.Effect.EFxType.STEAM);
                                    anNewEffect.mDX = 0.0;
                                    anNewEffect.mDY = 0.0;
                                    anNewEffect.mX = anEffect.mX;
                                    anNewEffect.mY = anEffect.mY;
                                    anNewEffect.mIsAdditive = false;
                                    anNewEffect.mScale = anEffect.mScale;
                                    anNewEffect.mDScale = 0.0;
                                    this.AddEffect(anNewEffect);
                                }
                            }

                            break;
                        }
                        case Game.Effect.EFxType.DROPLET:
                        {
                            if(anEffect.mScale < 0.0) {
                                anEffect.mAlpha = 0;
                            }
                            anEffect.mAngle = 0.0 + Math.atan2(anEffect.mDX, anEffect.mDY);
                            break;
                        }
                        case Game.Effect.EFxType.BLAST_RING:
                        {
                            anEffect.mScale += 0.8;
                            anEffect.mAlpha -= 0.02;
                            break;
                        }
                        case Game.Effect.EFxType.STEAM:

                        {
                            var aSpeed = Math.sqrt(anEffect.mDX * anEffect.mDX + anEffect.mDY * anEffect.mDY);
                            anEffect.mDX *= anEffect.mValue[2];
                            if(aSpeed > anEffect.mValue[0]) {
                                anEffect.mDY *= anEffect.mValue[2];
                            } else {
                                anEffect.mDAlpha = anEffect.mValue[1];
                            }
                        }

                            anEffect.mAngle += anEffect.mDAngle;
                            anEffect.mScale += anEffect.mDScale;
                            break;
                        case Game.Effect.EFxType.GLITTER_SPARK:
                        {
                            anEffect.mAlpha = ((Game.Util.Rand() % 5) == 0) ? 1.0 : 0.25;
                            break;
                        }
                        case Game.Effect.EFxType.FRUIT_SPARK:
                        {
                            anEffect.mDY += anEffect.mGravity;
                            anEffect.mAngle += anEffect.mDY * 0.02;
                            anEffect.mScale += 0.05;
                            if(anEffect.mScale > 0.5) {
                                anEffect.mScale = 0.5;
                            }
                            break;
                        }
                        case Game.Effect.EFxType.GEM_SHARD:
                        {
                            anEffect.mFrame = (anEffect.mFrame + 1) % 40;
                            anEffect.mDX *= anEffect.mDecel;
                            anEffect.mDY *= anEffect.mDecel;
                            anEffect.mAngle += anEffect.mDAngle;
                            anEffect.mValue[0] += anEffect.mValue[2];
                            anEffect.mValue[1] += 1.0 * anEffect.mValue[3];
                            break;
                        }
                        case Game.Effect.EFxType.NONE:
                        {
                            if((anEffect.mUpdateDiv == 0) || (this.mUpdateCnt % anEffect.mUpdateDiv == 0)) {
                                if(anEffect.mIsCyclingColor) {
                                    anEffect.mCurHue = (anEffect.mCurHue + 8) % 256;
                                    anEffect.mColor = Game.Util.HSLToRGB((anEffect.mCurHue | 0), 255, 128);
                                }
                                anEffect.mAngle += anEffect.mDAngle;
                            }

                            break;
                        }
                        case Game.Effect.EFxType.WALL_ROCK:
                        {
                            anEffect.mDX *= anEffect.mDecel;
                            if(anEffect.mY > 1300) {
                                anEffect.mDeleteMe = true;
                            }
                            break;
                        }
                        case Game.Effect.EFxType.QUAKE_DUST:
                        {
                            if(anEffect.mAlpha >= 1.0) {
                                anEffect.mAlpha = 1.0;
                                anEffect.mDAlpha = -0.01;
                            }

                            break;
                        }
                        case Game.Effect.EFxType.HYPERCUBE_ENERGIZE:
                        {
                            anEffect.mAngle += anEffect.mDAngle;
                            break;
                        }
                        case Game.Effect.EFxType.LIGHT:

                        {
                            anEffect.mLightSize = anEffect.mScale;
                            anEffect.mLightIntensity = anEffect.mAlpha;
                        }

                            break;
                        default:
                        {
                            anEffect.Update();
                            if(anEffect.mDoubleSpeed) {
                                anEffect.Update();
                            }
                            break;
                        }
                    }
                    if(anEffect.mScale < anEffect.mMinScale) {
                        anEffect.mDeleteMe = true;
                        anEffect.mScale = anEffect.mMinScale;
                    } else if(anEffect.mScale > anEffect.mMaxScale) {
                        anEffect.mScale = anEffect.mMaxScale;
                        if((anEffect.mFlags & (Game.Effect.EFlag.SCALE_FADEINOUT | 0)) != 0) {
                            anEffect.mDScale = -anEffect.mDScale;
                        }
                    }
                    if(anEffect.mAlpha > anEffect.mMaxAlpha) {
                        anEffect.mAlpha = anEffect.mMaxAlpha;
                        if((anEffect.mFlags & (Game.Effect.EFlag.ALPHA_FADEINOUT | 0)) != 0) {
                            anEffect.mDAlpha = -anEffect.mDAlpha;
                        } else {
                            anEffect.mDeleteMe = true;
                        }
                    } else if(anEffect.mAlpha <= 0) {
                        anEffect.mDeleteMe = true;
                    }
                    if((anEffect.mDeleteMe) && (anEffect.mRefCount == 0)) {
                        this.FreeEffect(anEffect);
                        fxArr.removeAt(i);
                    }

                    else {
                        ++i;
                    }
                }
            }
        }
    },
    Draw : function Game_EffectsManager$Draw(g) {
        this.DoDraw(g, false);
    },
    DrawOverlay : function Game_EffectsManager$DrawOverlay(g) {
        GameFramework.widgets.ClassicWidget.prototype.DrawOverlay.apply(this, [g]);
        this.DoDraw(g, true);
    },
    DoDraw : function Game_EffectsManager$DoDraw(g, isOverlay) {
        if(this.mAlpha == 0) {
            return;
        }
        if((this.mBoard != null) && (this.mBoard.mGameOverCount > 0) && (this.mBoard.mSlideUIPct.GetOutVal() >= 1)) {
            return;
        }
        var hadOverlays = false;

        {
            var $srcArray2 = this.mEffects;
            for(var $enum2 = 0; $enum2 < $srcArray2.length; $enum2++) {
                var fxArr = $srcArray2[$enum2];
                if(fxArr == null) {
                    continue;
                }
                for(var i = 0; i < fxArr.length; ++i) {
                    var anEffect = fxArr[i];
                    if(anEffect.mOverlay != isOverlay) {
                        if(anEffect.mOverlay) {
                            hadOverlays = true;
                        }
                        continue;
                    }
                    if(anEffect.mDeleteMe) {
                        continue;
                    }
                    var aPieceRel = null;
                    if(this.mBoard != null && anEffect.mPieceIdRel != -1) {
                        aPieceRel = this.mBoard.GetPieceById(anEffect.mPieceIdRel);
                        if(aPieceRel != null && aPieceRel.mAlpha.GetOutVal() <= 0.0) {
                            continue;
                        }
                    }
                    if(anEffect.mPieceIdRel != -1 && anEffect.mType != Game.Effect.EFxType.PI && anEffect.mType != Game.Effect.EFxType.POPANIM && anEffect.mType != Game.Effect.EFxType.TIME_BONUS && anEffect.mType != Game.Effect.EFxType.TIME_BONUS_TOP && anEffect.mType != Game.Effect.EFxType.CUSTOMCLASS) {
                        if(this.mBoard != null) {
                            aPieceRel = this.mBoard.GetPieceById(anEffect.mPieceIdRel);
                        }
                        if(aPieceRel == null) {
                            continue;
                        }
                        anEffect.mX += aPieceRel.GetScreenX();
                        anEffect.mY += aPieceRel.GetScreenY();
                        if((this.mBoard != null) && (this.mBoard.mPostFXManager == this)) {
                            anEffect.mX += this.mBoard.mSideXOff.GetOutVal();
                        }
                    }
                    if(anEffect.mType == Game.Effect.EFxType.CUSTOMCLASS) {
                        anEffect.Draw(g);
                        continue;
                    }
                    var anAlpha = Math.min(1.0, anEffect.mAlpha) * this.mAlpha;
                    if(this.mBoard != null) {
                        this.mAlpha *= (1.0 - this.mBoard.mBoardHidePct);
                    }
                    switch(anEffect.mType) {
                        case Game.Effect.EFxType.NONE:

                        {
                            var _t3 = g.PushColor(GameFramework.gfx.Color.UInt_AToInt(anEffect.mColor, ((255.0 * anAlpha) | 0)));
                            try {
                                if(anEffect.mImage != null) {
                                    JS_Assert(anEffect.mFrame >= 0 && anEffect.mFrame < anEffect.mImage.mNumFrames);
                                    anEffect.mImage.mAdditive = anEffect.mIsAdditive;
                                    var m = new GameFramework.geom.Matrix();
                                    m.rotate(anEffect.mAngle);
                                    m.scale(anEffect.mScale, anEffect.mScale);
                                    g.PushMatrix(m);
                                    g.DrawImageCel(anEffect.mImage, anEffect.mX, anEffect.mY, anEffect.mFrame);
                                    g.PopMatrix();
                                    anEffect.mImage.mAdditive = false;
                                }
                            } finally {
                                _t3.Dispose();
                            }
                            break;
                        }

                        case Game.Effect.EFxType.GEM_SHARD:

                        {
                            var aColor = anEffect.mColor;
                            var aScale = anEffect.mScale;
                            var aTrans = new GameFramework.geom.Matrix();
                            aTrans.rotate(anEffect.mAngle);
                            var aMin = 0.25;
                            var anXScale = Math.sin(anEffect.mValue[0]);
                            if(anXScale > 0.0 && anXScale < aMin) {
                                anXScale = aMin;
                            }
                            if(anXScale < 0.0 && anXScale > -aMin) {
                                anXScale = -aMin;
                            }
                            var anYScale = Math.sin(anEffect.mValue[1]);
                            if(anYScale > 0.0 && anYScale < aMin) {
                                anYScale = aMin;
                            }
                            if(anYScale < 0.0 && anYScale > -aMin) {
                                anYScale = -aMin;
                            }
                            aTrans.scale(1.4 * anXScale * aScale, 1.4 * anYScale * aScale);
                            aTrans.scale(1.15 * anEffect.mScale, 1.15 * anEffect.mScale);
                            aTrans.translate(anEffect.mX, anEffect.mY);
                            g.PushMatrix(aTrans);
                            aColor = GameFramework.gfx.Color.UInt_AToInt(aColor, ((anAlpha * 255.0) | 0));
                            var aFrame = 0;
                            g.PushColor(aColor);
                            Game.Resources['IMAGE_SM_SHARDS'].mAdditive = true;
                            g.DrawImageCel(Game.Resources['IMAGE_SM_SHARDS'], 0, 0, aFrame);
                            Game.Resources['IMAGE_SM_SHARDS'].mAdditive = false;
                            g.PopColor();
                            g.PopMatrix();
                        }

                            break;
                        case Game.Effect.EFxType.SPARKLE_SHARD:

                        {
                            var anImage = Game.Resources['IMAGE_SPARKLE'];
                            anImage.mAdditive = true;
                            anEffect.mColor = GameFramework.gfx.Color.UInt_AToInt(anEffect.mColor, ((255.0 * anAlpha) | 0));
                            g.PushColor(anEffect.mColor);
                            var aWidth = ((anEffect.mScale * anImage.mPhysCelWidth) | 0);
                            var aHeight = ((anEffect.mScale * anImage.mPhysCelHeight) | 0);
                            g.DrawImageCel(anImage, anEffect.mX - ((aWidth / 2) | 0), anEffect.mY - ((aHeight / 2) | 0), anEffect.mFrame);
                            g.PopColor();
                            anImage.mAdditive = false;
                        }

                            break;
                        case Game.Effect.EFxType.STEAM:

                        {
                            var aColor_2 = GameFramework.gfx.Color.UInt_AToInt(anEffect.mColor, ((255.0 * anAlpha) | 0));
                            var aFrame_2 = anEffect.mFrame;
                            g.PushColor(aColor_2);
                            anEffect.mImage.mAdditive = true;
                            var aMatrix = new GameFramework.geom.Matrix();
                            aMatrix.rotate(anEffect.mAngle);
                            aMatrix.scale(anEffect.mScale, anEffect.mScale);
                            aMatrix.translate(anEffect.mX, anEffect.mY);
                            g.PushMatrix(aMatrix);
                            g.DrawImage(anEffect.mImage.get_CenteredImage(), 0, 0);
                            g.PopMatrix();
                            anEffect.mImage.mAdditive = false;
                            g.PopColor();
                        }

                            break;
                        case Game.Effect.EFxType.GLITTER_SPARK:

                        {
                        }

                            break;
                        case Game.Effect.EFxType.FRUIT_SPARK:

                        {
                        }

                            break;
                        case Game.Effect.EFxType.EMBER_BOTTOM:
                        case Game.Effect.EFxType.EMBER:
                        case Game.Effect.EFxType.EMBER_FADEINOUT_BOTTOM:
                        case Game.Effect.EFxType.EMBER_FADEINOUT:
                        {
                            g.mTempMatrix.a = anEffect.mScale;
                            g.mTempMatrix.b = 0;
                            g.mTempMatrix.c = 0;
                            g.mTempMatrix.d = anEffect.mScale;
                            g.mTempMatrix.tx = anEffect.mX - anEffect.mImage.mWidth / 2.0 * anEffect.mScale;
                            g.mTempMatrix.ty = anEffect.mY - anEffect.mImage.mHeight / 2.0 * anEffect.mScale;
                            g.PushMatrix(g.mTempMatrix);
                            var anEmberAlpha;

                            if(GameFramework.BaseApp.mApp.get_Is3D()) {
                                anEmberAlpha = 0.8 * anAlpha;
                                anEffect.mImage.mAdditive = true;
                            }

                            else {
                                anEmberAlpha = Math.min(1.0, 1.5 * anAlpha);
                                anEffect.mImage.mAdditive = false;
                            }

                            g.PushColor(GameFramework.gfx.Color.UInt_FAToInt(anEffect.mColor, anEmberAlpha));
                            if((anEffect.mType == Game.Effect.EFxType.EMBER_FADEINOUT) || (anEffect.mType == Game.Effect.EFxType.EMBER_FADEINOUT_BOTTOM)) {
                                var aFrame_3 = ((63.99 * anEffect.mAlpha) | 0);
                                g.DrawImageCel(anEffect.mImage, 0, 0, aFrame_3);
                            }

                            else {
                                g.DrawImageCel(anEffect.mImage, 0, 0, anEffect.mFrame);
                            }

                            g.PopColor();
                            g.PopMatrix();
                            break;
                        }
                        case Game.Effect.EFxType.COUNTDOWN_SHARD:

                        {
                        }

                            break;
                        case Game.Effect.EFxType.STEAM_COMET:
                        case Game.Effect.EFxType.SMOKE_PUFF:

                        {
                            g.PushColor(GameFramework.gfx.Color.UInt_AToInt(anEffect.mColor, ((255.0 * anAlpha) | 0)));
                            anEffect.mImage.mAdditive = anEffect.mIsAdditive;
                            var m_2 = new GameFramework.geom.Matrix();
                            m_2.scale(anEffect.mScale, anEffect.mScale);
                            m_2.rotate(anEffect.mAngle);
                            g.PushMatrix(m_2);
                            g.DrawImageCel(anEffect.mImage, anEffect.mX, anEffect.mY, anEffect.mFrame);
                            g.PopMatrix();
                            anEffect.mImage.mAdditive = false;
                            g.PopColor();
                        }

                            break;
                        case Game.Effect.EFxType.DROPLET:

                        {
                        }

                            break;
                        case Game.Effect.EFxType.LIGHT:

                        {
                        }

                            break;
                        case Game.Effect.EFxType.WALL_ROCK:

                        {
                            g.DrawImageCel(anEffect.mImage, anEffect.mX - ((anEffect.mImage.mPhysCelWidth / 2) | 0), anEffect.mY - ((anEffect.mImage.mPhysCelHeight / 2) | 0), anEffect.mFrame);
                            if(anEffect.mColor != GameFramework.gfx.Color.WHITE_RGB) {
                                g.PushColor(anEffect.mColor);
                                anEffect.mImage.mAdditive = true;
                                g.DrawImageCel(anEffect.mImage, anEffect.mX - ((anEffect.mImage.mPhysCelWidth / 2) | 0), anEffect.mY - ((anEffect.mImage.mPhysCelHeight / 2) | 0), anEffect.mFrame);
                                anEffect.mImage.mAdditive = false;
                                g.PopColor();
                            }
                        }

                            break;
                        case Game.Effect.EFxType.QUAKE_DUST:

                        {
                            g.PushColor(GameFramework.gfx.Color.UInt_AToInt(GameFramework.gfx.Color.WHITE_RGB, (anEffect.mAlpha | 0) * 255));
                            g.DrawImage(anEffect.mImage, anEffect.mX, anEffect.mY);
                            g.PopColor();
                        }

                            break;
                        default:
                        {
                            anEffect.Draw(g);
                            break;
                        }
                    }
                    if(aPieceRel != null && anEffect.mType != Game.Effect.EFxType.PI && anEffect.mType != Game.Effect.EFxType.POPANIM && anEffect.mType != Game.Effect.EFxType.TIME_BONUS && anEffect.mType != Game.Effect.EFxType.TIME_BONUS_TOP) {
                        anEffect.mX -= aPieceRel.GetScreenX();
                        anEffect.mY -= aPieceRel.GetScreenY();
                        if((this.mBoard != null) && (this.mBoard.mPostFXManager == this)) {
                            anEffect.mX -= this.mBoard.mSideXOff.GetOutVal();
                        }
                    }
                }
            }
        }
        if((hadOverlays) && (this.mAppState != null)) {
            this.DeferOverlay();
        }
    },
    IsEmpty : function Game_EffectsManager$IsEmpty() {
        return false;
    },
    AllocEffect : function Game_EffectsManager$AllocEffect(theType) {
        var anEffect = new Game.Effect(theType);
        return anEffect;
    },
    FreeEffect : function Game_EffectsManager$FreeEffect(theEffect) {
        if(theEffect != null) {
            theEffect.Dispose();
        }
    },
    GetActiveCount : function Game_EffectsManager$GetActiveCount() {
        var ret = 0;
        for(var i = 0; i < this.mEffects.length; ++i) {
            if(this.mEffects[i] != null) {
                ret += this.mEffects[i].length;
            }
        }
        return ret;
    },
    AddEffect : function Game_EffectsManager$AddEffect(theEffect) {
        if(this.mEffects[(theEffect.mType | 0)] == null) {
            this.mEffects[(theEffect.mType | 0)] = [];
        }
        this.mEffects[(theEffect.mType | 0)].push(theEffect);
        theEffect.mFXManager = this;
    },
    FreePieceEffect : function Game_EffectsManager$FreePieceEffect(thePieceId) {

        {
            var $srcArray4 = this.mEffects;
            for(var $enum4 = 0; $enum4 < $srcArray4.length; $enum4++) {
                var fxArr = $srcArray4[$enum4];
                if(fxArr == null) {
                    continue;
                }
                for(var i = 0; i < fxArr.length;) {
                    if(fxArr[i].mPieceIdRel == thePieceId) {
                        fxArr.removeAt(i);
                    }

                    else {
                        ++i;
                    }
                }
            }
        }
    },
    AddSteamExplosion : function Game_EffectsManager$AddSteamExplosion(theX, theY, theColor) {
        for(var i = 0; i < 30; i++) {
            var anEffect = this.AllocEffect(Game.Effect.EFxType.STEAM);
            var anAngle = GameFramework.Utils.GetRandFloat() * 3.141593;
            var aSpeed = (0.0 + (4.0 * Math.abs(GameFramework.Utils.GetRandFloat())));
            anEffect.mDX = aSpeed * Math.cos(anAngle);
            anEffect.mDY = aSpeed * Math.sin(anAngle);
            anEffect.mX = theX + Math.cos(anAngle) * 25.0;
            anEffect.mY = theY + Math.sin(anAngle) * 25.0;
            anEffect.mIsAdditive = false;
            anEffect.mScale = 0.1 + Math.abs(GameFramework.Utils.GetRandFloat()) * 1.0;
            anEffect.mDScale = 0.02;
            this.AddEffect(anEffect);
        }
        for(var i_2 = 0; i_2 < 30; i_2++) {
            var anEffect_2 = this.AllocEffect(Game.Effect.EFxType.DROPLET);
            var anAngle_2 = GameFramework.Utils.GetRandFloat() * 3.141593;
            var aSpeed_2 = (1.0 + (5.0 * Math.abs(GameFramework.Utils.GetRandFloat())));
            anEffect_2.mDX = aSpeed_2 * Math.cos(anAngle_2);
            anEffect_2.mDY = aSpeed_2 * Math.sin(anAngle_2) + -1.5;
            anEffect_2.mX = theX + Math.cos(anAngle_2) * 25.0;
            anEffect_2.mY = theY + Math.sin(anAngle_2) * 25.0;
            anEffect_2.mIsAdditive = false;
            anEffect_2.mScale = 0.6 + Math.abs(GameFramework.Utils.GetRandFloat()) * 0.2;
            anEffect_2.mDScale = -0.01;
            anEffect_2.mAlpha = 0.6;
            anEffect_2.mColor = 0xaaaacc;
            this.AddEffect(anEffect_2);
        }
        for(var i_3 = 0; i_3 < 6; i_3++) {
            var anEffect_3 = this.AllocEffect(Game.Effect.EFxType.STEAM_COMET);
            var anAngle_3 = i_3 * 3.141593 / 3.0 + GameFramework.Utils.GetRandFloat() * 0.2;
            var aSpeed_3 = (6.0 + (2.0 * Math.abs(GameFramework.Utils.GetRandFloat())));
            anEffect_3.mValue[0] = theX;
            anEffect_3.mValue[1] = theY;
            anEffect_3.mDX = aSpeed_3 * Math.cos(anAngle_3);
            anEffect_3.mDY = aSpeed_3 * Math.sin(anAngle_3);
            anEffect_3.mX = theX + Math.cos(anAngle_3) * 25.0;
            anEffect_3.mY = theY + Math.sin(anAngle_3) * 25.0;
            anEffect_3.mIsAdditive = false;
            anEffect_3.mScale = 2.5 + Math.abs(GameFramework.Utils.GetRandFloat()) * 0.1;
            anEffect_3.mDScale = -0.08;
            this.AddEffect(anEffect_3);
        }
        for(var i_4 = 0; i_4 < 50; i_4++) {
            var anEffect_4 = this.AllocEffect(Game.Effect.EFxType.GEM_SHARD);
            anEffect_4.mColor = theColor.ToInt();
            var aDist = i_4 * (((i_4 + 120) / 120.0) | 0);
            var aRot = i_4 * 0.503 + (Game.Util.Rand() % 100) / 800.0;
            var aSpeed_4 = 1.2 + Math.abs(GameFramework.Utils.GetRandFloat()) * 1.2;
            aRot = GameFramework.Utils.GetRandFloat() * 3.14159;
            aDist = ((GameFramework.Utils.GetRandFloat() * 48.0) | 0);
            anEffect_4.mX = theX + ((1.0 * aDist * Math.cos(aRot)) | 0);
            anEffect_4.mY = theY + ((1.0 * aDist * Math.sin(aRot)) | 0);
            aRot = Math.atan2((anEffect_4.mY - theY), (anEffect_4.mX - theX)) + GameFramework.Utils.GetRandFloat() * 0.3;
            aSpeed_4 = 4.5 + Math.abs(GameFramework.Utils.GetRandFloat()) * 1.5;
            anEffect_4.mDX = Math.cos(aRot) * aSpeed_4;
            anEffect_4.mDY = Math.sin(aRot) * aSpeed_4 + -2.0;
            anEffect_4.mDecel = 0.99 + GameFramework.Utils.GetRandFloat() * 0.005;
            anEffect_4.mAngle = aRot;
            anEffect_4.mDAngle = 0.05 * GameFramework.Utils.GetRandFloat();
            anEffect_4.mGravity = 0.06;
            anEffect_4.mValue[0] = GameFramework.Utils.GetRandFloat() * 3.141593 * 2.0;
            anEffect_4.mValue[1] = GameFramework.Utils.GetRandFloat() * 3.141593 * 2.0;
            anEffect_4.mValue[2] = 0.045 * (3.0 * Math.abs(GameFramework.Utils.GetRandFloat()) + 1.0);
            anEffect_4.mValue[3] = 0.045 * (3.0 * Math.abs(GameFramework.Utils.GetRandFloat()) + 1.0);
            anEffect_4.mDAlpha = -0.0025 * (2.0 * Math.abs(GameFramework.Utils.GetRandFloat()) + 4.0);
            this.AddEffect(anEffect_4);
        }
    },
    Clear : function Game_EffectsManager$Clear() {

        {
            var $srcArray5 = this.mEffects;
            for(var $enum5 = 0; $enum5 < $srcArray5.length; $enum5++) {
                var fxArr = $srcArray5[$enum5];
                if(fxArr == null) {
                    continue;
                }
                for(var i = 0; i < fxArr.length; i++) {
                    var anEffect = fxArr[i];
                    anEffect.Dispose();
                }
            }
        }
        this.mEffects = Array.Create((Game.Effect.EFxType.__COUNT | 0), null);
    }
}
Game.EffectsManager.staticInit = function Game_EffectsManager$staticInit() {
}

JS_AddInitFunc(function() {
    Game.EffectsManager.registerClass('Game.EffectsManager', GameFramework.widgets.ClassicWidget);
});
JS_AddStaticInitFunc(function() {
    Game.EffectsManager.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\EffectsManager.cs
//LineMap:2=4 5=65 7=15 9=66 12=70 13=72 16=76 17=78 18=80 34=85 39=93 42=97 44=100 46=103 48=126 50=126 54=128 58=133 61=137 62=139 71=147 75=152 81=159 83=162 90=168 94=173 95=173 97=176 101=182 105=184 106=186 108=189 110=190 122=204 128=209 136=216 137=216 138=218 
//LineMap:140=225 141=227 153=240 155=244 159=247 160=247 162=252 165=253 167=256 169=259 171=260 176=266 190=279 192=279 194=282 196=285 197=287 199=287 201=290 205=292 206=295 208=296 209=298 210=300 216=305 219=307 221=310 224=311 226=314 233=319 235=323 243=329 245=332 
//LineMap:252=340 255=342 257=342 259=345 260=347 264=349 266=352 272=357 274=357 276=360 279=361 280=364 282=365 286=368 287=368 289=371 300=380 302=384 306=389 309=393 314=396 315=399 316=407 323=413 329=417 331=421 334=426 337=430 340=445 344=450 346=453 347=455 349=455 
//LineMap:353=457 357=462 360=466 366=473 370=478 371=482 374=486 379=492 387=501 389=504 392=508 397=514 398=516 400=519 401=519 402=522 404=523 407=525 410=529 411=531 417=538 424=541 427=541 428=545 430=546 432=549 434=552 440=559 445=565 447=568 448=570 449=572 450=575 
//LineMap:451=577 456=598 459=600 460=600 461=603 463=604 469=611 474=615 475=615 476=617 478=618 479=623 480=625 482=628 486=633 489=639 493=642 494=642 495=645 499=658 500=658 501=661 505=675 506=675 507=677 511=696 518=704 520=705 528=712 535=720 541=725 544=727 546=782 
//LineMap:548=782 549=785 553=806 554=806 555=808 556=810 558=811 559=816 560=818 566=825 570=828 571=828 572=831 576=851 577=851 578=854 582=862 583=862 584=865 586=866 587=868 597=877 598=877 599=880 601=881 606=885 607=885 609=924 617=933 623=940 629=948 654=974 663=984 
//LineMap:667=987 671=989 675=991 679=996 687=1003 693=1011 695=1014 709=1030 725=1048 741=1065 744=1069 745=1071 747=1074 748=1080 752=1085 754=1088 757=1098 759=1102 760=1104 762=1107 764=1110 765=1112 769=1136 773=1138 777=1140 781=1145 
//Start:EndLevelDialog
/**
 * @constructor
 */
Game.Bej3EditWidget = function Game_Bej3EditWidget() {
    Game.Bej3EditWidget.initializeBase(this);
    this.SetFont(Game.Resources['FONT_GAMEOVER_DIALOG']);
    if(!GameFramework.BaseApp.mApp.get_Is3D()) {
        this.mColors[GameFramework.widgets.EditWidget.COLOR_BKG] = 0xff706050;
        this.mColors[GameFramework.widgets.EditWidget.COLOR_HILITE] = 0xff000000;
        this.mColors[GameFramework.widgets.EditWidget.COLOR_HILITE_TEXT] = 0xffffffff;
    }
}
Game.Bej3EditWidget.prototype = {
    mAlpha : 1.0,
    Draw : function Game_Bej3EditWidget$Draw(g) {
        if(this.mAlpha == 0.0) {
            return;
        }
        if(this.mAlpha < 1.0) {
            g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.mAlpha));
        }
        Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('OUTLINE', GameFramework.gfx.Color.RGBAToInt(64, 24, 8, 0));
        Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('GLOW', GameFramework.gfx.Color.RGBAToInt(0, 0, 0, 0));
        GameFramework.widgets.EditWidget.prototype.Draw.apply(this, [g]);
        Game.Resources['FONT_GAMEOVER_DIALOG'].PopLayerColor('OUTLINE');
        Game.Resources['FONT_GAMEOVER_DIALOG'].PopLayerColor('GLOW');
        if(this.mAlpha < 1.0) {
            g.PopColor();
        }
    }
}
Game.Bej3EditWidget.staticInit = function Game_Bej3EditWidget$staticInit() {
}

JS_AddInitFunc(function() {
    Game.Bej3EditWidget.registerClass('Game.Bej3EditWidget', GameFramework.widgets.EditWidget);
});
JS_AddStaticInitFunc(function() {
    Game.Bej3EditWidget.staticInit();
});
/**
 * @constructor
 */
Game.GlobalMembersEndLevelDialog = function Game_GlobalMembersEndLevelDialog() {
}
Game.GlobalMembersEndLevelDialog.Unkern = function Game_GlobalMembersEndLevelDialog$Unkern(theString) {
    var aString = '';
    for(var i = 0; i < (theString.length | 0); i++) {
        aString += String.fromCharCode(theString.charCodeAt(i)) + ('~');
    }
    return aString;
}
Game.GlobalMembersEndLevelDialog.prototype = {

}
Game.GlobalMembersEndLevelDialog.staticInit = function Game_GlobalMembersEndLevelDialog$staticInit() {
}

JS_AddInitFunc(function() {
    Game.GlobalMembersEndLevelDialog.registerClass('Game.GlobalMembersEndLevelDialog', null);
});
JS_AddStaticInitFunc(function() {
    Game.GlobalMembersEndLevelDialog.staticInit();
});
/**
 * @constructor
 */
Game.EndLevelDialog = function Game_EndLevelDialog(theBoard) {
    this.mBtns = {};
    this.mHighScores = [];
    this.mCountupPct = new GameFramework.CurvedVal();
    this.mGameStats = Array.Create((Game.DM.EStat._COUNT | 0), 0);
    this.mPointsBreakdown = [];
    this.mNewHighScoreNameEntryShowPct = new GameFramework.CurvedVal();
    this.mNewHighScoreTextExtraScaling = new GameFramework.CurvedVal();
    this.mNewHighScoreIntroAnimOut = new GameFramework.CurvedVal();
    Game.EndLevelDialog.initializeBase(this, [null, null, Game.DM.EDialog.END_LEVEL, true, '', '', '', 0]);
    this.mBoard = theBoard;
    this.mBoard.mPointsBreakdown.length = this.mBoard.mPointsBreakdown.length;
    for(var i = 0; i < this.mBoard.mPointsBreakdown.length; ++i) {
        this.mPointsBreakdown[i] = [];
        this.mPointsBreakdown[i].length = this.mBoard.mPointsBreakdown[i].length;
        for(var j = 0; j < this.mBoard.mPointsBreakdown[i].length; ++j) {
            this.mPointsBreakdown[i][j] = this.mBoard.mPointsBreakdown[i][j];
        }
    }
    for(var i_2 = 0; i_2 < (Game.DM.EStat._COUNT | 0); i_2++) {
        this.mGameStats[i_2] = this.mBoard.mGameStats[i_2];
    }
    this.mPoints = this.mBoard.mPoints;
    this.mLevel = this.mBoard.mLevel;
    this.mPointMultiplier = this.mBoard.mPointMultiplier;
    this.mCountupPct.SetCurve('b+0,1,0.016667,1,####  M#1^;       S~TEC');
    this.Resize(0, 0, 1600, 1200);
    this.mContentInsets.mBottom = 60;
    var btnWidth = 280;
    var aButton = this.NewButton$2((Game.EndLevelDialog.EWidgetId.eId_MainMenu | 0), btnWidth, Game.Resources['IMAGE_DIALOG_SMALL_BUTTON']);
    aButton.Resize(this.mWidth / 2 - ((btnWidth / 2) | 0) + 325, this.mHeight - this.mContentInsets.mBottom - aButton.mHeight + 0, btnWidth, aButton.mHeight);
    aButton.mLabel = 'MAIN MENU';
    this.mBtns[aButton.mId] = aButton;
    aButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.ButtonDepress));
    this.AddWidget(aButton);
    aButton = this.NewButton$2((Game.EndLevelDialog.EWidgetId.eId_Records | 0), btnWidth, Game.Resources['IMAGE_DIALOG_SMALL_BUTTON']);
    aButton.Resize(this.mWidth / 2 - ((btnWidth / 2) | 0) - 325, this.mHeight - this.mContentInsets.mBottom - aButton.mHeight + 0, btnWidth, aButton.mHeight);
    aButton.mLabel = 'RECORDS';
    this.mBtns[aButton.mId] = aButton;
    aButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.ButtonDepress));
    this.AddWidget(aButton);
    btnWidth += 80;
    aButton = this.NewButton((Game.EndLevelDialog.EWidgetId.eId_PlayAgain | 0), btnWidth);
    aButton.Resize(this.mWidth / 2 - ((btnWidth / 2) | 0) - 0, this.mHeight - this.mContentInsets.mBottom - aButton.mHeight + 10, btnWidth, aButton.mHeight);
    aButton.mLabel = 'PLAY AGAIN';
    this.mBtns[aButton.mId] = aButton;
    aButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.ButtonDepress));
    this.AddWidget(aButton);
    this.mFlushPriority = 100;
    this.mAllowDrag = false;
    this.mRankBar = new Game.RankBarWidget(1195, this.mBoard, null, true);
    this.mRankBar.Move(200, 240);
    this.AddWidget(this.mRankBar);
    Game.BejApp.mBejApp.mBaseWidgetAppState.SetFocus(this.mRankBar);
}
Game.EndLevelDialog.prototype = {
    mBoard : null,
    mBtns : null,
    mScoreTableName : '',
    mHighScores : null,
    mCountupPct : null,
    mRankBar : null,
    mNameWidget : null,
    mHighScoreAcceptBtn : null,
    mPoints : 0,
    mGameStats : null,
    mPointsBreakdown : null,
    mLevel : 0,
    mPointMultiplier : 0,
    mNewHighScoreNameEntryShowPct : null,
    mNewHighScoreTextExtraScaling : null,
    mNewHighScoreIntroAnimOut : null,
    EditWidgetAllowKey : function Game_EndLevelDialog$EditWidgetAllowKey(theId, theCode) {
        return true;
    },
    EditWidgetAllowChar : function Game_EndLevelDialog$EditWidgetAllowChar(id, c) {
        if(this.mNameWidget.GetFont().CharWidthKern(c, 32) == 0) {
            return false;
        }
        var valid_chars = [];
        for(var i = (97 | 0); i <= (122 | 0); i++) {
            valid_chars.push((i | 0));
            valid_chars.push(((i - 32) | 0));
        }
        for(var i_2 = (48 | 0); i_2 <= (57 | 0); i_2++) {
            valid_chars.push((i_2 | 0));
        }
        valid_chars.push(32);
        for(var i_3 = 0; i_3 < (valid_chars.length | 0); i_3++) {
            if(valid_chars[i_3] == c) {
                return true;
            }
        }
        return false;
    },
    EditWidgetAllowText : function Game_EndLevelDialog$EditWidgetAllowText(theId, theText) {
        var valid_chars = "";
        for(var i = 97; i <= 122; i++) {
            valid_chars += String.fromCharCode((i | 0));
            valid_chars += String.fromCharCode(((i - 32) | 0));
        }
        for(var i_2 = 48; i_2 <= 57; i_2++) {
            valid_chars += String.fromCharCode(i_2);
        }
        valid_chars += String.fromCharCode(32);
        var valid_chars_str = valid_chars.toString();
        for(var i_3 = 0; i_3 < (theText.length | 0); i_3++) {
            {
                if(((valid_chars_str.indexOf(String.fromCharCode(theText.charCodeAt(i_3))) | 0) == -1) || (this.mNameWidget.GetFont().CharWidthKern(theText.charCodeAt(i_3), 32) == 0)) {
                    return false;
                }
            }
        }
        return true;
    },
    MouseDown : function Game_EndLevelDialog$MouseDown(x, y) {
        Game.Bej3Dialog.prototype.MouseDown.apply(this, [x, y]);
    },
    StartNewHighScoreAnim : function Game_EndLevelDialog$StartNewHighScoreAnim() {
        if(this.mScoreTableName == '') {
            return;
        }
        if(this.mNameWidget == null) {
            this.mNameWidget = new Game.Bej3EditWidget();
            this.mNameWidget.set_FontJustification(0);
            this.mNameWidget.SetText(Game.BejApp.mBejApp.mProfile.mProfileName, false);
            this.mNameWidget.AddEventListener(GameFramework.widgets.WidgetEvent.EDIT_TEXT, ss.Delegate.create(this, this.handleHighScoreNameEdited));
            Game.BejApp.mBejApp.mBaseWidgetAppState.SetFocus(this.mNameWidget);
            this.AddWidget(this.mNameWidget);
            this.mNameWidget.mValidator = this;
        }
        if(this.mHighScoreAcceptBtn == null) {
            var btnWidth = 280;
            this.mHighScoreAcceptBtn = this.NewButton$2((Game.EndLevelDialog.EWidgetId.eId_HighScoreAccept | 0), btnWidth, Game.Resources['IMAGE_DIALOG_SMALL_BUTTON']);
            this.mHighScoreAcceptBtn.Resize(this.mWidth / 2 - ((btnWidth / 2) | 0) + 325, this.mHeight - this.mContentInsets.mBottom - this.mHighScoreAcceptBtn.mHeight + 0, btnWidth, this.mHighScoreAcceptBtn.mHeight);
            this.mHighScoreAcceptBtn.mLabel = 'OK';
            this.mBtns[this.mHighScoreAcceptBtn.mId] = this.mHighScoreAcceptBtn;
            this.mHighScoreAcceptBtn.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.ButtonDepress));
            this.AddWidget(this.mHighScoreAcceptBtn);
        }
        this.mNameWidget.mMaxPixels = 480;
        this.mHighScoreAcceptBtn.Move(this.mWidth / 2 - this.mHighScoreAcceptBtn.mWidth / 2, 590);
        this.mNewHighScoreNameEntryShowPct.SetConstant(1.0);
        this.mNewHighScoreTextExtraScaling.SetConstant(1.0);
    },
    Kill : function Game_EndLevelDialog$Kill() {
        this.FinishHighScoreNameEntry();
        Game.Bej3Dialog.prototype.Kill.apply(this);
    },
    ShowPromptForValidNameDlg : function Game_EndLevelDialog$ShowPromptForValidNameDlg() {
        var aDialog = Game.BejApp.mBejApp.DoModalDialog('INVALID NAME', 'Please enter a valid name.', 'OK', GameFramework.widgets.Dialog.BUTTONS_FOOTER, Game.DM.EDialog.UNKNOWN_MODAL);
        var aWidth = 850;
        var aHeight = aDialog.GetPreferredHeight(aWidth);
        aDialog.Resize(this.mX + this.mWidth / 2 - ((aWidth / 2) | 0), this.mY + this.mHeight / 2 - aHeight / 2, aWidth, aHeight);
    },
    IsCurrentHighScoreNameValid : function Game_EndLevelDialog$IsCurrentHighScoreNameValid() {
        return this.mNewHighScoreNameEntryShowPct.get_v() != 1.0 || this.mNameWidget.GetText() != '';
    },
    ButtonDepress : function Game_EndLevelDialog$ButtonDepress(theEvent) {
        if(!this.IsCurrentHighScoreNameValid() && (theEvent.target == this.mBtns[(Game.EndLevelDialog.EWidgetId.eId_MainMenu | 0)] || theEvent.target == this.mBtns[(Game.EndLevelDialog.EWidgetId.eId_PlayAgain | 0)] || theEvent.target == this.mBtns[(Game.EndLevelDialog.EWidgetId.eId_HighScoreAccept | 0)])) {
            this.ShowPromptForValidNameDlg();
            return;
        }
        Game.Bej3Dialog.prototype.ButtonDepress.apply(this, [theEvent]);
        if(theEvent.target == this.mBtns[(Game.EndLevelDialog.EWidgetId.eId_MainMenu | 0)]) {
            var aBoard = Game.BejApp.mBejApp.mBoard;
            if(aBoard != null) {
                this.Kill();
                aBoard.BackToMenu();
            }
        } else if(theEvent.target == this.mBtns[(Game.EndLevelDialog.EWidgetId.eId_PlayAgain | 0)]) {
            var aBoard_2 = Game.BejApp.mBejApp.mBoard;
            if(aBoard_2 != null) {
                this.Kill();
                aBoard_2.Init();
                aBoard_2.NewGame();
                Game.BejApp.mBejApp.mBaseWidgetAppState.SetFocus(aBoard_2);
            }
        } else if(theEvent.target == this.mBtns[(Game.EndLevelDialog.EWidgetId.eId_Records | 0)]) {
            this.mScale.SetCurve('b;0,1,0.01,0.25,~t4G         ~O###');
            var dlg = new Game.RecordsDialog(true);
            Game.BejApp.mBejApp.mDialogMgr.AddDialog(dlg);
            dlg.AddEventListener(GameFramework.widgets.DialogEvent.CLOSED, ss.Delegate.create(this, this.handleRecordsDlgClosed));
        } else if(theEvent.target == this.mBtns[(Game.EndLevelDialog.EWidgetId.eId_HighScoreAccept | 0)]) {
            this.CheckFinishScoreNameEntry();
        }
    },
    CheckFinishScoreNameEntry : function Game_EndLevelDialog$CheckFinishScoreNameEntry() {
        var s = GameFramework.Utils.StrTrim(this.mNameWidget.GetText());
        if(s.length == 0) {
        }
        {
            this.FinishHighScoreNameEntry();
        }
    },
    FinishHighScoreNameEntry : function Game_EndLevelDialog$FinishHighScoreNameEntry() {
        if(this.mNewHighScoreNameEntryShowPct.get_v() != 1.0) {
            return;
        }
        var aName = GameFramework.Utils.StrTrim(this.mNameWidget.GetText());
        if(aName.length == 0) {
            aName = 'Player';
        }
        this.mNewHighScoreNameEntryShowPct.SetCurve('b;0,1,0.01,0.3,~###         ~#>>l');
        var oldName = Game.BejApp.mBejApp.mProfile.mProfileName;
        this.mNameWidget.SetText(aName, true);
        this.UpdateHighScoreEntryText();
        if(oldName != aName) {
            Game.BejApp.mBejApp.mProfile.mProfileName = aName;
            var table = Game.BejApp.mBejApp.mHighScoreMgr.GetOrCreateTable(this.mScoreTableName);
            for(var i = 0; i < Game.HighScoreTable.ENTRY_COUNT; ++i) {
                var entry = table.mHighScores[i];
                if(entry.mName == oldName && entry.mScore == this.mPoints) {
                    entry.mName = Game.BejApp.mBejApp.mProfile.mProfileName;
                }
            }
            Game.BejApp.mBejApp.SaveHighscores(true);
        }
    },
    handleHighScoreNameEdited : function Game_EndLevelDialog$handleHighScoreNameEdited(theEvent) {
        this.CheckFinishScoreNameEntry();
    },
    handleRecordsDlgClosed : function Game_EndLevelDialog$handleRecordsDlgClosed(theEvent) {
        this.mScale.SetCurve('b+0,1,0.01,0.25,P+1x         ~~###');
        if(this.mNameWidget != null && this.mNewHighScoreNameEntryShowPct.get_v() > 0.0) {
            Game.BejApp.mBejApp.mBaseWidgetAppState.SetFocus(this.mNameWidget);
        }
    },
    Update : function Game_EndLevelDialog$Update() {
        if(Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.UNLOCK) != null) {
            return;
        }
        Game.Bej3Dialog.prototype.Update.apply(this);
        if(this.mNewHighScoreNameEntryShowPct.get_v() > 0.0 && this.mNameWidget != null) {
            this.UpdateHighScoreEntryText();
        }
        this.mCountupPct.IncInVal();
        if((Game.BejApp.mBejApp.mAutoPlay != Game.DM.EAutoplay.None) && (!this.mScale.IsDoingCurve()) && (this.mScale.GetOutVal() == 1.0) && (this.mUpdateCnt >= 300)) {
            var btn = this.mBtns[(Game.EndLevelDialog.EWidgetId.eId_PlayAgain | 0)];
            var aWidgetEvent = new GameFramework.widgets.WidgetEvent(GameFramework.widgets.WidgetEvent.CLICKED);
            aWidgetEvent.mX = btn.mX;
            aWidgetEvent.mY = btn.mY;
            btn.DispatchEvent(aWidgetEvent);
        }
    },
    UpdateHighScoreEntryText : function Game_EndLevelDialog$UpdateHighScoreEntryText() {
        var masterTable = Game.BejApp.mBejApp.mHighScoreMgr.GetOrCreateTable(this.mScoreTableName);
        for(var i = 0; i < this.mHighScores.length; ++i) {
            var e = this.mHighScores[i];
            if(e.mIsNew) {
                e.mName = GameFramework.Utils.StrTrim(this.mNameWidget.GetText());
                if(masterTable != null && masterTable.mHighScores != null && i < masterTable.mHighScores.length) {
                    var masterEntry = masterTable.mHighScores[i];
                    if(masterEntry != null) {
                        masterEntry.mName = e.mName;
                    }
                }
                break;
            }
        }
    },
    Draw : function Game_EndLevelDialog$Draw(g) {
        g.DrawImageBox(Game.Resources['IMAGE_GAMEOVER_DIALOG'], 110.0, 0.0, 1380.0, 1200.0, 0);
        g.DrawImage(Game.Resources['IMAGE_GAMEOVER_STAMP'].get_OffsetImage(), -160, 0);
        g.SetFont(Game.Resources['FONT_GAMEOVER_DIALOG_HUGE']);
        g.GetFont().PushLayerColor('MAIN', 0xff884818);
        g.DrawStringCentered('Final Score:', 800, 140);
        g.GetFont().PopLayerColor('MAIN');
        g.GetFont().PushLayerColor('LAYER_2', 0xffc28055);
        g.DrawStringCentered(GameFramework.Utils.CommaSeperate(((this.mPoints * this.mCountupPct.GetOutVal()) | 0)), 800, 220);
        g.GetFont().PopLayerColor('LAYER_2');
        this.DrawFrames(g);
    },
    KeyDown : function Game_EndLevelDialog$KeyDown(theKey) {
        if(theKey == GameFramework.KeyCode.Escape) {
            var btn = this.mBtns[(Game.EndLevelDialog.EWidgetId.eId_MainMenu | 0)];
            var aWidgetEvent = new GameFramework.widgets.WidgetEvent(GameFramework.widgets.WidgetEvent.CLICKED);
            aWidgetEvent.mX = btn.mX;
            aWidgetEvent.mY = btn.mY;
            btn.DispatchEvent(aWidgetEvent);
        }
    },
    SetQuestName : function Game_EndLevelDialog$SetQuestName(theQuest) {
        this.mScoreTableName = theQuest;
        var table = Game.BejApp.mBejApp.mHighScoreMgr.GetOrCreateTable(this.mScoreTableName);
        for(var i = 0; i < table.mHighScores.length; ++i) {
            if(i < Game.EndLevelDialog.MAX_HIGH_SCORES) {
                this.mHighScores.push(table.mHighScores[i].Clone());
            }
        }
        var highScoreAchieved = false;
        for(var i_2 = 0; i_2 < Game.HighScoreTable.ENTRY_COUNT; ++i_2) {
            var entry = table.mHighScores[i_2];
            if(entry.mIsNew) {
                if(i_2 < Game.EndLevelDialog.MAX_HIGH_SCORES) {
                    highScoreAchieved = true;
                }
                entry.mIsNew = false;
            }
        }
        if(highScoreAchieved) {
            this.StartNewHighScoreAnim();
        }
    },
    NudgeButtons : function Game_EndLevelDialog$NudgeButtons(theOffset) {

        {
            for($enum1 in this.mBtns) {
                var btn = this.mBtns[$enum1];
                btn.mY += theOffset;
            }
        }
    },
    DrawSpecialGemDisplay : function Game_EndLevelDialog$DrawSpecialGemDisplay(g) {
        g.DrawImage(Game.Resources['IMAGE_GAMEOVER_SECTION_SMALL'].get_OffsetImage(), -160 + -35, 280);
        g.DrawImage(Game.Resources['IMAGE_GAMEOVER_ICON_FLAME_LRG'].get_OffsetImage(), -160 + 30, 175);
        g.DrawImage(Game.Resources['IMAGE_GAMEOVER_ICON_STAR_LRG'].get_OffsetImage(), -160 + 220, 175);
        g.DrawImage(Game.Resources['IMAGE_GAMEOVER_ICON_HYPERCUBE_LRG'].get_OffsetImage(), -160 + 410, 170);
        g.SetFont(Game.Resources['FONT_GAMEOVER_DIALOG']);
        Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('GLOW', 0);
        Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('OUTLINE', 0);
        g.DrawStringEx(String.format('x {0:d}', this.mGameStats[(Game.DM.EStat.FLAMEGEMS_MADE | 0)]), 400, 900, -1, -1);
        g.DrawStringEx(String.format('x {0:d}', this.mGameStats[(Game.DM.EStat.LASERGEMS_MADE | 0)]), 780, 900, -1, -1);
        g.DrawStringEx(String.format('x {0:d}', this.mGameStats[(Game.DM.EStat.HYPERCUBES_MADE | 0)]), 1150, 900, -1, -1);
        Game.Resources['FONT_GAMEOVER_DIALOG'].PopLayerColor('OUTLINE');
        Game.Resources['FONT_GAMEOVER_DIALOG'].PopLayerColor('GLOW');
    },
    DrawHighScores : function Game_EndLevelDialog$DrawHighScores(g) {
        g.DrawImageBox(Game.Resources['IMAGE_GAMEOVER_LIGHT_BOX'], 800.0, 385.0, 600.0, 280.0, 0);
        var hasNewHighScore = false;
        for(var i = 0; i < (Math.min(Game.EndLevelDialog.MAX_HIGH_SCORES, this.mHighScores.length) | 0); ++i) {
            if(this.mHighScores[i].mIsNew) {
                hasNewHighScore = true;
            }
        }
        var xOff = 830;
        var yOff = 455;
        for(var i_2 = 0; i_2 < (Math.min(Game.EndLevelDialog.MAX_HIGH_SCORES, this.mHighScores.length) | 0); ++i_2) {
            var aScore = Game.GlobalMembersEndLevelDialog.Unkern(GameFramework.Utils.CommaSeperate(this.mHighScores[i_2].mScore));
            var aPossibleLength = 455 - (g.StringWidth(aScore) | 0);
            var clr = ~0;
            if((this.mHighScores[i_2].mIsNew) || (i_2 == -1)) {
                Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('GLOW', 0);
                if(!GameFramework.BaseApp.mApp.get_Is3D()) {
                    Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('OUTLINE', GameFramework.gfx.Color.FAlphaToInt(Math.max(0.0, Math.min(1.0, (Math.cos(this.mUpdateCnt * 0.1) + 1.0) / 2.0))));
                    Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('GLOW', 0xffffffff);
                    Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('MAIN', 0xffffffff);
                }

                else {
                    Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('OUTLINE', 0x40ffffff);
                    var p = 45;
                    var u = (this.mUpdateCnt % p) / p;
                    if(u > 0.5) {
                        u = 1.0 - u;
                    }
                    u *= 2.0;
                    Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('MAIN', Game.Util.HSLToRGB(185 + ((u * 20.0) | 0), 255, 150));
                }
                this.mNameWidget.mMaxPixels = aPossibleLength;
            }

            else {
                Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('OUTLINE', 0xffffffff);
                Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('GLOW', 0);
                if((hasNewHighScore) && (!GameFramework.BaseApp.mApp.get_Is3D())) {
                    Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('MAIN', 0xc8ffffff);
                }

                else {
                    clr = 0xffffcb58;
                    Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('MAIN', ~0);
                }
            }
            var _t2 = g.PushColor(clr);
            try {
                g.DrawStringEx(String.format('{0:d}.', i_2 + 1), xOff + 0, yOff + 45 * i_2, 1, -1);
                g.DrawStringEx(Game.GfxUtil.GetEllipsisString(g, this.mHighScores[i_2].mName, aPossibleLength), xOff + 50, yOff + 45 * i_2, -1, -1);
                g.DrawStringEx(aScore, xOff + 540, yOff + 45 * i_2, -1, 1);
                Game.Resources['FONT_GAMEOVER_DIALOG'].PopLayerColor('OUTLINE');
                Game.Resources['FONT_GAMEOVER_DIALOG'].PopLayerColor('GLOW');
                Game.Resources['FONT_GAMEOVER_DIALOG'].PopLayerColor('MAIN');
            } finally {
                _t2.Dispose();
            }
        }
    },
    DrawStatsLabels : function Game_EndLevelDialog$DrawStatsLabels(g) {
    },
    DrawStatsText : function Game_EndLevelDialog$DrawStatsText(g) {
    },
    DrawLabeledHighScores : function Game_EndLevelDialog$DrawLabeledHighScores(g) {
        g.DrawImageBox(Game.Resources['IMAGE_GAMEOVER_SECTION_LABEL'], 800.0, 385.0, 600.0, Game.Resources['IMAGE_GAMEOVER_SECTION_LABEL'].mHeight, 0);
        g.SetFont(Game.Resources['FONT_GAMEOVER_DIALOG']);
        g.GetFont().PushLayerColor('MAIN', 0xff884818);
        g.GetFont().PushLayerColor('OUTLINE', 0xffffffff);
        g.GetFont().PushLayerColor('GLOW', 0);
        g.DrawStringCentered('Top Scores:', 1085, 435);
        g.GetFont().PopLayerColor('MAIN');
        g.GetFont().PopLayerColor('OUTLINE');
        g.GetFont().PopLayerColor('GLOW');
        var _t3 = g.PushTranslate(0, 60);
        try {
            this.DrawHighScores(g);
        } finally {
            _t3.Dispose();
        }
    },
    DrawStatsFrame : function Game_EndLevelDialog$DrawStatsFrame(g) {
        g.SetFont(Game.Resources['FONT_GAMEOVER_DIALOG']);
        g.GetFont().PushLayerColor('MAIN', ~0);
        g.GetFont().PushLayerColor('GLOW', 0);
        var _t4 = g.PushColor(0xfff4f4d0);
        try {
            this.DrawStatsLabels(g);
        } finally {
            _t4.Dispose();
        }
        var _t5 = g.PushColor(0xffffff60);
        try {
            this.DrawStatsText(g);
        } finally {
            _t5.Dispose();
        }
        g.GetFont().PopLayerColor('MAIN');
        g.GetFont().PopLayerColor('GLOW');
    },
    DrawLabeledStatsFrame : function Game_EndLevelDialog$DrawLabeledStatsFrame(g) {
        g.SetFont(Game.Resources['FONT_GAMEOVER_DIALOG']);
        g.GetFont().PushLayerColor('MAIN', 0xff884818);
        g.GetFont().PushLayerColor('OUTLINE', 0xffffffff);
        g.GetFont().PushLayerColor('GLOW', 0);
        g.DrawStringEx('Statistics', 485, 435, 0, 0);
        g.GetFont().PopLayerColor('MAIN');
        g.GetFont().PopLayerColor('OUTLINE');
        g.GetFont().PopLayerColor('GLOW');
        var _t6 = g.PushTranslate(0, 60);
        try {
            this.DrawStatsFrame(g);
        } finally {
            _t6.Dispose();
        }
    },
    DrawNewHighScoreFrame : function Game_EndLevelDialog$DrawNewHighScoreFrame(g, theOffsetX, theOffsetY) {
        var _t7 = g.PushTranslate(theOffsetX, theOffsetY);
        try {
            g.SetFont(Game.Resources['FONT_GAMEOVER_DIALOG']);
            Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('MAIN', ~0);
            Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('OUTLINE', 0xff404000);
            Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('GLOW', 0);
            var _t8 = g.PushColor(0xfff4f4d0);
            try {
                var x = this.mWidth / 2.0;
                var y = 460.0;
                g.SetFont(Game.Resources['FONT_DIALOG_HEADER']);
                var clrMain = 0xffffffff;
                var clrOutline = 0xff000000;
                if(this.mNewHighScoreTextExtraScaling.get_v() != 1.0) {
                    clrMain = GameFramework.Utils.LerpColor(clrMain, 0xfffff295, Math.min(1.0, 5.0 * (this.mNewHighScoreTextExtraScaling.get_v() - 1.0)));
                    clrOutline = GameFramework.Utils.LerpColor(clrMain, 0xffffff00, Math.min(1.0, 5.0 * (this.mNewHighScoreTextExtraScaling.get_v() - 1.0)));
                }
                g.GetFont().PushLayerColor('MAIN', clrMain);
                g.GetFont().PushLayerColor('OUTLINE', clrOutline);
                g.GetFont().PushLayerColor('GLOW', 0x0);
                if(this.mNewHighScoreTextExtraScaling.get_v() != 1.0) {
                    g.PushTranslate(0.0, 10.0 * (this.mNewHighScoreTextExtraScaling.get_v() - 1.0));
                    g.PushScale(this.mNewHighScoreTextExtraScaling.get_v(), this.mNewHighScoreTextExtraScaling.get_v(), x, y);
                }
                g.DrawStringCentered('A NEW TOP SCORE!', x, y);
                if(this.mNewHighScoreTextExtraScaling.get_v() != 1.0) {
                    g.PopMatrix();
                    g.PopMatrix();
                }
                g.GetFont().PopLayerColor('MAIN');
                g.GetFont().PopLayerColor('OUTLINE');
                g.GetFont().PopLayerColor('GLOW');
                g.SetFont(Game.Resources['FONT_GAMEOVER_DIALOG']);
                g.DrawStringCentered('Please enter your name:', x, y + 55.0);
            } finally {
                _t8.Dispose();
            }
            this.mNameWidget.Resize(this.mWidth / 2 - ((500 / 2) | 0) + theOffsetX, 528 + theOffsetY, 500, 54);
            this.mNameWidget.mAlpha = this.mNewHighScoreNameEntryShowPct.get_v();
            this.mHighScoreAcceptBtn.Move(this.mWidth / 2 - this.mHighScoreAcceptBtn.mWidth / 2 + theOffsetX, 590 + theOffsetY);
            this.mHighScoreAcceptBtn.mAlpha = this.mNewHighScoreNameEntryShowPct.get_v();
            Game.Resources['FONT_GAMEOVER_DIALOG'].PopLayerColor('MAIN');
            Game.Resources['FONT_GAMEOVER_DIALOG'].PopLayerColor('OUTLINE');
            Game.Resources['FONT_GAMEOVER_DIALOG'].PopLayerColor('GLOW');
        } finally {
            _t7.Dispose();
        }
    },
    DrawFrames : function Game_EndLevelDialog$DrawFrames(g) {
        g.DrawImageBox(Game.Resources['IMAGE_GAMEOVER_LIGHT_BOX'], 195.0, 385.0, 602.0, 282.0, 0);
        if(this.mNewHighScoreNameEntryShowPct.get_v() > 0.0 && this.mNameWidget != null) {
            if(this.mNewHighScoreNameEntryShowPct.get_v() < 1.0) {
                g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.mNewHighScoreNameEntryShowPct.get_v()));
            }
            this.DrawNewHighScoreFrame(g, -300.0, 0.0);
            if(this.mNewHighScoreNameEntryShowPct.get_v() < 1.0) {
                g.PopColor();
            }
        }
        if(this.mNewHighScoreNameEntryShowPct.get_v() < 1.0) {
            if(this.mNewHighScoreNameEntryShowPct.get_v() > 0.0) {
                g.PushColor(GameFramework.gfx.Color.FAlphaToInt(1.0 - this.mNewHighScoreNameEntryShowPct.get_v()));
            }
            this.DrawStatsFrame(g);
            if(this.mNewHighScoreNameEntryShowPct.get_v() > 0.0) {
                g.PopColor();
            }
        }
        this.DrawHighScores(g);
        if(this.mNameWidget != null) {
            this.mNameWidget.mAlpha = this.mNewHighScoreNameEntryShowPct.get_v();
        }
        if(this.mHighScoreAcceptBtn != null) {
            this.mHighScoreAcceptBtn.mAlpha = this.mNewHighScoreNameEntryShowPct.get_v();
        }
    }
}
Game.EndLevelDialog.staticInit = function Game_EndLevelDialog$staticInit() {
    Game.EndLevelDialog.MAX_HIGH_SCORES = 5;
}

JS_AddInitFunc(function() {
    Game.EndLevelDialog.registerClass('Game.EndLevelDialog', Game.Bej3Dialog, GameFramework.widgets.EditWidgetTextValidator);
});
JS_AddStaticInitFunc(function() {
    Game.EndLevelDialog.staticInit();
});
Game.EndLevelDialog.EWidgetId = {};
Game.EndLevelDialog.EWidgetId.staticInit = function Game_EndLevelDialog_EWidgetId$staticInit() {
    Game.EndLevelDialog.EWidgetId.eId_MainMenu = 0;
    Game.EndLevelDialog.EWidgetId.eId_PlayAgain = 1;
    Game.EndLevelDialog.EWidgetId.eId_Records = 2;
    Game.EndLevelDialog.EWidgetId.eId_HighScoreAccept = 3;
    Game.EndLevelDialog.EWidgetId._COUNT = 4;
}
JS_AddInitFunc(function() {
    Game.EndLevelDialog.EWidgetId.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\EndLevelDialog.cs
//LineMap:2=4 5=16 8=17 9=19 18=13 20=27 24=32 26=35 31=41 41=46 47=49 64=58 67=94 69=73 70=75 72=82 74=87 75=89 77=93 78=95 79=97 84=103 89=109 91=112 94=116 95=119 96=121 97=123 104=131 110=138 117=146 119=149 128=74 143=155 152=165 158=172 160=175 161=187 164=191 
//LineMap:169=202 175=209 177=212 178=225 181=229 186=235 189=246 194=252 198=257 208=268 218=279 224=288 243=308 247=315 250=319 251=321 254=325 260=328 262=333 263=335 266=343 268=346 271=346 273=351 278=354 280=358 290=370 299=380 302=384 303=386 304=388 306=392 309=396 
//LineMap:315=403 318=407 332=422 340=431 341=434 343=437 345=440 346=443 356=454 365=464 380=484 382=488 383=491 384=493 386=498 389=502 408=523 413=530 421=539 424=543 432=549 434=549 435=551 440=555 446=562 459=576 463=581 469=588 473=593 476=597 482=602 483=605 487=610 
//LineMap:488=612 490=615 495=619 497=622 504=628 508=635 511=637 514=641 525=647 529=650 533=653 536=657 544=666 547=668 555=671 557=676 560=680 563=682 569=685 572=687 578=690 582=693 584=697 592=706 595=708 603=712 605=716 608=718 612=723 615=725 617=728 618=730 628=741 
//LineMap:633=747 634=749 639=755 642=759 649=763 653=772 663=778 668=784 670=787 671=789 674=793 678=798 679=800 682=804 683=806 687=811 695=60 700=62 703=64 707=69 
//Start:GemOutlines
/**
 * @constructor
 */
Game.GemOutlines = function Game_GemOutlines() {
    this.GEM_OUTLINE_RADIUS_POINTS = Array.Create(12544, null, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 49.5, 49.9, 50.2, 50.6, 51.0, 51.5, 52.0, 52.6, 53.1, 53.8, 54.5, 55.2, 56.0, 56.1, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 56.1, 56.0, 55.2, 54.5, 53.8, 53.1, 52.6, 52.0, 51.5, 51.0, 50.6, 50.2, 49.9, 49.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 49.5, 49.9, 50.2, 50.6, 51.0, 51.5, 52.0, 52.6, 53.1, 53.8, 54.5, 55.2, 56.0, 56.1, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 56.1, 56.0, 55.2, 54.5, 53.8, 53.1, 52.6, 52.0, 51.5, 51.0, 50.6, 50.2, 49.9, 49.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 49.5, 49.9, 50.2, 50.6, 51.0, 51.5, 52.0, 52.6, 53.1, 53.8, 54.5, 55.2, 56.0, 56.1, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 56.1, 56.0, 55.2, 54.5, 53.8, 53.1, 52.6, 52.0, 51.5, 51.0, 50.6, 50.2, 49.9, 49.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 49.5, 49.9, 50.2, 50.6, 51.0, 51.5, 52.0, 52.6, 53.1, 53.8, 54.5, 55.2, 56.0, 56.1, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 56.1, 56.0, 55.2, 54.5, 53.8, 53.1, 52.6, 52.0, 51.5, 51.0, 50.6, 50.2, 49.9, 49.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.9, 47.8, 47.3, 47.7, 48.2, 47.6, 48.2, 47.7, 47.2, 47.9, 47.4, 47.0, 47.8, 47.4, 47.2, 47.3, 47.6, 47.7, 47.9, 48.1, 48.4, 48.6, 48.9, 48.9, 48.3, 48.6, 47.8, 48.2, 47.4, 47.9, 47.2, 47.7, 47.1, 47.6, 47.1, 47.7, 47.2, 47.5, 47.4, 47.1, 46.7, 47.5, 47.2, 47.0, 47.8, 47.6, 47.4, 48.3, 48.2, 48.1, 49.1, 49.1, 49.1, 48.1, 48.2, 48.3, 47.4, 47.6, 47.8, 47.0, 47.2, 47.5, 46.7, 47.1, 47.4, 47.5, 47.2, 47.7, 47.1, 47.6, 47.1, 47.7, 47.2, 47.9, 47.4, 48.2, 47.8, 48.6, 48.3, 48.9, 48.9, 48.6, 48.4, 48.1, 47.9, 47.7, 47.6, 47.3, 47.2, 47.4, 46.9, 47.0, 47.4, 47.9, 47.2, 47.7, 48.2, 47.6, 48.2, 47.7, 47.3, 47.8, 47.9, 48.1, 47.8, 48.5, 48.2, 48.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.9, 47.8, 47.3, 47.7, 48.2, 47.6, 48.2, 47.7, 47.2, 46.7, 47.4, 47.0, 46.9, 47.4, 47.2, 47.3, 47.6, 47.7, 47.9, 48.1, 48.4, 48.6, 48.9, 48.9, 48.3, 48.6, 47.8, 48.2, 47.4, 47.9, 47.2, 47.7, 47.1, 47.6, 47.1, 47.7, 47.2, 47.5, 47.4, 47.1, 46.7, 47.5, 47.2, 47.0, 47.8, 47.6, 47.4, 48.3, 48.2, 48.1, 49.1, 49.1, 49.1, 48.1, 48.2, 48.3, 47.4, 47.6, 47.8, 47.0, 47.2, 47.5, 46.7, 47.1, 47.4, 47.5, 47.2, 47.7, 47.1, 47.6, 47.1, 47.7, 47.2, 47.9, 47.4, 48.2, 47.8, 48.6, 48.3, 48.9, 48.9, 48.6, 48.4, 48.1, 47.9, 47.7, 47.6, 47.3, 47.2, 47.4, 46.9, 47.0, 47.4, 47.9, 47.2, 47.7, 48.2, 47.6, 48.2, 47.7, 47.3, 47.8, 47.9, 48.1, 47.8, 48.5, 48.2, 48.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 52.1, 52.1, 51.1, 51.2, 51.1, 50.4, 49.6, 49.8, 49.0, 49.2, 49.4, 48.8, 48.3, 48.5, 48.9, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.7, 49.0, 48.6, 49.4, 50.2, 49.9, 50.4, 50.5, 51.6, 51.3, 52.3, 52.4, 52.3, 51.3, 51.6, 50.5, 50.4, 49.9, 50.2, 49.4, 48.6, 49.0, 48.7, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 47.8, 48.5, 48.1, 47.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 47.8, 48.1, 48.5, 47.8, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.7, 49.0, 48.6, 49.4, 50.2, 49.9, 50.4, 50.5, 50.6, 51.3, 52.3, 52.4, 52.3, 51.3, 50.6, 50.5, 50.4, 49.9, 50.2, 49.4, 48.6, 49.0, 48.7, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 48.9, 48.5, 48.3, 48.8, 49.4, 49.2, 49.0, 49.8, 49.6, 50.4, 50.3, 51.2, 51.1, 52.1, 52.1, 52.1, 51.1, 51.2, 50.3, 50.4, 49.6, 49.8, 49.0, 49.2, 49.4, 48.8, 48.3, 48.5, 47.8, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.7, 49.0, 48.6, 49.4, 50.2, 49.9, 50.4, 50.5, 50.6, 51.3, 52.3, 52.4, 52.3, 51.3, 50.6, 50.5, 50.4, 49.9, 50.2, 49.4, 48.6, 49.0, 48.7, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 47.8, 47.9, 48.1, 47.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.9, 47.8, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.7, 49.0, 48.6, 49.4, 50.2, 49.9, 50.4, 50.5, 50.6, 51.3, 52.3, 52.4, 52.3, 51.3, 51.6, 50.5, 50.4, 49.9, 50.2, 49.4, 48.6, 49.0, 48.7, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 48.9, 48.5, 48.3, 48.8, 49.4, 49.2, 49.0, 49.8, 49.6, 50.4, 51.1, 51.2, 51.1, 52.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 40.4, 39.7, 39.2, 39.4, 38.8, 38.1, 38.2, 38.0, 37.4, 37.4, 37.3, 36.7, 37.0, 36.8, 36.3, 36.8, 36.5, 36.3, 36.8, 36.3, 36.5, 36.8, 36.3, 36.8, 37.0, 36.7, 37.3, 37.4, 37.4, 38.0, 38.2, 38.1, 38.8, 39.4, 39.2, 39.7, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 40.4, 39.7, 39.2, 39.4, 38.8, 38.1, 38.2, 38.0, 37.4, 37.4, 37.3, 36.7, 37.0, 36.8, 36.3, 36.8, 36.5, 36.3, 36.8, 36.3, 36.5, 36.8, 36.3, 36.8, 37.0, 36.7, 37.3, 37.4, 37.4, 38.0, 38.2, 38.1, 38.8, 39.4, 39.2, 39.7, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 40.4, 39.7, 39.2, 39.4, 38.8, 38.1, 38.2, 38.0, 37.4, 37.4, 37.3, 36.7, 37.0, 36.8, 36.3, 36.8, 36.5, 36.3, 36.8, 36.3, 36.5, 36.8, 36.3, 36.8, 37.0, 36.7, 37.3, 37.4, 37.4, 38.0, 38.2, 38.1, 38.8, 39.4, 39.2, 39.7, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 40.4, 39.7, 39.2, 39.4, 38.8, 38.1, 38.2, 38.0, 37.4, 37.4, 37.3, 36.7, 37.0, 36.8, 36.3, 36.8, 36.5, 36.3, 36.8, 36.3, 36.5, 36.8, 36.3, 36.8, 37.0, 36.7, 37.3, 37.4, 37.4, 38.0, 38.2, 38.1, 38.8, 39.4, 39.2, 39.7, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 26.0, 26.1, 27.1, 27.1, 27.2, 28.3, 28.4, 28.5, 29.6, 29.8, 31.0, 31.2, 32.4, 32.7, 34.0, 34.3, 35.8, 36.1, 37.7, 39.2, 39.7, 41.4, 43.2, 45.0, 47.0, 49.0, 51.1, 53.3, 57.0, 59.5, 63.5, 67.7, 70.8, 69.1, 67.5, 66.1, 64.7, 63.5, 62.3, 61.2, 60.2, 59.2, 58.3, 57.5, 56.7, 56.0, 55.4, 54.7, 54.2, 53.6, 53.2, 52.7, 52.3, 51.9, 51.6, 51.3, 51.0, 50.8, 50.6, 50.4, 50.3, 50.2, 50.1, 50.1, 50.1, 50.1, 50.1, 50.2, 50.3, 50.4, 50.6, 50.8, 51.0, 51.3, 51.6, 51.9, 52.3, 52.7, 53.2, 53.6, 54.2, 54.7, 55.4, 56.0, 56.7, 57.5, 58.3, 59.2, 60.2, 61.2, 62.3, 63.5, 64.7, 66.1, 67.5, 69.1, 70.8, 67.7, 63.5, 59.5, 57.0, 53.3, 51.1, 49.0, 47.0, 45.0, 43.2, 41.4, 39.7, 39.2, 37.7, 36.1, 35.8, 34.3, 34.0, 32.7, 32.4, 31.2, 31.0, 29.8, 29.6, 28.5, 28.4, 28.3, 27.2, 27.1, 27.1, 26.1, 26.0, 26.1, 25.1, 25.1, 25.2, 24.6, 24.3, 24.4, 24.5, 23.6, 23.8, 23.9, 24.1, 23.2, 23.4, 23.6, 23.6, 23.0, 23.3, 23.6, 23.4, 23.0, 23.4, 23.7, 23.4, 23.3, 23.7, 24.2, 23.7, 23.8, 24.3, 24.7, 24.1, 24.7, 25.4, 25.1, 25.3, 26.1, 26.2, 26.1, 27.0, 27.3, 27.3, 28.5, 28.4, 29.0, 29.9, 29.7, 31.4, 31.1, 32.7, 32.7, 34.5, 34.3, 36.1, 36.6, 37.8, 39.6, 40.9, 41.4, 43.3, 45.2, 47.1, 49.1, 51.1, 49.1, 47.1, 45.2, 43.3, 41.4, 40.9, 39.6, 37.8, 36.6, 36.1, 34.3, 34.5, 32.7, 32.7, 31.1, 31.4, 29.7, 29.9, 29.0, 28.4, 28.5, 27.3, 27.3, 27.0, 26.1, 26.2, 26.1, 25.3, 25.1, 25.4, 24.7, 24.1, 24.7, 24.3, 23.8, 23.7, 24.2, 23.7, 23.3, 23.4, 23.7, 23.4, 23.0, 23.4, 23.6, 23.3, 23.0, 23.6, 23.6, 23.4, 23.2, 24.1, 23.9, 23.8, 23.6, 24.5, 24.4, 24.3, 24.6, 25.2, 25.1, 25.1, 26.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 49.8, 50.4, 50.9, 51.5, 52.2, 52.9, 53.7, 53.3, 52.2, 52.2, 51.1, 50.4, 50.5, 49.0, 49.2, 48.4, 48.1, 47.9, 47.3, 47.5, 46.6, 47.0, 46.1, 46.5, 45.8, 46.2, 45.5, 46.0, 45.4, 46.0, 45.4, 44.9, 45.5, 45.1, 45.7, 45.3, 46.0, 45.7, 46.4, 46.2, 47.0, 46.8, 47.6, 48.4, 48.3, 49.2, 49.1, 50.1, 50.1, 50.1, 49.1, 49.2, 48.3, 48.4, 47.6, 46.8, 47.0, 46.2, 46.4, 45.7, 46.0, 45.3, 45.7, 45.1, 45.5, 44.9, 45.4, 44.8, 45.4, 46.0, 45.5, 46.2, 45.8, 46.5, 46.1, 47.0, 46.6, 47.5, 47.3, 47.9, 48.1, 48.4, 49.2, 49.0, 50.5, 50.4, 51.1, 52.2, 52.2, 53.3, 53.7, 52.9, 52.2, 51.5, 50.9, 50.4, 49.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 49.8, 50.4, 50.9, 51.5, 52.2, 52.9, 53.7, 53.3, 52.2, 52.2, 51.1, 50.4, 50.5, 49.0, 49.2, 48.4, 48.1, 47.9, 47.3, 47.5, 46.6, 47.0, 46.1, 46.5, 45.8, 46.2, 45.5, 44.9, 45.4, 44.8, 45.4, 44.9, 45.5, 45.1, 45.7, 45.3, 46.0, 45.7, 46.4, 46.2, 47.0, 46.8, 47.6, 48.4, 48.3, 49.2, 49.1, 50.1, 50.1, 50.1, 49.1, 49.2, 48.3, 48.4, 47.6, 46.8, 47.0, 46.2, 46.4, 45.7, 46.0, 45.3, 45.7, 45.1, 45.5, 44.9, 45.4, 44.8, 45.4, 46.0, 45.5, 46.2, 45.8, 46.5, 46.1, 47.0, 46.6, 47.5, 47.3, 47.9, 48.1, 48.4, 49.2, 49.0, 50.5, 50.4, 51.1, 52.2, 52.2, 53.3, 53.7, 52.9, 52.2, 51.5, 50.9, 50.4, 49.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 34.0, 34.1, 33.1, 32.1, 32.2, 32.3, 31.4, 30.5, 30.6, 30.8, 29.9, 30.0, 29.3, 29.5, 29.7, 29.0, 28.8, 28.5, 28.8, 29.0, 28.4, 28.5, 28.0, 28.5, 28.8, 28.2, 28.6, 28.0, 28.5, 29.1, 28.4, 29.0, 29.7, 29.1, 29.7, 29.1, 30.0, 30.5, 30.3, 30.6, 30.6, 31.8, 31.5, 32.2, 31.9, 33.4, 33.2, 34.0, 34.0, 35.4, 35.7, 35.9, 37.7, 37.5, 38.2, 40.0, 40.8, 41.0, 42.5, 44.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 47.2, 45.3, 44.4, 42.5, 41.7, 41.1, 40.0, 39.2, 37.5, 37.7, 36.9, 35.7, 35.4, 34.7, 34.6, 34.3, 33.4, 32.9, 32.5, 32.7, 31.8, 31.3, 31.3, 31.2, 30.9, 30.0, 30.4, 29.8, 30.4, 29.7, 29.1, 29.7, 29.1, 29.8, 29.2, 28.7, 29.4, 28.9, 29.6, 29.2, 28.8, 29.5, 29.2, 29.9, 29.6, 29.3, 30.1, 29.8, 30.6, 30.4, 30.1, 31.0, 31.8, 31.7, 31.5, 32.4, 32.7, 33.2, 33.1, 34.1, 35.1, 35.0, 36.1, 36.1, 37.2, 38.2, 38.3, 39.5, 40.6, 40.8, 43.1, 43.3, 44.7, 46.0, 47.4, 48.9, 51.5, 52.0, 54.7, 56.5, 56.0, 55.6, 55.2, 54.8, 55.7, 55.4, 55.1, 54.8, 54.6, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.5, 55.7, 55.9, 57.1, 57.4, 57.6, 58.0, 58.4, 58.9, 59.0, 58.3, 58.7, 58.0, 58.5, 57.9, 57.4, 58.0, 57.5, 57.1, 56.7, 56.4, 56.1, 55.9, 55.7, 55.5, 55.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 56.3, 56.5, 56.7, 55.9, 56.1, 56.4, 56.7, 57.1, 57.5, 57.4, 57.4, 57.9, 58.5, 59.1, 58.7, 58.3, 57.9, 56.9, 56.5, 56.1, 55.8, 55.1, 54.8, 54.6, 53.6, 53.6, 53.7, 53.7, 52.4, 52.5, 52.7, 52.9, 52.1, 52.1, 52.3, 52.6, 52.2, 52.4, 52.5, 52.8, 53.1, 53.4, 53.1, 51.5, 50.9, 48.3, 46.8, 45.3, 43.9, 42.6, 42.3, 40.0, 39.8, 38.6, 37.5, 37.3, 36.2, 36.1, 35.1, 34.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 49.5, 49.9, 50.2, 50.6, 51.0, 51.5, 52.0, 52.6, 53.1, 53.8, 54.5, 55.2, 56.0, 55.7, 55.4, 55.1, 54.8, 54.6, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 56.1, 56.0, 55.2, 54.5, 53.8, 53.1, 52.6, 52.0, 51.5, 51.0, 50.6, 50.2, 49.9, 49.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 49.6, 49.8, 50.0, 50.3, 50.6, 50.9, 51.3, 51.7, 52.1, 52.6, 53.1, 53.6, 54.3, 54.9, 55.6, 56.4, 56.5, 56.1, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 55.7, 56.0, 55.2, 54.5, 53.8, 53.1, 52.6, 52.0, 51.5, 51.0, 50.6, 50.2, 49.9, 49.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 49.5, 49.9, 50.2, 50.6, 51.0, 51.5, 52.0, 52.6, 53.1, 53.8, 54.5, 55.2, 56.0, 55.7, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 56.1, 56.5, 56.4, 55.6, 54.9, 54.3, 53.6, 53.1, 52.6, 52.1, 51.7, 51.3, 50.9, 50.6, 50.3, 50.0, 49.8, 49.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 49.5, 49.9, 50.2, 50.6, 51.0, 51.5, 52.0, 52.6, 53.1, 53.8, 54.5, 55.2, 56.0, 56.1, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 54.4, 54.6, 54.8, 55.1, 55.4, 55.7, 56.0, 55.2, 54.5, 53.8, 53.1, 52.6, 52.0, 51.5, 51.0, 50.6, 50.2, 49.9, 49.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 47.4, 47.8, 48.3, 48.8, 49.3, 48.7, 48.2, 48.8, 48.3, 47.9, 48.6, 48.2, 47.8, 47.4, 48.3, 47.9, 47.6, 48.6, 48.4, 48.1, 48.4, 49.2, 48.9, 48.9, 48.3, 48.6, 48.7, 48.2, 48.6, 47.9, 48.3, 47.7, 48.2, 48.7, 48.2, 47.7, 47.3, 47.8, 47.4, 48.1, 47.8, 47.5, 47.2, 48.0, 47.8, 47.8, 48.4, 48.3, 48.2, 49.1, 49.1, 49.1, 48.1, 48.1, 48.2, 47.3, 47.4, 47.6, 46.7, 47.0, 47.2, 46.4, 46.7, 47.1, 46.4, 46.8, 47.2, 46.6, 46.9, 46.5, 46.8, 46.5, 47.2, 46.7, 47.4, 47.0, 47.8, 48.6, 48.3, 47.9, 47.6, 47.7, 47.0, 46.7, 47.0, 46.2, 46.3, 45.8, 45.7, 46.1, 45.3, 45.8, 46.2, 45.5, 46.0, 46.5, 46.0, 46.5, 46.0, 46.6, 47.2, 46.8, 47.4, 47.1, 47.8, 48.5, 48.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 48.2, 48.5, 47.8, 47.1, 47.4, 46.8, 47.2, 46.6, 46.0, 46.5, 46.0, 45.4, 46.0, 45.5, 46.2, 45.8, 45.3, 46.1, 45.7, 45.8, 46.3, 46.2, 47.0, 46.7, 47.0, 47.7, 47.6, 47.9, 48.3, 48.6, 47.8, 47.0, 47.4, 46.7, 47.2, 46.5, 46.8, 46.5, 46.9, 46.6, 47.2, 46.8, 46.4, 47.1, 46.7, 46.4, 47.2, 47.0, 46.7, 47.6, 47.4, 47.3, 48.2, 48.1, 48.1, 48.1, 49.1, 49.1, 48.2, 48.3, 48.4, 47.8, 47.8, 48.0, 47.2, 47.5, 47.8, 48.1, 47.4, 47.8, 47.3, 47.7, 48.2, 48.7, 48.2, 47.7, 48.3, 47.9, 48.6, 48.2, 48.7, 48.6, 48.3, 48.9, 48.9, 48.6, 48.4, 48.1, 48.4, 48.6, 47.6, 47.9, 48.3, 47.4, 47.8, 48.2, 48.6, 47.9, 48.3, 48.8, 48.2, 48.7, 49.3, 48.8, 48.3, 47.8, 47.4, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 50.1, 50.1, 49.1, 49.2, 49.3, 48.4, 47.8, 47.8, 48.0, 47.2, 47.5, 46.7, 47.1, 47.4, 46.8, 47.2, 46.6, 47.1, 46.8, 47.1, 46.7, 47.2, 47.9, 47.4, 48.2, 47.8, 48.6, 48.8, 49.2, 49.0, 50.0, 50.8, 51.0, 51.1, 50.0, 50.2, 49.2, 49.5, 48.7, 49.0, 48.6, 48.6, 47.9, 48.3, 47.7, 48.2, 47.6, 48.2, 47.7, 48.3, 47.8, 47.9, 48.1, 48.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 47.8, 48.3, 48.8, 49.3, 48.7, 49.3, 48.8, 49.5, 49.0, 49.8, 50.4, 50.2, 50.4, 50.8, 51.8, 51.6, 52.2, 52.5, 52.4, 52.5, 52.2, 51.6, 50.5, 50.8, 50.4, 50.2, 50.4, 49.8, 49.0, 49.5, 48.8, 49.3, 48.7, 49.3, 48.8, 49.4, 48.9, 49.5, 49.2, 48.8, 49.5, 50.3, 50.0, 49.8, 50.6, 50.4, 51.3, 52.2, 52.1, 52.1, 53.1, 52.1, 52.1, 52.2, 51.3, 50.4, 50.6, 49.8, 50.0, 50.3, 49.5, 48.8, 49.2, 49.5, 48.9, 49.4, 48.8, 49.3, 48.7, 49.3, 48.8, 49.5, 49.0, 49.8, 49.4, 50.2, 50.4, 50.8, 50.5, 51.6, 52.2, 52.5, 52.4, 52.5, 52.2, 51.6, 51.8, 50.8, 50.4, 50.2, 50.4, 49.8, 49.0, 49.5, 48.8, 49.0, 48.7, 49.3, 48.8, 48.3, 47.8, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 48.8, 48.1, 47.9, 47.8, 48.3, 47.7, 48.2, 47.6, 48.2, 47.7, 48.3, 47.9, 48.6, 48.6, 49.0, 48.7, 49.5, 49.2, 50.2, 50.0, 51.1, 51.0, 50.8, 50.0, 49.0, 49.2, 48.8, 48.6, 47.8, 48.2, 47.4, 47.9, 47.2, 46.7, 47.1, 46.8, 47.1, 46.6, 47.2, 46.8, 47.4, 47.1, 46.7, 47.5, 47.2, 48.0, 47.8, 47.8, 48.4, 49.3, 49.2, 49.1, 50.1, 50.1, 49.1, 48.1, 47.2, 46.3, 45.4, 44.5, 43.7, 42.9, 42.1, 41.3, 41.3, 40.8, 40.1, 39.3, 39.0, 39.0, 38.3, 37.7, 37.9, 37.5, 36.8, 37.0, 36.7, 36.1, 36.5, 36.2, 35.8, 36.3, 35.7, 35.8, 35.9, 35.4, 36.3, 36.5, 36.8, 36.3, 36.8, 37.0, 36.7, 37.3, 37.4, 37.4, 38.0, 38.2, 38.1, 38.8, 39.4, 39.2, 39.7, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 44.9, 44.1, 43.3, 42.6, 41.8, 41.5, 41.5, 40.8, 40.1, 39.5, 39.8, 39.2, 38.6, 38.6, 38.5, 37.9, 37.8, 38.0, 37.4, 37.4, 37.6, 37.0, 37.3, 37.3, 36.8, 37.3, 37.3, 37.0, 37.6, 37.4, 37.4, 38.0, 37.8, 37.9, 38.5, 38.6, 38.6, 39.2, 39.8, 39.5, 40.1, 40.8, 41.5, 41.5, 41.8, 42.6, 43.3, 44.1, 44.9, 45.7, 46.6, 47.4, 48.3, 49.2, 50.1, 51.1, 52.1, 51.1, 50.1, 49.2, 48.3, 47.4, 46.6, 45.7, 44.9, 44.1, 43.3, 42.6, 41.8, 41.5, 41.5, 40.8, 40.1, 39.5, 39.8, 39.2, 38.6, 38.6, 38.5, 37.9, 37.8, 38.0, 37.4, 37.4, 37.6, 37.0, 37.3, 37.3, 36.8, 37.3, 37.3, 37.0, 37.6, 37.4, 37.4, 38.0, 37.8, 37.9, 38.5, 38.6, 38.6, 39.2, 39.8, 39.5, 40.1, 40.8, 41.5, 41.5, 41.9, 42.6, 43.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 40.4, 39.7, 39.2, 39.4, 38.8, 38.1, 38.2, 38.0, 37.4, 37.4, 37.3, 36.7, 37.0, 36.8, 36.3, 36.8, 35.8, 35.9, 35.4, 35.9, 35.8, 35.7, 36.3, 35.8, 36.2, 36.5, 36.1, 36.7, 37.0, 36.8, 37.5, 37.9, 37.7, 38.3, 39.0, 38.9, 39.3, 40.1, 40.8, 41.3, 41.3, 42.1, 42.9, 43.7, 44.5, 45.4, 46.3, 47.2, 48.1, 49.1, 26.0, 26.1, 26.1, 26.1, 27.2, 27.3, 28.4, 28.5, 28.6, 29.8, 29.9, 31.2, 31.4, 31.6, 33.0, 33.3, 34.7, 36.1, 36.6, 38.1, 38.6, 40.3, 42.0, 42.7, 44.5, 46.5, 48.6, 52.1, 54.4, 58.2, 60.8, 64.9, 67.9, 66.3, 64.8, 64.8, 63.4, 62.2, 61.1, 60.0, 59.0, 58.0, 57.2, 56.4, 55.6, 54.9, 54.3, 53.6, 53.1, 52.6, 52.1, 51.7, 51.3, 50.9, 50.6, 50.3, 50.0, 49.8, 49.6, 49.4, 49.3, 49.2, 49.1, 50.1, 50.1, 50.1, 50.1, 50.2, 50.3, 50.4, 50.6, 50.8, 51.0, 51.3, 51.6, 51.9, 52.3, 52.7, 53.2, 53.6, 54.2, 54.7, 55.4, 56.0, 56.7, 57.5, 58.3, 59.2, 60.2, 61.2, 62.3, 64.7, 66.0, 67.4, 68.9, 70.5, 72.2, 67.7, 63.5, 59.5, 57.0, 53.3, 51.1, 49.0, 47.0, 45.0, 43.2, 41.4, 39.7, 39.2, 37.7, 36.1, 35.8, 34.3, 34.0, 32.7, 32.4, 31.2, 31.0, 29.8, 29.6, 28.5, 28.4, 28.3, 27.2, 27.1, 27.1, 26.1, 26.0, 26.1, 25.1, 25.1, 25.2, 24.6, 24.3, 24.4, 24.5, 23.6, 23.8, 23.9, 24.1, 23.2, 23.4, 23.6, 23.6, 23.0, 23.3, 23.6, 23.4, 23.0, 23.4, 23.7, 23.4, 23.3, 23.7, 24.2, 23.7, 23.8, 24.3, 24.7, 24.1, 24.7, 25.4, 25.1, 25.3, 26.1, 26.2, 26.1, 27.0, 27.3, 27.3, 28.5, 28.4, 29.0, 29.9, 29.7, 31.4, 31.1, 32.7, 32.7, 34.5, 34.3, 36.1, 36.6, 37.8, 39.6, 40.9, 41.4, 43.3, 45.2, 47.1, 49.1, 51.1, 49.1, 47.1, 45.2, 43.3, 41.4, 40.9, 39.6, 37.8, 36.6, 36.1, 34.3, 34.5, 32.7, 32.7, 31.1, 31.4, 29.7, 29.9, 29.0, 28.4, 28.5, 27.3, 26.2, 26.5, 26.1, 25.2, 25.4, 25.3, 24.5, 24.3, 24.7, 24.1, 23.5, 23.9, 23.8, 23.3, 22.9, 23.6, 23.3, 22.9, 22.5, 23.4, 23.0, 22.7, 22.4, 23.3, 23.0, 22.8, 22.6, 23.4, 23.2, 23.0, 22.9, 23.8, 23.6, 23.5, 23.4, 24.3, 24.2, 24.2, 25.1, 25.1, 25.1, 44.1, 44.1, 44.1, 44.2, 44.3, 44.4, 44.5, 44.7, 44.9, 45.1, 45.4, 45.7, 46.0, 46.4, 46.8, 47.2, 47.7, 48.2, 48.7, 49.3, 49.9, 50.6, 51.3, 52.1, 51.8, 50.4, 50.4, 49.5, 49.2, 49.0, 48.6, 47.9, 48.1, 47.0, 47.3, 47.5, 46.6, 47.0, 46.1, 46.5, 45.8, 46.2, 46.7, 46.0, 46.5, 46.0, 46.5, 46.0, 46.6, 47.2, 46.8, 47.4, 47.1, 47.8, 47.5, 48.2, 49.0, 48.8, 49.6, 49.4, 50.3, 50.2, 49.1, 49.1, 48.1, 48.1, 47.1, 47.2, 46.3, 46.4, 46.6, 45.7, 45.9, 45.1, 45.3, 44.7, 45.0, 44.7, 44.7, 44.5, 44.4, 44.9, 44.5, 44.8, 44.6, 44.9, 44.8, 45.0, 45.8, 45.3, 46.1, 45.7, 46.6, 47.5, 47.3, 47.9, 48.1, 48.4, 49.2, 50.2, 50.5, 50.8, 52.1, 52.6, 54.0, 54.3, 53.7, 52.9, 52.2, 51.5, 50.9, 50.4, 49.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 49.8, 50.4, 50.9, 51.5, 52.2, 52.9, 53.7, 54.3, 54.0, 52.6, 52.1, 50.8, 50.5, 50.2, 49.2, 48.4, 48.1, 47.9, 47.3, 47.5, 46.6, 45.7, 46.1, 45.3, 45.8, 45.0, 44.8, 44.9, 44.6, 44.8, 44.5, 44.9, 44.4, 44.5, 44.7, 44.7, 45.0, 44.7, 45.3, 45.1, 45.9, 45.7, 46.6, 46.4, 46.3, 47.2, 47.1, 48.1, 48.1, 49.1, 49.1, 50.2, 50.3, 49.4, 49.6, 48.8, 49.0, 48.2, 47.5, 47.8, 47.1, 47.4, 46.8, 47.2, 46.6, 46.0, 46.5, 46.0, 46.5, 46.0, 46.7, 46.2, 45.8, 46.5, 46.1, 47.0, 46.6, 47.5, 47.3, 47.0, 48.1, 47.9, 48.6, 49.0, 49.2, 49.5, 50.4, 50.4, 51.8, 52.1, 51.3, 50.6, 49.9, 49.3, 48.7, 48.2, 47.7, 47.2, 46.8, 46.4, 46.0, 45.7, 45.4, 45.1, 44.9, 44.7, 44.5, 44.4, 44.3, 44.2, 44.1, 44.1, 33.0, 33.1, 32.1, 32.1, 31.2, 31.3, 30.4, 30.5, 30.6, 29.8, 28.9, 29.1, 29.3, 28.7, 28.7, 27.9, 28.2, 28.5, 28.1, 28.0, 28.4, 28.5, 28.0, 28.1, 27.7, 28.2, 28.6, 28.0, 28.4, 27.8, 28.4, 29.0, 28.3, 29.0, 28.4, 29.1, 29.8, 29.3, 30.3, 30.6, 30.6, 30.8, 31.2, 32.2, 31.9, 32.5, 32.8, 34.0, 34.0, 34.3, 35.7, 35.9, 37.7, 37.5, 38.2, 40.0, 40.8, 41.0, 42.5, 43.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 47.2, 45.3, 44.4, 42.5, 41.7, 41.1, 40.0, 39.2, 37.5, 37.7, 36.9, 35.7, 35.4, 34.7, 34.6, 33.2, 33.4, 31.9, 32.2, 31.5, 31.8, 30.6, 30.6, 30.3, 30.5, 30.0, 29.1, 29.7, 29.1, 29.7, 29.0, 28.4, 29.1, 28.5, 29.2, 28.7, 28.2, 28.8, 28.5, 29.2, 28.8, 28.4, 29.0, 28.8, 29.6, 29.3, 29.0, 29.7, 29.5, 30.4, 30.1, 29.9, 30.8, 30.8, 31.5, 31.4, 32.3, 32.2, 33.1, 33.1, 34.1, 34.0, 35.1, 35.1, 36.1, 37.2, 37.3, 38.5, 39.6, 39.8, 41.0, 42.3, 43.6, 45.0, 46.4, 47.8, 49.4, 50.9, 53.6, 55.4, 55.7, 55.6, 55.2, 54.8, 54.5, 54.2, 55.1, 54.8, 54.6, 54.4, 54.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.5, 55.7, 55.9, 56.1, 57.4, 57.6, 58.0, 58.3, 58.9, 59.4, 59.4, 58.7, 58.0, 58.5, 57.9, 57.4, 57.4, 57.5, 57.1, 56.7, 56.4, 56.1, 55.9, 55.7, 56.5, 56.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 56.3, 56.5, 56.7, 56.9, 56.4, 56.4, 56.7, 57.1, 57.5, 57.4, 57.4, 57.9, 58.5, 59.1, 58.7, 59.4, 59.0, 58.7, 58.3, 56.9, 56.6, 56.3, 55.4, 55.3, 55.2, 55.2, 55.1, 53.9, 53.8, 53.9, 54.0, 54.2, 53.6, 53.7, 53.8, 53.9, 54.0, 54.3, 54.5, 54.8, 54.5, 54.9, 52.0, 50.4, 48.8, 47.2, 45.7, 44.3, 42.9, 41.6, 40.3, 40.0, 38.8, 37.6, 37.5, 36.3, 35.2, 35.1, 34.1, 33.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 49.8, 50.4, 50.9, 51.5, 52.2, 52.9, 53.7, 54.3, 54.0, 53.9, 53.6, 53.7, 53.6, 53.6, 53.7, 53.7, 53.8, 53.7, 53.7, 54.2, 54.4, 54.6, 54.8, 55.1, 55.4, 55.7, 54.8, 54.1, 53.3, 52.7, 52.0, 51.5, 50.9, 50.4, 51.0, 50.6, 50.2, 49.9, 49.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 49.1, 49.2, 49.3, 49.4, 49.6, 49.8, 50.0, 50.3, 50.6, 50.9, 51.3, 51.7, 52.1, 52.6, 53.1, 53.6, 55.4, 56.0, 55.6, 56.4, 56.0, 55.7, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 56.1, 56.0, 55.2, 54.5, 53.8, 53.1, 52.6, 52.0, 51.5, 51.0, 50.6, 50.2, 49.9, 49.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 49.5, 49.9, 50.2, 50.6, 51.0, 51.5, 52.0, 52.6, 53.1, 53.8, 54.5, 55.2, 56.0, 56.1, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 55.7, 56.0, 56.4, 55.6, 56.0, 55.4, 53.6, 53.1, 52.6, 52.1, 51.7, 51.3, 50.9, 50.6, 50.3, 50.0, 49.8, 49.6, 49.4, 49.3, 49.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 49.5, 49.9, 50.2, 50.6, 51.0, 50.4, 50.9, 51.5, 52.0, 52.7, 53.3, 54.1, 54.8, 55.7, 55.4, 55.1, 54.8, 54.6, 54.4, 54.2, 53.7, 53.7, 53.8, 53.7, 53.7, 53.6, 53.6, 53.7, 53.6, 53.9, 54.0, 54.3, 53.7, 52.9, 52.2, 51.5, 50.9, 50.4, 49.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 47.8, 48.3, 48.8, 49.3, 48.7, 48.2, 48.8, 48.3, 47.9, 47.4, 48.2, 47.8, 47.4, 47.2, 47.9, 47.6, 47.7, 47.9, 48.1, 48.4, 48.6, 48.9, 47.9, 48.3, 48.6, 48.7, 48.2, 48.6, 48.7, 48.7, 48.8, 48.2, 48.7, 48.2, 47.7, 48.3, 47.8, 47.4, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 48.6, 48.4, 48.3, 49.2, 49.1, 49.1, 48.1, 48.1, 47.1, 47.2, 47.3, 46.4, 46.6, 46.7, 45.9, 46.2, 45.4, 45.7, 46.0, 45.3, 45.7, 46.1, 45.5, 46.0, 45.4, 46.0, 46.5, 46.0, 46.7, 46.8, 47.0, 46.9, 47.4, 47.2, 47.9, 47.6, 48.6, 47.9, 48.1, 47.9, 47.3, 47.5, 47.3, 47.0, 47.1, 46.9, 47.0, 47.4, 46.7, 47.2, 47.7, 47.1, 47.6, 48.2, 47.7, 47.3, 47.8, 47.9, 48.1, 47.8, 48.5, 48.2, 48.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.9, 47.8, 47.3, 47.7, 48.2, 47.6, 47.1, 47.7, 47.2, 46.7, 46.8, 47.0, 46.9, 47.1, 47.0, 47.3, 47.5, 47.3, 47.9, 48.1, 47.9, 48.6, 47.6, 47.9, 47.2, 47.4, 46.9, 47.0, 46.8, 46.7, 46.0, 46.5, 46.0, 45.4, 46.0, 45.5, 46.1, 45.7, 45.3, 46.0, 45.7, 45.4, 46.2, 45.9, 46.7, 46.6, 46.4, 47.3, 47.2, 47.1, 48.1, 48.1, 49.1, 49.1, 49.2, 48.3, 48.4, 48.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 47.4, 47.8, 48.3, 47.7, 48.2, 48.7, 48.2, 48.8, 48.3, 48.7, 48.6, 48.2, 48.7, 48.6, 48.3, 47.9, 48.9, 48.6, 48.4, 48.1, 47.9, 47.7, 47.6, 47.9, 47.2, 47.4, 47.8, 48.2, 47.4, 47.9, 48.3, 48.8, 48.2, 48.7, 49.3, 48.8, 48.3, 47.8, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 47.1, 47.1, 46.1, 46.2, 46.3, 45.4, 45.5, 45.7, 44.9, 45.1, 44.4, 44.7, 44.8, 44.3, 44.7, 44.5, 44.4, 44.5, 44.3, 44.8, 44.6, 44.9, 45.5, 45.0, 45.8, 45.3, 46.1, 47.0, 46.6, 47.6, 47.7, 48.4, 48.1, 49.4, 49.2, 49.0, 49.2, 49.5, 49.9, 50.2, 49.4, 49.8, 49.0, 48.7, 48.8, 49.0, 48.7, 48.2, 48.8, 48.3, 48.9, 48.5, 48.3, 48.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 48.8, 49.3, 49.2, 49.3, 48.8, 49.5, 50.2, 49.8, 50.4, 50.2, 51.1, 50.8, 51.8, 52.1, 52.7, 52.5, 52.4, 52.3, 51.3, 51.6, 50.5, 50.4, 49.9, 50.2, 49.4, 48.6, 49.0, 48.7, 48.8, 49.0, 48.7, 48.2, 48.8, 48.3, 48.9, 48.5, 48.3, 48.8, 49.4, 49.2, 49.0, 49.8, 49.6, 50.4, 51.1, 51.2, 51.1, 52.1, 52.1, 52.1, 51.1, 51.2, 51.1, 50.4, 49.6, 49.8, 49.0, 49.2, 49.4, 48.8, 48.3, 48.5, 48.9, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.7, 49.0, 48.6, 49.4, 50.2, 49.9, 50.4, 50.5, 51.6, 51.3, 52.3, 52.4, 52.5, 52.7, 52.1, 51.8, 50.8, 51.1, 50.2, 50.4, 49.8, 50.2, 49.5, 48.8, 49.3, 48.7, 49.3, 48.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 48.8, 48.3, 48.5, 48.9, 48.3, 48.8, 48.2, 48.7, 49.0, 48.8, 48.7, 49.0, 48.6, 49.4, 50.2, 49.9, 49.5, 49.2, 49.0, 49.2, 49.4, 48.1, 48.4, 47.7, 47.6, 46.6, 47.0, 46.1, 45.3, 45.8, 45.0, 45.5, 44.9, 44.6, 44.8, 44.3, 44.5, 44.4, 44.5, 44.7, 44.3, 44.8, 44.7, 44.4, 45.1, 44.9, 45.7, 45.5, 45.4, 46.3, 46.2, 46.1, 47.1, 47.1, 46.1, 45.1, 44.2, 43.3, 42.4, 41.5, 41.0, 40.8, 40.0, 39.2, 39.5, 38.7, 38.3, 38.3, 37.6, 36.9, 37.1, 36.6, 35.9, 36.1, 35.7, 35.1, 35.6, 34.9, 34.8, 34.9, 35.6, 35.0, 35.3, 35.1, 34.9, 35.4, 34.9, 35.1, 35.3, 35.0, 35.6, 35.3, 35.5, 36.0, 35.6, 37.0, 36.8, 37.5, 37.9, 37.7, 38.3, 39.0, 39.0, 39.3, 40.1, 40.8, 41.3, 41.3, 42.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 40.4, 39.7, 39.2, 39.4, 38.8, 38.1, 38.2, 38.0, 37.4, 37.4, 37.3, 36.7, 37.0, 36.8, 36.3, 36.8, 36.5, 36.3, 36.8, 36.3, 36.5, 36.8, 36.3, 36.8, 37.0, 36.7, 37.3, 37.4, 37.4, 38.0, 38.2, 38.1, 38.8, 39.4, 39.2, 39.7, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 40.4, 39.7, 39.2, 39.4, 38.8, 38.1, 38.2, 38.0, 37.4, 37.4, 37.3, 36.7, 37.0, 36.8, 36.3, 36.8, 36.5, 36.3, 36.8, 36.3, 36.5, 36.8, 36.3, 36.8, 37.0, 36.7, 37.3, 37.4, 37.4, 38.0, 38.2, 38.1, 38.8, 39.4, 39.2, 39.7, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 42.1, 41.3, 41.3, 40.8, 40.1, 39.3, 39.0, 39.0, 38.3, 37.7, 37.9, 37.5, 36.6, 36.2, 35.6, 36.0, 35.5, 35.3, 35.6, 35.0, 35.3, 35.1, 34.9, 35.4, 34.9, 35.1, 35.3, 35.0, 35.6, 34.9, 34.8, 34.9, 35.6, 35.1, 35.7, 36.1, 35.9, 36.6, 37.1, 36.9, 37.6, 38.3, 38.3, 38.7, 39.5, 39.2, 40.0, 40.8, 41.0, 41.5, 42.4, 43.3, 44.2, 45.1, 46.1, 24.0, 24.1, 25.1, 25.1, 25.2, 26.2, 26.3, 26.4, 27.6, 27.7, 27.9, 29.1, 29.3, 30.6, 30.9, 32.2, 32.5, 32.9, 34.3, 34.8, 36.3, 38.0, 38.5, 40.3, 42.1, 44.1, 46.1, 47.0, 50.5, 52.9, 56.7, 59.4, 63.7, 64.9, 63.5, 62.8, 62.1, 60.9, 59.8, 58.8, 57.8, 56.9, 56.0, 55.2, 54.5, 53.8, 53.1, 52.6, 53.1, 52.6, 52.1, 51.7, 51.3, 50.9, 50.6, 50.3, 50.0, 49.8, 49.6, 49.4, 49.3, 49.2, 49.1, 49.1, 50.1, 50.1, 50.1, 50.2, 50.3, 50.4, 50.6, 50.8, 51.0, 51.3, 51.6, 51.9, 52.3, 52.7, 53.2, 54.7, 55.3, 55.8, 56.5, 57.1, 57.9, 58.7, 59.5, 60.4, 61.4, 62.4, 63.5, 66.0, 67.3, 68.7, 70.2, 71.8, 70.8, 64.9, 60.8, 58.2, 54.4, 52.1, 48.6, 46.5, 44.5, 42.7, 42.0, 40.3, 38.6, 37.0, 36.6, 35.1, 34.7, 33.3, 33.0, 31.6, 31.4, 31.2, 29.9, 29.8, 28.6, 28.5, 28.4, 27.3, 27.2, 26.1, 26.1, 26.1, 26.0, 25.1, 25.1, 25.1, 24.2, 24.2, 24.3, 23.4, 23.5, 23.6, 23.8, 22.9, 23.0, 23.2, 23.4, 22.6, 22.8, 23.0, 23.3, 22.4, 22.7, 23.0, 23.4, 22.5, 22.9, 23.3, 23.6, 22.9, 23.3, 23.8, 23.9, 23.5, 24.1, 24.7, 24.3, 24.5, 25.3, 25.4, 25.2, 26.1, 26.5, 26.2, 27.3, 27.6, 27.6, 29.0, 28.8, 29.7, 31.4, 31.1, 32.7, 32.7, 34.5, 34.3, 36.1, 36.6, 37.8, 39.6, 40.9, 41.4, 43.3, 45.2, 47.1, 49.1, 51.1, 49.1, 47.1, 45.2, 43.3, 40.9, 40.5, 38.6, 36.8, 36.6, 35.1, 33.8, 33.5, 31.9, 31.9, 30.6, 29.3, 29.6, 28.1, 28.0, 27.6, 26.5, 26.9, 26.2, 25.3, 25.7, 25.2, 24.4, 24.6, 24.5, 23.9, 23.5, 24.1, 23.5, 23.0, 22.5, 22.1, 22.8, 22.5, 22.1, 21.7, 22.5, 22.2, 21.9, 21.6, 22.3, 22.2, 21.9, 21.7, 22.3, 22.4, 22.2, 22.0, 22.5, 22.7, 22.6, 22.5, 23.4, 23.3, 23.2, 23.2, 24.1, 24.1, 24.1, 46.1, 46.1, 46.1, 46.2, 45.3, 45.4, 45.5, 45.7, 45.9, 45.7, 45.4, 45.7, 46.0, 46.4, 46.8, 47.2, 46.6, 47.1, 47.6, 48.2, 48.8, 48.3, 49.0, 49.8, 49.4, 49.0, 48.7, 48.3, 47.9, 47.6, 47.7, 47.0, 46.7, 47.0, 46.2, 46.3, 46.6, 47.0, 46.1, 46.5, 46.8, 46.2, 46.7, 46.7, 46.7, 47.1, 46.8, 47.1, 47.7, 47.3, 47.8, 48.5, 49.2, 48.8, 49.5, 50.3, 51.0, 50.8, 49.6, 49.4, 48.3, 48.2, 47.1, 47.1, 47.1, 46.1, 46.1, 45.2, 45.3, 44.4, 44.5, 44.7, 43.9, 44.1, 44.4, 43.6, 43.9, 44.3, 43.6, 44.0, 43.3, 43.8, 44.3, 43.7, 44.3, 44.7, 44.4, 44.9, 44.5, 45.3, 45.4, 45.7, 46.6, 46.3, 47.3, 47.9, 48.1, 48.4, 49.2, 50.2, 50.5, 52.1, 52.1, 52.6, 54.0, 54.3, 53.7, 52.9, 52.2, 51.5, 50.9, 50.4, 49.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 49.8, 50.4, 50.9, 51.5, 52.2, 52.9, 53.7, 54.3, 54.0, 52.6, 52.1, 52.1, 50.5, 50.2, 49.2, 48.4, 48.1, 47.0, 47.3, 46.3, 46.6, 45.7, 45.4, 45.3, 44.5, 44.9, 44.4, 44.7, 44.3, 43.7, 44.3, 43.8, 43.3, 44.0, 43.6, 44.3, 43.9, 43.6, 44.4, 44.1, 43.9, 44.7, 44.5, 44.4, 45.3, 45.2, 46.1, 46.1, 46.1, 47.1, 47.1, 48.2, 48.3, 49.4, 49.6, 50.8, 51.0, 50.3, 49.5, 48.8, 49.2, 48.5, 47.8, 47.3, 47.7, 47.1, 46.8, 47.1, 46.7, 46.7, 46.7, 46.2, 46.8, 46.5, 46.1, 47.0, 46.6, 46.3, 46.2, 47.0, 46.7, 47.0, 47.7, 47.6, 47.9, 48.3, 48.7, 49.0, 49.4, 49.8, 49.0, 48.3, 48.8, 48.2, 47.6, 47.1, 46.6, 46.1, 46.8, 46.4, 46.0, 45.7, 45.4, 45.7, 45.9, 45.7, 45.5, 45.4, 45.3, 46.2, 46.1, 46.1, 34.0, 34.1, 34.1, 33.1, 32.2, 32.3, 32.4, 31.5, 30.8, 30.8, 31.0, 30.1, 30.4, 29.5, 29.8, 30.1, 29.3, 29.6, 28.8, 29.2, 29.5, 28.8, 29.2, 28.5, 28.9, 29.4, 28.7, 29.2, 28.5, 29.1, 29.7, 29.1, 29.7, 29.1, 29.8, 30.4, 30.0, 30.5, 30.3, 31.3, 31.3, 31.8, 31.5, 32.5, 32.9, 33.4, 33.2, 34.6, 34.7, 35.4, 35.7, 36.9, 37.7, 37.5, 39.2, 40.0, 41.1, 41.7, 42.5, 44.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 46.2, 45.3, 43.4, 42.5, 41.0, 40.8, 39.0, 38.2, 37.5, 36.6, 35.9, 35.7, 34.3, 34.0, 32.9, 32.8, 32.5, 31.9, 31.1, 31.2, 30.8, 30.6, 29.6, 29.9, 29.3, 28.5, 29.1, 28.4, 29.0, 28.3, 27.7, 28.3, 27.8, 28.4, 28.0, 27.4, 27.8, 27.7, 27.3, 27.3, 27.6, 27.6, 28.0, 27.7, 27.4, 28.2, 27.9, 28.7, 28.5, 28.3, 29.1, 28.9, 29.8, 29.6, 29.5, 30.4, 30.3, 30.7, 31.1, 32.1, 32.1, 32.0, 33.1, 34.1, 34.1, 35.2, 35.3, 36.4, 37.6, 37.8, 39.0, 40.3, 40.5, 41.8, 43.2, 44.7, 46.1, 47.7, 49.3, 50.9, 52.7, 54.5, 54.1, 53.7, 53.3, 54.0, 53.9, 53.6, 53.3, 53.6, 53.6, 53.7, 53.9, 53.8, 53.9, 54.0, 54.2, 55.2, 55.3, 55.4, 55.6, 56.6, 56.9, 57.2, 57.5, 59.0, 59.4, 58.7, 59.1, 58.5, 57.9, 57.4, 57.4, 57.5, 57.1, 56.7, 56.4, 56.4, 56.9, 56.7, 56.5, 56.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 56.3, 55.5, 55.7, 55.9, 56.1, 56.4, 56.7, 57.1, 57.5, 57.4, 57.4, 57.9, 58.5, 58.0, 58.7, 59.4, 59.0, 58.9, 58.4, 58.0, 57.6, 57.4, 57.1, 55.9, 55.7, 55.5, 55.4, 55.2, 55.2, 55.2, 55.1, 55.2, 54.4, 54.6, 54.8, 55.1, 55.4, 54.5, 54.8, 55.2, 55.6, 56.0, 55.4, 53.6, 52.0, 49.4, 48.9, 46.4, 46.0, 43.6, 43.3, 41.0, 40.8, 39.6, 38.5, 38.3, 37.2, 36.1, 36.1, 35.1, 44.1, 44.1, 44.1, 44.2, 44.3, 44.4, 44.5, 44.7, 44.9, 45.1, 45.4, 45.7, 46.0, 46.4, 46.8, 47.2, 47.7, 48.2, 48.7, 49.3, 49.9, 50.6, 51.3, 52.1, 51.8, 51.4, 52.1, 52.1, 51.8, 51.6, 51.3, 52.3, 52.4, 52.3, 52.2, 52.1, 53.1, 53.3, 53.6, 53.9, 54.0, 54.5, 53.7, 52.9, 53.3, 52.7, 52.0, 51.5, 50.9, 50.4, 50.0, 49.5, 49.2, 48.8, 49.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 49.1, 49.1, 49.2, 49.3, 49.4, 49.6, 49.8, 50.0, 50.3, 50.6, 51.9, 52.3, 52.7, 53.2, 53.6, 54.2, 54.7, 55.4, 55.7, 55.6, 56.4, 56.0, 56.1, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 56.1, 56.0, 55.2, 54.5, 53.8, 53.1, 52.6, 52.0, 51.5, 51.0, 50.6, 50.2, 49.9, 49.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 49.5, 49.9, 50.2, 50.6, 51.0, 51.5, 52.0, 52.6, 53.1, 53.8, 54.5, 55.2, 56.0, 56.1, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 56.1, 56.0, 56.4, 55.6, 55.7, 55.4, 54.7, 54.2, 53.6, 53.2, 52.7, 52.3, 51.9, 50.6, 50.3, 50.0, 49.8, 49.6, 49.4, 49.3, 49.2, 49.1, 49.1, 49.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 49.5, 48.8, 49.2, 49.5, 50.0, 50.4, 50.9, 51.5, 52.0, 52.7, 53.1, 52.9, 53.7, 54.5, 54.0, 53.9, 53.6, 53.3, 53.1, 52.1, 52.2, 52.3, 52.4, 52.3, 51.3, 51.6, 51.8, 52.1, 52.1, 51.4, 51.8, 52.1, 51.3, 50.6, 49.9, 49.3, 48.7, 48.2, 47.7, 47.2, 46.8, 46.4, 46.0, 45.7, 45.4, 45.1, 44.9, 44.7, 44.5, 44.4, 44.3, 44.2, 44.1, 44.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 48.5, 48.8, 48.1, 48.5, 47.8, 48.3, 47.7, 48.2, 47.6, 47.1, 46.7, 47.2, 46.7, 46.8, 46.8, 46.5, 47.1, 47.0, 46.6, 46.3, 47.3, 47.0, 46.7, 47.9, 47.7, 47.6, 47.9, 48.3, 48.6, 48.7, 48.6, 48.6, 49.0, 48.7, 48.8, 48.2, 48.7, 48.2, 47.7, 48.3, 47.8, 47.9, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 48.6, 48.4, 49.3, 49.2, 49.1, 48.1, 48.1, 47.1, 47.1, 47.2, 46.3, 46.4, 46.6, 45.7, 45.9, 45.7, 45.4, 45.7, 45.0, 45.3, 45.7, 45.1, 45.5, 46.0, 45.4, 46.0, 46.5, 46.0, 46.7, 46.8, 47.0, 47.8, 47.4, 48.3, 47.9, 48.9, 48.6, 48.4, 48.1, 48.4, 47.7, 47.6, 47.9, 48.3, 47.4, 47.8, 48.2, 47.4, 47.9, 48.3, 48.8, 48.2, 48.7, 49.3, 48.8, 48.3, 47.8, 47.4, 47.1, 46.7, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 46.7, 47.1, 47.4, 47.8, 48.3, 48.8, 49.3, 48.7, 48.2, 48.8, 48.3, 47.9, 47.4, 48.2, 47.8, 47.4, 48.3, 47.9, 47.6, 47.7, 48.4, 48.1, 48.4, 48.6, 48.9, 47.9, 48.3, 47.4, 47.8, 47.0, 46.8, 46.7, 46.0, 46.5, 46.0, 45.4, 46.0, 45.5, 45.1, 45.7, 45.3, 45.0, 45.7, 45.4, 45.7, 45.9, 45.7, 46.6, 46.4, 46.3, 47.2, 47.1, 47.1, 48.1, 48.1, 49.1, 49.2, 49.3, 48.4, 48.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 47.9, 47.8, 48.3, 47.7, 48.2, 48.7, 48.2, 48.8, 48.7, 49.0, 48.6, 48.6, 48.7, 48.6, 48.3, 47.9, 47.6, 47.7, 47.9, 46.7, 47.0, 47.3, 46.3, 46.6, 47.0, 47.1, 46.5, 46.8, 46.8, 46.7, 47.2, 46.7, 47.1, 47.6, 48.2, 47.7, 48.3, 47.8, 48.5, 48.1, 48.8, 48.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 47.1, 47.2, 47.3, 46.4, 46.6, 45.7, 45.9, 45.7, 45.4, 45.0, 45.0, 45.3, 44.7, 45.1, 45.5, 44.9, 45.4, 44.8, 45.4, 46.0, 45.5, 46.2, 46.8, 46.5, 47.1, 47.0, 47.9, 47.6, 48.6, 48.4, 49.5, 49.8, 50.7, 51.6, 51.8, 50.8, 51.1, 50.2, 50.4, 49.8, 49.0, 49.5, 48.8, 49.3, 48.7, 49.3, 48.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 48.8, 49.3, 49.2, 49.3, 48.8, 49.5, 50.2, 49.8, 50.4, 50.2, 51.1, 50.8, 51.8, 52.1, 52.2, 51.1, 51.0, 50.8, 50.0, 49.0, 49.2, 48.8, 48.6, 47.8, 48.2, 47.4, 47.9, 47.2, 46.7, 47.1, 46.8, 47.1, 46.6, 47.2, 46.8, 47.4, 47.1, 46.7, 47.5, 47.2, 48.0, 47.8, 47.8, 48.4, 49.3, 49.2, 49.1, 50.1, 50.1, 50.1, 49.1, 49.2, 49.3, 48.4, 47.8, 47.8, 48.0, 47.2, 47.5, 46.7, 47.1, 47.4, 46.8, 47.2, 46.6, 47.1, 46.8, 47.1, 46.7, 47.2, 47.9, 47.4, 48.2, 47.8, 48.6, 48.8, 49.2, 49.0, 50.0, 50.8, 51.0, 51.1, 52.2, 52.1, 51.8, 50.8, 51.1, 50.2, 50.4, 49.8, 50.2, 49.5, 48.8, 49.3, 49.2, 49.3, 48.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 48.8, 49.3, 48.7, 49.3, 48.8, 49.5, 49.0, 49.8, 50.4, 50.2, 51.1, 50.8, 51.8, 51.6, 50.7, 49.8, 49.5, 48.4, 48.6, 47.6, 47.9, 47.0, 47.1, 46.5, 46.8, 46.2, 45.5, 46.0, 45.4, 44.8, 45.4, 44.9, 45.5, 45.1, 44.7, 45.3, 45.0, 45.0, 45.4, 45.7, 45.9, 45.7, 46.6, 46.4, 47.3, 47.2, 47.1, 48.1, 43.1, 42.1, 41.1, 40.8, 40.2, 39.3, 39.5, 38.6, 37.8, 36.9, 37.1, 36.4, 35.6, 35.9, 35.7, 35.4, 34.7, 34.6, 34.3, 33.6, 34.0, 33.4, 33.9, 33.7, 33.7, 33.1, 33.6, 33.0, 33.2, 33.1, 32.8, 33.2, 34.0, 33.4, 33.8, 33.7, 33.7, 34.2, 33.7, 34.3, 34.2, 35.6, 35.1, 35.7, 36.1, 35.9, 36.6, 37.1, 36.9, 38.6, 38.6, 39.0, 39.8, 40.5, 41.2, 42.1, 42.9, 43.7, 44.5, 45.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 40.4, 39.7, 39.2, 39.4, 38.8, 38.1, 38.2, 38.0, 37.4, 37.4, 37.3, 36.7, 37.0, 36.8, 36.3, 35.7, 35.8, 35.9, 35.4, 35.9, 35.8, 35.7, 36.3, 35.8, 36.2, 36.5, 36.1, 36.7, 37.0, 36.8, 37.5, 37.9, 37.7, 38.3, 39.0, 39.0, 39.3, 40.1, 40.8, 41.3, 41.3, 42.1, 42.9, 43.7, 44.5, 45.4, 46.3, 47.2, 48.1, 48.1, 49.1, 48.1, 47.1, 47.2, 46.3, 45.4, 44.5, 43.7, 42.9, 42.1, 41.3, 41.3, 40.8, 40.1, 39.3, 39.0, 39.0, 38.3, 37.7, 37.9, 37.5, 36.8, 37.0, 36.7, 36.1, 36.5, 36.2, 35.8, 36.3, 35.7, 35.8, 35.9, 35.4, 35.9, 35.8, 35.7, 36.3, 35.8, 37.0, 36.7, 37.3, 37.4, 37.4, 38.0, 38.2, 38.1, 38.8, 39.4, 39.2, 39.7, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 45.4, 44.5, 43.7, 42.9, 41.1, 41.2, 40.5, 39.8, 39.0, 38.6, 38.6, 36.9, 37.1, 36.6, 35.9, 36.1, 35.7, 35.1, 35.6, 34.2, 34.3, 33.7, 34.2, 33.7, 33.7, 33.8, 33.4, 34.0, 33.2, 32.8, 33.1, 33.2, 33.0, 33.6, 33.1, 33.7, 33.7, 33.9, 33.4, 34.0, 33.6, 34.3, 34.6, 34.7, 35.4, 35.7, 35.9, 35.6, 36.4, 37.1, 36.9, 37.8, 38.6, 39.5, 39.3, 40.2, 40.8, 41.1, 42.1, 23.0, 23.1, 23.1, 23.1, 24.2, 24.2, 24.3, 24.4, 24.5, 25.7, 25.8, 26.0, 27.2, 27.4, 28.7, 29.0, 29.3, 29.6, 31.0, 32.5, 32.9, 34.5, 35.0, 36.7, 37.3, 39.2, 41.1, 41.9, 44.0, 47.6, 48.6, 52.5, 55.2, 59.5, 62.1, 60.8, 60.9, 59.7, 58.6, 57.5, 56.6, 55.7, 54.8, 54.1, 54.5, 53.8, 53.1, 52.6, 52.0, 51.5, 51.0, 50.6, 50.2, 49.9, 50.6, 50.3, 50.0, 49.8, 49.6, 49.4, 49.3, 49.2, 49.1, 49.1, 50.1, 50.1, 50.1, 50.2, 50.3, 50.4, 50.6, 50.8, 51.0, 51.3, 52.6, 53.0, 53.3, 53.8, 54.2, 54.7, 55.3, 55.8, 56.5, 58.3, 59.0, 59.8, 60.7, 61.6, 62.6, 63.7, 66.0, 67.3, 68.6, 70.0, 71.5, 68.2, 63.7, 58.0, 55.4, 52.9, 50.5, 47.0, 44.9, 42.9, 42.1, 40.3, 38.5, 38.0, 36.3, 34.8, 34.3, 32.9, 32.5, 31.1, 30.9, 30.6, 29.3, 29.1, 27.9, 27.7, 27.6, 26.4, 26.3, 26.2, 25.2, 25.1, 25.1, 24.1, 24.0, 24.1, 23.1, 23.1, 23.2, 23.2, 22.3, 22.4, 22.5, 22.6, 22.7, 22.5, 22.0, 22.2, 22.4, 22.3, 21.7, 21.9, 22.2, 22.3, 21.6, 21.9, 22.2, 22.5, 21.7, 22.1, 22.5, 22.8, 22.1, 22.5, 23.0, 23.3, 22.7, 23.3, 23.9, 24.5, 24.6, 24.4, 25.2, 25.7, 25.3, 26.2, 26.9, 26.5, 27.6, 28.0, 28.1, 29.6, 29.3, 30.6, 30.9, 31.9, 33.5, 33.8, 35.1, 36.6, 36.8, 38.6, 40.5, 40.9, 42.3, 45.2, 47.1, 49.1, 51.1, 49.1, 46.1, 44.2, 42.3, 40.9, 39.5, 37.6, 35.9, 35.9, 33.0, 33.3, 31.4, 31.6, 29.8, 30.1, 28.8, 27.4, 27.7, 26.7, 26.1, 26.4, 25.3, 24.9, 25.2, 24.4, 23.6, 22.9, 23.3, 23.0, 22.4, 22.1, 22.7, 22.1, 21.6, 21.5, 22.0, 21.6, 21.2, 20.8, 20.5, 20.6, 21.0, 20.7, 20.5, 20.2, 21.1, 20.8, 20.6, 20.4, 20.8, 21.1, 20.9, 20.8, 20.7, 21.6, 21.5, 21.4, 21.3, 21.2, 21.2, 22.1, 22.1, 22.1, 50.1, 50.1, 49.1, 49.2, 48.3, 48.4, 47.8, 47.8, 47.0, 47.2, 46.4, 46.7, 46.0, 46.4, 45.7, 46.1, 46.6, 46.0, 46.5, 46.0, 46.5, 46.0, 46.7, 46.2, 46.8, 46.5, 46.1, 45.7, 45.8, 46.0, 45.9, 45.6, 45.3, 45.6, 45.9, 46.0, 45.8, 45.7, 46.1, 46.5, 46.8, 46.8, 46.7, 47.2, 47.7, 48.2, 48.7, 49.3, 49.7, 49.4, 50.0, 50.6, 51.3, 51.9, 50.6, 50.3, 50.0, 48.8, 48.6, 47.4, 47.3, 47.2, 47.1, 46.1, 46.1, 45.1, 45.1, 45.2, 45.3, 44.4, 44.5, 44.7, 43.9, 44.1, 44.4, 44.7, 43.9, 44.3, 44.6, 44.0, 44.4, 43.8, 44.3, 44.5, 44.3, 44.7, 44.4, 45.0, 45.0, 45.3, 46.1, 45.7, 46.6, 46.3, 47.3, 47.9, 48.1, 48.4, 49.2, 50.2, 50.5, 52.1, 52.1, 52.6, 53.0, 52.1, 51.3, 50.6, 49.9, 49.3, 48.7, 48.2, 47.7, 47.2, 46.8, 46.4, 46.0, 45.7, 45.4, 45.1, 44.9, 44.7, 44.5, 44.4, 44.3, 44.2, 44.1, 44.1, 44.1, 44.1, 44.1, 44.2, 44.3, 44.4, 44.5, 44.7, 44.9, 45.1, 45.4, 45.7, 46.0, 46.4, 46.8, 47.2, 47.7, 48.2, 48.7, 49.3, 49.9, 50.6, 51.3, 52.1, 53.0, 52.6, 52.1, 52.1, 50.5, 50.2, 49.2, 48.4, 48.1, 47.9, 47.3, 46.3, 46.6, 45.7, 45.4, 45.3, 45.0, 45.0, 44.4, 44.7, 44.3, 44.5, 44.3, 43.8, 44.4, 44.0, 43.6, 44.3, 43.9, 44.7, 44.4, 44.1, 43.9, 44.7, 44.5, 44.4, 45.3, 45.2, 45.1, 45.1, 46.1, 46.1, 47.1, 47.2, 47.3, 47.4, 48.6, 48.8, 50.0, 50.3, 50.6, 51.9, 51.3, 50.6, 50.0, 49.4, 48.8, 49.3, 48.7, 48.2, 47.7, 47.2, 46.7, 46.8, 46.8, 46.5, 46.1, 45.7, 45.8, 46.0, 45.9, 45.6, 45.3, 45.6, 45.9, 46.0, 45.8, 45.7, 46.1, 46.5, 46.8, 46.2, 46.7, 46.0, 46.5, 46.0, 46.5, 46.0, 46.6, 46.1, 45.7, 46.4, 46.0, 46.7, 46.4, 47.2, 47.0, 47.8, 47.8, 48.4, 48.3, 49.2, 49.1, 50.1, 35.0, 35.1, 34.1, 34.1, 33.2, 32.7, 32.4, 32.5, 31.7, 31.8, 31.0, 31.2, 31.1, 30.6, 29.8, 30.1, 29.3, 29.6, 29.9, 29.2, 29.5, 28.8, 29.2, 29.6, 28.9, 29.4, 28.7, 29.2, 29.8, 29.1, 29.7, 29.1, 29.7, 30.4, 29.8, 30.4, 30.0, 30.9, 31.2, 31.3, 31.3, 31.8, 32.7, 32.5, 32.9, 33.4, 34.3, 34.6, 34.7, 36.2, 36.2, 36.9, 37.9, 38.4, 39.2, 40.0, 41.1, 41.7, 42.5, 44.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 47.2, 45.3, 44.4, 42.5, 41.7, 41.1, 40.0, 38.2, 37.5, 37.7, 35.9, 35.7, 35.4, 34.0, 34.0, 33.2, 33.4, 31.9, 32.2, 31.5, 31.8, 30.6, 30.6, 30.3, 30.5, 30.0, 29.1, 29.7, 29.1, 29.7, 29.0, 28.4, 29.1, 28.5, 29.2, 28.7, 28.2, 28.8, 28.5, 29.2, 28.8, 28.4, 29.0, 28.8, 29.6, 29.3, 29.0, 29.7, 29.5, 30.4, 30.1, 29.9, 30.8, 30.8, 31.5, 31.4, 32.3, 32.2, 33.1, 33.1, 34.1, 34.0, 34.1, 35.1, 36.1, 36.2, 37.3, 38.5, 38.6, 39.8, 41.0, 42.3, 43.6, 43.9, 46.4, 46.8, 49.4, 50.9, 52.6, 53.8, 53.8, 53.3, 52.9, 52.6, 53.3, 53.0, 52.6, 52.3, 52.1, 53.1, 52.9, 52.7, 52.5, 53.8, 53.7, 53.7, 53.6, 54.4, 54.6, 54.8, 55.6, 55.8, 56.1, 56.5, 57.5, 57.9, 58.3, 58.7, 59.1, 58.5, 57.9, 57.4, 57.4, 57.5, 57.1, 56.7, 56.4, 56.1, 55.9, 56.7, 56.5, 56.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 55.3, 55.5, 55.7, 55.9, 56.1, 56.4, 56.7, 57.1, 57.5, 58.0, 58.5, 57.9, 58.5, 58.0, 58.7, 58.3, 59.0, 58.9, 58.4, 58.0, 57.6, 57.4, 57.1, 55.9, 55.7, 55.5, 55.4, 55.2, 55.2, 55.2, 55.1, 55.2, 54.4, 54.6, 54.8, 55.1, 55.4, 55.7, 54.8, 55.2, 55.6, 56.0, 56.5, 55.8, 53.1, 51.5, 48.9, 47.4, 46.0, 44.7, 43.3, 43.1, 40.8, 40.6, 39.5, 38.3, 38.2, 37.2, 36.1, 36.1, 40.1, 40.1, 40.1, 40.2, 40.2, 40.4, 40.5, 40.6, 40.8, 41.0, 41.3, 41.6, 41.8, 42.2, 42.5, 42.9, 43.3, 43.8, 44.3, 44.8, 45.4, 46.0, 46.7, 47.4, 48.2, 49.0, 48.7, 49.5, 49.2, 49.0, 49.2, 49.8, 49.5, 49.8, 50.0, 50.6, 50.5, 50.8, 51.1, 52.2, 52.2, 52.4, 52.6, 52.9, 52.2, 51.5, 50.9, 50.4, 49.8, 50.4, 50.0, 49.5, 49.2, 48.8, 48.5, 48.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 49.1, 49.1, 49.1, 49.2, 49.3, 49.4, 49.6, 50.8, 51.0, 51.3, 51.6, 51.9, 52.3, 52.7, 54.2, 54.7, 54.9, 54.7, 55.4, 55.7, 55.6, 56.4, 56.5, 56.1, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 54.0, 54.2, 54.4, 54.6, 54.8, 55.1, 55.4, 54.5, 53.7, 52.9, 52.2, 51.5, 50.9, 50.4, 49.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 49.8, 50.4, 50.9, 51.5, 52.2, 52.9, 53.7, 54.5, 55.4, 55.1, 54.8, 54.6, 54.4, 54.2, 54.0, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 56.1, 56.5, 56.4, 55.6, 55.7, 55.4, 54.7, 54.9, 54.7, 54.2, 52.7, 52.3, 51.9, 51.6, 51.3, 51.0, 50.8, 49.6, 49.4, 49.3, 49.2, 49.1, 49.1, 49.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 48.2, 48.5, 48.8, 49.2, 49.5, 50.0, 50.4, 49.8, 50.4, 50.9, 51.5, 52.2, 52.9, 52.6, 52.4, 52.2, 52.2, 51.1, 50.8, 50.5, 50.6, 50.0, 49.8, 49.5, 49.8, 49.2, 49.0, 49.2, 49.5, 48.7, 49.0, 48.2, 47.4, 46.7, 46.0, 45.4, 44.8, 44.3, 43.8, 43.3, 42.9, 42.5, 42.2, 41.8, 41.6, 41.3, 41.0, 40.8, 40.6, 40.5, 40.4, 40.2, 40.2, 40.1, 40.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 48.5, 48.8, 48.1, 47.4, 47.5, 47.2, 46.6, 46.9, 46.5, 46.0, 45.4, 46.0, 45.5, 45.0, 45.8, 45.3, 45.4, 45.6, 45.3, 46.0, 45.9, 45.6, 46.7, 46.5, 46.2, 46.3, 47.3, 47.2, 47.4, 47.8, 48.6, 48.6, 49.0, 48.7, 48.8, 48.2, 48.7, 48.2, 47.7, 48.3, 47.8, 47.9, 48.1, 47.8, 48.5, 48.2, 48.0, 48.8, 48.6, 49.1, 49.3, 49.2, 48.1, 48.1, 48.1, 47.1, 47.1, 47.2, 47.3, 47.4, 46.6, 46.7, 46.2, 46.2, 46.4, 45.7, 46.0, 46.4, 45.7, 46.1, 46.6, 46.9, 46.5, 47.1, 46.7, 47.2, 47.9, 47.4, 48.2, 47.8, 48.6, 48.3, 48.9, 48.9, 48.6, 48.4, 48.1, 48.4, 47.7, 47.6, 47.9, 48.3, 47.4, 47.8, 48.2, 47.4, 47.9, 48.3, 48.8, 48.2, 48.7, 49.3, 48.8, 48.3, 47.8, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 47.8, 48.3, 48.8, 49.3, 48.7, 48.2, 48.8, 48.3, 47.9, 47.4, 48.2, 47.8, 47.4, 48.3, 47.9, 47.6, 47.7, 48.4, 48.1, 48.4, 48.6, 48.9, 48.9, 48.3, 48.6, 47.8, 48.2, 47.4, 47.9, 47.2, 46.7, 47.1, 46.5, 46.9, 46.6, 46.1, 45.7, 46.4, 46.0, 45.7, 46.4, 46.2, 46.2, 46.7, 46.6, 47.4, 47.3, 47.2, 47.1, 47.1, 48.1, 48.1, 48.1, 48.2, 49.3, 49.1, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.9, 47.8, 48.3, 47.7, 48.2, 48.7, 48.2, 48.8, 48.7, 49.0, 48.6, 48.6, 47.8, 47.4, 47.2, 47.3, 46.3, 46.2, 46.5, 46.7, 45.6, 45.9, 46.0, 45.3, 45.6, 45.4, 45.3, 45.8, 45.0, 45.5, 46.0, 45.4, 46.0, 46.5, 46.9, 46.6, 47.2, 47.5, 47.4, 48.1, 48.8, 48.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 51.1, 51.1, 50.1, 50.2, 49.3, 49.4, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.4, 47.8, 47.3, 47.7, 47.1, 47.6, 48.2, 47.7, 48.3, 47.9, 48.6, 48.6, 49.0, 48.7, 49.5, 50.5, 50.2, 50.7, 51.1, 51.0, 52.3, 52.7, 52.1, 51.8, 50.8, 51.1, 50.4, 50.6, 49.8, 50.2, 49.5, 48.8, 49.3, 49.2, 49.3, 48.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 47.8, 48.1, 48.5, 48.9, 48.3, 48.8, 49.3, 48.7, 49.3, 48.8, 49.5, 49.0, 49.8, 50.4, 50.2, 50.4, 50.8, 50.5, 50.6, 49.2, 49.4, 48.1, 47.9, 47.3, 47.5, 46.6, 45.7, 46.1, 45.3, 45.0, 45.0, 44.8, 44.9, 44.3, 44.5, 44.3, 43.8, 44.4, 44.0, 43.6, 44.3, 43.9, 44.7, 44.4, 44.1, 44.9, 44.7, 44.5, 45.4, 45.3, 46.2, 46.1, 46.1, 47.1, 46.1, 46.1, 46.2, 45.3, 45.4, 44.5, 44.7, 44.9, 44.1, 44.4, 44.7, 43.9, 44.3, 43.6, 44.0, 44.4, 43.8, 44.3, 44.5, 44.3, 44.7, 44.4, 45.0, 45.0, 45.3, 46.1, 45.7, 46.6, 47.5, 47.3, 47.9, 48.1, 49.4, 49.2, 50.6, 50.5, 50.8, 50.4, 50.2, 50.4, 49.8, 49.0, 49.5, 48.8, 49.0, 48.7, 49.3, 48.8, 48.3, 48.9, 48.5, 48.1, 47.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 48.8, 49.3, 49.2, 49.3, 48.8, 49.5, 50.2, 49.8, 50.6, 50.4, 51.1, 50.8, 51.8, 52.1, 52.7, 52.3, 51.0, 51.1, 50.7, 50.2, 49.2, 49.5, 48.7, 49.0, 48.6, 48.6, 47.9, 48.3, 47.7, 48.2, 47.6, 47.1, 47.7, 47.3, 47.8, 47.4, 48.1, 47.8, 48.5, 48.2, 48.0, 48.8, 48.6, 49.4, 49.3, 50.2, 50.1, 51.1, 38.0, 38.1, 37.1, 37.2, 36.2, 35.3, 34.4, 34.6, 34.7, 33.9, 33.0, 33.3, 32.4, 32.7, 32.7, 32.2, 31.4, 31.8, 31.0, 31.4, 31.8, 31.1, 31.2, 30.8, 30.6, 30.6, 31.2, 30.9, 31.1, 30.7, 31.1, 30.5, 31.2, 31.8, 31.3, 31.7, 31.6, 32.6, 32.4, 33.0, 32.5, 33.2, 33.1, 34.5, 34.1, 34.8, 35.1, 35.1, 36.6, 36.5, 37.2, 38.0, 37.9, 39.5, 40.3, 41.0, 41.1, 42.7, 43.5, 45.4, 46.3, 47.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 42.9, 42.1, 41.3, 41.3, 40.8, 40.1, 39.3, 39.0, 39.0, 38.3, 37.5, 37.0, 36.3, 36.6, 36.2, 35.6, 36.0, 35.5, 35.3, 35.6, 35.0, 35.3, 35.1, 34.9, 34.0, 34.6, 34.3, 34.4, 34.7, 34.3, 34.9, 34.8, 34.9, 35.6, 35.1, 35.7, 36.1, 35.9, 36.6, 36.1, 36.6, 36.5, 37.2, 38.0, 37.9, 38.4, 39.2, 40.0, 40.8, 41.0, 41.5, 41.4, 42.3, 43.2, 44.1, 45.1, 46.1, 45.1, 44.1, 43.2, 42.3, 41.4, 41.5, 41.0, 40.8, 40.0, 39.2, 38.4, 37.9, 38.0, 37.2, 36.5, 36.6, 36.1, 36.6, 35.9, 36.1, 35.7, 35.1, 35.6, 34.9, 34.8, 34.9, 34.3, 34.7, 34.4, 34.3, 34.6, 34.0, 34.9, 35.1, 35.3, 35.0, 35.6, 35.3, 35.5, 36.0, 35.6, 36.2, 36.6, 36.3, 37.0, 37.5, 38.3, 39.0, 38.9, 39.3, 40.1, 40.8, 41.3, 41.3, 42.1, 42.9, 43.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 47.2, 46.3, 44.4, 43.5, 42.7, 41.1, 41.0, 40.3, 39.5, 37.9, 38.0, 37.2, 36.5, 36.6, 35.1, 35.1, 34.8, 34.1, 34.5, 33.1, 33.2, 32.5, 33.0, 32.4, 32.6, 31.6, 31.7, 31.3, 31.8, 31.2, 30.5, 31.1, 30.7, 31.1, 30.9, 31.2, 30.6, 30.6, 30.8, 31.2, 31.1, 31.8, 31.4, 31.0, 31.8, 31.4, 32.2, 32.7, 32.7, 32.4, 33.3, 33.0, 33.9, 34.7, 34.6, 34.4, 35.3, 36.2, 37.2, 37.1, 38.1, 20.0, 20.1, 20.1, 21.1, 21.2, 21.2, 22.3, 22.4, 22.5, 22.6, 22.7, 23.9, 24.1, 24.3, 24.5, 24.7, 26.0, 26.3, 27.7, 28.0, 28.4, 29.9, 30.4, 32.0, 32.5, 34.3, 34.9, 35.6, 37.6, 39.7, 41.9, 44.2, 46.7, 47.9, 52.2, 55.2, 58.3, 58.4, 57.3, 56.3, 55.4, 54.5, 53.7, 54.1, 53.3, 52.7, 52.0, 51.5, 50.9, 50.4, 51.0, 50.6, 50.2, 49.9, 49.5, 49.2, 49.0, 49.8, 49.6, 49.4, 49.3, 49.2, 49.1, 49.1, 50.1, 50.1, 50.1, 50.2, 50.3, 50.4, 50.6, 51.8, 52.0, 52.3, 52.6, 53.0, 53.3, 53.8, 55.3, 55.8, 56.3, 56.9, 57.6, 59.4, 60.1, 61.0, 61.8, 62.8, 65.0, 66.1, 67.3, 68.5, 69.9, 65.9, 61.1, 56.6, 53.8, 51.1, 48.6, 46.3, 44.0, 41.9, 39.9, 38.0, 37.3, 35.6, 35.0, 33.4, 31.8, 31.4, 29.9, 29.6, 29.3, 29.0, 27.7, 27.4, 26.2, 26.0, 25.8, 24.6, 24.5, 24.4, 24.3, 23.2, 23.2, 23.1, 23.1, 22.1, 22.0, 22.1, 22.1, 22.1, 21.2, 21.2, 21.3, 21.4, 20.6, 20.5, 20.7, 20.8, 20.7, 20.1, 20.2, 20.4, 20.6, 20.8, 21.1, 20.2, 20.5, 20.7, 21.0, 20.6, 20.5, 20.8, 21.2, 21.2, 20.7, 21.2, 21.6, 22.1, 22.7, 22.1, 22.4, 23.0, 23.3, 22.9, 23.6, 24.4, 24.1, 24.3, 25.3, 26.4, 26.1, 26.7, 27.7, 27.4, 28.8, 29.0, 29.7, 31.6, 31.4, 33.3, 33.0, 34.9, 35.9, 37.6, 39.5, 40.9, 42.3, 44.2, 46.1, 49.1, 51.1, 48.1, 46.1, 43.2, 41.2, 40.9, 38.5, 35.6, 35.7, 33.9, 33.0, 31.2, 31.1, 29.5, 29.7, 27.8, 27.1, 27.2, 25.8, 24.7, 25.0, 24.4, 23.4, 23.7, 23.4, 22.6, 21.9, 21.6, 22.0, 21.5, 20.9, 20.8, 21.3, 20.8, 20.3, 19.9, 19.5, 19.6, 20.0, 19.6, 19.3, 19.0, 18.7, 18.4, 19.1, 19.1, 18.9, 18.6, 18.5, 19.3, 19.2, 19.0, 18.9, 18.7, 18.6, 18.5, 19.4, 19.3, 19.3, 19.2, 20.1, 20.1, 20.1, 20.1, 53.1, 52.1, 52.1, 51.2, 50.3, 49.4, 48.6, 47.8, 48.0, 47.2, 46.4, 45.7, 46.0, 45.3, 44.7, 45.1, 44.5, 44.5, 44.3, 43.7, 44.3, 43.7, 43.2, 43.0, 43.3, 43.5, 43.6, 43.2, 44.0, 43.6, 43.2, 43.6, 43.9, 44.2, 44.6, 44.4, 45.3, 45.6, 45.4, 45.3, 46.8, 46.8, 46.7, 48.3, 48.8, 49.0, 49.2, 50.4, 50.9, 52.6, 52.1, 51.7, 51.3, 50.9, 49.5, 49.2, 49.0, 48.8, 47.6, 47.4, 47.3, 47.2, 46.1, 46.1, 46.1, 46.1, 45.1, 45.2, 45.3, 45.4, 45.5, 44.7, 44.9, 45.1, 45.4, 45.0, 45.0, 45.3, 45.7, 45.1, 45.5, 44.9, 45.4, 44.8, 45.4, 44.9, 45.5, 46.2, 45.8, 46.5, 46.1, 47.0, 46.6, 47.5, 47.3, 47.9, 48.1, 48.4, 49.2, 49.0, 50.5, 50.4, 51.1, 50.2, 49.4, 48.6, 49.0, 48.3, 47.7, 47.1, 47.6, 47.1, 46.6, 46.1, 46.8, 46.4, 46.0, 45.7, 45.4, 46.2, 45.9, 45.7, 46.6, 46.4, 46.3, 46.2, 46.1, 47.1, 47.1, 47.1, 46.1, 46.2, 46.3, 46.4, 46.6, 45.7, 45.9, 46.2, 45.4, 45.7, 46.0, 46.4, 46.8, 46.1, 46.6, 47.1, 47.6, 47.1, 47.7, 48.3, 49.0, 48.6, 49.4, 50.2, 51.1, 50.4, 50.5, 49.0, 49.2, 48.4, 48.1, 47.9, 47.3, 47.5, 46.6, 47.0, 46.1, 46.5, 45.8, 46.2, 45.5, 44.9, 45.4, 44.8, 45.4, 44.9, 45.5, 45.1, 45.7, 45.3, 45.0, 45.0, 45.4, 45.1, 44.9, 44.7, 45.5, 45.4, 45.3, 45.2, 45.1, 46.1, 46.1, 46.1, 46.1, 47.2, 47.3, 47.4, 47.6, 48.8, 49.0, 49.2, 49.5, 49.9, 51.3, 51.7, 52.1, 52.6, 50.9, 50.4, 49.2, 49.0, 48.8, 48.3, 46.7, 46.8, 46.8, 45.3, 45.4, 45.6, 45.3, 44.4, 44.6, 44.2, 43.9, 43.6, 43.2, 43.6, 44.0, 43.2, 43.6, 43.5, 43.3, 43.0, 43.2, 43.7, 44.3, 43.7, 44.3, 44.5, 44.4, 44.5, 44.7, 45.3, 46.0, 45.7, 46.4, 47.2, 47.0, 47.8, 48.6, 49.4, 50.3, 51.2, 52.1, 52.1, 35.0, 35.1, 34.1, 33.1, 33.2, 32.7, 32.4, 31.5, 31.7, 31.8, 31.0, 30.1, 30.4, 30.6, 29.8, 30.1, 29.3, 29.6, 29.9, 29.2, 29.5, 28.8, 29.2, 29.6, 28.9, 29.4, 28.7, 29.2, 29.8, 29.1, 29.7, 29.1, 29.7, 30.4, 29.8, 30.4, 30.0, 30.9, 31.2, 31.3, 31.3, 31.8, 31.5, 32.5, 32.9, 33.4, 33.2, 34.6, 34.7, 35.4, 35.7, 36.9, 37.7, 37.5, 39.2, 40.0, 41.1, 41.7, 42.5, 44.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 47.2, 45.3, 44.4, 42.5, 41.7, 41.1, 40.0, 39.2, 37.5, 37.7, 36.9, 35.7, 35.4, 34.7, 34.6, 33.2, 33.4, 32.9, 32.5, 32.7, 31.8, 31.3, 31.3, 31.2, 30.9, 30.0, 30.4, 29.8, 30.4, 29.7, 29.1, 29.7, 29.1, 29.8, 29.2, 28.7, 29.4, 28.9, 29.6, 29.2, 28.8, 29.5, 29.2, 29.9, 29.6, 29.3, 30.1, 29.8, 30.6, 30.4, 30.1, 31.0, 31.8, 31.7, 31.5, 32.4, 32.7, 33.2, 33.1, 34.1, 35.1, 35.0, 35.1, 36.1, 37.2, 37.2, 38.3, 39.5, 39.6, 40.8, 43.1, 43.3, 44.7, 46.0, 47.4, 48.9, 51.5, 52.0, 54.7, 55.4, 55.7, 55.2, 54.8, 54.5, 54.5, 54.2, 53.9, 53.8, 54.6, 54.4, 54.2, 54.0, 53.9, 55.2, 55.2, 55.1, 55.2, 55.2, 55.9, 56.1, 56.3, 56.6, 58.0, 58.3, 58.7, 59.0, 58.3, 58.7, 58.0, 58.5, 58.4, 58.5, 58.0, 57.5, 57.1, 56.7, 56.4, 56.1, 55.9, 55.7, 56.5, 56.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 56.3, 56.5, 55.7, 55.9, 56.1, 56.4, 56.7, 57.1, 57.5, 58.0, 58.5, 57.9, 58.5, 59.1, 58.7, 58.3, 57.9, 58.7, 58.3, 56.9, 56.6, 56.3, 56.1, 55.3, 55.2, 55.2, 55.1, 55.2, 53.8, 53.9, 54.0, 54.2, 53.6, 53.7, 53.8, 53.9, 54.2, 54.3, 54.5, 54.8, 55.2, 54.9, 55.4, 53.6, 52.0, 50.4, 48.9, 47.4, 46.0, 44.7, 43.3, 42.1, 40.8, 39.6, 39.5, 38.3, 37.2, 37.2, 36.1, 35.1, 39.1, 39.1, 39.1, 39.2, 39.2, 39.3, 39.5, 39.6, 39.8, 40.0, 40.3, 40.5, 40.8, 41.1, 41.5, 41.9, 42.3, 42.7, 43.2, 43.7, 44.3, 44.9, 45.5, 46.2, 47.0, 47.8, 48.6, 48.3, 48.9, 48.9, 48.6, 48.4, 48.1, 48.4, 48.6, 49.0, 49.2, 49.5, 49.9, 50.2, 50.4, 50.5, 51.3, 51.8, 51.1, 50.4, 50.9, 50.4, 49.8, 49.4, 48.9, 49.5, 49.2, 48.8, 48.5, 48.2, 48.0, 48.8, 48.6, 48.4, 48.3, 48.2, 49.1, 49.1, 49.1, 49.1, 49.1, 49.2, 50.3, 50.4, 50.6, 50.8, 51.0, 52.3, 52.6, 53.0, 53.3, 53.8, 54.2, 54.7, 54.2, 54.7, 55.4, 56.0, 55.6, 56.4, 56.0, 55.7, 55.4, 55.1, 53.8, 53.7, 53.6, 53.6, 53.7, 53.7, 53.8, 52.5, 52.7, 52.9, 53.1, 53.3, 53.6, 52.6, 51.8, 50.9, 50.2, 49.5, 48.8, 48.2, 47.6, 47.1, 46.6, 46.1, 45.7, 45.3, 45.0, 44.7, 44.4, 44.1, 43.9, 43.7, 43.5, 43.4, 43.3, 43.2, 43.1, 43.1, 43.1, 43.1, 43.1, 43.2, 43.3, 43.4, 43.5, 43.7, 43.9, 44.1, 44.4, 44.7, 45.0, 45.3, 45.7, 46.1, 46.6, 47.1, 47.6, 48.2, 48.8, 49.5, 50.2, 50.9, 51.8, 52.6, 53.6, 53.3, 53.1, 52.9, 52.7, 52.5, 53.8, 53.7, 53.7, 53.6, 53.6, 53.7, 53.8, 55.1, 55.4, 55.7, 56.0, 56.4, 55.6, 56.0, 55.4, 54.7, 54.2, 54.7, 54.2, 53.8, 53.3, 53.0, 52.6, 52.3, 51.0, 50.8, 50.6, 50.4, 50.3, 49.2, 49.1, 49.1, 49.1, 49.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 48.0, 48.2, 48.5, 48.8, 49.2, 48.5, 48.9, 49.4, 49.8, 50.4, 50.9, 50.4, 51.1, 51.8, 50.6, 50.5, 50.4, 50.2, 49.9, 49.5, 49.2, 49.0, 48.6, 48.4, 48.1, 48.4, 48.6, 48.9, 48.9, 48.3, 48.6, 47.8, 47.0, 46.2, 45.5, 44.9, 44.3, 43.7, 43.2, 42.7, 42.3, 41.9, 41.5, 41.1, 40.8, 40.5, 40.3, 40.0, 39.8, 39.6, 39.5, 39.3, 39.2, 39.2, 39.1, 39.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 47.9, 47.8, 48.3, 47.7, 48.2, 47.6, 47.1, 47.7, 47.2, 46.7, 47.4, 47.0, 46.9, 47.4, 47.2, 47.3, 47.6, 47.7, 47.9, 48.1, 47.9, 47.7, 47.6, 47.9, 48.3, 48.6, 48.7, 48.6, 48.6, 48.7, 48.3, 48.8, 48.2, 47.6, 48.2, 47.7, 47.3, 47.8, 47.9, 48.1, 47.8, 48.5, 48.2, 48.0, 48.8, 48.6, 49.1, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 47.1, 47.2, 47.3, 47.4, 47.6, 46.7, 47.0, 47.2, 46.4, 46.7, 47.1, 46.4, 46.8, 47.2, 46.6, 47.1, 47.6, 47.1, 47.7, 48.3, 47.9, 48.6, 48.2, 48.7, 48.6, 48.3, 48.9, 47.6, 47.7, 47.9, 48.1, 47.0, 47.3, 47.5, 47.3, 47.0, 47.1, 46.9, 47.0, 47.4, 46.7, 47.2, 47.7, 47.1, 47.6, 48.2, 47.7, 48.3, 47.8, 48.5, 48.1, 48.8, 48.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 48.5, 48.8, 48.1, 48.5, 47.8, 48.3, 47.7, 48.2, 47.6, 47.1, 47.7, 47.2, 46.7, 47.4, 47.0, 46.9, 47.1, 47.0, 47.3, 47.5, 47.3, 47.0, 48.1, 47.9, 47.7, 47.6, 48.9, 48.3, 48.6, 48.7, 48.2, 48.6, 47.9, 48.3, 47.7, 47.1, 47.6, 47.1, 46.6, 47.2, 46.8, 46.4, 47.1, 46.7, 46.4, 47.2, 47.0, 46.7, 47.6, 47.4, 47.3, 47.2, 47.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 49.1, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.9, 47.8, 47.3, 47.7, 48.2, 47.6, 48.2, 48.8, 48.3, 48.7, 48.6, 48.6, 48.7, 48.6, 48.3, 47.9, 47.6, 47.7, 47.9, 48.1, 47.9, 47.7, 47.6, 47.3, 47.2, 47.4, 46.9, 47.0, 47.4, 46.7, 47.2, 47.7, 47.1, 47.6, 48.2, 47.7, 48.3, 47.8, 47.9, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 53.1, 52.1, 52.1, 51.2, 51.3, 50.4, 50.6, 49.8, 50.0, 49.2, 49.5, 48.8, 49.2, 48.5, 48.9, 49.4, 48.8, 49.3, 48.7, 49.0, 48.8, 49.5, 49.0, 49.8, 49.4, 50.2, 50.4, 50.8, 50.5, 51.6, 51.3, 52.5, 52.4, 52.5, 52.7, 51.6, 51.8, 50.8, 51.1, 50.2, 50.4, 49.8, 50.2, 49.5, 48.8, 49.3, 48.7, 49.3, 48.8, 48.3, 48.9, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 48.8, 48.3, 48.5, 47.8, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 49.0, 48.6, 49.4, 49.0, 49.9, 49.5, 49.2, 50.2, 50.0, 49.8, 49.5, 49.4, 48.6, 47.6, 47.9, 47.2, 47.4, 46.5, 46.8, 46.2, 45.5, 46.0, 45.4, 46.0, 45.4, 44.9, 45.5, 45.1, 45.7, 45.3, 45.0, 45.7, 45.4, 45.7, 45.9, 46.7, 46.6, 46.4, 47.3, 47.2, 48.1, 48.1, 48.1, 48.1, 48.1, 47.2, 47.3, 46.4, 46.6, 46.7, 45.9, 45.7, 45.4, 45.7, 45.0, 45.3, 45.7, 45.1, 45.5, 44.9, 45.4, 46.0, 45.4, 46.0, 45.5, 46.2, 46.8, 46.5, 47.4, 47.2, 47.9, 47.6, 48.6, 49.4, 49.5, 49.8, 50.0, 49.0, 49.2, 49.5, 49.9, 49.0, 49.4, 48.6, 49.0, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 47.8, 48.5, 48.3, 48.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 48.9, 48.3, 48.8, 49.3, 48.7, 49.3, 48.8, 49.5, 50.2, 49.8, 50.4, 50.2, 51.1, 50.8, 51.8, 51.6, 52.7, 52.5, 52.4, 52.5, 51.3, 51.6, 50.5, 50.8, 50.4, 50.2, 49.4, 49.8, 49.0, 49.5, 48.8, 49.0, 48.7, 49.3, 48.8, 49.4, 48.9, 48.5, 49.2, 48.8, 49.5, 49.2, 50.0, 49.8, 50.6, 50.4, 51.3, 51.2, 52.1, 52.1, 35.0, 35.1, 34.1, 33.1, 33.2, 32.7, 32.4, 32.5, 31.7, 31.8, 31.0, 31.2, 31.1, 30.6, 29.8, 30.1, 30.4, 29.7, 29.9, 29.2, 29.5, 29.9, 29.2, 29.6, 30.1, 29.6, 29.9, 29.3, 29.8, 30.4, 29.8, 30.4, 29.7, 30.5, 31.1, 30.7, 31.6, 31.8, 31.9, 31.9, 32.4, 33.2, 33.1, 33.4, 34.0, 34.8, 35.1, 36.1, 36.6, 36.5, 38.3, 38.3, 38.7, 40.5, 41.2, 41.1, 41.9, 43.7, 44.5, 45.4, 46.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 46.3, 45.4, 44.5, 43.7, 41.9, 41.1, 41.2, 40.5, 38.7, 38.3, 38.3, 37.6, 36.9, 37.1, 35.4, 35.6, 35.2, 34.5, 35.0, 34.4, 34.2, 33.1, 33.6, 33.0, 33.2, 33.1, 32.8, 33.2, 32.6, 32.0, 32.4, 32.2, 32.4, 32.6, 32.4, 33.0, 32.5, 32.0, 32.7, 32.5, 32.9, 33.4, 33.2, 34.0, 33.6, 33.4, 34.0, 34.8, 34.5, 35.3, 36.1, 35.9, 35.9, 36.6, 37.5, 38.3, 39.2, 39.2, 40.1, 40.8, 41.1, 40.8, 40.1, 39.2, 39.2, 38.3, 37.5, 36.6, 35.9, 35.9, 36.1, 35.3, 34.5, 34.8, 34.0, 33.4, 33.6, 34.0, 33.2, 33.4, 32.9, 32.5, 32.7, 32.0, 32.5, 33.0, 32.4, 32.6, 32.4, 32.2, 32.4, 32.0, 32.6, 33.2, 32.8, 33.1, 33.2, 33.0, 33.6, 33.1, 34.2, 34.4, 35.0, 34.5, 35.2, 35.6, 35.4, 37.1, 36.9, 37.6, 38.3, 38.3, 38.7, 40.5, 41.2, 41.1, 41.9, 42.7, 44.5, 45.4, 46.3, 47.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 46.3, 45.4, 44.5, 43.7, 41.9, 41.1, 41.2, 40.5, 38.7, 38.3, 38.3, 36.5, 36.6, 35.1, 35.1, 34.8, 34.0, 33.4, 33.1, 33.2, 32.4, 31.9, 31.9, 31.8, 31.6, 30.7, 31.1, 30.5, 29.7, 30.4, 29.8, 30.4, 29.8, 29.3, 29.9, 29.6, 30.1, 29.6, 29.2, 29.9, 29.5, 29.2, 29.9, 29.7, 30.4, 30.1, 29.8, 30.6, 31.1, 31.2, 31.0, 31.8, 31.7, 31.5, 32.4, 32.7, 33.2, 33.1, 34.1, 35.1, 20.0, 20.1, 20.1, 21.1, 21.2, 21.2, 21.3, 21.4, 22.5, 22.6, 22.7, 22.9, 23.0, 24.3, 24.5, 24.7, 24.9, 26.3, 26.6, 26.9, 27.3, 28.8, 29.2, 29.6, 31.3, 31.9, 33.7, 34.3, 36.3, 37.0, 39.2, 40.1, 42.5, 45.0, 46.2, 47.5, 48.9, 52.1, 53.8, 55.1, 54.2, 53.3, 52.5, 52.8, 52.2, 51.5, 50.9, 50.4, 50.9, 50.4, 50.0, 49.5, 49.2, 48.8, 49.5, 49.2, 49.0, 48.8, 48.6, 49.4, 49.3, 49.2, 49.1, 49.1, 49.1, 50.1, 50.1, 50.2, 50.3, 51.4, 51.6, 51.8, 52.0, 52.3, 52.6, 54.0, 54.4, 54.8, 55.3, 56.9, 57.4, 58.0, 59.8, 60.5, 61.3, 62.1, 64.2, 65.2, 66.2, 68.5, 65.5, 60.2, 55.2, 52.1, 49.2, 46.5, 43.9, 41.5, 39.2, 38.3, 36.3, 35.6, 33.7, 31.9, 31.3, 29.6, 29.2, 28.8, 27.3, 26.9, 25.5, 25.2, 24.9, 24.7, 23.4, 23.2, 23.0, 22.9, 22.7, 21.6, 21.5, 21.4, 20.3, 20.2, 20.1, 20.1, 20.1, 20.1, 20.0, 19.1, 19.1, 19.1, 19.1, 19.2, 19.3, 18.3, 18.4, 18.5, 18.6, 18.7, 17.8, 18.0, 18.1, 18.3, 18.5, 18.6, 18.8, 18.0, 18.2, 18.4, 18.7, 19.0, 19.3, 19.2, 18.7, 19.1, 19.5, 19.9, 19.4, 19.4, 19.8, 20.4, 20.9, 21.2, 20.7, 21.2, 21.9, 22.6, 22.9, 22.5, 23.4, 24.2, 23.9, 24.5, 25.8, 26.3, 26.2, 27.8, 28.7, 28.7, 30.4, 30.1, 33.0, 32.8, 35.7, 35.6, 37.5, 40.4, 40.9, 43.2, 45.1, 48.1, 51.1, 49.1, 46.1, 44.2, 41.2, 40.9, 39.5, 36.6, 35.9, 34.9, 33.0, 33.3, 31.1, 30.6, 29.7, 29.0, 28.8, 27.2, 26.6, 26.7, 25.5, 25.3, 25.3, 24.3, 23.4, 23.3, 23.6, 22.8, 22.1, 22.5, 22.4, 21.8, 21.3, 20.8, 20.9, 21.2, 20.7, 20.3, 20.0, 19.6, 19.8, 20.2, 19.9, 19.6, 19.3, 19.1, 18.9, 19.7, 19.5, 19.3, 19.2, 19.0, 18.9, 18.8, 19.6, 19.5, 19.4, 19.3, 19.3, 19.2, 20.1, 20.1, 20.1, 20.1, 54.1, 54.1, 53.1, 52.2, 51.3, 50.4, 50.6, 49.8, 49.0, 48.2, 48.5, 47.8, 47.1, 47.4, 46.8, 46.1, 46.6, 46.0, 45.4, 46.0, 45.4, 44.9, 45.5, 45.0, 45.0, 45.3, 45.4, 45.6, 45.3, 46.0, 45.9, 45.6, 46.7, 46.5, 46.2, 47.5, 47.3, 47.2, 47.4, 48.7, 48.6, 48.6, 50.2, 50.6, 51.0, 51.5, 52.0, 53.6, 53.1, 52.6, 51.0, 50.6, 50.2, 49.9, 49.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 45.2, 45.3, 45.4, 45.5, 45.7, 45.9, 45.1, 45.4, 45.7, 46.0, 46.4, 46.8, 46.1, 46.6, 47.1, 46.8, 46.8, 46.5, 46.7, 46.7, 46.2, 46.8, 46.5, 46.1, 47.0, 46.6, 46.3, 47.3, 47.0, 46.7, 47.9, 47.7, 47.6, 47.9, 47.0, 47.1, 46.5, 46.8, 46.2, 46.7, 46.0, 46.5, 46.0, 46.5, 46.0, 45.5, 46.1, 45.7, 46.4, 46.0, 46.7, 46.4, 47.2, 47.0, 47.8, 47.8, 48.4, 48.3, 49.2, 49.1, 50.1, 50.1, 50.1, 49.1, 49.2, 48.3, 48.4, 47.6, 47.8, 47.0, 47.2, 46.4, 46.7, 46.0, 46.4, 45.7, 46.1, 45.5, 46.0, 46.5, 46.0, 46.5, 46.0, 46.7, 46.2, 46.8, 46.5, 47.1, 47.0, 47.9, 47.6, 47.7, 47.9, 46.7, 47.0, 47.3, 46.3, 46.6, 47.0, 46.1, 46.5, 46.8, 46.2, 46.7, 46.7, 46.5, 46.8, 46.8, 47.1, 46.6, 46.1, 46.8, 46.4, 46.0, 45.7, 45.4, 45.1, 45.9, 45.7, 45.5, 45.4, 45.3, 45.2, 45.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 49.9, 50.2, 50.6, 51.0, 51.5, 53.1, 53.6, 52.0, 51.5, 51.0, 50.6, 50.2, 48.6, 48.6, 48.7, 47.4, 47.2, 47.3, 46.3, 46.2, 46.5, 46.7, 45.6, 45.9, 46.0, 45.3, 45.6, 45.4, 45.3, 45.0, 45.0, 45.5, 44.9, 45.4, 46.0, 45.4, 46.0, 46.6, 46.1, 46.8, 47.4, 47.1, 47.8, 48.5, 48.2, 49.0, 49.8, 49.6, 50.4, 51.3, 52.2, 53.1, 54.1, 34.0, 34.1, 33.1, 32.1, 32.2, 32.3, 31.4, 30.5, 30.6, 30.8, 29.9, 30.0, 29.3, 29.5, 29.7, 29.0, 28.8, 28.5, 28.8, 29.0, 28.4, 28.5, 28.0, 28.5, 28.8, 28.2, 28.6, 28.0, 28.5, 29.1, 28.4, 29.0, 29.7, 29.1, 29.7, 29.1, 30.0, 30.5, 30.3, 30.6, 30.6, 31.8, 31.5, 32.2, 31.9, 33.4, 33.2, 34.0, 34.0, 35.4, 35.7, 35.9, 37.7, 37.5, 38.2, 40.0, 40.8, 41.0, 42.5, 44.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 47.2, 45.3, 44.4, 42.5, 41.7, 41.1, 40.0, 39.2, 37.5, 37.7, 36.9, 35.7, 35.4, 34.7, 34.6, 34.3, 33.4, 32.9, 32.5, 32.7, 31.8, 31.3, 31.3, 31.2, 30.9, 30.0, 30.4, 29.8, 30.4, 29.7, 29.1, 29.7, 29.1, 29.8, 29.2, 28.7, 29.4, 28.9, 29.6, 29.2, 28.8, 29.5, 29.2, 29.9, 29.6, 29.3, 30.1, 29.8, 30.6, 30.4, 30.1, 31.0, 31.8, 31.7, 31.5, 32.4, 32.7, 33.2, 33.1, 34.1, 35.1, 35.0, 36.1, 36.1, 37.2, 38.2, 38.3, 39.5, 40.6, 40.8, 43.1, 43.3, 44.7, 46.0, 47.4, 48.9, 51.5, 52.0, 54.7, 56.5, 56.0, 55.6, 55.2, 54.8, 55.7, 55.4, 55.1, 54.8, 54.6, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.5, 55.7, 55.9, 57.1, 57.4, 57.6, 58.0, 58.4, 58.9, 59.0, 58.3, 58.7, 58.0, 58.5, 57.9, 57.4, 58.0, 57.5, 57.1, 56.7, 56.4, 56.1, 55.9, 55.7, 55.5, 55.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 56.3, 56.5, 56.7, 55.9, 56.1, 56.4, 56.7, 57.1, 57.5, 57.4, 57.4, 57.9, 58.5, 59.1, 58.7, 58.3, 57.9, 56.9, 56.5, 56.1, 55.8, 55.1, 54.8, 54.6, 53.6, 53.6, 53.7, 53.7, 52.4, 52.5, 52.7, 52.9, 52.1, 52.1, 52.3, 52.6, 52.2, 52.4, 52.5, 52.8, 53.1, 53.4, 53.1, 51.5, 50.9, 48.3, 46.8, 45.3, 43.9, 42.6, 42.3, 40.0, 39.8, 38.6, 37.5, 37.3, 36.2, 36.1, 35.1, 34.1, 38.0, 38.1, 38.1, 38.2, 38.2, 38.3, 38.5, 38.6, 38.8, 39.0, 39.2, 39.5, 39.8, 40.1, 40.4, 40.8, 41.2, 41.6, 42.1, 42.6, 43.1, 43.7, 44.4, 45.0, 45.8, 46.5, 47.1, 47.0, 46.6, 46.3, 47.3, 47.0, 46.7, 47.0, 47.3, 47.5, 47.3, 47.2, 47.4, 47.8, 48.2, 48.6, 48.7, 48.7, 48.8, 49.3, 49.8, 49.3, 48.8, 49.4, 48.9, 48.5, 48.1, 48.8, 48.5, 48.2, 48.0, 47.8, 48.6, 48.4, 48.3, 49.2, 49.1, 49.1, 49.1, 50.1, 50.1, 50.2, 50.3, 51.4, 51.6, 51.8, 53.1, 53.3, 52.6, 53.0, 53.3, 53.8, 54.2, 54.7, 54.2, 54.7, 55.4, 55.7, 55.2, 54.8, 54.5, 53.3, 53.0, 52.6, 52.1, 52.1, 51.8, 51.6, 50.7, 50.8, 51.0, 50.8, 50.0, 50.2, 50.5, 49.5, 48.7, 49.0, 48.2, 47.4, 46.7, 46.0, 45.4, 44.8, 44.3, 43.8, 43.3, 42.9, 42.5, 42.2, 41.8, 41.6, 41.3, 41.0, 40.8, 40.6, 40.5, 40.4, 40.2, 40.2, 40.1, 40.1, 40.1, 40.1, 40.1, 40.2, 40.2, 40.4, 40.5, 40.6, 40.8, 41.0, 41.3, 41.6, 41.8, 42.2, 42.5, 42.9, 43.3, 43.8, 44.3, 44.8, 45.4, 46.0, 46.7, 47.4, 48.2, 49.0, 48.7, 49.5, 50.5, 50.2, 50.0, 50.8, 51.0, 50.8, 50.7, 51.6, 51.8, 52.1, 52.1, 52.6, 53.0, 53.3, 54.5, 54.8, 55.2, 55.7, 55.4, 54.7, 54.2, 54.7, 54.2, 53.8, 53.3, 53.0, 52.6, 52.3, 52.0, 51.8, 51.6, 51.4, 50.3, 50.2, 50.1, 50.1, 49.1, 49.1, 49.1, 49.2, 48.3, 48.4, 48.6, 47.8, 48.0, 48.2, 48.5, 48.8, 48.1, 48.5, 48.9, 49.4, 48.8, 49.3, 49.8, 49.3, 48.8, 48.7, 48.7, 48.6, 48.2, 47.8, 47.4, 47.2, 47.3, 47.5, 47.3, 47.0, 46.7, 47.0, 47.3, 46.3, 46.6, 47.0, 47.1, 46.5, 45.8, 45.0, 44.4, 43.7, 43.1, 42.6, 42.1, 41.6, 41.2, 40.8, 40.4, 40.1, 39.8, 39.5, 39.2, 39.0, 38.8, 38.6, 38.5, 38.3, 38.2, 38.2, 38.1, 38.1, 47.1, 47.1, 47.1, 47.2, 47.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 48.8, 49.3, 48.7, 48.2, 48.8, 48.3, 47.9, 48.6, 48.2, 48.7, 48.6, 48.3, 48.9, 48.9, 48.6, 48.4, 48.1, 47.9, 47.7, 47.6, 47.9, 48.3, 47.4, 47.8, 48.2, 48.6, 47.9, 48.3, 47.7, 47.1, 47.6, 47.1, 47.7, 47.3, 47.8, 47.4, 48.1, 47.8, 48.5, 48.2, 48.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 47.0, 47.2, 47.5, 46.7, 47.1, 47.4, 47.5, 47.2, 47.7, 47.1, 47.6, 48.2, 47.7, 48.3, 49.0, 48.6, 48.6, 47.8, 47.4, 47.2, 47.3, 46.3, 46.2, 46.5, 45.3, 45.6, 45.9, 46.0, 45.3, 45.6, 45.4, 45.3, 45.0, 45.0, 45.5, 46.0, 45.4, 46.0, 46.5, 46.0, 46.6, 47.2, 47.5, 47.4, 48.1, 48.8, 48.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 48.5, 48.8, 48.1, 47.4, 47.5, 47.2, 46.6, 46.0, 46.5, 46.0, 45.4, 46.0, 45.5, 45.0, 45.0, 45.3, 45.4, 45.6, 45.3, 46.0, 45.9, 45.6, 45.3, 46.5, 46.2, 46.3, 47.3, 47.2, 47.4, 47.8, 48.2, 48.6, 48.7, 48.3, 47.7, 48.2, 47.6, 47.1, 47.7, 47.2, 46.8, 47.4, 47.1, 46.7, 47.5, 47.2, 47.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.4, 47.8, 47.3, 47.7, 47.1, 47.6, 47.1, 47.7, 48.3, 47.9, 48.6, 48.2, 47.8, 47.4, 48.3, 47.9, 47.6, 47.7, 47.9, 48.1, 48.4, 48.6, 48.9, 48.9, 48.3, 48.6, 48.7, 48.2, 48.6, 47.9, 48.3, 48.8, 48.2, 48.7, 49.3, 48.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 47.3, 47.2, 47.1, 47.1, 53.1, 52.1, 52.1, 52.2, 51.3, 50.4, 50.6, 49.8, 50.0, 50.3, 49.5, 48.8, 49.2, 49.5, 48.9, 49.4, 48.8, 49.3, 48.7, 49.3, 48.8, 49.5, 49.0, 49.8, 49.4, 50.2, 50.4, 50.8, 50.5, 51.6, 52.2, 52.5, 52.4, 52.5, 52.2, 51.6, 50.5, 50.8, 50.4, 50.2, 49.4, 49.8, 49.0, 49.5, 48.8, 49.0, 48.7, 49.3, 48.8, 48.3, 47.8, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 48.8, 48.1, 47.9, 47.8, 48.3, 47.7, 48.2, 47.6, 48.2, 48.8, 48.3, 48.7, 48.6, 48.6, 49.0, 49.9, 49.5, 50.5, 50.2, 50.7, 51.1, 51.0, 51.1, 50.7, 50.2, 49.2, 49.5, 48.7, 49.0, 48.2, 48.6, 47.9, 48.3, 47.7, 47.1, 47.6, 47.1, 47.7, 47.2, 47.5, 47.4, 48.1, 47.8, 48.5, 48.2, 48.0, 48.8, 48.6, 49.4, 49.3, 50.2, 50.1, 51.1, 51.1, 51.1, 50.1, 50.2, 49.3, 49.4, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.4, 47.5, 47.2, 47.7, 47.1, 47.6, 47.1, 47.7, 48.3, 47.9, 48.6, 48.2, 49.0, 48.7, 49.5, 49.2, 50.2, 50.7, 51.1, 51.0, 51.1, 50.7, 50.2, 50.5, 49.5, 49.9, 49.0, 48.6, 48.6, 48.7, 48.3, 48.8, 48.2, 47.6, 48.2, 47.7, 48.3, 47.8, 47.9, 48.1, 47.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 47.8, 48.3, 48.8, 49.3, 48.7, 49.0, 48.8, 49.5, 49.0, 49.8, 49.4, 50.2, 50.4, 50.8, 50.5, 51.6, 52.2, 52.5, 52.4, 52.5, 52.2, 51.6, 50.5, 50.8, 50.4, 50.2, 49.4, 49.8, 49.0, 49.5, 48.8, 49.3, 48.7, 49.3, 48.8, 49.4, 48.9, 48.5, 49.2, 48.8, 49.5, 50.3, 50.0, 49.8, 50.6, 50.4, 51.3, 52.2, 52.1, 52.1, 31.0, 31.1, 31.1, 30.1, 30.2, 30.3, 29.4, 29.5, 29.6, 28.7, 28.9, 29.1, 28.3, 28.5, 28.7, 27.9, 28.2, 28.5, 28.1, 28.0, 28.4, 28.5, 28.0, 28.5, 28.8, 28.2, 28.7, 29.2, 28.5, 29.1, 29.7, 29.1, 29.7, 30.4, 29.8, 30.7, 31.1, 30.9, 31.9, 31.9, 32.4, 33.2, 33.1, 34.5, 34.1, 35.6, 35.4, 37.1, 36.9, 38.6, 38.6, 40.1, 40.8, 41.3, 41.3, 42.1, 42.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 47.2, 46.3, 44.4, 43.5, 42.7, 41.1, 41.0, 40.3, 39.5, 37.9, 38.0, 37.2, 36.2, 35.8, 35.1, 35.1, 33.6, 34.0, 33.4, 33.1, 32.0, 32.4, 31.9, 31.9, 31.8, 31.6, 30.7, 31.1, 30.5, 31.2, 30.4, 29.8, 30.4, 30.0, 30.5, 29.9, 29.6, 30.1, 30.0, 30.4, 29.9, 29.7, 30.3, 30.5, 30.7, 30.4, 30.6, 30.9, 31.6, 31.4, 31.2, 32.0, 32.0, 32.7, 32.5, 33.4, 33.3, 34.2, 34.1, 35.1, 36.1, 36.0, 36.1, 35.1, 34.1, 34.2, 33.3, 33.4, 32.5, 32.7, 32.0, 32.0, 31.2, 31.4, 31.6, 30.9, 30.6, 30.4, 30.7, 30.5, 30.3, 29.7, 29.9, 30.4, 30.0, 30.1, 29.6, 29.9, 30.5, 30.0, 30.4, 29.8, 30.4, 31.2, 30.5, 31.1, 30.7, 31.6, 31.8, 31.9, 31.9, 32.4, 32.0, 33.1, 33.4, 34.0, 33.6, 35.1, 35.1, 35.8, 36.2, 37.2, 38.0, 37.9, 39.5, 40.3, 41.0, 41.1, 42.7, 43.5, 44.4, 46.3, 47.2, 48.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 42.9, 42.1, 41.3, 41.3, 40.8, 40.1, 38.6, 38.6, 36.9, 37.1, 35.4, 35.6, 34.1, 34.5, 33.1, 33.2, 32.4, 31.9, 31.9, 30.9, 31.1, 30.7, 29.8, 30.4, 29.7, 29.1, 29.7, 29.1, 28.5, 29.2, 28.7, 28.2, 28.8, 28.5, 28.0, 28.5, 28.4, 28.0, 28.1, 28.5, 28.2, 27.9, 28.7, 28.5, 28.3, 29.1, 28.9, 28.7, 29.6, 29.5, 29.4, 30.3, 30.2, 30.1, 31.1, 31.1, 21.0, 21.1, 21.1, 21.1, 22.2, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7, 23.9, 24.1, 24.3, 24.5, 24.7, 24.9, 26.3, 26.6, 26.9, 27.3, 27.6, 29.2, 29.6, 30.1, 31.9, 32.4, 33.0, 35.0, 35.7, 36.5, 38.7, 41.1, 42.1, 43.2, 44.4, 44.2, 45.6, 47.1, 47.8, 48.6, 50.5, 51.3, 50.6, 51.0, 50.4, 49.8, 49.3, 49.7, 49.4, 48.9, 48.5, 48.3, 48.8, 48.5, 48.2, 49.0, 48.8, 48.6, 48.4, 49.3, 49.2, 49.1, 49.1, 49.1, 50.1, 50.1, 50.2, 51.3, 51.4, 51.6, 51.8, 53.1, 53.3, 53.7, 55.0, 55.4, 55.9, 57.4, 57.9, 58.5, 60.2, 60.9, 61.6, 63.5, 64.4, 66.2, 63.6, 59.4, 57.4, 53.8, 52.1, 48.9, 47.5, 46.2, 43.6, 42.5, 40.1, 37.8, 37.0, 35.0, 34.3, 32.4, 31.9, 31.3, 29.6, 29.2, 28.8, 27.3, 26.9, 26.6, 26.3, 24.9, 24.7, 24.5, 24.3, 23.0, 22.9, 22.7, 22.6, 22.5, 21.4, 21.3, 21.2, 21.2, 21.1, 20.1, 20.1, 20.0, 20.1, 20.1, 20.1, 20.1, 19.2, 19.3, 19.3, 19.4, 19.5, 19.6, 18.8, 18.9, 19.0, 19.2, 19.3, 19.5, 19.7, 20.0, 20.1, 19.3, 19.6, 19.9, 20.2, 20.5, 20.8, 20.2, 20.3, 20.7, 21.2, 21.6, 21.8, 21.3, 21.8, 22.4, 23.0, 23.3, 22.9, 23.6, 24.4, 24.1, 24.3, 25.3, 25.3, 25.5, 26.7, 27.7, 27.4, 28.8, 29.0, 29.7, 30.6, 31.1, 33.3, 33.0, 34.9, 35.9, 37.6, 39.5, 40.9, 41.2, 44.2, 46.1, 49.1, 51.1, 49.1, 47.1, 45.2, 43.3, 40.9, 40.5, 38.6, 36.8, 36.6, 35.1, 33.8, 33.5, 31.9, 31.9, 30.6, 30.4, 29.7, 28.1, 28.0, 27.6, 26.5, 26.9, 26.2, 25.3, 25.7, 25.2, 24.4, 24.6, 24.5, 23.9, 23.3, 22.7, 23.3, 23.0, 22.5, 22.0, 21.6, 21.9, 22.1, 21.7, 21.4, 21.0, 20.7, 20.5, 20.2, 21.1, 20.8, 20.6, 20.4, 20.2, 20.1, 19.9, 19.8, 20.6, 20.5, 20.4, 20.3, 20.3, 20.2, 20.1, 20.1, 20.4, 21.1, 54.1, 54.1, 53.1, 52.2, 51.3, 50.4, 50.6, 49.8, 50.0, 49.2, 48.5, 48.8, 48.1, 47.4, 47.5, 47.2, 47.1, 46.9, 46.5, 46.8, 46.5, 46.0, 46.7, 46.2, 46.8, 46.5, 46.1, 47.0, 46.6, 46.3, 47.3, 47.0, 48.1, 47.9, 47.7, 48.9, 48.9, 48.8, 49.9, 50.4, 50.6, 50.9, 52.5, 52.8, 53.1, 53.8, 53.1, 52.6, 52.0, 51.5, 51.0, 49.5, 49.2, 48.8, 48.5, 48.2, 48.0, 47.8, 47.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 45.2, 45.3, 45.4, 45.5, 45.7, 45.9, 46.2, 46.4, 46.7, 46.0, 46.4, 46.8, 47.2, 47.7, 48.2, 48.7, 49.0, 48.8, 47.2, 46.7, 46.8, 46.8, 45.3, 45.4, 45.6, 45.3, 44.4, 44.6, 44.2, 43.9, 44.2, 43.2, 43.6, 44.0, 43.2, 43.6, 43.5, 43.3, 43.0, 43.2, 43.7, 44.3, 43.7, 44.3, 44.5, 44.4, 44.5, 44.7, 45.3, 46.0, 45.7, 46.4, 47.2, 47.0, 47.8, 48.6, 49.1, 50.3, 51.2, 51.1, 52.1, 53.1, 52.1, 51.1, 51.2, 50.3, 49.1, 48.6, 47.8, 47.0, 47.2, 46.4, 45.7, 46.0, 45.3, 44.7, 44.5, 44.4, 44.5, 44.3, 43.7, 44.3, 43.7, 43.2, 43.0, 43.3, 43.5, 43.6, 43.2, 44.0, 43.6, 43.2, 44.2, 43.9, 44.2, 44.6, 44.4, 45.3, 45.6, 45.4, 45.3, 46.8, 46.8, 46.7, 47.2, 48.8, 48.2, 48.7, 48.2, 47.7, 47.2, 46.8, 46.4, 46.0, 46.7, 46.4, 46.2, 45.9, 45.7, 45.5, 45.4, 45.3, 45.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 47.6, 47.8, 48.0, 48.2, 48.5, 48.8, 49.2, 49.5, 51.0, 51.5, 52.0, 52.6, 53.1, 53.8, 53.1, 52.8, 52.5, 50.9, 50.4, 50.2, 49.9, 48.8, 48.9, 48.9, 47.7, 47.9, 46.7, 47.0, 47.3, 46.3, 46.6, 47.0, 46.1, 46.5, 46.8, 46.2, 46.7, 46.0, 46.5, 46.8, 46.5, 46.9, 47.1, 47.2, 47.5, 47.4, 48.1, 48.8, 48.5, 49.2, 50.0, 49.8, 50.6, 50.4, 51.3, 52.2, 53.1, 54.1, 33.0, 33.1, 32.1, 32.1, 31.2, 31.3, 30.4, 30.5, 30.6, 29.8, 28.9, 29.1, 29.3, 28.7, 28.7, 27.9, 28.2, 28.5, 28.1, 28.0, 28.4, 28.5, 28.0, 28.1, 27.7, 28.2, 28.6, 28.0, 28.4, 27.8, 28.4, 29.0, 28.3, 29.0, 28.4, 29.1, 29.8, 29.3, 30.3, 30.6, 30.6, 30.8, 31.2, 32.2, 31.9, 32.5, 32.8, 34.0, 34.0, 34.3, 35.7, 35.9, 37.7, 37.5, 38.2, 40.0, 40.8, 41.0, 42.5, 43.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 47.2, 45.3, 44.4, 42.5, 41.7, 41.1, 40.0, 39.2, 37.5, 37.7, 36.9, 35.7, 35.4, 34.7, 34.6, 33.2, 33.4, 31.9, 32.2, 31.5, 31.8, 30.6, 30.6, 30.3, 30.5, 30.0, 29.1, 29.7, 29.1, 29.7, 29.0, 28.4, 29.1, 28.5, 29.2, 28.7, 28.2, 28.8, 28.5, 29.2, 28.8, 28.4, 29.0, 28.8, 29.6, 29.3, 29.0, 29.7, 29.5, 30.4, 30.1, 29.9, 30.8, 30.8, 31.5, 31.4, 32.3, 32.2, 33.1, 33.1, 34.1, 34.0, 35.1, 35.1, 36.1, 37.2, 37.3, 38.5, 39.6, 39.8, 41.0, 42.3, 43.6, 45.0, 46.4, 47.8, 49.4, 50.9, 53.6, 55.4, 55.7, 55.6, 55.2, 54.8, 54.5, 54.2, 55.1, 54.8, 54.6, 54.4, 54.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.5, 55.7, 55.9, 56.1, 57.4, 57.6, 58.0, 58.3, 58.9, 59.4, 59.4, 58.7, 58.0, 58.5, 57.9, 57.4, 57.4, 57.5, 57.1, 56.7, 56.4, 56.1, 55.9, 55.7, 56.5, 56.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 56.3, 56.5, 56.7, 56.9, 56.4, 56.4, 56.7, 57.1, 57.5, 57.4, 57.4, 57.9, 58.5, 59.1, 58.7, 59.4, 59.0, 58.7, 58.3, 56.9, 56.6, 56.3, 55.4, 55.3, 55.2, 55.2, 55.1, 53.9, 53.8, 53.9, 54.0, 54.2, 53.6, 53.7, 53.8, 53.9, 54.0, 54.3, 54.5, 54.8, 54.5, 54.9, 52.0, 50.4, 48.8, 47.2, 45.7, 44.3, 42.9, 41.6, 40.3, 40.0, 38.8, 37.6, 37.5, 36.3, 35.2, 35.1, 34.1, 33.1);
    this.GEM_OUTLINE_RADIUS_POINTS2 = Array.Create(23296, null, 36.0, 36.1, 36.1, 36.1, 36.2, 36.3, 36.4, 36.6, 36.8, 36.9, 37.2, 37.4, 37.7, 38.0, 38.3, 38.6, 39.0, 39.4, 39.9, 40.4, 40.9, 41.4, 42.0, 42.7, 43.3, 44.1, 44.9, 44.4, 45.3, 45.0, 44.7, 45.0, 45.3, 45.0, 44.7, 45.0, 45.3, 45.6, 45.4, 45.3, 45.8, 46.2, 46.7, 46.7, 46.7, 47.1, 47.6, 48.2, 47.7, 48.3, 47.8, 47.9, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 48.6, 48.4, 49.3, 49.2, 49.1, 50.1, 50.1, 50.1, 51.1, 51.2, 52.3, 52.4, 52.6, 52.8, 52.0, 52.3, 52.6, 53.0, 53.3, 53.8, 54.2, 54.7, 54.9, 54.7, 54.3, 53.4, 53.1, 52.8, 52.5, 52.1, 50.6, 50.4, 50.4, 50.4, 50.5, 49.0, 49.2, 49.4, 49.5, 49.4, 49.2, 48.9, 48.9, 48.8, 48.6, 47.8, 47.0, 46.2, 45.5, 44.9, 44.3, 43.7, 43.2, 42.7, 42.3, 41.9, 41.5, 41.1, 40.8, 40.5, 40.3, 40.0, 39.8, 39.6, 39.5, 39.3, 39.2, 39.2, 39.1, 39.1, 39.1, 39.1, 39.1, 39.2, 39.2, 39.3, 39.5, 39.6, 39.8, 40.0, 40.3, 40.5, 40.8, 41.1, 41.5, 41.9, 42.3, 42.7, 43.2, 43.7, 44.3, 44.9, 45.5, 46.2, 47.0, 47.8, 48.6, 48.8, 48.9, 48.9, 48.6, 49.4, 49.5, 49.4, 49.2, 49.0, 50.5, 50.4, 50.4, 50.4, 50.6, 52.1, 52.5, 52.8, 53.1, 53.4, 54.3, 54.7, 54.9, 54.7, 54.2, 53.8, 53.3, 53.0, 52.6, 52.3, 52.0, 52.7, 52.6, 52.4, 52.3, 51.2, 51.1, 50.1, 50.1, 50.1, 49.1, 49.2, 49.3, 48.4, 48.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 47.9, 47.8, 48.3, 47.7, 48.2, 47.6, 47.1, 46.7, 46.7, 46.7, 46.2, 45.8, 45.3, 45.4, 45.6, 45.3, 45.0, 44.7, 45.0, 45.3, 45.0, 44.7, 45.0, 45.3, 44.4, 44.9, 44.1, 43.3, 42.7, 42.0, 41.4, 40.9, 40.4, 39.9, 39.4, 39.0, 38.6, 38.3, 38.0, 37.7, 37.4, 37.2, 36.9, 36.8, 36.6, 36.4, 36.3, 36.2, 36.1, 36.1, 36.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 47.6, 47.8, 48.0, 48.2, 48.5, 47.8, 48.1, 48.5, 48.9, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 47.9, 48.6, 48.2, 48.7, 48.6, 48.8, 48.9, 48.9, 48.6, 48.4, 48.1, 47.9, 47.7, 47.6, 47.3, 47.2, 47.4, 46.9, 47.0, 47.4, 46.7, 47.2, 46.7, 47.1, 46.8, 47.1, 47.1, 47.2, 47.5, 47.4, 48.1, 47.8, 48.5, 48.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 47.2, 47.5, 47.8, 47.1, 47.4, 47.8, 47.3, 47.7, 48.2, 47.6, 48.2, 48.8, 48.7, 49.0, 48.6, 48.6, 48.7, 47.4, 47.2, 47.3, 47.5, 47.3, 47.0, 46.7, 47.0, 47.3, 47.5, 46.6, 47.0, 47.1, 46.9, 47.0, 46.8, 46.7, 47.2, 46.7, 47.1, 47.6, 47.1, 47.7, 48.3, 47.8, 47.9, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 47.9, 47.8, 48.3, 47.7, 47.1, 47.6, 47.1, 46.7, 47.2, 46.7, 46.8, 47.0, 46.9, 47.1, 47.0, 46.6, 47.5, 47.3, 47.0, 46.7, 47.0, 47.3, 47.5, 47.3, 47.2, 47.4, 48.7, 48.6, 48.6, 49.0, 48.7, 48.8, 48.2, 47.6, 48.2, 47.7, 47.3, 47.8, 47.4, 47.1, 47.8, 47.5, 47.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.4, 47.5, 47.2, 47.1, 47.1, 46.8, 47.1, 46.7, 47.2, 46.7, 47.4, 47.0, 46.9, 47.4, 47.2, 47.3, 47.6, 47.7, 47.9, 48.1, 48.4, 48.6, 48.9, 48.9, 48.8, 48.6, 48.7, 48.2, 48.6, 47.9, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 48.9, 48.5, 48.1, 47.8, 48.5, 48.2, 48.0, 47.8, 47.6, 48.4, 48.3, 48.2, 48.1, 48.1, 52.1, 51.1, 51.1, 50.2, 50.3, 49.4, 49.6, 48.8, 49.0, 49.2, 48.5, 48.8, 48.1, 48.5, 47.8, 48.3, 47.7, 48.2, 47.6, 48.2, 48.8, 48.3, 48.7, 48.6, 49.4, 49.0, 49.9, 49.5, 50.5, 50.6, 51.3, 51.1, 52.4, 51.1, 51.3, 50.6, 50.5, 49.5, 49.9, 49.0, 49.4, 48.6, 49.0, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 47.8, 47.9, 48.1, 47.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 47.8, 48.1, 48.5, 47.8, 48.3, 48.8, 48.2, 48.7, 49.0, 48.8, 48.7, 49.0, 49.8, 49.4, 50.2, 49.9, 50.8, 50.5, 51.6, 51.3, 52.5, 52.4, 52.3, 51.3, 51.6, 50.5, 50.8, 49.9, 50.2, 49.4, 49.8, 49.0, 48.7, 48.8, 49.0, 48.7, 49.3, 48.8, 48.3, 48.9, 48.5, 49.2, 48.8, 49.5, 49.2, 50.0, 49.8, 50.6, 50.4, 51.1, 51.2, 52.1, 52.1, 53.1, 52.1, 52.1, 51.2, 51.1, 50.4, 50.6, 49.8, 50.0, 49.2, 49.4, 48.8, 49.2, 48.5, 48.9, 48.3, 48.8, 49.3, 48.7, 49.0, 48.8, 48.7, 49.0, 49.8, 49.4, 50.2, 49.9, 50.8, 50.5, 51.6, 51.3, 52.3, 52.4, 52.5, 51.3, 51.6, 50.5, 50.8, 49.9, 50.2, 49.4, 49.8, 49.0, 48.7, 48.8, 49.0, 48.7, 48.2, 48.8, 48.3, 47.8, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.9, 47.8, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 49.0, 48.6, 49.4, 49.0, 49.9, 49.5, 50.5, 50.6, 51.3, 51.1, 52.4, 51.1, 51.3, 50.6, 50.5, 49.5, 49.9, 49.0, 49.4, 48.6, 48.7, 48.3, 48.8, 48.2, 47.6, 48.2, 47.7, 48.3, 47.8, 48.5, 48.1, 48.8, 48.5, 49.2, 49.0, 48.8, 49.6, 49.4, 50.3, 50.2, 51.1, 51.1, 27.0, 27.1, 27.1, 27.1, 27.2, 26.2, 26.3, 26.4, 26.6, 26.7, 25.8, 26.0, 26.2, 25.6, 25.5, 25.8, 26.0, 26.3, 25.8, 25.8, 26.1, 26.5, 26.9, 26.2, 26.5, 27.0, 26.9, 26.7, 27.2, 27.8, 28.3, 27.7, 28.3, 29.1, 29.7, 29.1, 30.0, 30.5, 30.3, 31.3, 32.4, 32.0, 33.1, 34.5, 34.1, 35.6, 35.4, 37.1, 37.9, 39.0, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 46.3, 45.4, 44.5, 43.7, 42.9, 41.1, 41.2, 40.5, 39.8, 39.0, 38.6, 37.6, 36.6, 36.1, 35.1, 34.8, 34.1, 34.5, 33.1, 33.2, 32.4, 31.9, 31.9, 30.9, 31.1, 30.7, 29.8, 30.4, 29.7, 29.1, 29.7, 29.1, 29.8, 29.2, 28.7, 29.4, 28.9, 28.5, 29.2, 28.8, 28.4, 29.0, 28.8, 28.5, 28.8, 29.0, 28.7, 28.7, 29.3, 30.0, 29.9, 29.8, 30.6, 30.5, 30.4, 31.3, 31.2, 31.1, 32.1, 32.1, 32.0, 32.1, 32.1, 31.1, 31.2, 31.3, 30.4, 30.5, 30.6, 29.8, 29.9, 30.0, 29.3, 28.7, 28.7, 29.0, 28.8, 28.5, 28.8, 29.0, 28.4, 28.8, 29.2, 28.5, 28.9, 29.4, 28.7, 29.2, 29.8, 29.1, 29.7, 29.1, 29.7, 30.4, 29.8, 30.7, 31.1, 30.9, 31.9, 31.9, 32.4, 33.2, 33.1, 34.5, 34.1, 34.8, 35.1, 36.1, 36.6, 37.6, 38.6, 39.0, 39.8, 40.5, 41.2, 41.1, 42.9, 43.7, 44.5, 45.4, 46.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 39.3, 39.0, 37.9, 37.1, 35.4, 35.6, 34.1, 34.5, 33.1, 32.0, 32.4, 31.3, 30.3, 30.5, 30.0, 29.1, 29.7, 29.1, 28.3, 27.7, 28.3, 27.8, 27.2, 26.7, 26.9, 27.0, 26.5, 26.2, 26.9, 26.5, 26.1, 25.8, 25.8, 26.3, 26.0, 25.8, 25.5, 25.6, 26.2, 26.0, 25.8, 26.7, 26.6, 26.4, 26.3, 26.2, 27.2, 27.1, 27.1, 27.1, 21.0, 21.1, 21.1, 21.1, 22.2, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7, 22.9, 23.0, 24.3, 24.5, 24.7, 24.9, 25.2, 25.5, 25.8, 27.3, 27.6, 28.0, 28.5, 28.9, 29.4, 31.2, 31.8, 32.4, 33.1, 35.1, 35.9, 36.8, 39.2, 40.3, 41.4, 41.4, 42.3, 42.4, 43.5, 43.3, 43.8, 44.8, 44.9, 46.5, 46.8, 47.6, 48.2, 47.7, 47.3, 47.8, 47.4, 47.1, 47.8, 47.5, 47.2, 48.0, 47.8, 47.8, 48.4, 48.3, 49.2, 49.1, 49.1, 49.1, 50.1, 50.1, 51.2, 51.3, 52.4, 52.6, 52.8, 54.1, 54.4, 55.7, 56.1, 57.5, 58.0, 58.5, 60.1, 61.7, 62.4, 63.1, 60.1, 59.0, 56.9, 54.5, 52.4, 50.6, 50.4, 48.7, 47.2, 45.8, 44.4, 43.2, 40.7, 39.6, 37.3, 36.5, 35.7, 33.7, 33.0, 32.4, 30.6, 30.1, 29.6, 29.2, 27.6, 27.3, 26.9, 26.6, 26.3, 24.9, 24.7, 24.5, 24.3, 24.1, 23.9, 22.7, 22.6, 22.5, 22.4, 22.3, 22.2, 22.2, 21.1, 21.1, 21.1, 21.0, 21.1, 21.1, 21.1, 20.5, 20.2, 20.3, 20.3, 20.4, 20.5, 20.7, 20.8, 20.7, 20.1, 20.2, 20.4, 20.6, 20.8, 21.1, 20.2, 20.5, 20.7, 21.0, 21.4, 21.7, 22.1, 21.9, 21.6, 22.0, 22.5, 23.0, 23.5, 24.1, 23.5, 23.9, 24.5, 24.6, 24.4, 25.2, 25.7, 25.3, 26.2, 26.9, 26.5, 27.6, 28.0, 28.1, 29.7, 30.4, 30.6, 31.9, 31.9, 33.5, 33.8, 35.1, 36.6, 36.8, 38.6, 40.5, 40.9, 42.3, 45.2, 47.1, 49.1, 51.1, 49.1, 47.1, 45.2, 43.3, 41.4, 40.9, 39.6, 37.8, 36.6, 36.1, 34.3, 34.5, 32.7, 32.7, 32.2, 31.4, 30.7, 30.5, 29.2, 29.5, 28.5, 28.0, 28.1, 27.0, 27.0, 26.9, 26.1, 25.9, 26.1, 25.4, 24.9, 25.5, 24.9, 24.3, 23.8, 23.3, 22.9, 22.5, 22.6, 22.9, 22.5, 22.2, 21.9, 21.6, 21.3, 21.1, 20.8, 21.0, 21.5, 21.3, 21.1, 20.9, 20.8, 20.7, 20.5, 20.4, 20.3, 20.5, 21.2, 21.2, 21.1, 21.1, 21.1, 53.1, 52.1, 52.1, 51.2, 51.1, 49.4, 49.6, 48.8, 49.0, 48.2, 48.5, 47.8, 47.1, 47.4, 46.8, 47.2, 46.6, 46.9, 46.5, 46.8, 46.5, 46.0, 46.7, 46.2, 46.8, 46.5, 47.1, 47.0, 47.3, 47.5, 47.3, 47.9, 48.1, 48.4, 49.2, 49.0, 50.5, 50.4, 50.4, 51.4, 52.2, 52.4, 53.7, 54.1, 54.5, 53.8, 53.1, 51.5, 50.9, 50.4, 50.0, 49.5, 49.2, 48.8, 48.5, 48.2, 48.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 45.4, 45.5, 45.7, 45.9, 46.2, 46.4, 46.7, 47.1, 47.4, 47.8, 48.3, 48.8, 48.2, 48.7, 49.3, 49.9, 50.6, 49.0, 48.6, 48.6, 47.8, 47.4, 47.2, 46.6, 46.3, 46.2, 46.5, 45.3, 45.6, 45.9, 45.0, 45.3, 45.6, 44.9, 45.2, 45.0, 45.0, 44.8, 44.9, 45.4, 44.8, 45.4, 46.0, 45.5, 46.1, 46.8, 47.4, 47.1, 47.8, 48.5, 48.2, 49.0, 49.8, 49.6, 50.4, 51.3, 52.2, 53.1, 53.1, 54.1, 53.1, 53.1, 52.2, 51.3, 50.4, 49.6, 49.8, 49.0, 48.2, 48.5, 47.8, 47.1, 47.4, 46.8, 46.1, 45.5, 46.0, 45.4, 44.8, 45.4, 44.9, 44.8, 45.0, 45.0, 45.2, 44.9, 45.6, 45.3, 45.0, 45.9, 45.6, 45.3, 45.6, 46.2, 46.3, 46.6, 47.2, 47.4, 47.8, 48.6, 48.6, 49.0, 50.6, 49.9, 49.3, 48.7, 48.2, 47.7, 48.3, 47.8, 47.4, 47.1, 46.7, 46.4, 46.2, 45.9, 45.7, 45.5, 45.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 48.0, 48.2, 48.5, 48.8, 49.2, 49.5, 50.0, 50.4, 50.9, 51.5, 52.0, 53.8, 54.5, 54.1, 53.7, 52.4, 52.2, 51.4, 50.4, 50.4, 49.2, 49.0, 49.2, 48.4, 48.1, 47.9, 47.3, 47.5, 47.3, 47.0, 47.1, 46.5, 46.8, 46.2, 46.7, 46.0, 46.5, 46.8, 46.5, 46.9, 46.6, 47.2, 46.8, 47.4, 47.1, 47.8, 48.5, 48.2, 49.0, 48.8, 49.6, 49.4, 50.3, 51.2, 52.1, 52.1, 34.0, 34.1, 34.1, 33.1, 32.2, 32.3, 32.4, 31.5, 30.8, 30.8, 31.0, 30.1, 30.4, 29.5, 29.8, 30.1, 29.3, 29.6, 28.8, 29.2, 29.5, 28.8, 29.2, 28.5, 28.9, 29.4, 28.7, 29.2, 28.5, 29.1, 29.7, 29.1, 29.7, 29.1, 29.8, 30.4, 30.0, 30.5, 30.3, 31.3, 31.3, 31.8, 31.5, 32.5, 32.9, 33.4, 33.2, 34.6, 34.7, 35.4, 35.7, 36.9, 37.7, 37.5, 39.2, 40.0, 41.1, 41.7, 42.5, 44.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 46.2, 45.3, 43.4, 42.5, 41.0, 40.8, 39.0, 38.2, 37.5, 36.6, 35.9, 35.7, 34.3, 34.0, 32.9, 32.8, 32.5, 31.9, 31.1, 31.2, 30.8, 30.6, 29.6, 29.9, 29.3, 28.5, 29.1, 28.4, 29.0, 28.3, 27.7, 28.3, 27.8, 28.4, 28.0, 27.4, 27.8, 27.7, 27.3, 27.3, 27.6, 27.6, 28.0, 27.7, 27.4, 28.2, 27.9, 28.7, 28.5, 28.3, 29.1, 28.9, 29.8, 29.6, 29.5, 30.4, 30.3, 30.7, 31.1, 32.1, 32.1, 32.0, 33.1, 34.1, 34.1, 35.2, 35.3, 36.4, 37.6, 37.8, 39.0, 40.3, 40.5, 41.8, 43.2, 44.7, 46.1, 47.7, 49.3, 50.9, 52.7, 54.5, 54.1, 53.7, 53.3, 54.0, 53.9, 53.6, 53.3, 53.6, 53.6, 53.7, 53.9, 53.8, 53.9, 54.0, 54.2, 55.2, 55.3, 55.4, 55.6, 56.6, 56.9, 57.2, 57.5, 59.0, 59.4, 58.7, 59.1, 58.5, 57.9, 57.4, 57.4, 57.5, 57.1, 56.7, 56.4, 56.4, 56.9, 56.7, 56.5, 56.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 56.3, 55.5, 55.7, 55.9, 56.1, 56.4, 56.7, 57.1, 57.5, 57.4, 57.4, 57.9, 58.5, 58.0, 58.7, 59.4, 59.0, 58.9, 58.4, 58.0, 57.6, 57.4, 57.1, 55.9, 55.7, 55.5, 55.4, 55.2, 55.2, 55.2, 55.1, 55.2, 54.4, 54.6, 54.8, 55.1, 55.4, 54.5, 54.8, 55.2, 55.6, 56.0, 55.4, 53.6, 52.0, 49.4, 48.9, 46.4, 46.0, 43.6, 43.3, 41.0, 40.8, 39.6, 38.5, 38.3, 37.2, 36.1, 36.1, 35.1, 33.0, 33.1, 33.1, 33.1, 33.2, 33.3, 33.4, 33.5, 33.7, 33.9, 34.1, 34.3, 34.5, 34.8, 35.1, 35.4, 35.8, 36.1, 36.6, 37.0, 37.5, 38.0, 38.5, 39.1, 39.7, 40.4, 41.1, 41.9, 42.6, 42.3, 41.9, 42.1, 42.5, 42.1, 41.9, 42.3, 42.6, 42.3, 42.4, 42.9, 43.2, 43.0, 43.2, 43.7, 44.3, 44.5, 44.5, 44.9, 45.5, 46.1, 46.8, 46.4, 47.1, 46.7, 47.5, 47.2, 48.0, 47.8, 48.6, 49.1, 49.3, 50.2, 50.1, 51.1, 51.1, 52.1, 52.1, 52.2, 52.3, 52.4, 52.6, 51.8, 52.0, 52.3, 52.6, 53.0, 53.3, 53.8, 54.2, 53.6, 53.1, 51.9, 51.5, 51.2, 51.0, 50.6, 50.2, 49.8, 49.4, 49.0, 48.7, 48.3, 47.9, 47.6, 47.7, 47.9, 48.1, 47.9, 47.7, 47.6, 47.3, 47.0, 46.1, 45.3, 44.5, 43.8, 43.2, 42.6, 42.0, 41.5, 41.0, 40.5, 40.1, 39.7, 39.3, 39.0, 38.7, 38.4, 38.2, 38.0, 37.8, 37.6, 37.5, 37.3, 37.2, 37.2, 37.1, 37.1, 37.1, 37.1, 37.1, 37.2, 37.2, 37.3, 37.5, 37.6, 37.8, 38.0, 38.2, 38.4, 38.7, 39.0, 39.3, 39.7, 40.1, 40.5, 41.0, 41.5, 42.0, 42.6, 43.2, 43.8, 44.5, 45.3, 46.1, 47.0, 47.3, 47.6, 47.7, 47.9, 48.1, 47.9, 47.7, 47.6, 47.9, 48.3, 48.7, 49.0, 49.4, 49.8, 50.2, 50.6, 51.0, 51.2, 51.5, 51.9, 53.1, 53.6, 54.2, 53.8, 53.3, 53.0, 52.6, 52.3, 52.0, 51.8, 52.6, 52.4, 52.3, 52.2, 52.1, 52.1, 52.1, 51.1, 50.1, 50.2, 49.3, 49.1, 48.6, 47.8, 48.0, 47.2, 47.5, 46.7, 47.1, 46.4, 46.8, 46.1, 45.5, 44.9, 44.5, 44.5, 44.3, 43.7, 43.2, 43.0, 43.2, 42.9, 42.4, 42.3, 42.6, 42.3, 41.9, 42.1, 42.5, 42.1, 41.9, 42.3, 42.6, 41.9, 41.1, 40.4, 39.7, 39.1, 38.5, 38.0, 37.5, 37.0, 36.6, 36.1, 35.8, 35.4, 35.1, 34.8, 34.5, 34.3, 34.1, 33.9, 33.7, 33.5, 33.4, 33.3, 33.2, 33.1, 33.1, 33.1, 49.1, 49.1, 48.1, 48.2, 48.3, 48.4, 47.6, 47.8, 47.0, 47.2, 47.5, 47.8, 47.1, 47.4, 47.5, 47.2, 47.7, 47.1, 47.6, 47.1, 47.7, 47.2, 47.9, 47.4, 48.2, 47.8, 48.6, 48.3, 48.9, 48.9, 47.7, 47.9, 46.7, 47.0, 47.3, 46.3, 46.6, 45.7, 46.1, 46.5, 45.8, 46.2, 46.7, 46.0, 46.5, 46.0, 46.5, 46.0, 46.6, 47.2, 46.8, 47.4, 47.1, 47.8, 47.5, 48.2, 48.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 47.4, 47.8, 48.3, 47.7, 48.2, 48.7, 48.2, 48.8, 48.7, 48.7, 48.6, 48.2, 47.8, 48.6, 48.3, 47.9, 47.6, 47.7, 47.9, 48.1, 47.9, 47.7, 47.6, 47.9, 48.3, 48.6, 47.8, 48.2, 48.6, 47.9, 48.3, 47.7, 48.2, 48.7, 48.2, 48.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 46.8, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 48.8, 48.2, 48.7, 48.2, 47.7, 48.3, 47.9, 48.6, 48.2, 47.8, 48.6, 48.3, 47.9, 47.6, 47.7, 47.9, 48.1, 47.9, 47.7, 47.6, 47.9, 48.3, 48.6, 47.8, 48.2, 48.6, 48.7, 48.7, 48.8, 48.2, 48.7, 48.2, 47.7, 48.3, 47.8, 47.4, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 48.0, 48.2, 47.5, 47.8, 47.1, 47.4, 46.8, 46.1, 46.6, 46.0, 46.5, 46.0, 46.5, 46.0, 45.5, 46.2, 45.8, 46.5, 46.1, 45.7, 46.6, 46.3, 47.3, 47.0, 46.7, 47.9, 47.7, 48.9, 48.9, 48.3, 48.6, 47.8, 48.2, 47.4, 47.9, 47.2, 47.7, 47.1, 47.6, 47.1, 47.7, 47.2, 47.5, 47.4, 47.1, 47.8, 47.5, 47.2, 47.0, 47.8, 47.6, 48.4, 48.3, 48.2, 48.1, 49.1, 49.1, 49.1, 49.1, 48.2, 48.3, 47.4, 47.6, 46.8, 47.0, 46.2, 46.4, 46.7, 46.0, 46.4, 45.7, 46.1, 46.6, 46.0, 46.5, 46.8, 46.5, 46.7, 46.7, 47.4, 47.0, 47.8, 47.4, 48.3, 48.9, 48.9, 49.2, 49.8, 51.0, 50.8, 50.0, 50.2, 49.2, 49.5, 48.7, 49.0, 48.6, 48.6, 48.7, 48.3, 48.8, 48.2, 47.6, 48.2, 47.7, 48.3, 47.8, 48.5, 48.1, 48.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 48.9, 48.3, 48.8, 49.3, 48.7, 49.3, 48.8, 49.5, 49.0, 49.8, 50.4, 50.2, 51.1, 50.8, 51.8, 51.6, 52.7, 52.5, 52.4, 52.5, 52.2, 51.6, 50.5, 50.8, 50.4, 50.2, 49.4, 49.8, 49.0, 49.5, 48.8, 49.3, 48.7, 49.3, 48.8, 49.4, 48.9, 48.5, 49.2, 48.8, 49.5, 50.3, 50.0, 49.8, 50.6, 50.4, 51.3, 52.2, 52.1, 52.1, 53.1, 52.1, 52.1, 52.2, 51.3, 50.4, 50.6, 49.8, 50.0, 50.3, 49.5, 48.8, 49.2, 48.5, 48.9, 49.4, 48.8, 49.3, 48.7, 49.3, 48.8, 49.5, 49.0, 49.8, 49.4, 50.2, 50.4, 50.8, 50.5, 51.6, 52.2, 52.5, 52.4, 52.5, 52.7, 51.6, 51.8, 50.8, 50.4, 50.2, 50.4, 49.8, 49.0, 49.5, 48.8, 49.3, 48.7, 49.3, 48.8, 48.3, 48.9, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 48.8, 48.1, 48.5, 47.8, 48.3, 47.7, 48.2, 47.6, 48.2, 48.8, 48.3, 48.7, 48.6, 48.6, 49.0, 48.7, 49.5, 49.2, 50.2, 50.0, 50.8, 51.0, 49.8, 49.2, 48.9, 48.9, 48.3, 47.4, 47.8, 47.0, 47.4, 46.7, 46.7, 46.5, 46.8, 46.5, 46.0, 46.6, 46.1, 45.7, 46.4, 46.0, 46.7, 46.4, 46.2, 47.0, 46.8, 47.6, 47.4, 48.3, 48.2, 49.1, 49.1, 25.0, 25.1, 24.1, 24.1, 24.2, 24.2, 24.3, 24.4, 24.5, 23.6, 23.8, 23.9, 24.1, 24.3, 24.5, 24.7, 23.9, 24.1, 24.4, 24.7, 25.0, 25.3, 25.3, 24.9, 25.3, 25.7, 26.2, 26.7, 27.2, 27.6, 27.0, 27.7, 28.3, 29.0, 28.4, 29.1, 30.0, 30.5, 30.3, 31.3, 32.4, 32.0, 33.1, 34.5, 34.1, 35.6, 36.6, 37.1, 39.2, 39.7, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 42.1, 41.3, 41.3, 40.8, 40.1, 39.3, 39.0, 37.9, 37.1, 35.4, 35.6, 34.0, 33.4, 33.1, 32.0, 32.4, 31.3, 30.3, 30.5, 30.0, 29.1, 29.7, 29.1, 28.3, 27.7, 28.3, 27.8, 27.2, 27.7, 27.4, 27.0, 26.5, 26.2, 26.9, 26.5, 26.1, 26.7, 26.6, 26.3, 26.0, 25.8, 26.6, 26.4, 26.2, 26.3, 26.9, 26.7, 26.6, 26.4, 27.3, 27.3, 27.2, 27.1, 27.1, 28.1, 28.0, 28.1, 27.1, 27.1, 27.2, 27.3, 27.3, 26.4, 26.6, 26.7, 26.9, 26.3, 26.2, 26.4, 26.6, 25.8, 26.0, 26.3, 26.6, 26.7, 26.1, 26.5, 26.9, 26.2, 26.5, 27.0, 27.4, 27.7, 27.2, 27.8, 28.3, 27.7, 28.3, 29.1, 29.7, 29.1, 30.0, 30.5, 30.3, 31.3, 32.4, 32.0, 33.1, 33.4, 34.0, 35.6, 35.4, 37.1, 37.9, 38.9, 39.3, 40.1, 40.8, 41.3, 41.3, 42.1, 42.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 40.4, 39.0, 39.0, 37.1, 36.6, 35.6, 34.1, 34.5, 33.1, 32.0, 32.4, 31.3, 30.3, 30.5, 30.0, 29.1, 28.4, 29.0, 28.3, 27.7, 27.0, 27.6, 27.2, 26.7, 26.2, 25.7, 25.3, 24.9, 25.3, 25.3, 25.0, 24.7, 24.4, 24.1, 23.9, 24.7, 24.5, 24.3, 24.1, 23.9, 23.8, 23.6, 24.5, 24.4, 24.3, 24.2, 24.2, 24.1, 24.1, 25.1, 21.0, 21.1, 21.1, 21.1, 21.2, 21.2, 21.3, 21.4, 21.5, 21.6, 22.7, 22.9, 23.0, 23.2, 23.4, 23.6, 23.9, 24.1, 24.4, 24.7, 25.0, 25.3, 26.9, 27.3, 27.7, 28.2, 28.7, 29.2, 29.8, 30.4, 31.1, 33.2, 34.0, 34.9, 35.8, 36.8, 37.9, 39.1, 39.9, 40.0, 39.7, 40.3, 40.9, 40.6, 40.9, 41.5, 42.1, 42.7, 43.3, 44.0, 44.6, 44.7, 45.0, 45.7, 45.4, 46.2, 46.2, 46.7, 46.6, 47.4, 47.3, 48.2, 48.1, 49.1, 49.1, 50.1, 51.1, 51.2, 52.3, 53.5, 53.6, 54.9, 56.1, 57.4, 57.8, 59.2, 60.7, 60.6, 59.4, 56.9, 54.9, 54.3, 52.0, 51.2, 49.9, 48.7, 48.7, 46.8, 46.8, 45.2, 44.9, 43.9, 42.6, 41.4, 38.8, 37.8, 36.8, 34.6, 33.8, 33.1, 32.4, 31.8, 29.9, 29.4, 28.9, 28.5, 28.0, 27.6, 26.1, 25.8, 25.5, 25.2, 24.9, 24.7, 23.4, 23.2, 23.0, 22.9, 22.7, 22.6, 22.5, 22.4, 22.3, 22.2, 22.2, 21.1, 21.1, 21.1, 21.0, 21.1, 21.1, 21.1, 21.2, 21.2, 20.5, 20.3, 20.4, 20.5, 20.7, 20.8, 20.9, 21.1, 21.3, 21.5, 21.0, 20.8, 21.1, 21.3, 21.6, 21.9, 22.2, 22.5, 22.9, 23.3, 23.6, 22.9, 23.3, 23.8, 24.3, 24.7, 24.1, 24.7, 25.4, 25.1, 25.3, 26.1, 26.2, 26.1, 27.0, 27.3, 27.3, 28.5, 28.4, 29.0, 29.9, 29.7, 31.4, 31.1, 32.7, 32.7, 34.5, 34.3, 36.1, 36.6, 37.8, 39.6, 40.9, 41.4, 43.3, 45.2, 47.1, 49.1, 51.1, 49.1, 48.1, 46.2, 44.3, 42.4, 40.9, 40.6, 38.8, 36.9, 37.1, 35.3, 34.5, 34.8, 33.0, 33.3, 31.4, 31.8, 30.5, 30.3, 29.7, 28.8, 29.2, 28.1, 27.7, 27.8, 26.9, 26.7, 26.8, 26.1, 25.7, 26.2, 25.5, 26.2, 25.7, 25.1, 24.6, 24.2, 23.7, 23.3, 22.9, 22.5, 22.2, 22.4, 22.7, 22.4, 22.2, 21.9, 21.7, 21.5, 21.3, 21.1, 20.9, 20.8, 20.7, 20.5, 20.4, 20.3, 20.5, 21.2, 21.2, 21.1, 21.1, 21.1, 50.1, 50.1, 49.1, 49.2, 48.3, 48.4, 47.6, 46.8, 47.0, 46.2, 46.4, 45.7, 46.0, 45.3, 45.7, 45.1, 45.5, 44.9, 45.4, 46.0, 45.4, 46.0, 45.5, 46.2, 45.8, 46.5, 46.1, 47.0, 46.6, 47.5, 47.3, 47.9, 48.1, 48.4, 49.2, 49.0, 50.5, 50.4, 51.1, 52.2, 52.2, 54.3, 54.5, 54.1, 53.3, 52.7, 52.0, 51.5, 50.9, 50.4, 50.0, 49.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 45.9, 46.2, 46.4, 46.7, 47.1, 47.4, 47.8, 48.3, 48.8, 49.3, 49.8, 50.4, 51.1, 51.8, 51.3, 50.9, 50.4, 50.2, 48.7, 48.8, 48.9, 47.6, 47.7, 47.9, 46.7, 47.0, 47.3, 46.3, 46.6, 45.7, 46.1, 46.5, 45.8, 46.2, 46.7, 46.0, 46.5, 46.8, 46.5, 46.9, 46.6, 47.2, 47.5, 47.4, 48.1, 48.8, 48.5, 49.2, 49.0, 49.8, 50.6, 50.4, 51.3, 52.2, 53.1, 54.1, 54.1, 54.1, 53.1, 52.2, 51.3, 50.4, 50.6, 49.8, 49.0, 49.2, 48.5, 48.8, 48.1, 47.4, 47.5, 47.2, 46.6, 46.9, 46.5, 46.8, 46.5, 46.0, 46.7, 46.2, 45.8, 46.5, 46.1, 45.7, 46.6, 46.3, 47.3, 47.0, 46.7, 47.9, 47.7, 47.6, 48.9, 48.8, 48.7, 50.2, 50.4, 50.9, 51.3, 51.8, 51.1, 50.4, 49.8, 49.3, 48.8, 48.3, 47.8, 47.4, 47.1, 46.7, 46.4, 46.2, 45.9, 45.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 49.5, 50.0, 50.4, 50.9, 51.5, 52.0, 52.7, 53.3, 54.1, 54.5, 54.3, 52.2, 52.2, 51.1, 50.4, 50.5, 49.0, 49.2, 48.4, 48.1, 47.9, 47.3, 47.5, 46.6, 47.0, 46.1, 46.5, 45.8, 46.2, 45.5, 46.0, 45.4, 46.0, 45.4, 44.9, 45.5, 45.1, 45.7, 45.3, 46.0, 45.7, 46.4, 46.2, 47.0, 46.8, 47.6, 48.4, 48.3, 49.2, 49.1, 50.1, 35.0, 35.1, 34.1, 34.1, 33.2, 32.7, 32.4, 32.5, 31.7, 31.8, 31.0, 31.2, 31.1, 30.6, 29.8, 30.1, 29.3, 29.6, 29.9, 29.2, 29.5, 28.8, 29.2, 29.6, 28.9, 29.4, 28.7, 29.2, 29.8, 29.1, 29.7, 29.1, 29.7, 30.4, 29.8, 30.4, 30.0, 30.9, 31.2, 31.3, 31.3, 31.8, 32.7, 32.5, 32.9, 33.4, 34.3, 34.6, 34.7, 36.2, 36.2, 36.9, 37.9, 38.4, 39.2, 40.0, 41.1, 41.7, 42.5, 44.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 47.2, 45.3, 44.4, 42.5, 41.7, 41.1, 40.0, 38.2, 37.5, 37.7, 35.9, 35.7, 35.4, 34.0, 34.0, 33.2, 33.4, 31.9, 32.2, 31.5, 31.8, 30.6, 30.6, 30.3, 30.5, 30.0, 29.1, 29.7, 29.1, 29.7, 29.0, 28.4, 29.1, 28.5, 29.2, 28.7, 28.2, 28.8, 28.5, 29.2, 28.8, 28.4, 29.0, 28.8, 29.6, 29.3, 29.0, 29.7, 29.5, 30.4, 30.1, 29.9, 30.8, 30.8, 31.5, 31.4, 32.3, 32.2, 33.1, 33.1, 34.1, 34.0, 34.1, 35.1, 36.1, 36.2, 37.3, 38.5, 38.6, 39.8, 41.0, 42.3, 43.6, 43.9, 46.4, 46.8, 49.4, 50.9, 52.6, 53.8, 53.8, 53.3, 52.9, 52.6, 53.3, 53.0, 52.6, 52.3, 52.1, 53.1, 52.9, 52.7, 52.5, 53.8, 53.7, 53.7, 53.6, 54.4, 54.6, 54.8, 55.6, 55.8, 56.1, 56.5, 57.5, 57.9, 58.3, 58.7, 59.1, 58.5, 57.9, 57.4, 57.4, 57.5, 57.1, 56.7, 56.4, 56.1, 55.9, 56.7, 56.5, 56.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 55.3, 55.5, 55.7, 55.9, 56.1, 56.4, 56.7, 57.1, 57.5, 58.0, 58.5, 57.9, 58.5, 58.0, 58.7, 58.3, 59.0, 58.9, 58.4, 58.0, 57.6, 57.4, 57.1, 55.9, 55.7, 55.5, 55.4, 55.2, 55.2, 55.2, 55.1, 55.2, 54.4, 54.6, 54.8, 55.1, 55.4, 55.7, 54.8, 55.2, 55.6, 56.0, 56.5, 55.8, 53.1, 51.5, 48.9, 47.4, 46.0, 44.7, 43.3, 43.1, 40.8, 40.6, 39.5, 38.3, 38.2, 37.2, 36.1, 36.1, 29.0, 29.1, 29.1, 29.1, 29.2, 29.3, 29.4, 29.5, 29.6, 29.8, 29.9, 30.1, 30.4, 30.6, 30.9, 31.1, 31.4, 31.8, 32.1, 32.5, 32.9, 33.4, 33.9, 34.4, 34.9, 35.5, 36.2, 36.8, 37.6, 38.3, 39.2, 39.2, 39.6, 39.2, 40.3, 39.9, 40.2, 40.6, 40.3, 40.4, 40.9, 41.2, 40.9, 41.4, 42.0, 42.3, 42.1, 42.7, 43.3, 44.0, 44.6, 44.7, 45.0, 45.7, 46.4, 47.2, 48.0, 48.8, 49.6, 50.4, 51.3, 52.2, 52.1, 52.1, 52.1, 52.1, 52.1, 52.2, 52.3, 52.4, 52.6, 52.7, 52.0, 52.3, 52.6, 53.0, 52.3, 51.7, 51.0, 50.4, 49.8, 49.4, 49.2, 49.0, 48.8, 48.3, 46.7, 46.8, 46.8, 46.5, 46.1, 45.7, 45.8, 46.0, 45.9, 45.6, 45.3, 45.6, 45.9, 45.0, 44.0, 43.2, 42.4, 41.6, 40.9, 40.3, 39.7, 39.1, 38.6, 38.1, 37.7, 37.2, 36.9, 36.5, 36.2, 35.9, 35.6, 35.3, 35.1, 34.9, 34.7, 34.6, 34.4, 34.3, 34.2, 34.1, 34.1, 34.1, 34.0, 34.1, 34.1, 34.1, 34.2, 34.3, 34.4, 34.6, 34.7, 34.9, 35.1, 35.3, 35.6, 35.9, 36.2, 36.5, 36.9, 37.2, 37.7, 38.1, 38.6, 39.1, 39.7, 40.3, 40.9, 41.6, 42.4, 43.2, 44.0, 45.0, 45.9, 45.6, 45.3, 45.6, 45.9, 46.0, 45.8, 45.7, 46.1, 46.5, 46.8, 46.8, 46.7, 48.3, 48.8, 49.0, 49.2, 49.4, 49.8, 50.4, 51.0, 51.7, 52.3, 53.0, 52.6, 52.3, 52.0, 51.8, 52.6, 52.4, 52.3, 52.2, 52.1, 52.1, 52.1, 52.1, 52.1, 52.2, 51.3, 50.4, 49.6, 48.8, 48.0, 47.2, 46.4, 45.7, 45.0, 44.7, 44.6, 44.0, 43.3, 42.7, 42.2, 42.3, 42.0, 41.4, 40.9, 41.2, 40.9, 40.4, 40.3, 40.6, 40.2, 39.9, 40.3, 39.2, 39.6, 39.2, 39.2, 38.3, 37.6, 36.8, 36.2, 35.5, 34.9, 34.4, 33.9, 33.4, 32.9, 32.5, 32.1, 31.8, 31.4, 31.1, 30.9, 30.6, 30.4, 30.1, 29.9, 29.8, 29.6, 29.5, 29.4, 29.3, 29.2, 29.1, 29.1, 29.1, 48.1, 48.1, 48.1, 47.2, 47.3, 46.4, 46.6, 46.7, 45.9, 45.7, 45.4, 45.7, 45.0, 45.3, 45.7, 45.1, 45.5, 44.9, 45.4, 46.0, 45.4, 46.0, 45.5, 46.2, 46.8, 46.5, 47.1, 47.0, 47.9, 47.6, 47.7, 47.9, 48.1, 47.0, 47.3, 47.5, 46.6, 47.0, 47.1, 46.5, 46.8, 46.2, 46.7, 46.7, 46.5, 46.8, 46.8, 47.1, 47.1, 47.2, 47.5, 47.4, 48.1, 47.8, 48.5, 48.2, 48.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 47.9, 47.8, 48.3, 47.7, 48.2, 48.7, 48.2, 48.8, 48.3, 47.9, 48.6, 48.2, 47.8, 47.4, 48.3, 47.9, 47.6, 47.7, 47.9, 48.1, 48.4, 48.6, 48.9, 48.9, 48.8, 48.6, 48.7, 48.2, 48.6, 47.9, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 48.9, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 48.9, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 47.9, 48.6, 48.2, 48.7, 48.6, 48.8, 48.9, 48.9, 48.6, 48.4, 48.1, 47.9, 47.7, 47.6, 47.9, 48.3, 47.4, 47.8, 48.2, 48.6, 47.9, 48.3, 48.8, 48.2, 48.7, 48.2, 47.7, 48.3, 47.8, 47.9, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.4, 47.5, 47.2, 47.1, 47.1, 46.8, 46.8, 46.5, 46.7, 46.7, 46.2, 46.8, 46.5, 47.1, 47.0, 46.6, 47.5, 47.3, 47.0, 48.1, 47.9, 47.7, 47.6, 47.9, 47.0, 47.1, 46.5, 46.8, 46.2, 45.5, 46.0, 45.4, 46.0, 45.4, 44.9, 45.5, 45.1, 45.7, 45.3, 45.0, 45.7, 45.4, 45.7, 45.9, 46.7, 46.6, 46.4, 47.3, 47.2, 48.1, 48.1, 46.1, 46.1, 45.1, 45.2, 45.3, 44.4, 44.5, 43.7, 43.9, 44.1, 43.3, 43.6, 43.9, 43.2, 43.6, 44.0, 43.3, 43.8, 43.2, 43.7, 44.3, 43.7, 44.4, 44.9, 44.5, 45.3, 45.4, 45.7, 45.8, 46.3, 47.3, 47.0, 48.1, 48.4, 49.2, 49.0, 50.5, 50.4, 50.4, 50.2, 49.4, 49.8, 49.0, 49.5, 48.8, 49.0, 48.7, 49.3, 48.8, 48.3, 48.9, 48.5, 48.1, 48.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 48.8, 49.3, 49.2, 49.3, 48.8, 49.5, 50.2, 49.8, 50.6, 50.4, 51.1, 50.8, 51.8, 52.1, 52.7, 52.5, 52.4, 51.1, 51.3, 50.6, 50.5, 49.5, 49.9, 49.0, 49.4, 48.6, 48.7, 48.3, 48.8, 48.2, 47.6, 48.2, 47.7, 48.3, 47.8, 48.5, 48.1, 48.8, 48.5, 49.2, 49.0, 48.8, 49.6, 49.4, 50.3, 50.2, 51.1, 51.1, 52.1, 51.1, 51.1, 50.2, 50.3, 49.4, 49.6, 48.8, 49.0, 49.2, 48.5, 48.8, 48.1, 48.5, 47.8, 48.3, 47.7, 48.2, 47.6, 48.2, 48.8, 48.3, 48.7, 48.6, 49.4, 49.0, 49.9, 49.5, 50.5, 50.6, 51.3, 51.1, 52.4, 52.3, 52.7, 52.1, 51.8, 50.8, 51.1, 50.2, 50.4, 49.8, 50.2, 49.5, 48.8, 49.3, 49.2, 49.3, 48.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 48.8, 48.1, 48.5, 48.9, 48.3, 48.8, 49.3, 48.7, 49.0, 48.8, 49.5, 49.0, 49.8, 49.4, 50.2, 50.4, 50.4, 50.5, 49.0, 49.2, 48.4, 48.1, 47.0, 47.3, 46.3, 45.8, 45.7, 45.4, 45.3, 44.5, 44.9, 44.4, 43.7, 44.3, 43.7, 43.2, 43.8, 43.3, 44.0, 43.6, 43.2, 43.9, 43.6, 43.3, 44.1, 43.9, 43.7, 44.5, 44.4, 45.3, 45.2, 45.1, 46.1, 22.0, 22.1, 22.1, 22.1, 22.2, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7, 22.9, 23.0, 23.2, 23.4, 23.6, 23.9, 24.1, 23.4, 23.6, 23.9, 24.2, 24.5, 24.9, 25.3, 25.7, 26.2, 26.7, 27.2, 27.8, 28.4, 29.0, 28.3, 29.1, 29.8, 30.4, 30.0, 30.9, 31.9, 31.9, 32.4, 33.7, 33.9, 34.5, 36.1, 35.9, 37.5, 38.3, 39.2, 40.8, 41.5, 41.5, 41.8, 42.6, 43.3, 44.1, 44.9, 45.7, 46.6, 47.4, 48.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 40.4, 39.0, 39.0, 37.1, 36.6, 35.6, 34.1, 34.5, 33.1, 32.0, 32.4, 31.3, 30.3, 30.5, 30.0, 29.1, 28.4, 29.0, 28.3, 27.7, 27.0, 26.5, 26.8, 26.7, 26.2, 25.7, 25.3, 24.9, 25.3, 25.3, 25.0, 24.7, 24.4, 24.1, 23.9, 24.7, 24.5, 24.3, 24.1, 23.9, 23.8, 23.6, 24.5, 24.4, 24.3, 24.2, 24.2, 24.1, 24.1, 24.1, 24.0, 24.1, 24.1, 24.1, 24.2, 24.2, 24.3, 24.4, 24.5, 23.6, 23.8, 23.9, 24.1, 24.3, 24.5, 24.7, 23.9, 24.1, 24.4, 24.7, 25.0, 25.3, 25.3, 24.9, 25.3, 25.7, 26.2, 26.7, 26.8, 26.5, 27.0, 27.7, 28.3, 29.0, 28.4, 29.1, 30.0, 30.5, 30.3, 31.3, 32.4, 32.0, 33.1, 34.5, 34.1, 35.6, 36.6, 37.1, 39.0, 38.9, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 46.6, 45.7, 44.9, 44.1, 43.3, 42.6, 41.8, 41.5, 41.5, 39.7, 39.2, 38.3, 37.5, 35.9, 36.1, 34.5, 33.9, 33.7, 32.4, 31.9, 31.9, 30.9, 30.0, 30.4, 29.8, 29.1, 28.3, 29.0, 28.4, 27.8, 27.2, 26.7, 26.2, 25.7, 25.3, 24.9, 24.5, 24.2, 23.9, 23.6, 23.4, 24.1, 23.9, 23.6, 23.4, 23.2, 23.0, 22.9, 22.7, 22.6, 22.5, 22.4, 22.3, 22.2, 22.2, 22.1, 22.1, 22.1, 20.0, 20.1, 20.1, 20.1, 20.1, 20.2, 20.3, 20.3, 20.4, 20.5, 20.7, 20.8, 20.9, 21.1, 21.3, 21.5, 21.7, 21.9, 23.3, 23.6, 23.9, 24.2, 24.5, 24.9, 25.3, 25.7, 26.2, 26.7, 27.2, 27.8, 28.4, 29.0, 29.7, 30.5, 31.3, 32.2, 33.2, 34.2, 35.3, 36.5, 37.3, 37.4, 37.4, 38.0, 38.2, 38.1, 38.8, 39.4, 39.2, 39.7, 40.4, 41.1, 41.4, 41.6, 42.3, 42.1, 42.9, 43.7, 44.5, 45.4, 46.3, 47.2, 48.1, 49.1, 50.1, 52.1, 52.1, 53.2, 55.3, 56.5, 58.7, 58.5, 56.4, 55.4, 53.7, 52.5, 51.7, 51.1, 50.0, 49.4, 47.7, 46.9, 46.5, 46.0, 44.6, 44.7, 43.2, 43.0, 43.2, 41.7, 40.3, 39.1, 37.9, 36.8, 35.8, 33.4, 32.6, 31.8, 31.1, 30.4, 29.8, 29.2, 28.7, 27.0, 26.5, 26.1, 25.7, 25.3, 25.0, 24.7, 24.4, 24.1, 23.9, 23.6, 23.4, 22.2, 22.0, 21.8, 21.7, 21.6, 21.5, 21.4, 21.3, 21.2, 21.2, 21.1, 21.1, 21.1, 21.0, 21.1, 21.1, 21.1, 20.5, 20.2, 20.3, 20.3, 20.4, 20.5, 20.7, 20.8, 20.9, 21.1, 21.3, 21.5, 21.7, 21.9, 22.2, 22.4, 22.7, 22.4, 22.2, 22.5, 22.9, 23.3, 23.7, 24.2, 24.6, 25.1, 25.4, 24.9, 25.5, 26.2, 25.7, 26.1, 26.8, 26.7, 26.9, 27.8, 27.7, 28.1, 29.2, 28.8, 29.7, 30.3, 30.5, 31.8, 31.4, 32.2, 32.7, 33.8, 34.5, 35.3, 37.1, 36.9, 38.8, 40.6, 40.9, 42.4, 44.3, 46.2, 47.1, 49.1, 51.1, 49.1, 48.1, 46.2, 44.3, 42.4, 40.9, 40.6, 38.8, 38.0, 37.1, 36.4, 34.5, 34.8, 33.0, 33.3, 31.4, 31.8, 31.0, 31.2, 29.7, 29.9, 29.2, 28.5, 28.8, 27.8, 27.4, 27.7, 26.8, 26.5, 26.9, 26.2, 25.5, 26.2, 25.7, 25.1, 24.6, 24.2, 23.7, 23.3, 22.9, 22.5, 23.4, 23.0, 22.7, 22.4, 22.2, 21.9, 21.7, 21.5, 21.3, 21.1, 20.9, 20.8, 20.7, 20.5, 20.4, 20.3, 20.3, 20.2, 20.1, 20.1, 20.1, 20.1, 47.1, 46.1, 46.1, 45.2, 45.3, 45.4, 44.5, 44.7, 43.9, 44.1, 44.4, 43.6, 43.9, 43.2, 43.6, 44.0, 43.3, 43.8, 43.2, 43.7, 44.3, 43.7, 44.4, 43.8, 44.5, 45.2, 44.9, 45.6, 45.3, 46.3, 46.2, 47.0, 48.1, 47.9, 48.6, 49.0, 50.5, 50.4, 51.1, 52.2, 53.0, 54.3, 53.7, 52.9, 52.2, 51.5, 50.9, 50.4, 49.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 47.8, 48.3, 48.8, 49.3, 49.8, 50.4, 51.1, 51.8, 52.5, 52.4, 52.2, 51.4, 50.4, 50.4, 49.2, 49.0, 49.2, 48.4, 48.1, 47.9, 47.3, 47.5, 46.6, 47.0, 47.1, 46.5, 46.8, 46.2, 46.7, 46.0, 46.5, 46.8, 46.5, 46.9, 46.6, 47.2, 46.8, 47.4, 48.1, 47.8, 48.5, 48.2, 49.0, 48.8, 49.6, 49.4, 51.1, 51.2, 52.1, 52.1, 53.1, 52.1, 52.1, 51.2, 51.1, 49.4, 49.6, 48.8, 49.0, 48.2, 48.5, 47.8, 48.1, 47.4, 46.8, 47.2, 46.6, 46.9, 46.5, 46.8, 46.5, 46.0, 46.7, 46.2, 46.8, 46.5, 47.1, 47.0, 46.6, 47.5, 47.3, 47.9, 48.1, 48.4, 49.2, 49.0, 49.2, 50.4, 50.4, 51.4, 52.2, 52.4, 52.5, 51.8, 51.1, 50.4, 49.8, 49.3, 48.8, 48.3, 47.8, 47.9, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 49.8, 50.4, 50.9, 51.5, 52.2, 52.9, 53.7, 54.3, 53.0, 52.2, 51.1, 50.4, 50.5, 49.0, 48.6, 47.9, 48.1, 47.0, 46.2, 46.3, 45.3, 45.6, 44.9, 45.2, 44.5, 43.8, 44.4, 43.7, 44.3, 43.7, 43.2, 43.8, 43.3, 44.0, 43.6, 43.2, 43.9, 43.6, 44.4, 44.1, 43.9, 44.7, 44.5, 45.4, 45.3, 45.2, 46.1, 46.1, 35.0, 35.1, 34.1, 33.1, 33.2, 32.7, 32.4, 31.5, 31.7, 31.8, 31.0, 30.1, 30.4, 30.6, 29.8, 30.1, 29.3, 29.6, 29.9, 29.2, 29.5, 28.8, 29.2, 29.6, 28.9, 29.4, 28.7, 29.2, 29.8, 29.1, 29.7, 29.1, 29.7, 30.4, 29.8, 30.4, 30.0, 30.9, 31.2, 31.3, 31.3, 31.8, 31.5, 32.5, 32.9, 33.4, 33.2, 34.6, 34.7, 35.4, 35.7, 36.9, 37.7, 37.5, 39.2, 40.0, 41.1, 41.7, 42.5, 44.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 47.2, 45.3, 44.4, 42.5, 41.7, 41.1, 40.0, 39.2, 37.5, 37.7, 36.9, 35.7, 35.4, 34.7, 34.6, 33.2, 33.4, 32.9, 32.5, 32.7, 31.8, 31.3, 31.3, 31.2, 30.9, 30.0, 30.4, 29.8, 30.4, 29.7, 29.1, 29.7, 29.1, 29.8, 29.2, 28.7, 29.4, 28.9, 29.6, 29.2, 28.8, 29.5, 29.2, 29.9, 29.6, 29.3, 30.1, 29.8, 30.6, 30.4, 30.1, 31.0, 31.8, 31.7, 31.5, 32.4, 32.7, 33.2, 33.1, 34.1, 35.1, 35.0, 35.1, 36.1, 37.2, 37.2, 38.3, 39.5, 39.6, 40.8, 43.1, 43.3, 44.7, 46.0, 47.4, 48.9, 51.5, 52.0, 54.7, 55.4, 55.7, 55.2, 54.8, 54.5, 54.5, 54.2, 53.9, 53.8, 54.6, 54.4, 54.2, 54.0, 53.9, 55.2, 55.2, 55.1, 55.2, 55.2, 55.9, 56.1, 56.3, 56.6, 58.0, 58.3, 58.7, 59.0, 58.3, 58.7, 58.0, 58.5, 58.4, 58.5, 58.0, 57.5, 57.1, 56.7, 56.4, 56.1, 55.9, 55.7, 56.5, 56.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 56.3, 56.5, 55.7, 55.9, 56.1, 56.4, 56.7, 57.1, 57.5, 58.0, 58.5, 57.9, 58.5, 59.1, 58.7, 58.3, 57.9, 58.7, 58.3, 56.9, 56.6, 56.3, 56.1, 55.3, 55.2, 55.2, 55.1, 55.2, 53.8, 53.9, 54.0, 54.2, 53.6, 53.7, 53.8, 53.9, 54.2, 54.3, 54.5, 54.8, 55.2, 54.9, 55.4, 53.6, 52.0, 50.4, 48.9, 47.4, 46.0, 44.7, 43.3, 42.1, 40.8, 39.6, 39.5, 38.3, 37.2, 37.2, 36.1, 35.1, 30.0, 30.1, 30.1, 30.1, 30.2, 30.3, 30.4, 30.5, 30.6, 30.8, 31.0, 31.2, 31.4, 31.6, 31.9, 32.2, 32.5, 32.9, 33.2, 33.6, 34.1, 34.5, 35.0, 35.6, 36.1, 36.7, 37.4, 38.1, 38.9, 39.7, 40.5, 41.5, 42.5, 42.9, 43.2, 43.6, 44.0, 43.9, 43.7, 44.1, 44.5, 44.9, 44.8, 44.9, 45.4, 46.0, 46.5, 46.9, 47.1, 47.3, 47.8, 48.5, 49.2, 49.9, 50.6, 51.3, 52.0, 52.7, 52.6, 52.4, 52.3, 52.2, 52.1, 52.1, 52.1, 52.1, 52.1, 52.2, 52.3, 52.4, 52.6, 52.8, 52.0, 51.3, 50.6, 49.9, 49.2, 48.5, 47.8, 47.3, 47.1, 46.9, 46.5, 46.0, 45.4, 44.9, 44.8, 44.9, 44.5, 44.1, 43.7, 43.9, 44.0, 43.6, 43.2, 42.9, 42.5, 41.5, 40.5, 39.7, 38.9, 38.1, 37.4, 36.7, 36.1, 35.6, 35.0, 34.5, 34.1, 33.6, 33.2, 32.9, 32.5, 32.2, 31.9, 31.6, 31.4, 31.2, 31.0, 30.8, 30.6, 30.5, 30.4, 30.3, 30.2, 30.1, 30.1, 30.1, 30.0, 30.1, 30.1, 30.1, 30.2, 30.3, 30.4, 30.5, 30.6, 30.8, 31.0, 31.2, 31.4, 31.6, 31.9, 32.2, 32.5, 32.9, 33.2, 33.6, 34.1, 34.5, 35.0, 35.6, 36.1, 36.7, 37.4, 38.1, 38.9, 39.7, 40.5, 41.5, 42.5, 42.9, 43.2, 43.6, 44.0, 43.9, 43.7, 44.1, 44.5, 44.9, 44.8, 44.9, 45.4, 46.0, 46.5, 46.9, 47.1, 47.3, 47.8, 48.5, 49.2, 49.9, 50.6, 51.3, 52.0, 52.7, 52.6, 52.4, 52.3, 52.2, 52.1, 52.1, 52.1, 52.1, 52.1, 52.2, 52.3, 52.4, 52.6, 52.8, 52.0, 51.3, 50.6, 49.9, 49.2, 48.5, 47.8, 47.3, 47.1, 46.9, 46.5, 46.0, 45.4, 44.9, 44.8, 44.9, 44.5, 44.1, 43.7, 43.9, 44.0, 43.6, 43.2, 42.9, 42.5, 41.5, 40.5, 39.7, 38.9, 38.1, 37.4, 36.7, 36.1, 35.6, 35.0, 34.5, 34.1, 33.6, 33.2, 32.9, 32.5, 32.2, 31.9, 31.6, 31.4, 31.2, 31.0, 30.8, 30.6, 30.5, 30.4, 30.3, 30.2, 30.1, 30.1, 30.1, 49.1, 49.1, 48.1, 48.2, 48.3, 48.4, 47.6, 47.8, 47.0, 47.2, 47.5, 46.7, 47.1, 47.4, 47.5, 47.2, 47.7, 47.1, 47.6, 47.1, 47.7, 47.2, 47.9, 47.4, 48.2, 47.8, 48.6, 48.3, 48.9, 48.9, 48.6, 48.4, 48.1, 47.9, 47.7, 47.6, 47.3, 47.2, 47.4, 47.8, 47.0, 47.4, 47.9, 47.2, 47.7, 48.2, 47.6, 48.2, 47.7, 47.3, 47.8, 47.9, 48.1, 47.8, 48.5, 48.2, 48.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.9, 47.8, 47.3, 47.7, 48.2, 47.6, 48.2, 47.7, 47.2, 47.9, 47.4, 47.0, 46.9, 47.4, 47.2, 47.3, 47.6, 47.7, 47.9, 48.1, 48.4, 48.6, 48.9, 48.9, 48.3, 48.6, 47.8, 48.2, 47.4, 47.9, 47.2, 47.7, 47.1, 47.6, 47.1, 47.7, 47.2, 47.5, 47.4, 47.1, 46.7, 47.5, 47.2, 47.0, 47.8, 47.6, 47.4, 48.3, 48.2, 48.1, 49.1, 49.1, 49.1, 48.1, 48.2, 48.3, 47.4, 47.6, 47.8, 47.0, 47.2, 47.5, 46.7, 47.1, 47.4, 47.5, 47.2, 47.7, 47.1, 47.6, 47.1, 47.7, 47.2, 47.9, 47.4, 48.2, 47.8, 48.6, 48.3, 48.9, 48.9, 48.6, 48.4, 48.1, 47.9, 47.7, 47.6, 47.3, 47.2, 47.4, 46.9, 47.0, 47.4, 47.9, 47.2, 47.7, 48.2, 47.6, 48.2, 47.7, 47.3, 47.8, 47.9, 48.1, 47.8, 48.5, 48.2, 48.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.9, 47.8, 47.3, 47.7, 48.2, 47.6, 48.2, 47.7, 47.2, 47.9, 47.4, 47.0, 46.9, 47.4, 47.2, 47.3, 47.6, 47.7, 47.9, 48.1, 48.4, 48.6, 48.9, 48.9, 48.3, 48.6, 47.8, 48.2, 47.4, 47.9, 47.2, 47.7, 47.1, 47.6, 47.1, 47.7, 47.2, 47.5, 47.4, 47.1, 46.7, 47.5, 47.2, 47.0, 47.8, 47.6, 47.4, 48.3, 48.2, 48.1, 49.1, 49.1, 49.1, 48.1, 48.2, 48.3, 47.4, 47.6, 46.7, 47.0, 46.2, 46.4, 46.7, 46.0, 46.4, 45.7, 46.1, 46.6, 46.0, 46.5, 46.0, 46.5, 46.7, 46.7, 46.8, 47.0, 47.8, 47.4, 48.3, 47.9, 48.9, 49.2, 49.8, 51.0, 50.8, 51.3, 52.1, 51.8, 50.8, 51.1, 50.2, 50.4, 49.8, 50.2, 49.5, 48.8, 49.3, 49.2, 49.3, 48.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 48.8, 49.3, 48.7, 49.3, 48.8, 49.5, 50.2, 49.8, 50.4, 50.2, 51.1, 50.8, 51.8, 51.6, 51.3, 50.8, 49.5, 49.8, 49.2, 48.9, 47.9, 48.3, 47.4, 47.8, 47.0, 46.8, 46.7, 46.7, 46.5, 46.0, 46.5, 46.0, 46.6, 46.1, 45.7, 46.4, 46.0, 45.7, 46.4, 46.2, 47.0, 46.7, 47.6, 47.4, 48.3, 48.2, 48.1, 49.1, 49.1, 49.1, 48.1, 48.2, 48.3, 47.4, 47.6, 46.7, 47.0, 46.2, 46.4, 45.7, 46.0, 46.4, 45.7, 46.1, 46.6, 46.0, 46.5, 46.0, 46.5, 46.7, 46.7, 46.8, 47.0, 47.8, 47.4, 48.3, 47.9, 48.9, 49.2, 49.8, 49.5, 50.8, 51.3, 51.6, 51.8, 50.8, 51.1, 50.2, 50.4, 49.8, 50.2, 49.5, 48.8, 49.3, 48.7, 49.3, 48.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 48.8, 49.3, 48.7, 49.3, 48.8, 49.5, 50.2, 49.8, 50.4, 50.2, 51.1, 50.8, 51.8, 51.6, 51.3, 50.8, 51.0, 49.8, 49.2, 48.9, 47.9, 48.3, 47.4, 47.8, 47.0, 46.8, 46.7, 46.7, 46.5, 46.0, 46.5, 46.0, 46.6, 46.1, 45.7, 46.4, 46.0, 46.7, 46.4, 46.2, 47.0, 46.7, 47.6, 47.4, 48.3, 48.2, 48.1, 49.1, 22.0, 22.1, 22.1, 22.1, 22.2, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7, 22.9, 23.0, 23.2, 23.4, 22.6, 22.8, 23.0, 23.3, 23.6, 23.9, 24.2, 24.5, 24.9, 25.3, 25.7, 26.2, 26.7, 27.2, 27.8, 28.4, 29.0, 28.3, 29.1, 29.8, 30.4, 30.0, 30.9, 31.9, 31.9, 32.4, 33.7, 33.9, 34.5, 36.1, 35.9, 37.5, 38.3, 39.2, 39.7, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 40.4, 39.7, 39.2, 37.2, 37.5, 35.6, 35.2, 34.5, 33.1, 33.2, 32.4, 31.3, 31.2, 30.9, 30.0, 29.1, 29.7, 29.1, 28.3, 27.7, 28.3, 27.8, 27.2, 26.7, 26.2, 25.7, 25.3, 24.9, 24.5, 24.2, 23.9, 23.6, 23.3, 23.0, 22.8, 22.6, 22.4, 22.4, 23.0, 22.9, 22.7, 22.6, 22.5, 22.4, 22.3, 22.2, 22.2, 22.1, 22.1, 22.1, 22.0, 22.1, 22.1, 22.1, 22.2, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7, 22.9, 23.0, 22.4, 22.4, 22.6, 22.8, 23.0, 23.3, 23.6, 23.9, 24.2, 24.5, 24.9, 25.3, 25.7, 26.2, 26.7, 27.2, 27.8, 28.3, 27.7, 28.3, 29.1, 29.7, 29.1, 30.0, 30.9, 31.2, 31.3, 32.4, 33.2, 33.1, 34.5, 35.2, 35.6, 37.5, 37.2, 39.2, 39.7, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 40.4, 39.7, 39.2, 38.3, 37.5, 35.9, 36.1, 34.5, 33.9, 33.7, 32.4, 31.9, 31.9, 30.9, 30.0, 30.4, 29.8, 29.1, 28.3, 29.0, 28.4, 27.8, 27.2, 26.7, 26.2, 25.7, 25.3, 24.9, 24.5, 24.2, 23.9, 23.6, 23.3, 23.0, 22.8, 22.6, 23.4, 23.2, 23.0, 22.9, 22.7, 22.6, 22.5, 22.4, 22.3, 22.2, 22.2, 22.1, 22.1, 22.1, 20.0, 20.1, 20.1, 20.1, 20.1, 20.2, 20.3, 20.3, 20.4, 20.5, 20.7, 20.8, 20.9, 21.1, 21.3, 21.5, 21.7, 21.9, 22.2, 22.4, 22.7, 23.0, 23.4, 23.7, 24.1, 24.5, 25.0, 25.4, 25.9, 26.5, 27.0, 27.7, 28.3, 30.5, 31.3, 32.2, 33.2, 34.2, 35.3, 36.5, 37.8, 39.3, 40.9, 40.6, 40.9, 41.5, 42.1, 42.0, 43.3, 44.0, 44.6, 44.7, 45.0, 45.7, 47.5, 48.2, 49.0, 49.8, 50.6, 51.4, 53.3, 54.4, 56.1, 57.1, 58.1, 57.1, 56.1, 54.4, 52.3, 51.4, 50.6, 49.8, 49.0, 48.2, 46.4, 45.7, 45.0, 44.7, 44.6, 44.0, 43.3, 42.0, 42.1, 41.5, 40.9, 40.6, 40.9, 39.3, 37.8, 36.5, 35.3, 34.2, 33.2, 32.2, 31.3, 29.1, 28.3, 27.7, 27.0, 26.5, 25.9, 25.4, 25.0, 24.5, 24.1, 23.7, 23.4, 23.0, 22.7, 22.4, 22.2, 21.9, 21.7, 21.5, 21.3, 21.1, 20.9, 20.8, 20.7, 20.5, 20.4, 20.3, 20.3, 20.2, 20.1, 20.1, 20.1, 20.1, 20.0, 20.1, 20.1, 20.1, 20.1, 20.2, 20.3, 20.3, 20.4, 20.5, 20.7, 20.8, 20.9, 21.1, 21.3, 21.5, 21.7, 21.9, 22.2, 22.3, 21.6, 21.9, 22.2, 22.5, 22.9, 23.3, 23.7, 24.2, 24.6, 25.1, 25.7, 26.2, 25.5, 26.2, 26.9, 26.5, 26.8, 27.7, 27.4, 27.8, 28.8, 28.5, 29.2, 29.9, 29.7, 30.3, 30.5, 31.8, 31.4, 33.3, 33.0, 34.8, 34.5, 36.4, 37.1, 38.0, 38.8, 40.6, 40.9, 42.4, 44.3, 46.2, 48.1, 49.1, 51.1, 49.1, 48.1, 46.2, 44.3, 42.4, 40.9, 40.6, 38.8, 38.0, 37.1, 36.4, 34.5, 34.8, 33.0, 33.3, 31.4, 31.8, 30.5, 30.3, 29.7, 29.9, 29.2, 28.5, 28.8, 27.8, 27.4, 27.7, 26.8, 26.5, 26.9, 26.2, 25.5, 26.2, 25.7, 25.1, 24.6, 24.2, 23.7, 23.3, 22.9, 22.5, 23.4, 23.0, 22.7, 22.4, 22.2, 21.9, 21.7, 21.5, 21.3, 21.1, 20.9, 20.8, 20.7, 20.5, 20.4, 20.3, 20.3, 20.2, 20.1, 20.1, 20.1, 20.1, 50.1, 50.1, 49.1, 49.2, 48.3, 48.4, 47.6, 46.8, 47.0, 46.2, 46.4, 45.7, 46.0, 45.3, 45.7, 45.1, 45.5, 44.9, 45.4, 46.0, 45.4, 46.0, 45.5, 46.2, 45.8, 46.5, 46.1, 47.0, 46.6, 47.5, 47.3, 47.9, 48.1, 48.4, 49.2, 49.0, 50.5, 50.4, 51.1, 52.2, 52.2, 53.3, 53.7, 52.9, 52.2, 51.5, 50.9, 50.4, 49.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 49.8, 50.4, 50.9, 51.5, 52.2, 52.9, 53.7, 53.3, 52.2, 52.2, 51.1, 50.4, 50.5, 49.0, 49.2, 48.4, 48.1, 47.9, 47.3, 47.5, 46.6, 47.0, 46.1, 46.5, 45.8, 46.2, 45.5, 46.0, 45.4, 44.8, 45.4, 44.9, 45.5, 45.1, 45.7, 45.3, 46.0, 45.7, 46.4, 46.2, 47.0, 46.8, 47.6, 48.4, 48.3, 49.2, 49.1, 50.1, 50.1, 50.1, 49.1, 49.2, 48.3, 48.4, 47.6, 46.8, 47.0, 46.2, 46.4, 45.7, 46.0, 45.3, 45.7, 45.1, 45.5, 44.9, 45.4, 44.8, 45.4, 44.9, 45.5, 46.2, 45.8, 46.5, 46.1, 47.0, 46.6, 47.5, 47.3, 47.9, 48.1, 48.4, 49.2, 49.0, 50.5, 50.4, 51.1, 52.2, 52.2, 53.3, 53.7, 52.9, 52.2, 51.5, 50.9, 50.4, 49.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 49.8, 50.4, 50.9, 51.5, 52.2, 52.9, 53.7, 53.3, 52.2, 52.2, 51.1, 50.4, 50.5, 49.0, 49.2, 48.4, 48.1, 47.9, 47.3, 47.5, 46.6, 47.0, 46.1, 46.5, 45.8, 46.2, 45.5, 46.0, 45.4, 46.0, 45.4, 44.9, 45.5, 45.1, 45.7, 45.3, 46.0, 45.7, 46.4, 46.2, 47.0, 46.8, 47.6, 48.4, 48.3, 49.2, 49.1, 50.1, 34.0, 34.1, 33.1, 32.1, 32.2, 32.3, 31.4, 30.5, 30.6, 30.8, 29.9, 30.0, 29.3, 29.5, 29.7, 29.0, 28.8, 28.5, 28.8, 29.0, 28.4, 28.5, 28.0, 28.5, 28.8, 28.2, 28.6, 28.0, 28.5, 29.1, 28.4, 29.0, 29.7, 29.1, 29.7, 29.1, 30.0, 30.5, 30.3, 30.6, 30.6, 31.8, 31.5, 32.2, 31.9, 33.4, 33.2, 34.0, 34.0, 35.4, 35.7, 35.9, 37.7, 37.5, 38.2, 40.0, 40.8, 41.0, 42.5, 44.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 47.2, 45.3, 44.4, 42.5, 41.7, 41.1, 40.0, 39.2, 37.5, 37.7, 36.9, 35.7, 35.4, 34.7, 34.6, 34.3, 33.4, 32.9, 32.5, 32.7, 31.8, 31.3, 31.3, 31.2, 30.9, 30.0, 30.4, 29.8, 30.4, 29.7, 29.1, 29.7, 29.1, 29.8, 29.2, 28.7, 29.4, 28.9, 29.6, 29.2, 28.8, 29.5, 29.2, 29.9, 29.6, 29.3, 30.1, 29.8, 30.6, 30.4, 30.1, 31.0, 31.8, 31.7, 31.5, 32.4, 32.7, 33.2, 33.1, 34.1, 35.1, 35.0, 36.1, 36.1, 37.2, 38.2, 38.3, 39.5, 40.6, 40.8, 43.1, 43.3, 44.7, 46.0, 47.4, 48.9, 51.5, 52.0, 54.7, 56.5, 56.0, 55.6, 55.2, 54.8, 55.7, 55.4, 55.1, 54.8, 54.6, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.5, 55.7, 55.9, 57.1, 57.4, 57.6, 58.0, 58.4, 58.9, 59.0, 58.3, 58.7, 58.0, 58.5, 57.9, 57.4, 58.0, 57.5, 57.1, 56.7, 56.4, 56.1, 55.9, 55.7, 55.5, 55.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 56.3, 56.5, 56.7, 55.9, 56.1, 56.4, 56.7, 57.1, 57.5, 57.4, 57.4, 57.9, 58.5, 59.1, 58.7, 58.3, 57.9, 56.9, 56.5, 56.1, 55.8, 55.1, 54.8, 54.6, 53.6, 53.6, 53.7, 53.7, 52.4, 52.5, 52.7, 52.9, 52.1, 52.1, 52.3, 52.6, 52.2, 52.4, 52.5, 52.8, 53.1, 53.4, 53.1, 51.5, 50.9, 48.3, 46.8, 45.3, 43.9, 42.6, 42.3, 40.0, 39.8, 38.6, 37.5, 37.3, 36.2, 36.1, 35.1, 34.1, 34.0, 34.1, 34.1, 34.1, 34.2, 34.3, 34.4, 34.6, 34.7, 34.9, 35.1, 35.3, 35.6, 35.9, 36.2, 36.5, 36.9, 37.2, 37.7, 38.1, 38.6, 39.1, 39.7, 40.3, 40.9, 41.6, 42.4, 43.2, 44.0, 45.0, 45.9, 45.6, 45.3, 45.6, 45.9, 46.0, 45.8, 45.7, 46.1, 46.5, 46.8, 47.4, 47.9, 48.3, 48.8, 49.0, 49.2, 49.4, 49.8, 50.4, 51.0, 51.7, 52.3, 53.0, 52.6, 52.3, 52.0, 52.7, 52.6, 52.4, 52.3, 52.2, 52.1, 52.1, 52.1, 52.1, 52.1, 52.2, 51.3, 50.4, 49.6, 48.8, 48.0, 47.2, 46.4, 45.7, 45.0, 44.7, 44.6, 44.0, 43.3, 42.7, 42.2, 42.3, 42.0, 41.4, 40.9, 41.2, 40.9, 40.4, 40.3, 40.6, 40.2, 39.9, 40.3, 39.2, 39.6, 39.2, 39.2, 38.3, 37.6, 36.8, 36.2, 35.5, 34.9, 34.4, 33.9, 33.4, 32.9, 32.5, 32.1, 31.8, 31.4, 31.1, 30.9, 30.6, 30.4, 30.1, 29.9, 29.8, 29.6, 29.5, 29.4, 29.3, 29.2, 29.1, 29.1, 29.1, 29.0, 29.1, 29.1, 29.1, 29.2, 29.3, 29.4, 29.5, 29.6, 29.8, 29.9, 30.1, 30.4, 30.6, 30.9, 31.1, 31.4, 31.8, 32.1, 32.5, 32.9, 33.4, 33.9, 34.4, 34.9, 35.5, 36.2, 36.8, 37.6, 38.3, 39.2, 39.2, 39.6, 39.2, 40.3, 39.9, 40.2, 40.6, 40.3, 40.4, 40.9, 41.2, 40.9, 41.4, 42.0, 42.3, 42.1, 42.7, 43.3, 44.0, 44.6, 44.7, 45.0, 45.7, 46.4, 47.2, 48.0, 48.8, 49.6, 50.4, 51.3, 52.2, 52.1, 52.1, 52.1, 52.1, 52.1, 52.2, 52.3, 52.4, 52.6, 51.8, 52.0, 52.3, 52.6, 53.0, 52.3, 51.7, 51.0, 50.4, 49.8, 49.4, 49.2, 49.0, 48.8, 48.3, 47.9, 46.8, 46.8, 46.5, 46.1, 45.7, 45.8, 46.0, 45.9, 45.6, 45.3, 45.6, 45.9, 45.0, 44.0, 43.2, 42.4, 41.6, 40.9, 40.3, 39.7, 39.1, 38.6, 38.1, 37.7, 37.2, 36.9, 36.5, 36.2, 35.9, 35.6, 35.3, 35.1, 34.9, 34.7, 34.6, 34.4, 34.3, 34.2, 34.1, 34.1, 34.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 47.6, 47.8, 48.0, 48.2, 48.5, 47.8, 48.1, 48.5, 48.9, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 48.7, 48.6, 48.2, 48.7, 48.6, 48.8, 48.9, 48.9, 48.6, 48.4, 48.1, 47.9, 47.7, 47.6, 47.9, 48.3, 47.4, 47.8, 48.2, 48.6, 47.9, 48.3, 48.8, 48.2, 48.7, 48.2, 47.7, 48.3, 47.8, 47.9, 48.1, 47.8, 48.5, 48.2, 48.0, 47.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.4, 47.5, 47.2, 47.1, 47.1, 46.8, 46.8, 46.5, 46.7, 46.7, 46.2, 46.8, 46.5, 47.1, 47.0, 46.6, 47.5, 47.3, 47.0, 48.1, 47.9, 47.7, 47.6, 47.9, 47.0, 47.1, 46.5, 46.8, 46.2, 45.5, 46.0, 45.4, 46.0, 45.4, 44.9, 45.5, 45.1, 45.7, 45.3, 45.0, 45.7, 45.4, 45.7, 45.9, 46.7, 46.6, 46.4, 47.3, 47.2, 47.1, 48.1, 48.1, 48.1, 47.1, 47.2, 47.3, 46.4, 46.6, 46.7, 45.9, 45.7, 45.4, 45.7, 45.0, 45.3, 44.7, 45.1, 45.5, 44.9, 45.4, 46.0, 45.4, 46.0, 45.5, 46.2, 46.8, 46.5, 47.1, 47.0, 47.9, 47.6, 47.7, 47.9, 48.1, 47.0, 47.3, 47.5, 46.6, 47.0, 47.1, 46.5, 46.8, 46.2, 46.7, 46.7, 46.5, 46.8, 46.8, 47.1, 47.1, 47.2, 47.5, 47.4, 48.1, 47.8, 48.5, 48.2, 48.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 47.9, 47.8, 48.3, 47.7, 48.2, 48.7, 48.2, 48.8, 48.3, 47.9, 48.6, 48.2, 47.8, 47.4, 48.3, 47.9, 47.6, 47.7, 47.9, 48.1, 48.4, 48.6, 48.9, 48.9, 48.8, 48.6, 48.7, 48.2, 48.6, 48.7, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 48.9, 48.5, 48.1, 47.8, 48.5, 48.2, 48.0, 47.8, 47.6, 48.4, 48.3, 48.2, 48.1, 48.1, 52.1, 51.1, 51.1, 51.2, 50.3, 49.4, 49.6, 48.8, 49.0, 49.2, 48.5, 48.8, 48.1, 48.5, 47.8, 48.3, 47.7, 48.2, 48.7, 48.2, 48.8, 48.3, 48.7, 48.6, 49.4, 49.0, 49.9, 49.5, 50.5, 50.6, 51.3, 51.1, 52.4, 52.5, 52.7, 52.1, 51.8, 50.8, 51.1, 50.4, 50.6, 49.8, 50.2, 49.5, 48.8, 49.3, 49.2, 49.3, 48.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 48.8, 48.1, 48.5, 48.9, 48.3, 48.8, 49.3, 48.7, 49.0, 48.8, 49.5, 49.0, 49.8, 49.4, 50.2, 50.4, 50.4, 50.5, 49.0, 49.2, 48.4, 48.1, 47.0, 47.3, 46.3, 45.8, 45.7, 44.9, 45.2, 44.5, 44.9, 44.4, 43.7, 44.3, 43.7, 43.2, 43.8, 43.3, 42.9, 43.6, 43.2, 43.9, 43.6, 43.3, 44.1, 43.9, 43.7, 44.5, 44.4, 45.3, 45.2, 45.1, 46.1, 46.1, 46.1, 45.1, 45.2, 44.3, 44.4, 44.5, 43.7, 43.9, 44.1, 43.3, 43.6, 43.9, 43.2, 43.6, 42.9, 43.3, 43.8, 43.2, 43.7, 44.3, 43.7, 44.4, 44.9, 44.5, 45.2, 44.9, 45.7, 45.8, 46.3, 47.3, 47.0, 48.1, 48.4, 49.2, 49.0, 50.5, 50.4, 50.4, 50.2, 49.4, 49.8, 49.0, 49.5, 48.8, 49.0, 48.7, 49.3, 48.8, 48.3, 48.9, 48.5, 48.1, 47.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 48.8, 49.3, 49.2, 49.3, 48.8, 49.5, 50.2, 49.8, 50.4, 50.2, 51.1, 50.8, 51.8, 52.1, 52.7, 52.5, 52.4, 51.1, 51.3, 50.6, 50.5, 49.5, 49.9, 49.0, 49.4, 48.6, 48.7, 48.3, 48.8, 48.2, 48.7, 48.2, 47.7, 48.3, 47.8, 48.5, 48.1, 48.8, 48.5, 49.2, 49.0, 48.8, 49.6, 49.4, 50.3, 51.2, 51.1, 51.1, 24.0, 24.1, 24.1, 24.1, 24.2, 24.2, 24.3, 24.4, 24.5, 23.6, 23.8, 23.9, 24.1, 24.3, 24.5, 24.7, 23.9, 24.1, 24.4, 24.7, 25.0, 25.3, 25.3, 24.9, 25.3, 25.7, 26.2, 26.7, 27.2, 27.6, 27.0, 27.7, 28.3, 29.0, 28.4, 29.1, 30.0, 30.5, 30.3, 31.3, 32.4, 32.0, 33.1, 34.5, 34.1, 35.6, 36.6, 37.1, 39.0, 39.0, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 44.9, 44.1, 43.3, 42.6, 41.8, 41.5, 41.5, 39.7, 39.2, 37.2, 37.5, 35.6, 35.2, 34.5, 33.1, 33.2, 32.4, 31.3, 31.2, 30.9, 30.0, 29.1, 29.7, 29.1, 28.3, 27.7, 28.3, 27.8, 27.2, 26.7, 26.2, 25.7, 25.3, 24.9, 24.5, 24.2, 23.9, 23.6, 23.3, 23.0, 23.6, 23.6, 23.4, 23.2, 23.0, 22.9, 22.7, 22.6, 22.5, 22.4, 22.3, 22.2, 22.2, 22.1, 22.1, 22.1, 22.0, 22.1, 22.1, 22.1, 22.2, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7, 22.9, 23.0, 23.2, 23.4, 23.6, 23.6, 23.0, 23.3, 23.6, 23.9, 24.2, 24.5, 24.9, 25.3, 25.7, 26.2, 26.7, 27.2, 27.8, 28.3, 27.7, 28.3, 29.1, 29.7, 29.1, 30.0, 30.9, 31.2, 31.3, 32.4, 33.2, 33.1, 34.5, 35.2, 35.6, 37.5, 37.2, 39.2, 39.7, 41.5, 41.5, 41.9, 42.6, 43.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 40.4, 39.0, 39.0, 37.1, 36.6, 35.6, 34.1, 34.5, 33.1, 32.0, 32.4, 31.3, 30.3, 30.5, 30.0, 29.1, 28.4, 29.0, 28.3, 27.7, 27.0, 27.6, 27.2, 26.7, 26.2, 25.7, 25.3, 24.9, 25.3, 25.3, 25.0, 24.7, 24.4, 24.1, 23.9, 24.7, 24.5, 24.3, 24.1, 23.9, 23.8, 23.6, 24.5, 24.4, 24.3, 24.2, 24.2, 24.1, 24.1, 24.1, 21.0, 21.1, 21.1, 21.1, 21.2, 21.2, 21.3, 21.4, 21.5, 21.6, 21.7, 21.8, 22.0, 22.2, 23.4, 23.6, 23.9, 24.1, 24.4, 24.7, 25.0, 25.3, 25.7, 26.1, 26.5, 27.0, 28.7, 29.2, 29.8, 30.4, 31.1, 31.8, 32.6, 33.4, 35.8, 36.8, 37.9, 39.1, 40.3, 41.7, 43.2, 43.0, 43.2, 44.7, 44.6, 46.0, 46.5, 46.9, 47.7, 49.4, 50.0, 51.1, 51.7, 53.0, 53.7, 55.4, 56.4, 58.5, 58.7, 56.5, 55.3, 53.2, 52.1, 51.1, 51.1, 49.1, 48.1, 47.2, 46.3, 45.4, 44.5, 43.7, 42.9, 42.1, 41.3, 41.6, 41.4, 41.1, 40.4, 39.7, 39.2, 39.4, 38.8, 38.1, 38.2, 38.0, 37.4, 37.4, 37.3, 36.5, 35.3, 34.2, 33.2, 32.2, 31.3, 30.5, 29.7, 29.0, 28.4, 27.8, 27.2, 26.7, 26.2, 25.7, 25.3, 24.9, 24.5, 24.2, 23.9, 23.6, 22.2, 21.9, 21.7, 21.5, 21.3, 21.1, 20.9, 20.8, 20.7, 20.5, 20.4, 20.3, 20.3, 20.2, 20.1, 20.1, 20.1, 20.1, 20.0, 20.1, 20.1, 20.1, 20.1, 20.2, 20.3, 20.3, 20.4, 20.5, 20.7, 20.8, 20.9, 21.1, 21.3, 21.5, 21.7, 21.9, 22.2, 22.4, 22.7, 22.4, 22.2, 22.5, 22.9, 23.3, 23.7, 24.2, 24.6, 25.1, 25.7, 26.2, 25.5, 26.2, 26.9, 26.5, 26.8, 27.7, 27.4, 27.8, 28.8, 28.5, 29.2, 29.9, 29.7, 30.3, 30.5, 31.8, 31.4, 33.3, 33.0, 34.8, 34.5, 36.4, 37.1, 38.0, 38.8, 40.6, 40.9, 42.4, 44.3, 46.2, 48.1, 49.1, 51.1, 49.1, 48.1, 46.2, 44.3, 42.4, 40.9, 40.6, 38.8, 36.9, 37.1, 35.3, 34.5, 33.8, 33.0, 33.3, 31.4, 31.8, 30.5, 30.3, 29.7, 28.8, 29.2, 28.1, 27.7, 27.8, 26.9, 26.7, 26.8, 26.1, 25.7, 26.2, 25.5, 24.9, 25.4, 25.1, 24.6, 24.2, 23.7, 23.3, 22.9, 22.5, 22.2, 22.4, 22.7, 22.4, 22.2, 21.9, 21.7, 21.5, 21.3, 21.1, 20.9, 20.8, 20.7, 20.5, 20.4, 20.3, 20.3, 20.2, 20.5, 21.1, 21.1, 21.1, 53.1, 52.1, 52.1, 51.2, 51.1, 50.4, 49.6, 48.8, 49.0, 48.2, 48.5, 47.8, 48.1, 47.4, 46.8, 47.2, 46.6, 46.9, 46.5, 46.8, 46.5, 46.0, 46.7, 46.2, 46.8, 46.5, 47.1, 47.0, 47.3, 47.5, 47.3, 47.9, 48.1, 48.4, 49.2, 49.0, 49.2, 50.4, 50.4, 51.4, 52.2, 52.4, 52.5, 51.8, 51.1, 50.4, 49.8, 49.3, 48.8, 48.3, 47.8, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 49.8, 50.4, 50.9, 51.5, 52.2, 52.9, 53.7, 54.3, 53.0, 52.2, 51.1, 50.4, 50.5, 49.0, 48.6, 47.9, 46.7, 47.0, 46.2, 46.3, 45.3, 45.6, 44.9, 45.2, 44.5, 43.8, 44.4, 43.7, 44.3, 43.7, 43.2, 43.8, 43.3, 44.0, 43.6, 43.2, 43.9, 43.6, 44.4, 44.1, 43.9, 44.7, 44.5, 44.4, 45.3, 45.2, 46.1, 46.1, 46.1, 46.1, 46.1, 45.2, 45.3, 44.4, 44.5, 44.7, 43.9, 44.1, 44.4, 43.6, 43.9, 43.2, 43.6, 44.0, 43.3, 43.8, 43.2, 43.7, 44.3, 43.7, 44.4, 43.8, 44.5, 45.2, 44.9, 45.6, 45.3, 46.3, 46.2, 47.0, 46.7, 47.9, 48.6, 49.0, 49.2, 50.4, 51.1, 52.2, 53.0, 54.3, 53.7, 52.9, 52.2, 51.5, 50.9, 50.4, 49.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 47.9, 47.8, 48.3, 48.8, 49.3, 49.8, 50.4, 51.1, 51.8, 52.5, 52.4, 52.2, 51.4, 50.4, 50.4, 49.2, 49.0, 49.2, 48.4, 48.1, 47.9, 47.3, 47.5, 47.3, 47.0, 47.1, 46.5, 46.8, 46.2, 46.7, 46.0, 46.5, 46.8, 46.5, 46.9, 46.6, 47.2, 46.8, 47.4, 48.1, 47.8, 48.5, 48.2, 49.0, 48.8, 49.6, 50.4, 51.1, 51.2, 52.1, 52.1, 33.0, 33.1, 32.1, 32.1, 31.2, 31.3, 30.4, 30.5, 30.6, 29.8, 28.9, 29.1, 29.3, 28.7, 28.7, 27.9, 28.2, 28.5, 28.1, 28.0, 28.4, 28.5, 28.0, 28.1, 27.7, 28.2, 28.6, 28.0, 28.4, 27.8, 28.4, 29.0, 28.3, 29.0, 28.4, 29.1, 29.8, 29.3, 30.3, 30.6, 30.6, 30.8, 31.2, 32.2, 31.9, 32.5, 32.8, 34.0, 34.0, 34.3, 35.7, 35.9, 37.7, 37.5, 38.2, 40.0, 40.8, 41.0, 42.5, 43.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 47.2, 45.3, 44.4, 42.5, 41.7, 41.1, 40.0, 39.2, 37.5, 37.7, 36.9, 35.7, 35.4, 34.7, 34.6, 33.2, 33.4, 31.9, 32.2, 31.5, 31.8, 30.6, 30.6, 30.3, 30.5, 30.0, 29.1, 29.7, 29.1, 29.7, 29.0, 28.4, 29.1, 28.5, 29.2, 28.7, 28.2, 28.8, 28.5, 29.2, 28.8, 28.4, 29.0, 28.8, 29.6, 29.3, 29.0, 29.7, 29.5, 30.4, 30.1, 29.9, 30.8, 30.8, 31.5, 31.4, 32.3, 32.2, 33.1, 33.1, 34.1, 34.0, 35.1, 35.1, 36.1, 37.2, 37.3, 38.5, 39.6, 39.8, 41.0, 42.3, 43.6, 45.0, 46.4, 47.8, 49.4, 50.9, 53.6, 55.4, 55.7, 55.6, 55.2, 54.8, 54.5, 54.2, 55.1, 54.8, 54.6, 54.4, 54.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.5, 55.7, 55.9, 56.1, 57.4, 57.6, 58.0, 58.3, 58.9, 59.4, 59.4, 58.7, 58.0, 58.5, 57.9, 57.4, 57.4, 57.5, 57.1, 56.7, 56.4, 56.1, 55.9, 55.7, 56.5, 56.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 56.3, 56.5, 56.7, 56.9, 56.4, 56.4, 56.7, 57.1, 57.5, 57.4, 57.4, 57.9, 58.5, 59.1, 58.7, 59.4, 59.0, 58.7, 58.3, 56.9, 56.6, 56.3, 55.4, 55.3, 55.2, 55.2, 55.1, 53.9, 53.8, 53.9, 54.0, 54.2, 53.6, 53.7, 53.8, 53.9, 54.0, 54.3, 54.5, 54.8, 54.5, 54.9, 52.0, 50.4, 48.8, 47.2, 45.7, 44.3, 42.9, 41.6, 40.3, 40.0, 38.8, 37.6, 37.5, 36.3, 35.2, 35.1, 34.1, 33.1, 37.0, 37.1, 37.1, 37.2, 37.2, 37.3, 37.5, 37.6, 37.8, 38.0, 38.2, 38.4, 38.7, 39.0, 39.3, 39.7, 40.1, 40.5, 41.0, 41.5, 42.0, 42.6, 43.2, 43.8, 44.5, 45.3, 46.1, 47.0, 47.3, 47.6, 47.7, 47.9, 48.1, 47.9, 47.7, 47.6, 47.9, 48.8, 48.7, 49.0, 49.4, 49.8, 50.2, 50.6, 51.0, 51.2, 51.5, 52.6, 53.1, 53.6, 54.2, 53.8, 53.3, 53.0, 52.6, 52.3, 52.0, 51.8, 52.6, 52.4, 52.3, 52.2, 52.1, 52.1, 52.1, 51.1, 50.1, 50.2, 49.3, 49.1, 48.6, 47.8, 48.0, 47.2, 47.5, 46.7, 47.1, 46.4, 46.8, 46.1, 45.5, 44.9, 44.5, 44.5, 44.3, 43.7, 43.2, 43.0, 43.2, 42.9, 42.4, 42.3, 42.6, 42.3, 41.9, 42.1, 42.5, 42.1, 41.9, 42.3, 42.6, 41.9, 41.1, 40.4, 39.7, 39.1, 38.5, 38.0, 37.5, 37.0, 36.6, 36.1, 35.8, 35.4, 35.1, 34.8, 34.5, 34.3, 34.1, 33.9, 33.7, 33.5, 33.4, 33.3, 33.2, 33.1, 33.1, 33.1, 33.0, 33.1, 33.1, 33.1, 33.2, 33.3, 33.4, 33.5, 33.7, 33.9, 34.1, 34.3, 34.5, 34.8, 35.1, 35.4, 35.8, 36.1, 36.6, 37.0, 37.5, 38.0, 38.5, 39.1, 39.7, 40.4, 41.1, 41.9, 42.6, 42.3, 41.9, 42.1, 42.5, 42.1, 41.9, 42.3, 42.6, 42.3, 42.4, 42.9, 43.2, 43.0, 43.2, 43.7, 44.3, 44.5, 44.5, 44.9, 45.5, 46.1, 46.8, 46.4, 47.1, 46.7, 47.5, 47.2, 48.0, 47.8, 48.6, 49.1, 49.3, 50.2, 50.1, 51.1, 51.1, 52.1, 52.1, 52.2, 52.3, 52.4, 52.6, 51.8, 52.0, 52.3, 52.6, 53.0, 53.3, 53.8, 54.2, 53.6, 53.1, 51.9, 51.5, 51.2, 51.0, 50.6, 50.2, 49.8, 49.4, 49.0, 48.7, 48.3, 47.9, 47.6, 47.7, 47.9, 48.1, 47.9, 47.7, 47.6, 47.3, 47.0, 46.1, 45.3, 44.5, 43.8, 43.2, 42.6, 42.0, 41.5, 41.0, 40.5, 40.1, 39.7, 39.3, 39.0, 38.7, 38.4, 38.2, 38.0, 37.8, 37.6, 37.5, 37.3, 37.2, 37.2, 37.1, 37.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 47.9, 48.6, 48.2, 47.8, 48.6, 48.3, 47.9, 47.6, 47.7, 47.9, 48.1, 47.9, 47.7, 47.6, 47.9, 48.3, 48.6, 48.7, 48.2, 48.6, 48.7, 48.7, 48.8, 48.2, 48.7, 48.2, 47.7, 48.3, 47.8, 47.4, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 48.0, 48.2, 47.5, 47.8, 47.1, 47.4, 46.8, 46.1, 46.6, 46.0, 46.5, 46.0, 46.5, 46.0, 45.5, 46.2, 45.8, 46.5, 46.1, 45.7, 46.6, 46.3, 47.3, 47.0, 46.7, 47.9, 47.7, 48.9, 48.9, 48.3, 48.6, 47.8, 48.2, 47.4, 47.9, 47.2, 47.7, 47.1, 47.6, 47.1, 47.7, 47.2, 47.5, 47.4, 47.1, 47.8, 47.5, 47.2, 47.0, 47.8, 47.6, 47.4, 48.3, 48.2, 48.1, 49.1, 49.1, 49.1, 48.1, 48.2, 48.3, 47.4, 47.6, 47.8, 47.0, 47.2, 47.5, 47.8, 47.1, 47.4, 47.5, 47.2, 47.7, 47.1, 47.6, 47.1, 47.7, 47.2, 47.9, 47.4, 48.2, 47.8, 48.6, 48.3, 48.9, 48.9, 47.7, 47.9, 46.7, 47.0, 47.3, 46.3, 46.6, 45.7, 46.1, 46.5, 45.8, 46.2, 45.5, 46.0, 46.5, 46.0, 46.5, 46.0, 46.6, 46.1, 46.8, 47.4, 47.1, 47.8, 47.5, 48.2, 48.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 47.4, 47.8, 48.3, 47.7, 48.2, 48.7, 48.2, 48.8, 48.7, 48.7, 48.6, 48.2, 47.8, 48.6, 48.3, 47.9, 47.6, 47.7, 47.9, 48.1, 47.9, 47.7, 47.6, 47.9, 48.3, 48.6, 47.8, 48.2, 48.6, 47.9, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 53.1, 52.1, 52.1, 52.2, 51.3, 50.4, 50.6, 49.8, 50.0, 50.3, 49.5, 48.8, 49.2, 49.5, 48.9, 49.4, 48.8, 49.3, 48.7, 49.3, 48.8, 49.5, 49.0, 49.8, 50.4, 50.2, 50.4, 50.8, 50.5, 51.6, 52.2, 52.5, 52.4, 52.5, 52.7, 51.6, 51.8, 50.8, 51.1, 50.2, 50.4, 49.8, 49.0, 49.5, 48.8, 49.3, 48.7, 49.3, 48.8, 48.3, 48.9, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 48.8, 48.1, 48.5, 47.8, 48.3, 47.7, 48.2, 47.6, 48.2, 48.8, 48.3, 48.7, 48.6, 48.6, 49.0, 48.7, 49.5, 49.2, 50.2, 50.0, 50.8, 51.0, 49.8, 49.2, 48.9, 48.9, 48.3, 47.4, 47.8, 47.0, 47.4, 46.7, 46.7, 46.5, 46.0, 46.5, 46.0, 46.6, 46.1, 45.7, 46.4, 46.0, 46.7, 46.4, 46.2, 47.0, 46.8, 47.6, 47.4, 48.3, 48.2, 49.1, 49.1, 49.1, 49.1, 49.1, 48.2, 48.3, 47.4, 47.6, 46.8, 47.0, 46.2, 46.4, 46.7, 46.0, 46.4, 45.7, 46.1, 46.6, 46.0, 46.5, 46.0, 46.5, 46.7, 46.7, 47.4, 47.0, 47.8, 47.4, 48.3, 48.9, 48.9, 49.2, 49.8, 51.0, 50.8, 50.0, 50.2, 49.2, 49.5, 48.7, 49.0, 48.6, 48.6, 48.7, 48.3, 47.7, 48.2, 47.6, 48.2, 47.7, 48.3, 47.8, 48.5, 48.1, 48.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 48.9, 48.3, 48.8, 49.3, 48.7, 49.3, 48.8, 49.5, 49.0, 49.8, 50.4, 50.2, 50.4, 50.8, 51.8, 51.6, 52.7, 52.5, 52.4, 52.5, 52.2, 51.6, 50.5, 50.8, 50.4, 50.2, 50.4, 49.8, 49.0, 49.5, 48.8, 49.3, 48.7, 49.3, 48.8, 49.4, 48.9, 49.5, 49.2, 48.8, 49.5, 50.3, 50.0, 49.8, 50.6, 50.4, 51.3, 52.2, 52.1, 52.1, 28.0, 28.1, 28.1, 27.2, 27.2, 27.3, 27.3, 26.4, 26.6, 26.7, 26.9, 26.3, 26.2, 26.4, 26.6, 25.8, 26.0, 26.3, 26.6, 26.7, 26.1, 26.5, 26.9, 26.2, 26.5, 27.0, 27.4, 27.7, 27.2, 27.8, 28.3, 27.7, 28.3, 29.1, 29.7, 29.1, 30.0, 30.9, 31.2, 31.3, 32.4, 32.0, 33.1, 34.5, 34.1, 35.6, 35.4, 37.1, 37.9, 39.0, 39.3, 40.1, 40.8, 41.3, 41.3, 42.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 40.4, 39.0, 39.0, 37.1, 36.6, 35.6, 34.1, 34.5, 33.1, 32.0, 32.4, 31.3, 30.3, 30.5, 30.0, 29.1, 28.4, 29.0, 28.3, 27.7, 27.0, 26.5, 26.8, 26.7, 26.2, 25.7, 25.3, 24.9, 25.3, 25.3, 25.0, 24.7, 24.4, 24.1, 23.9, 24.7, 24.5, 24.3, 24.1, 23.9, 23.8, 23.6, 24.5, 24.4, 24.3, 24.2, 24.2, 24.1, 24.1, 24.1, 24.0, 24.1, 24.1, 24.1, 24.2, 24.2, 24.3, 24.4, 24.5, 23.6, 23.8, 23.9, 24.1, 24.3, 24.5, 24.7, 23.9, 24.1, 24.4, 24.7, 25.0, 25.3, 25.3, 24.9, 25.3, 25.7, 26.2, 26.7, 26.8, 26.5, 27.0, 27.7, 28.3, 29.0, 28.4, 29.1, 30.0, 30.5, 30.3, 31.3, 32.4, 32.0, 33.1, 34.5, 34.1, 35.6, 36.6, 37.1, 39.0, 38.9, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 42.1, 41.3, 41.3, 40.8, 40.1, 39.3, 39.0, 37.9, 37.1, 35.4, 35.6, 34.1, 34.5, 33.1, 32.0, 32.4, 31.3, 31.2, 30.9, 30.0, 29.1, 29.7, 29.1, 28.3, 27.7, 28.3, 27.8, 27.2, 27.7, 27.4, 27.0, 26.5, 26.2, 26.9, 26.5, 26.1, 26.7, 26.6, 26.3, 26.0, 25.8, 26.6, 26.4, 26.2, 26.3, 26.9, 26.7, 26.6, 26.4, 27.3, 27.3, 27.2, 27.2, 28.1, 28.1, 21.0, 21.1, 21.1, 21.1, 22.2, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7, 22.9, 23.0, 24.3, 24.5, 24.7, 24.9, 25.2, 25.5, 25.8, 26.1, 27.6, 28.0, 28.5, 28.9, 29.4, 29.9, 31.8, 32.4, 33.1, 33.8, 34.6, 36.8, 37.8, 38.8, 41.4, 42.6, 43.9, 44.9, 45.2, 46.8, 46.8, 48.7, 48.7, 51.0, 51.2, 52.0, 54.3, 54.9, 56.9, 59.4, 60.6, 60.7, 59.2, 57.8, 57.4, 56.1, 54.9, 53.6, 53.5, 52.3, 51.2, 51.1, 50.1, 50.1, 49.1, 48.1, 48.2, 47.3, 47.4, 46.6, 46.7, 45.9, 46.2, 45.4, 45.7, 45.0, 44.7, 44.6, 44.0, 43.3, 42.7, 42.2, 41.5, 40.9, 40.6, 40.9, 40.3, 39.7, 40.0, 38.7, 39.1, 37.9, 36.8, 35.8, 34.9, 34.0, 31.8, 31.1, 30.4, 29.8, 29.2, 28.7, 28.2, 27.7, 26.1, 25.7, 25.3, 25.0, 24.7, 24.4, 24.1, 23.9, 23.6, 23.4, 23.2, 23.0, 21.8, 21.7, 21.6, 21.5, 21.4, 21.3, 21.2, 21.2, 21.1, 21.1, 21.1, 21.0, 21.1, 21.1, 21.1, 20.5, 20.2, 20.3, 20.3, 20.4, 20.5, 20.7, 20.8, 20.9, 21.1, 21.3, 21.5, 21.7, 21.9, 22.2, 22.4, 22.7, 22.4, 22.2, 22.5, 22.9, 23.3, 23.7, 24.2, 24.6, 25.1, 25.4, 24.9, 25.5, 26.2, 25.7, 26.1, 26.8, 26.7, 26.9, 27.8, 27.7, 28.1, 29.2, 28.8, 29.7, 30.3, 30.5, 31.8, 31.4, 33.3, 33.0, 33.8, 34.5, 35.3, 37.1, 36.9, 38.8, 40.6, 40.9, 42.4, 44.3, 46.2, 47.1, 49.1, 51.1, 49.1, 47.1, 45.2, 43.3, 41.4, 40.9, 39.6, 37.8, 36.6, 36.1, 34.3, 34.5, 32.7, 32.7, 31.1, 31.4, 29.7, 29.9, 29.0, 28.4, 28.5, 28.0, 28.1, 27.0, 27.0, 26.9, 26.1, 25.9, 26.1, 25.4, 24.9, 25.5, 24.9, 24.3, 23.8, 23.3, 22.9, 23.6, 23.3, 22.9, 22.5, 22.2, 21.9, 21.6, 21.3, 21.1, 21.9, 21.7, 21.5, 21.3, 21.1, 20.9, 20.8, 20.7, 20.5, 20.4, 20.3, 20.5, 21.2, 21.2, 21.1, 21.1, 21.1, 54.1, 54.1, 53.1, 52.2, 51.3, 50.4, 50.6, 49.8, 50.0, 49.2, 48.5, 48.8, 48.1, 47.4, 47.5, 47.2, 46.6, 46.9, 46.5, 46.8, 46.5, 46.0, 46.7, 46.2, 45.8, 46.5, 46.1, 45.7, 46.6, 46.3, 47.3, 47.0, 46.7, 47.9, 47.7, 47.6, 48.9, 48.8, 49.9, 50.2, 50.4, 50.9, 51.3, 51.8, 51.1, 50.4, 49.8, 49.3, 48.8, 48.3, 47.8, 47.4, 47.1, 46.7, 46.4, 46.2, 45.9, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 49.5, 50.0, 50.4, 50.9, 51.5, 52.0, 52.7, 53.3, 54.1, 54.5, 53.3, 52.2, 52.2, 51.1, 50.4, 50.5, 49.0, 49.2, 48.4, 48.1, 47.9, 47.3, 47.5, 46.6, 47.0, 46.1, 46.5, 45.8, 46.2, 45.5, 46.0, 45.4, 44.8, 45.4, 44.9, 45.5, 45.1, 45.7, 45.3, 46.0, 45.7, 46.4, 46.2, 47.0, 46.8, 47.6, 48.4, 48.3, 49.2, 49.1, 50.1, 50.1, 50.1, 49.1, 49.2, 48.3, 48.4, 47.6, 46.8, 47.0, 46.2, 46.4, 45.7, 46.0, 45.3, 45.7, 45.1, 45.5, 44.9, 45.4, 44.8, 45.4, 46.0, 45.5, 46.2, 45.8, 46.5, 46.1, 47.0, 46.6, 47.5, 47.3, 47.9, 48.1, 48.4, 49.2, 49.0, 50.5, 50.4, 51.1, 52.2, 52.2, 53.3, 54.5, 54.1, 53.3, 52.7, 52.0, 51.5, 50.9, 50.4, 50.0, 49.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 45.7, 45.9, 46.2, 46.4, 46.7, 47.1, 47.4, 47.8, 48.3, 48.8, 49.3, 49.8, 50.4, 51.1, 51.8, 51.3, 50.9, 50.4, 50.2, 49.9, 48.8, 48.9, 47.6, 47.7, 47.9, 46.7, 47.0, 47.3, 46.3, 46.6, 45.7, 46.1, 46.5, 45.8, 46.2, 46.7, 46.0, 46.5, 46.8, 46.5, 46.9, 46.6, 47.2, 47.5, 47.4, 48.1, 48.8, 48.5, 49.2, 50.0, 49.8, 50.6, 50.4, 51.3, 52.2, 53.1, 54.1, 34.0, 34.1, 34.1, 33.1, 32.2, 32.3, 32.4, 31.5, 30.8, 30.8, 31.0, 30.1, 30.4, 29.5, 29.8, 30.1, 29.3, 29.6, 28.8, 29.2, 29.5, 28.8, 29.2, 28.5, 28.9, 29.4, 28.7, 29.2, 28.5, 29.1, 29.7, 29.1, 29.7, 29.1, 29.8, 30.4, 30.0, 30.5, 30.3, 31.3, 31.3, 31.8, 31.5, 32.5, 32.9, 33.4, 33.2, 34.6, 34.7, 35.4, 35.7, 36.9, 37.7, 37.5, 39.2, 40.0, 41.1, 41.7, 42.5, 44.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 46.2, 45.3, 43.4, 42.5, 41.0, 40.8, 39.0, 38.2, 37.5, 36.6, 35.9, 35.7, 34.3, 34.0, 32.9, 32.8, 32.5, 31.9, 31.1, 31.2, 30.8, 30.6, 29.6, 29.9, 29.3, 28.5, 29.1, 28.4, 29.0, 28.3, 27.7, 28.3, 27.8, 28.4, 28.0, 27.4, 27.8, 27.7, 27.3, 27.3, 27.6, 27.6, 28.0, 27.7, 27.4, 28.2, 27.9, 28.7, 28.5, 28.3, 29.1, 28.9, 29.8, 29.6, 29.5, 30.4, 30.3, 30.7, 31.1, 32.1, 32.1, 32.0, 33.1, 34.1, 34.1, 35.2, 35.3, 36.4, 37.6, 37.8, 39.0, 40.3, 40.5, 41.8, 43.2, 44.7, 46.1, 47.7, 49.3, 50.9, 52.7, 54.5, 54.1, 53.7, 53.3, 54.0, 53.9, 53.6, 53.3, 53.6, 53.6, 53.7, 53.9, 53.8, 53.9, 54.0, 54.2, 55.2, 55.3, 55.4, 55.6, 56.6, 56.9, 57.2, 57.5, 59.0, 59.4, 58.7, 59.1, 58.5, 57.9, 57.4, 57.4, 57.5, 57.1, 56.7, 56.4, 56.4, 56.9, 56.7, 56.5, 56.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 56.3, 55.5, 55.7, 55.9, 56.1, 56.4, 56.7, 57.1, 57.5, 57.4, 57.4, 57.9, 58.5, 58.0, 58.7, 59.4, 59.0, 58.9, 58.4, 58.0, 57.6, 57.4, 57.1, 55.9, 55.7, 55.5, 55.4, 55.2, 55.2, 55.2, 55.1, 55.2, 54.4, 54.6, 54.8, 55.1, 55.4, 54.5, 54.8, 55.2, 55.6, 56.0, 55.4, 53.6, 52.0, 49.4, 48.9, 46.4, 46.0, 43.6, 43.3, 41.0, 40.8, 39.6, 38.5, 38.3, 37.2, 36.1, 36.1, 35.1, 39.1, 39.1, 39.1, 39.2, 39.2, 39.3, 39.5, 39.6, 39.8, 40.0, 40.3, 40.5, 40.8, 41.1, 41.5, 41.9, 42.3, 42.7, 43.2, 43.7, 44.3, 44.9, 45.5, 46.2, 47.0, 47.8, 48.6, 48.8, 48.9, 48.9, 49.2, 49.4, 49.5, 49.4, 49.2, 50.2, 50.5, 50.4, 50.4, 50.4, 51.8, 52.1, 52.5, 52.8, 53.1, 53.8, 54.3, 54.7, 55.3, 54.7, 54.2, 53.8, 53.3, 53.0, 52.6, 52.3, 52.0, 52.8, 52.6, 52.4, 52.3, 51.2, 51.1, 50.1, 50.1, 50.1, 49.1, 49.2, 49.3, 48.4, 48.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 47.9, 47.8, 48.3, 47.7, 48.2, 47.6, 47.1, 46.7, 46.7, 46.7, 46.2, 45.8, 45.3, 45.4, 45.6, 45.3, 45.0, 44.7, 45.0, 45.3, 45.0, 44.7, 45.0, 45.3, 44.4, 44.9, 44.1, 43.3, 42.7, 42.0, 41.4, 40.9, 40.4, 39.9, 39.4, 39.0, 38.6, 38.3, 38.0, 37.7, 37.4, 37.2, 36.9, 36.8, 36.6, 36.4, 36.3, 36.2, 36.1, 36.1, 36.1, 36.0, 36.1, 36.1, 36.1, 36.2, 36.3, 36.4, 36.6, 36.8, 36.9, 37.2, 37.4, 37.7, 38.0, 38.3, 38.6, 39.0, 39.4, 39.9, 40.4, 40.9, 41.4, 42.0, 42.7, 43.3, 44.1, 44.9, 44.4, 45.3, 45.0, 44.7, 45.0, 45.3, 45.0, 44.7, 45.0, 45.3, 45.6, 45.4, 45.3, 45.8, 46.2, 46.7, 46.7, 46.7, 47.1, 47.6, 48.2, 47.7, 48.3, 47.8, 47.9, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 48.6, 48.4, 49.3, 49.2, 49.1, 49.1, 50.1, 50.1, 51.1, 51.2, 52.3, 52.4, 52.6, 52.7, 52.0, 52.3, 52.6, 53.0, 53.3, 53.8, 54.2, 54.7, 54.9, 54.7, 54.3, 53.4, 53.1, 52.8, 52.5, 52.1, 51.8, 50.4, 50.4, 50.4, 50.5, 50.2, 49.2, 49.4, 49.5, 49.4, 49.2, 48.9, 48.9, 48.8, 48.6, 47.8, 47.0, 46.2, 45.5, 44.9, 44.3, 43.7, 43.2, 42.7, 42.3, 41.9, 41.5, 41.1, 40.8, 40.5, 40.3, 40.0, 39.8, 39.6, 39.5, 39.3, 39.2, 39.2, 39.1, 39.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 47.9, 47.8, 48.3, 47.7, 47.1, 47.6, 47.1, 46.7, 47.2, 46.7, 46.8, 47.0, 46.9, 47.1, 47.0, 47.3, 47.5, 47.3, 47.0, 46.7, 47.0, 47.3, 47.5, 47.3, 47.2, 48.6, 48.7, 48.6, 48.6, 49.0, 48.7, 48.8, 48.2, 47.6, 48.2, 47.7, 47.3, 47.8, 47.4, 47.1, 47.8, 47.5, 47.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.4, 47.5, 47.2, 47.1, 47.1, 46.8, 47.1, 46.7, 47.2, 46.7, 47.4, 47.0, 46.9, 47.4, 47.2, 47.3, 47.6, 47.7, 47.9, 48.1, 48.4, 48.6, 48.9, 48.9, 48.8, 48.6, 48.7, 48.2, 48.6, 47.9, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 48.9, 48.5, 48.1, 47.8, 48.5, 48.2, 48.0, 47.8, 47.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 47.6, 47.8, 48.0, 48.2, 48.5, 47.8, 48.1, 48.5, 48.9, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 47.9, 48.6, 48.2, 48.7, 48.6, 48.8, 48.9, 48.9, 48.6, 48.4, 48.1, 47.9, 47.7, 47.6, 47.3, 47.2, 47.4, 46.9, 47.0, 47.4, 46.7, 47.2, 46.7, 47.1, 46.8, 47.1, 47.1, 47.2, 47.5, 47.4, 48.1, 47.8, 47.5, 48.2, 48.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 47.2, 47.5, 47.8, 47.1, 47.4, 47.8, 47.3, 47.7, 48.2, 47.6, 48.2, 48.8, 48.7, 49.0, 48.6, 48.6, 48.7, 47.4, 47.2, 47.3, 47.5, 47.3, 47.0, 46.7, 47.0, 47.3, 47.5, 47.3, 47.0, 47.1, 46.9, 47.0, 46.8, 46.7, 47.2, 46.7, 47.1, 47.6, 47.1, 47.7, 48.3, 47.8, 47.9, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 53.1, 52.1, 52.1, 51.2, 51.1, 50.4, 50.6, 49.8, 50.0, 49.2, 49.5, 48.8, 49.2, 48.5, 48.9, 48.3, 48.8, 49.3, 48.7, 49.0, 48.8, 49.5, 49.0, 49.8, 49.4, 50.2, 49.9, 50.8, 50.5, 51.6, 51.3, 52.5, 52.4, 52.5, 51.3, 51.6, 50.5, 50.8, 49.9, 50.2, 49.4, 49.8, 49.0, 48.7, 48.8, 49.0, 48.7, 48.2, 48.8, 48.3, 47.8, 48.5, 48.1, 47.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.9, 47.8, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 49.0, 48.6, 49.4, 49.0, 49.9, 49.5, 50.5, 50.6, 51.3, 51.1, 52.4, 51.1, 51.3, 50.2, 50.5, 49.5, 49.9, 49.0, 49.4, 48.6, 48.7, 48.3, 48.8, 48.2, 47.6, 48.2, 47.7, 48.3, 47.8, 47.9, 48.1, 48.8, 48.5, 49.2, 49.0, 48.8, 49.6, 49.4, 50.3, 50.2, 51.1, 51.1, 52.1, 51.1, 51.1, 50.2, 50.3, 49.4, 49.6, 48.8, 49.0, 49.2, 48.5, 48.8, 48.1, 47.9, 47.8, 48.3, 47.7, 48.2, 47.6, 48.2, 48.8, 48.3, 48.7, 48.6, 49.4, 49.0, 49.9, 49.5, 50.5, 50.2, 51.3, 51.1, 52.4, 51.1, 51.3, 50.6, 50.5, 49.5, 49.9, 49.0, 49.4, 48.6, 49.0, 48.3, 48.8, 48.2, 48.7, 48.2, 47.7, 48.3, 47.8, 47.9, 48.1, 47.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 47.8, 48.3, 48.8, 48.2, 48.7, 49.0, 48.8, 48.7, 49.0, 49.8, 49.4, 50.2, 49.9, 50.8, 50.5, 51.6, 51.3, 52.5, 52.4, 52.5, 51.3, 51.6, 50.5, 50.8, 49.9, 50.2, 49.4, 49.8, 49.0, 49.5, 48.8, 49.0, 48.7, 49.3, 48.8, 48.3, 48.9, 48.5, 49.2, 48.8, 49.5, 49.2, 50.0, 49.8, 50.6, 50.4, 51.1, 51.2, 52.1, 52.1, 32.0, 32.1, 32.1, 31.1, 31.2, 31.3, 30.4, 30.5, 30.6, 29.8, 29.9, 30.0, 29.3, 28.7, 28.7, 29.0, 28.8, 28.5, 28.8, 29.0, 28.4, 28.8, 29.2, 28.5, 28.9, 29.4, 28.7, 29.2, 29.8, 29.1, 29.7, 30.4, 29.7, 30.4, 29.8, 30.7, 31.1, 30.9, 31.9, 31.9, 32.4, 33.2, 33.1, 34.5, 34.1, 35.6, 35.4, 36.1, 36.6, 37.6, 38.6, 39.0, 39.8, 40.5, 41.2, 42.1, 42.9, 43.7, 44.5, 45.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 39.3, 39.0, 37.9, 37.1, 35.4, 35.6, 34.0, 33.4, 33.1, 32.0, 32.4, 31.3, 30.3, 30.5, 30.0, 29.1, 28.4, 29.0, 28.3, 27.7, 28.3, 27.8, 27.2, 26.7, 26.9, 27.0, 26.5, 26.2, 26.9, 26.5, 26.1, 25.8, 25.8, 26.3, 26.0, 25.8, 25.5, 25.6, 26.2, 26.0, 25.8, 26.7, 26.6, 26.4, 26.3, 26.2, 27.2, 27.1, 27.1, 27.1, 27.0, 27.1, 27.1, 27.1, 27.2, 26.2, 26.3, 26.4, 26.6, 26.7, 25.8, 26.0, 26.2, 25.6, 25.5, 25.8, 26.0, 26.3, 25.8, 25.8, 26.1, 26.4, 25.7, 26.1, 26.5, 27.0, 26.9, 26.7, 27.2, 27.8, 28.3, 27.7, 28.3, 29.0, 28.4, 29.1, 30.0, 30.5, 30.3, 31.3, 32.4, 32.0, 33.1, 33.4, 34.0, 35.6, 35.4, 37.1, 37.9, 38.9, 39.3, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 45.4, 44.5, 43.7, 42.9, 41.1, 41.2, 40.5, 39.8, 39.0, 38.6, 37.6, 36.6, 36.1, 35.1, 34.8, 34.1, 34.5, 33.1, 33.2, 32.4, 31.9, 31.9, 30.9, 31.1, 30.7, 29.8, 30.4, 29.7, 29.1, 29.7, 29.1, 29.8, 29.2, 28.7, 29.4, 28.9, 28.5, 29.2, 28.8, 28.4, 29.0, 28.8, 28.5, 28.8, 29.0, 28.7, 28.7, 29.3, 30.0, 29.9, 29.8, 30.6, 30.5, 30.4, 31.3, 31.2, 31.1, 32.1, 32.1, 21.0, 21.1, 21.1, 21.1, 22.2, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7, 23.9, 24.1, 24.3, 24.5, 24.7, 24.9, 26.3, 26.6, 26.9, 27.3, 27.6, 29.2, 29.6, 30.1, 30.6, 32.4, 33.0, 33.7, 35.7, 36.5, 37.3, 39.6, 42.1, 43.2, 44.4, 45.8, 47.2, 48.7, 50.4, 51.8, 52.4, 54.5, 56.9, 59.0, 60.1, 63.1, 62.4, 61.7, 60.1, 58.5, 58.0, 57.5, 56.1, 55.7, 54.4, 54.1, 52.8, 52.6, 52.4, 51.3, 51.2, 50.1, 50.1, 50.1, 49.1, 49.1, 48.2, 48.3, 48.4, 47.8, 47.8, 48.0, 47.2, 47.5, 47.8, 47.1, 47.4, 47.8, 47.3, 47.7, 48.2, 47.6, 46.8, 46.5, 44.9, 44.8, 43.8, 43.2, 42.9, 42.4, 42.3, 41.4, 41.4, 40.3, 39.2, 36.8, 35.9, 35.1, 33.1, 32.4, 31.8, 31.2, 29.4, 28.9, 28.5, 28.0, 27.6, 27.3, 25.8, 25.5, 25.2, 24.9, 24.7, 24.5, 24.3, 23.0, 22.9, 22.7, 22.6, 22.5, 22.4, 22.3, 22.2, 22.2, 21.1, 21.1, 21.1, 21.0, 21.1, 21.1, 21.1, 21.2, 21.2, 20.5, 20.3, 20.4, 20.5, 20.7, 20.8, 20.9, 21.1, 21.3, 21.5, 21.0, 20.8, 21.1, 21.3, 21.6, 21.9, 22.2, 22.5, 22.9, 22.6, 22.5, 22.9, 23.3, 23.8, 24.3, 24.9, 25.5, 24.9, 25.4, 26.1, 25.9, 26.1, 26.9, 27.0, 27.0, 28.1, 28.0, 28.5, 28.4, 29.0, 29.9, 29.7, 31.4, 31.1, 32.7, 32.7, 34.5, 34.3, 36.1, 36.6, 37.8, 39.6, 40.9, 41.4, 43.3, 45.2, 47.1, 49.1, 51.1, 49.1, 47.1, 45.2, 43.3, 40.9, 40.5, 38.6, 36.8, 36.6, 35.1, 33.8, 33.5, 31.9, 31.9, 30.6, 30.4, 29.7, 28.1, 28.0, 27.6, 26.5, 26.9, 26.2, 25.3, 25.7, 25.2, 24.4, 24.6, 24.5, 23.9, 23.5, 24.1, 23.5, 23.0, 22.5, 22.1, 22.8, 22.5, 22.1, 21.7, 21.4, 21.0, 20.7, 21.3, 21.3, 21.1, 20.8, 20.6, 20.4, 20.2, 20.1, 20.7, 20.8, 20.7, 20.5, 20.4, 20.3, 20.3, 20.2, 20.5, 21.1, 21.1, 21.1, 54.1, 53.1, 53.1, 52.2, 51.3, 50.4, 49.6, 49.8, 49.0, 48.2, 48.5, 47.8, 47.1, 47.4, 46.8, 46.1, 46.6, 46.0, 45.4, 44.8, 45.4, 44.9, 44.8, 45.0, 45.0, 45.2, 44.9, 45.6, 45.3, 45.0, 45.9, 45.6, 45.3, 46.5, 46.2, 46.3, 46.6, 47.2, 47.4, 47.8, 48.6, 48.6, 49.0, 50.6, 49.9, 49.3, 48.7, 48.2, 48.8, 48.3, 47.8, 47.4, 47.1, 46.7, 46.4, 46.2, 45.9, 45.7, 45.5, 45.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 48.0, 48.2, 48.5, 48.8, 49.2, 49.5, 50.0, 50.4, 50.9, 51.5, 53.1, 53.8, 54.5, 54.1, 53.7, 52.4, 52.2, 51.4, 50.4, 50.4, 49.2, 49.0, 49.2, 48.4, 48.1, 47.9, 47.3, 47.5, 46.6, 47.0, 47.1, 46.5, 46.8, 46.2, 46.7, 46.0, 46.5, 46.8, 46.5, 46.9, 46.6, 47.2, 46.8, 47.4, 47.1, 47.8, 48.5, 48.2, 49.0, 48.8, 49.6, 49.4, 50.3, 51.2, 52.1, 52.1, 53.1, 52.1, 52.1, 51.2, 50.3, 49.4, 49.6, 48.8, 49.0, 48.2, 48.5, 47.8, 47.1, 47.4, 46.8, 47.2, 46.6, 46.9, 46.5, 46.8, 46.5, 46.0, 46.7, 46.2, 46.8, 46.5, 47.1, 47.0, 46.6, 47.5, 47.3, 47.9, 48.1, 48.4, 49.2, 49.0, 49.2, 50.4, 50.4, 51.4, 52.2, 52.4, 53.7, 54.1, 54.5, 53.8, 52.0, 51.5, 50.9, 50.4, 50.0, 49.5, 49.2, 48.8, 48.5, 48.2, 48.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 45.4, 45.5, 45.7, 45.9, 46.2, 46.4, 46.7, 47.1, 47.4, 47.8, 48.3, 47.7, 48.2, 48.7, 49.3, 49.9, 50.6, 49.0, 48.6, 48.6, 47.8, 47.4, 47.2, 46.6, 46.3, 46.2, 46.5, 45.3, 45.6, 45.9, 45.0, 45.3, 45.6, 44.9, 45.2, 45.0, 45.0, 44.8, 44.9, 45.4, 44.8, 45.4, 46.0, 45.5, 46.1, 46.8, 47.4, 47.1, 47.8, 48.5, 48.2, 49.0, 49.8, 49.6, 50.4, 51.3, 52.2, 53.1, 53.1, 35.0, 35.1, 34.1, 34.1, 33.2, 32.7, 32.4, 32.5, 31.7, 31.8, 31.0, 31.2, 31.1, 30.6, 29.8, 30.1, 29.3, 29.6, 29.9, 29.2, 29.5, 28.8, 29.2, 29.6, 28.9, 29.4, 28.7, 29.2, 29.8, 29.1, 29.7, 29.1, 29.7, 30.4, 29.8, 30.4, 30.0, 30.9, 31.2, 31.3, 31.3, 31.8, 32.7, 32.5, 32.9, 33.4, 34.3, 34.6, 34.7, 36.2, 36.2, 36.9, 37.9, 38.4, 39.2, 40.0, 41.1, 41.7, 42.5, 44.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 47.2, 45.3, 44.4, 42.5, 41.7, 41.1, 40.0, 38.2, 37.5, 37.7, 35.9, 35.7, 35.4, 34.0, 34.0, 33.2, 33.4, 31.9, 32.2, 31.5, 31.8, 30.6, 30.6, 30.3, 30.5, 30.0, 29.1, 29.7, 29.1, 29.7, 29.0, 28.4, 29.1, 28.5, 29.2, 28.7, 28.2, 28.8, 28.5, 29.2, 28.8, 28.4, 29.0, 28.8, 29.6, 29.3, 29.0, 29.7, 29.5, 30.4, 30.1, 29.9, 30.8, 30.8, 31.5, 31.4, 32.3, 32.2, 33.1, 33.1, 34.1, 34.0, 34.1, 35.1, 36.1, 36.2, 37.3, 38.5, 38.6, 39.8, 41.0, 42.3, 43.6, 43.9, 46.4, 46.8, 49.4, 50.9, 52.6, 53.8, 53.8, 53.3, 52.9, 52.6, 53.3, 53.0, 52.6, 52.3, 52.1, 53.1, 52.9, 52.7, 52.5, 53.8, 53.7, 53.7, 53.6, 54.4, 54.6, 54.8, 55.6, 55.8, 56.1, 56.5, 57.5, 57.9, 58.3, 58.7, 59.1, 58.5, 57.9, 57.4, 57.4, 57.5, 57.1, 56.7, 56.4, 56.1, 55.9, 56.7, 56.5, 56.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 55.3, 55.5, 55.7, 55.9, 56.1, 56.4, 56.7, 57.1, 57.5, 58.0, 58.5, 57.9, 58.5, 58.0, 58.7, 58.3, 59.0, 58.9, 58.4, 58.0, 57.6, 57.4, 57.1, 55.9, 55.7, 55.5, 55.4, 55.2, 55.2, 55.2, 55.1, 55.2, 54.4, 54.6, 54.8, 55.1, 55.4, 55.7, 54.8, 55.2, 55.6, 56.0, 56.5, 55.8, 53.1, 51.5, 48.9, 47.4, 46.0, 44.7, 43.3, 43.1, 40.8, 40.6, 39.5, 38.3, 38.2, 37.2, 36.1, 36.1, 40.1, 40.1, 40.1, 40.2, 40.2, 40.4, 40.5, 40.6, 40.8, 41.0, 41.3, 41.6, 41.8, 42.2, 42.5, 42.9, 43.3, 43.8, 44.3, 44.8, 45.4, 46.0, 46.7, 47.4, 48.2, 49.0, 48.7, 49.5, 50.5, 50.2, 50.0, 50.8, 51.0, 50.8, 50.7, 51.6, 51.8, 52.1, 52.1, 52.6, 53.0, 53.3, 54.5, 54.8, 55.2, 55.7, 55.4, 54.7, 54.2, 54.7, 54.2, 53.8, 53.3, 53.0, 52.6, 53.3, 52.0, 51.8, 51.6, 51.4, 50.3, 50.2, 50.1, 50.1, 49.1, 49.1, 49.1, 49.2, 48.3, 48.4, 48.6, 47.8, 48.0, 48.2, 48.5, 48.8, 48.1, 48.5, 48.9, 49.4, 48.8, 49.3, 49.8, 49.3, 48.8, 48.7, 48.7, 48.6, 48.2, 47.8, 47.4, 47.2, 47.3, 47.5, 47.3, 47.0, 46.7, 47.0, 47.3, 46.3, 46.6, 47.0, 47.1, 46.5, 45.8, 45.0, 44.4, 43.7, 43.1, 42.6, 42.1, 41.6, 41.2, 40.8, 40.4, 40.1, 39.8, 39.5, 39.2, 39.0, 38.8, 38.6, 38.5, 38.3, 38.2, 38.2, 38.1, 38.1, 38.1, 38.1, 38.1, 38.2, 38.2, 38.3, 38.5, 38.6, 38.8, 39.0, 39.2, 39.5, 39.8, 40.1, 40.4, 40.8, 41.2, 41.6, 42.1, 42.6, 43.1, 43.7, 44.4, 45.0, 45.8, 46.5, 47.1, 47.0, 46.6, 46.3, 46.2, 47.0, 46.7, 47.0, 47.3, 47.5, 47.3, 47.2, 47.4, 47.8, 48.2, 48.6, 48.7, 48.7, 48.8, 49.3, 49.8, 49.3, 48.8, 49.4, 48.9, 48.5, 48.1, 48.8, 48.5, 48.2, 48.0, 47.8, 48.6, 48.4, 48.3, 49.2, 49.1, 49.1, 49.1, 50.1, 50.1, 50.2, 50.3, 51.4, 51.6, 51.8, 52.0, 52.3, 52.6, 53.0, 53.3, 53.8, 54.2, 54.7, 54.2, 54.7, 55.4, 55.7, 55.2, 54.8, 54.5, 53.3, 53.0, 52.6, 52.1, 52.1, 51.8, 51.6, 50.7, 50.8, 51.0, 50.8, 50.0, 50.2, 50.5, 49.5, 48.7, 49.0, 48.2, 47.4, 46.7, 46.0, 45.4, 44.8, 44.3, 43.8, 43.3, 42.9, 42.5, 42.2, 41.8, 41.6, 41.3, 41.0, 40.8, 40.6, 40.5, 40.4, 40.2, 40.2, 40.1, 40.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 48.5, 48.8, 48.1, 47.4, 47.5, 47.2, 46.6, 46.9, 46.5, 46.0, 45.4, 46.0, 45.5, 45.0, 45.8, 45.3, 45.4, 45.6, 45.3, 46.0, 45.9, 45.6, 46.7, 46.5, 46.2, 46.3, 47.3, 47.2, 47.4, 47.8, 48.6, 48.6, 49.0, 48.3, 48.8, 48.2, 47.6, 47.1, 47.7, 47.2, 47.5, 47.4, 47.1, 46.7, 47.5, 47.2, 47.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.4, 47.8, 47.3, 47.7, 47.1, 47.6, 47.1, 47.7, 48.3, 47.9, 48.6, 48.2, 47.8, 47.4, 48.3, 47.9, 47.6, 47.7, 47.9, 48.1, 48.4, 48.6, 48.9, 48.9, 48.3, 48.6, 48.7, 48.2, 48.6, 47.9, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 47.9, 48.6, 48.2, 47.8, 48.6, 48.3, 48.9, 48.9, 48.6, 48.4, 48.1, 47.9, 47.7, 47.6, 47.9, 48.3, 47.4, 47.8, 48.2, 48.6, 47.9, 48.3, 47.7, 47.1, 47.6, 47.1, 47.7, 47.3, 47.8, 47.4, 48.1, 47.8, 48.5, 48.2, 48.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 47.0, 47.2, 47.5, 46.7, 47.1, 47.4, 47.5, 47.2, 47.7, 47.1, 47.6, 48.2, 47.7, 48.3, 49.0, 48.6, 48.6, 47.8, 47.4, 47.2, 47.3, 46.3, 46.2, 46.5, 45.3, 45.6, 45.9, 46.0, 45.3, 45.6, 45.4, 45.3, 45.8, 45.0, 45.5, 46.0, 45.4, 46.0, 46.5, 46.9, 46.6, 47.2, 47.5, 47.4, 48.1, 48.8, 48.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 51.1, 51.1, 50.1, 50.2, 49.3, 49.4, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.4, 47.8, 47.3, 47.7, 47.1, 47.6, 48.2, 47.7, 48.3, 47.9, 48.6, 48.2, 49.0, 48.7, 49.5, 49.2, 50.2, 50.7, 51.1, 51.0, 51.1, 50.7, 50.2, 50.5, 49.5, 49.9, 49.0, 48.6, 48.6, 48.7, 48.3, 48.8, 48.2, 47.6, 48.2, 47.7, 48.3, 47.8, 47.9, 48.1, 48.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 47.8, 48.3, 48.8, 49.3, 48.7, 49.0, 48.8, 49.5, 49.0, 49.8, 49.4, 50.2, 50.4, 50.8, 50.5, 51.6, 52.2, 52.5, 52.4, 52.5, 51.3, 51.6, 50.5, 50.8, 50.4, 50.2, 49.4, 49.8, 49.0, 49.5, 48.8, 49.3, 48.7, 49.3, 48.8, 49.4, 48.9, 48.5, 49.2, 48.8, 49.5, 50.3, 50.0, 49.8, 50.6, 50.4, 51.3, 51.2, 52.1, 52.1, 53.1, 52.1, 52.1, 51.2, 51.3, 50.4, 50.6, 49.8, 50.0, 50.3, 49.5, 48.8, 49.2, 48.5, 48.9, 49.4, 48.8, 49.3, 48.7, 49.3, 48.8, 49.5, 49.0, 49.8, 49.4, 50.2, 50.4, 50.8, 50.5, 51.6, 51.3, 52.5, 52.4, 52.5, 52.2, 51.6, 50.5, 50.8, 50.4, 50.2, 49.4, 49.8, 49.0, 49.5, 48.8, 49.0, 48.7, 49.3, 48.8, 48.3, 47.8, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.9, 47.8, 48.3, 47.7, 48.2, 47.6, 48.2, 48.8, 48.3, 48.7, 48.6, 48.6, 49.0, 49.9, 49.5, 50.5, 50.2, 50.7, 51.1, 51.0, 51.1, 50.7, 50.2, 49.2, 49.5, 48.7, 49.0, 48.2, 48.6, 47.9, 48.3, 47.7, 48.2, 47.6, 47.1, 47.7, 47.3, 47.8, 47.4, 48.1, 47.8, 48.5, 48.2, 48.0, 48.8, 48.6, 49.4, 49.3, 50.2, 50.1, 51.1, 36.0, 36.1, 35.1, 35.1, 34.2, 33.3, 33.4, 32.5, 32.7, 32.0, 32.0, 31.2, 31.4, 31.6, 30.9, 30.6, 30.4, 30.7, 30.5, 30.3, 29.7, 29.9, 30.4, 30.0, 30.1, 29.6, 29.9, 30.5, 30.0, 30.4, 29.8, 30.4, 31.2, 30.5, 31.1, 30.7, 31.6, 31.8, 31.9, 31.9, 32.4, 33.2, 33.1, 33.4, 34.0, 33.6, 35.1, 35.1, 35.8, 36.2, 37.2, 38.0, 37.9, 39.5, 40.3, 41.0, 41.1, 42.7, 43.5, 45.4, 46.3, 47.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 42.9, 42.1, 41.3, 41.3, 40.8, 40.1, 38.6, 38.6, 36.9, 37.1, 35.4, 35.6, 34.1, 34.5, 33.1, 33.2, 32.4, 31.9, 31.9, 30.9, 31.1, 30.7, 29.8, 30.4, 29.7, 29.1, 29.7, 29.1, 28.5, 29.2, 28.7, 28.2, 28.8, 28.5, 28.0, 28.5, 28.4, 28.0, 28.1, 28.5, 28.2, 27.9, 28.7, 28.5, 28.3, 29.1, 28.9, 28.7, 29.6, 29.5, 29.4, 30.3, 30.2, 30.1, 31.1, 31.1, 31.0, 31.1, 31.1, 30.1, 30.2, 30.3, 29.4, 29.5, 29.6, 28.7, 28.9, 29.1, 28.3, 28.5, 28.7, 27.9, 28.2, 28.5, 28.1, 28.0, 28.4, 28.5, 28.0, 28.5, 28.8, 28.2, 28.7, 29.2, 28.5, 29.1, 29.7, 29.1, 29.7, 30.4, 29.8, 30.7, 31.1, 30.9, 31.9, 31.9, 32.4, 33.2, 33.1, 34.5, 34.1, 35.6, 35.4, 37.1, 36.9, 38.6, 38.6, 40.1, 40.8, 41.3, 41.3, 42.1, 42.9, 43.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 47.2, 46.3, 44.4, 43.5, 42.7, 41.1, 41.0, 40.3, 39.5, 37.9, 38.0, 37.2, 36.2, 35.8, 35.1, 35.1, 33.6, 34.0, 33.4, 33.1, 33.2, 32.4, 31.9, 31.9, 31.8, 31.6, 30.7, 31.1, 30.5, 31.2, 30.4, 29.8, 30.4, 30.0, 30.5, 29.9, 29.6, 30.1, 30.0, 30.4, 29.9, 29.7, 30.3, 30.5, 30.7, 30.4, 30.6, 30.9, 31.6, 31.4, 31.2, 32.0, 32.0, 32.7, 32.5, 33.4, 33.3, 34.2, 34.1, 35.1, 36.1, 20.0, 20.1, 20.1, 21.1, 21.2, 21.2, 21.3, 21.4, 22.5, 22.6, 22.7, 22.9, 23.0, 24.3, 24.5, 24.7, 24.9, 26.3, 26.6, 26.9, 27.3, 28.8, 29.2, 29.6, 31.3, 31.9, 33.7, 34.3, 35.0, 37.0, 37.8, 40.1, 42.5, 43.6, 46.2, 47.5, 48.9, 52.1, 53.8, 57.4, 59.4, 63.6, 65.3, 64.4, 63.5, 61.6, 60.9, 60.2, 58.5, 57.9, 56.3, 55.9, 55.4, 55.0, 53.7, 53.3, 53.1, 51.8, 51.6, 51.4, 51.3, 50.2, 50.1, 50.1, 50.1, 49.1, 49.1, 49.2, 49.3, 48.4, 48.6, 48.8, 49.0, 48.2, 48.5, 48.8, 48.3, 48.5, 48.9, 49.4, 49.7, 49.3, 49.8, 50.4, 51.0, 50.6, 51.3, 50.5, 48.6, 47.8, 47.1, 45.6, 44.2, 44.4, 43.2, 42.1, 39.6, 38.7, 36.5, 35.7, 35.0, 33.0, 32.4, 31.9, 30.1, 29.6, 29.2, 27.6, 27.3, 26.9, 26.6, 26.3, 24.9, 24.7, 24.5, 24.3, 24.1, 23.9, 22.7, 22.6, 22.5, 22.4, 22.3, 21.2, 21.2, 21.1, 21.1, 21.1, 21.0, 21.1, 20.4, 20.1, 20.1, 20.2, 20.3, 20.3, 20.4, 20.5, 20.6, 19.8, 19.9, 20.1, 20.2, 20.4, 20.6, 20.8, 21.1, 20.2, 20.5, 20.7, 21.0, 21.4, 21.6, 20.9, 21.2, 21.6, 22.0, 22.5, 23.0, 23.3, 22.7, 23.3, 23.9, 24.5, 24.6, 24.4, 25.2, 25.7, 25.3, 26.2, 26.9, 26.5, 27.6, 28.0, 28.1, 29.6, 29.3, 30.6, 31.9, 31.9, 33.5, 33.8, 35.1, 36.6, 36.8, 38.6, 40.5, 40.9, 42.3, 45.2, 47.1, 49.1, 51.1, 49.1, 46.1, 44.2, 42.3, 40.9, 39.5, 37.6, 35.9, 34.9, 33.0, 33.3, 31.4, 31.6, 29.7, 29.0, 28.8, 27.4, 27.7, 26.7, 25.5, 25.3, 25.3, 24.3, 24.1, 24.4, 23.6, 22.9, 23.3, 23.0, 22.4, 21.8, 21.3, 21.8, 21.6, 21.2, 20.7, 20.3, 20.2, 20.8, 20.5, 20.2, 19.9, 19.6, 19.3, 20.1, 20.0, 19.7, 19.5, 19.3, 19.2, 19.2, 19.9, 19.8, 19.6, 19.5, 19.4, 19.3, 19.3, 19.2, 20.1, 20.1, 20.1, 20.1, 53.1, 52.1, 51.1, 51.2, 50.3, 49.4, 48.6, 47.8, 47.0, 47.2, 46.4, 45.7, 46.0, 45.3, 44.7, 44.5, 44.4, 44.5, 44.3, 43.7, 44.3, 43.7, 43.2, 43.8, 43.3, 43.5, 43.6, 43.2, 44.0, 43.6, 43.2, 44.2, 43.9, 44.2, 44.6, 44.4, 45.3, 45.6, 45.4, 45.3, 46.8, 46.8, 46.7, 47.2, 48.8, 49.0, 48.7, 48.2, 47.7, 47.2, 46.8, 46.4, 46.0, 46.7, 46.4, 46.2, 45.9, 45.7, 45.5, 45.4, 45.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 47.6, 47.8, 48.0, 48.2, 48.5, 48.8, 49.2, 49.5, 51.0, 51.5, 52.0, 52.6, 53.1, 53.8, 53.1, 52.8, 52.5, 50.9, 50.4, 50.2, 49.9, 48.8, 48.9, 48.9, 47.7, 47.9, 46.7, 47.0, 47.3, 46.3, 46.6, 47.0, 46.1, 46.5, 45.8, 46.2, 46.7, 46.0, 46.5, 46.8, 46.5, 46.9, 46.6, 47.2, 47.5, 47.4, 48.1, 48.8, 48.5, 49.2, 49.0, 49.8, 50.6, 50.4, 51.3, 52.2, 53.1, 53.1, 54.1, 53.1, 53.1, 52.2, 51.3, 50.4, 50.6, 49.8, 49.0, 49.2, 48.5, 48.8, 48.1, 47.4, 47.5, 47.2, 46.6, 46.9, 46.5, 46.8, 46.5, 46.0, 46.7, 46.2, 45.8, 46.5, 46.1, 47.0, 46.6, 46.3, 47.3, 47.0, 46.7, 47.9, 47.7, 48.9, 48.9, 48.8, 49.9, 50.2, 50.4, 50.9, 52.5, 52.8, 53.1, 53.8, 53.1, 52.6, 52.0, 51.5, 51.0, 49.5, 49.2, 48.8, 48.5, 48.2, 48.0, 47.8, 47.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 45.2, 45.3, 45.4, 45.5, 45.7, 45.9, 46.2, 46.4, 46.7, 46.0, 46.4, 46.8, 47.2, 47.7, 48.2, 48.7, 49.0, 48.8, 47.2, 46.7, 46.8, 46.8, 45.3, 45.4, 45.6, 45.3, 44.4, 44.6, 44.2, 43.9, 44.2, 43.2, 43.6, 44.0, 43.2, 43.6, 43.5, 43.3, 43.8, 43.2, 43.7, 44.3, 43.7, 44.3, 44.5, 44.4, 44.5, 44.7, 45.3, 46.0, 45.7, 46.4, 47.2, 47.0, 47.8, 48.6, 49.4, 50.3, 51.2, 51.1, 52.1, 35.0, 35.1, 34.1, 33.1, 33.2, 32.7, 32.4, 31.5, 31.7, 31.8, 31.0, 30.1, 30.4, 30.6, 29.8, 30.1, 29.3, 29.6, 29.9, 29.2, 29.5, 28.8, 29.2, 29.6, 28.9, 29.4, 28.7, 29.2, 29.8, 29.1, 29.7, 29.1, 29.7, 30.4, 29.8, 30.4, 30.0, 30.9, 31.2, 31.3, 31.3, 31.8, 31.5, 32.5, 32.9, 33.4, 33.2, 34.6, 34.7, 35.4, 35.7, 36.9, 37.7, 37.5, 39.2, 40.0, 41.1, 41.7, 42.5, 44.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 47.2, 45.3, 44.4, 42.5, 41.7, 41.1, 40.0, 39.2, 37.5, 37.7, 36.9, 35.7, 35.4, 34.7, 34.6, 33.2, 33.4, 32.9, 32.5, 32.7, 31.8, 31.3, 31.3, 31.2, 30.9, 30.0, 30.4, 29.8, 30.4, 29.7, 29.1, 29.7, 29.1, 29.8, 29.2, 28.7, 29.4, 28.9, 29.6, 29.2, 28.8, 29.5, 29.2, 29.9, 29.6, 29.3, 30.1, 29.8, 30.6, 30.4, 30.1, 31.0, 31.8, 31.7, 31.5, 32.4, 32.7, 33.2, 33.1, 34.1, 35.1, 35.0, 35.1, 36.1, 37.2, 37.2, 38.3, 39.5, 39.6, 40.8, 43.1, 43.3, 44.7, 46.0, 47.4, 48.9, 51.5, 52.0, 54.7, 55.4, 55.7, 55.2, 54.8, 54.5, 54.5, 54.2, 53.9, 53.8, 54.6, 54.4, 54.2, 54.0, 53.9, 55.2, 55.2, 55.1, 55.2, 55.2, 55.9, 56.1, 56.3, 56.6, 58.0, 58.3, 58.7, 59.0, 58.3, 58.7, 58.0, 58.5, 58.4, 58.5, 58.0, 57.5, 57.1, 56.7, 56.4, 56.1, 55.9, 55.7, 56.5, 56.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 56.3, 56.5, 55.7, 55.9, 56.1, 56.4, 56.7, 57.1, 57.5, 58.0, 58.5, 57.9, 58.5, 59.1, 58.7, 58.3, 57.9, 58.7, 58.3, 56.9, 56.6, 56.3, 56.1, 55.3, 55.2, 55.2, 55.1, 55.2, 53.8, 53.9, 54.0, 54.2, 53.6, 53.7, 53.8, 53.9, 54.2, 54.3, 54.5, 54.8, 55.2, 54.9, 55.4, 53.6, 52.0, 50.4, 48.9, 47.4, 46.0, 44.7, 43.3, 42.1, 40.8, 39.6, 39.5, 38.3, 37.2, 37.2, 36.1, 35.1, 43.1, 43.1, 43.1, 43.2, 43.3, 43.4, 43.5, 43.7, 43.9, 44.1, 44.4, 44.7, 45.0, 45.3, 45.7, 46.1, 46.6, 47.1, 47.6, 48.2, 48.8, 49.5, 50.2, 50.9, 51.8, 52.6, 53.6, 53.3, 53.1, 52.9, 52.7, 53.7, 53.8, 53.7, 53.7, 53.6, 53.6, 53.7, 53.8, 55.1, 55.4, 55.7, 56.0, 56.4, 55.6, 56.0, 55.4, 54.7, 54.2, 54.7, 54.2, 53.8, 53.3, 53.0, 52.6, 52.3, 51.0, 50.8, 50.6, 50.4, 50.3, 49.2, 49.1, 49.1, 49.1, 49.1, 49.1, 48.2, 48.3, 48.4, 48.6, 48.8, 48.0, 48.2, 48.5, 48.8, 49.2, 49.5, 48.9, 49.4, 49.8, 50.4, 50.9, 50.4, 51.1, 51.8, 50.6, 50.5, 50.4, 50.2, 49.9, 49.5, 49.2, 49.0, 48.6, 48.4, 48.1, 48.4, 48.6, 48.9, 47.9, 48.3, 48.6, 47.8, 47.0, 46.2, 45.5, 44.9, 44.3, 43.7, 43.2, 42.7, 42.3, 41.9, 41.5, 41.1, 40.8, 40.5, 40.3, 40.0, 39.8, 39.6, 39.5, 39.3, 39.2, 39.2, 39.1, 39.1, 39.1, 39.1, 39.1, 39.2, 39.2, 39.3, 39.5, 39.6, 39.8, 40.0, 40.3, 40.5, 40.8, 41.1, 41.5, 41.9, 42.3, 42.7, 43.2, 43.7, 44.3, 44.9, 45.5, 46.2, 47.0, 47.8, 48.6, 48.3, 47.9, 48.9, 48.6, 48.4, 48.1, 48.4, 48.6, 49.0, 49.2, 49.5, 49.9, 50.2, 50.4, 50.5, 50.6, 51.8, 51.1, 50.4, 50.9, 50.4, 49.8, 49.4, 48.9, 48.5, 49.2, 48.8, 48.5, 48.2, 48.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 49.1, 49.1, 49.1, 49.1, 49.2, 50.3, 50.4, 50.6, 50.8, 51.0, 52.3, 52.6, 53.0, 53.3, 53.8, 54.2, 54.7, 54.2, 54.7, 55.4, 56.0, 55.6, 56.4, 56.0, 55.7, 55.4, 55.1, 53.8, 53.7, 53.6, 53.6, 53.7, 53.7, 53.8, 52.5, 52.7, 52.9, 53.1, 53.3, 53.6, 52.6, 51.8, 50.9, 50.2, 49.5, 48.8, 48.2, 47.6, 47.1, 46.6, 46.1, 45.7, 45.3, 45.0, 44.7, 44.4, 44.1, 43.9, 43.7, 43.5, 43.4, 43.3, 43.2, 43.1, 43.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 48.5, 48.8, 48.1, 48.5, 47.8, 48.3, 47.7, 48.2, 47.6, 48.2, 47.7, 47.2, 46.7, 47.4, 47.0, 46.9, 47.1, 47.0, 47.3, 47.5, 47.3, 47.0, 48.1, 47.9, 47.7, 47.6, 48.9, 48.3, 48.6, 48.7, 48.2, 48.6, 47.9, 48.3, 47.7, 47.1, 47.6, 47.1, 46.6, 47.2, 46.8, 46.4, 47.1, 46.7, 46.4, 47.2, 47.0, 46.7, 47.6, 47.4, 47.3, 47.2, 47.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 49.1, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.9, 47.8, 47.3, 47.7, 48.2, 47.6, 48.2, 48.8, 48.3, 48.7, 48.6, 48.2, 48.7, 48.6, 48.3, 47.9, 47.6, 47.7, 47.9, 48.1, 47.9, 47.7, 47.6, 47.3, 47.2, 47.4, 46.9, 47.0, 47.4, 46.7, 47.2, 47.7, 47.1, 47.6, 48.2, 47.7, 48.3, 47.8, 47.9, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 47.9, 47.8, 48.3, 47.7, 48.2, 47.6, 47.1, 47.7, 47.2, 46.7, 47.4, 47.0, 46.9, 47.4, 47.2, 47.3, 47.6, 47.7, 47.9, 48.1, 47.9, 47.7, 47.6, 47.9, 48.3, 48.6, 48.7, 48.2, 48.6, 48.7, 48.3, 48.8, 48.2, 47.6, 48.2, 47.7, 47.3, 47.8, 47.4, 48.1, 47.8, 48.5, 48.2, 48.0, 48.8, 48.6, 49.1, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 47.1, 47.2, 47.3, 47.4, 47.6, 46.7, 47.0, 47.2, 46.4, 46.7, 47.1, 46.4, 46.8, 47.2, 46.6, 47.1, 47.6, 47.1, 47.7, 48.3, 47.9, 48.6, 48.2, 48.7, 48.6, 48.3, 48.9, 47.6, 47.7, 47.9, 48.1, 47.0, 47.3, 47.5, 47.3, 47.0, 47.1, 46.9, 47.0, 47.4, 46.7, 47.2, 47.7, 48.2, 47.6, 48.2, 47.7, 48.3, 47.8, 48.5, 48.1, 48.8, 48.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 47.2, 47.3, 46.4, 46.6, 46.7, 45.9, 46.2, 45.4, 45.7, 45.0, 45.3, 45.7, 45.1, 45.5, 44.9, 45.4, 46.0, 45.4, 46.0, 46.7, 46.2, 46.8, 46.5, 47.4, 47.2, 47.9, 47.6, 48.6, 49.4, 49.5, 49.8, 50.0, 50.2, 49.2, 49.5, 49.9, 49.0, 49.4, 48.6, 49.0, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 47.8, 48.5, 48.3, 48.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 48.9, 48.3, 48.8, 49.3, 48.7, 49.3, 48.8, 49.5, 50.2, 49.8, 50.4, 50.2, 51.1, 50.8, 51.8, 51.6, 52.7, 52.5, 52.4, 52.5, 51.3, 51.6, 50.5, 50.8, 49.9, 50.2, 49.4, 49.8, 49.0, 49.5, 48.8, 49.0, 48.7, 49.3, 48.8, 48.3, 48.9, 48.5, 49.2, 48.8, 49.5, 49.2, 50.0, 49.8, 50.6, 50.4, 51.1, 51.2, 52.1, 52.1, 53.1, 52.1, 52.1, 51.2, 51.1, 50.4, 50.6, 49.8, 50.0, 49.2, 49.5, 48.8, 49.2, 48.5, 48.9, 48.3, 48.8, 49.3, 48.7, 49.0, 48.8, 49.5, 49.0, 49.8, 49.4, 50.2, 49.9, 50.8, 50.5, 51.6, 51.3, 52.5, 52.4, 52.5, 52.7, 51.6, 51.8, 50.8, 51.1, 50.2, 50.4, 49.8, 50.2, 49.5, 48.8, 49.3, 48.7, 49.3, 48.8, 48.3, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 48.8, 48.3, 48.5, 47.8, 48.3, 48.8, 48.2, 48.7, 48.2, 48.8, 48.3, 49.0, 48.6, 49.4, 49.0, 49.9, 49.5, 49.2, 50.2, 50.0, 49.8, 49.5, 49.4, 48.6, 47.6, 47.9, 47.2, 47.4, 46.5, 46.8, 46.2, 46.7, 46.0, 45.4, 46.0, 45.4, 44.9, 45.5, 45.1, 45.7, 45.3, 45.0, 45.7, 45.4, 46.2, 45.9, 46.7, 46.6, 46.4, 47.3, 47.2, 48.1, 48.1, 41.1, 40.8, 40.1, 39.2, 39.2, 38.3, 37.5, 36.6, 36.8, 36.6, 36.1, 35.3, 34.5, 34.8, 34.0, 34.3, 34.0, 34.0, 33.2, 33.4, 32.9, 32.5, 32.7, 33.2, 32.5, 33.0, 32.4, 32.6, 32.4, 32.2, 32.4, 33.2, 32.6, 33.2, 32.8, 33.1, 33.2, 33.0, 33.6, 34.3, 34.2, 34.4, 35.0, 34.5, 35.2, 35.6, 36.6, 37.1, 36.9, 37.6, 38.3, 38.3, 39.8, 40.5, 41.2, 41.1, 41.9, 43.7, 44.5, 45.4, 46.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 46.3, 45.4, 44.5, 43.7, 41.9, 41.1, 41.2, 40.5, 38.7, 38.3, 38.3, 36.5, 36.6, 35.1, 35.1, 34.8, 34.0, 33.4, 33.1, 33.2, 32.4, 31.9, 31.9, 30.9, 31.1, 30.7, 31.1, 30.5, 29.7, 30.4, 29.8, 30.4, 29.8, 29.3, 29.9, 29.6, 30.1, 29.6, 29.2, 29.9, 29.5, 29.2, 29.9, 29.7, 30.4, 30.1, 29.8, 30.6, 31.1, 31.2, 31.0, 31.8, 31.7, 31.5, 32.4, 32.7, 33.2, 33.1, 34.1, 35.1, 35.0, 35.1, 34.1, 33.1, 33.2, 32.7, 32.4, 31.5, 31.7, 31.8, 31.0, 31.2, 31.1, 30.6, 29.8, 30.1, 30.4, 29.7, 29.9, 29.2, 29.5, 29.9, 29.2, 29.6, 30.1, 29.6, 29.9, 29.3, 29.8, 30.4, 29.8, 30.4, 29.7, 30.5, 31.1, 30.7, 31.1, 30.9, 31.9, 31.9, 32.4, 33.2, 33.1, 33.4, 34.0, 34.8, 35.1, 35.1, 36.6, 36.5, 38.3, 38.3, 38.7, 40.5, 41.2, 41.1, 41.9, 42.7, 44.5, 45.4, 46.3, 47.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 46.3, 45.4, 44.5, 43.7, 41.9, 41.1, 41.2, 40.5, 39.8, 38.3, 38.3, 37.6, 36.9, 37.1, 36.6, 35.6, 35.2, 34.5, 35.0, 34.4, 34.2, 34.3, 33.6, 33.0, 33.2, 33.1, 32.8, 33.2, 32.6, 33.2, 32.4, 32.2, 32.4, 32.6, 32.4, 33.0, 32.5, 32.0, 32.7, 32.5, 32.9, 33.4, 33.2, 34.0, 33.6, 33.4, 34.0, 34.8, 34.5, 35.3, 36.1, 35.9, 35.9, 36.6, 37.5, 38.3, 39.2, 39.2, 40.1, 40.8, 20.0, 20.1, 20.1, 20.1, 20.1, 21.2, 21.3, 21.4, 21.5, 21.6, 22.7, 22.9, 23.0, 23.2, 23.4, 24.7, 24.9, 26.3, 26.6, 26.9, 27.3, 28.8, 29.2, 29.6, 31.3, 33.1, 33.7, 35.6, 36.3, 38.3, 40.5, 41.5, 43.9, 46.5, 49.2, 52.1, 56.8, 60.2, 65.5, 68.5, 66.2, 65.2, 64.2, 62.1, 61.3, 60.5, 59.8, 58.0, 57.4, 56.9, 55.3, 54.8, 54.4, 54.0, 52.6, 52.3, 52.0, 51.8, 51.6, 51.4, 50.3, 50.2, 50.1, 50.1, 50.1, 49.1, 49.1, 49.2, 49.3, 49.4, 48.6, 48.8, 49.0, 49.2, 49.5, 48.8, 49.2, 49.5, 50.0, 50.4, 50.9, 50.4, 50.9, 51.5, 52.2, 52.8, 52.5, 53.3, 54.2, 55.1, 53.8, 52.1, 48.9, 47.5, 46.2, 43.6, 42.5, 40.1, 37.8, 37.0, 36.3, 34.3, 33.7, 31.9, 31.3, 29.6, 29.2, 28.8, 27.3, 26.9, 26.6, 26.3, 24.9, 24.7, 24.5, 24.3, 23.0, 22.9, 22.7, 22.6, 22.5, 21.4, 21.3, 21.2, 21.2, 21.1, 20.1, 20.1, 20.0, 20.1, 20.1, 20.1, 20.1, 19.2, 19.3, 19.3, 19.4, 19.5, 19.6, 18.8, 18.9, 19.0, 19.2, 19.3, 19.5, 19.7, 18.9, 19.1, 19.3, 19.6, 19.9, 20.2, 19.8, 19.6, 20.0, 20.3, 20.7, 21.2, 20.9, 20.8, 21.3, 21.8, 22.4, 22.5, 22.1, 22.8, 23.6, 23.3, 23.4, 24.3, 25.3, 25.3, 25.5, 26.7, 26.6, 27.2, 28.8, 29.0, 29.7, 30.6, 31.1, 32.2, 33.0, 34.9, 35.9, 36.6, 39.5, 40.9, 41.2, 44.2, 46.1, 48.1, 51.1, 48.1, 46.1, 43.2, 40.9, 40.4, 38.5, 35.6, 35.7, 32.8, 33.0, 31.2, 31.1, 28.7, 28.7, 27.8, 26.2, 26.3, 25.8, 24.7, 25.0, 24.4, 23.4, 22.5, 22.9, 22.6, 21.9, 21.2, 20.7, 21.2, 20.9, 20.4, 19.8, 20.4, 20.3, 19.9, 19.5, 19.1, 18.7, 19.2, 19.3, 19.0, 18.7, 18.4, 18.2, 18.0, 18.8, 18.6, 18.5, 18.3, 18.1, 19.0, 18.9, 18.7, 18.6, 18.5, 18.4, 18.3, 19.3, 19.2, 19.1, 19.1, 19.1, 19.1, 50.1, 50.1, 49.1, 49.2, 48.3, 48.4, 47.8, 47.8, 47.0, 47.2, 46.4, 46.7, 46.0, 46.4, 45.7, 46.1, 46.6, 46.0, 46.5, 46.0, 46.5, 46.0, 46.7, 46.2, 46.8, 46.5, 47.1, 47.0, 47.9, 47.6, 47.7, 47.9, 46.7, 47.0, 47.3, 46.3, 46.6, 47.0, 46.1, 46.5, 46.8, 46.2, 46.7, 46.7, 46.5, 46.8, 46.8, 47.1, 46.6, 47.2, 46.8, 46.4, 46.0, 45.7, 45.4, 45.7, 45.9, 45.7, 45.5, 45.4, 45.3, 45.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 49.5, 49.9, 50.2, 50.6, 51.0, 52.6, 53.1, 53.6, 52.0, 51.5, 51.0, 50.6, 50.2, 48.6, 48.6, 48.7, 47.4, 47.2, 47.3, 46.3, 46.2, 46.5, 45.3, 45.6, 45.9, 46.0, 45.3, 45.6, 45.4, 45.3, 45.0, 45.0, 45.5, 44.9, 45.4, 46.0, 45.4, 46.0, 46.6, 46.1, 46.8, 47.4, 47.1, 47.8, 48.5, 48.2, 49.0, 49.8, 49.6, 50.4, 51.3, 52.2, 53.1, 54.1, 54.1, 54.1, 53.1, 52.2, 51.3, 50.4, 49.6, 49.8, 49.0, 48.2, 48.5, 47.8, 47.1, 47.4, 46.8, 46.1, 46.6, 46.0, 45.4, 46.0, 45.4, 44.9, 45.5, 45.0, 45.0, 45.3, 45.4, 45.6, 45.3, 46.0, 45.9, 45.6, 45.3, 46.5, 46.2, 46.3, 47.3, 47.2, 47.4, 48.7, 48.6, 48.6, 50.2, 50.6, 51.0, 51.5, 52.0, 52.6, 53.1, 51.5, 51.0, 50.6, 50.2, 49.9, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 45.1, 45.2, 45.3, 45.4, 45.5, 45.7, 45.9, 45.1, 45.4, 45.7, 46.0, 46.4, 46.8, 46.1, 46.6, 47.1, 46.8, 46.8, 46.5, 46.7, 46.7, 46.2, 46.8, 46.5, 46.1, 47.0, 46.6, 46.3, 47.3, 47.0, 46.7, 47.9, 47.7, 47.6, 47.9, 47.0, 47.1, 46.5, 46.8, 46.2, 46.7, 46.0, 46.5, 46.0, 46.5, 46.0, 46.6, 46.1, 45.7, 46.4, 46.0, 46.7, 46.4, 47.2, 47.0, 47.8, 47.8, 48.4, 48.3, 49.2, 49.1, 50.1, 34.0, 34.1, 33.1, 32.1, 32.2, 32.3, 31.4, 30.5, 30.6, 30.8, 29.9, 30.0, 29.3, 29.5, 29.7, 29.0, 28.8, 28.5, 28.8, 29.0, 28.4, 28.5, 28.0, 28.5, 28.8, 28.2, 28.6, 28.0, 28.5, 29.1, 28.4, 29.0, 29.7, 29.1, 29.7, 29.1, 30.0, 30.5, 30.3, 30.6, 30.6, 31.8, 31.5, 32.2, 31.9, 33.4, 33.2, 34.0, 34.0, 35.4, 35.7, 35.9, 37.7, 37.5, 38.2, 40.0, 40.8, 41.0, 42.5, 44.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 47.2, 45.3, 44.4, 42.5, 41.7, 41.1, 40.0, 39.2, 37.5, 37.7, 36.9, 35.7, 35.4, 34.7, 34.6, 34.3, 33.4, 32.9, 32.5, 32.7, 31.8, 31.3, 31.3, 31.2, 30.9, 30.0, 30.4, 29.8, 30.4, 29.7, 29.1, 29.7, 29.1, 29.8, 29.2, 28.7, 29.4, 28.9, 29.6, 29.2, 28.8, 29.5, 29.2, 29.9, 29.6, 29.3, 30.1, 29.8, 30.6, 30.4, 30.1, 31.0, 31.8, 31.7, 31.5, 32.4, 32.7, 33.2, 33.1, 34.1, 35.1, 35.0, 36.1, 36.1, 37.2, 38.2, 38.3, 39.5, 40.6, 40.8, 43.1, 43.3, 44.7, 46.0, 47.4, 48.9, 51.5, 52.0, 54.7, 56.5, 56.0, 55.6, 55.2, 54.8, 55.7, 55.4, 55.1, 54.8, 54.6, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.5, 55.7, 55.9, 57.1, 57.4, 57.6, 58.0, 58.4, 58.9, 59.0, 58.3, 58.7, 58.0, 58.5, 57.9, 57.4, 58.0, 57.5, 57.1, 56.7, 56.4, 56.1, 55.9, 55.7, 55.5, 55.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 56.3, 56.5, 56.7, 55.9, 56.1, 56.4, 56.7, 57.1, 57.5, 57.4, 57.4, 57.9, 58.5, 59.1, 58.7, 58.3, 57.9, 56.9, 56.5, 56.1, 55.8, 55.1, 54.8, 54.6, 53.6, 53.6, 53.7, 53.7, 52.4, 52.5, 52.7, 52.9, 52.1, 52.1, 52.3, 52.6, 52.2, 52.4, 52.5, 52.8, 53.1, 53.4, 53.1, 51.5, 50.9, 48.3, 46.8, 45.3, 43.9, 42.6, 42.3, 40.0, 39.8, 38.6, 37.5, 37.3, 36.2, 36.1, 35.1, 34.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 49.8, 50.4, 50.9, 51.5, 52.2, 52.9, 53.7, 54.5, 55.4, 55.1, 54.8, 54.6, 54.4, 54.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 56.1, 56.5, 56.4, 55.6, 55.7, 55.4, 54.7, 54.9, 54.7, 54.2, 52.7, 52.3, 51.9, 51.6, 51.3, 51.0, 50.8, 49.6, 49.4, 49.3, 49.2, 49.1, 49.1, 49.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 48.2, 48.5, 48.8, 49.2, 49.5, 50.0, 50.4, 49.8, 50.4, 50.9, 51.5, 52.2, 52.9, 52.6, 52.4, 52.2, 52.2, 51.1, 50.8, 50.5, 50.6, 50.0, 49.8, 49.5, 49.8, 49.2, 49.0, 49.2, 49.5, 48.7, 49.0, 48.2, 47.4, 46.7, 46.0, 45.4, 44.8, 44.3, 43.8, 43.3, 42.9, 42.5, 42.2, 41.8, 41.6, 41.3, 41.0, 40.8, 40.6, 40.5, 40.4, 40.2, 40.2, 40.1, 40.1, 40.1, 40.1, 40.1, 40.2, 40.2, 40.4, 40.5, 40.6, 40.8, 41.0, 41.3, 41.6, 41.8, 42.2, 42.5, 42.9, 43.3, 43.8, 44.3, 44.8, 45.4, 46.0, 46.7, 47.4, 48.2, 49.0, 48.7, 49.5, 49.2, 49.0, 49.2, 49.8, 49.5, 49.8, 50.0, 50.6, 50.5, 50.8, 51.1, 52.2, 52.2, 52.4, 52.6, 52.9, 52.2, 51.5, 50.9, 50.4, 49.8, 50.4, 50.0, 49.5, 49.2, 48.8, 48.5, 48.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 49.1, 49.1, 49.1, 49.2, 49.3, 49.4, 49.6, 50.8, 51.0, 51.3, 51.6, 51.9, 52.3, 52.7, 54.2, 54.7, 54.9, 54.7, 55.4, 55.7, 55.6, 56.4, 56.5, 56.1, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 54.2, 54.4, 54.6, 54.8, 55.1, 55.4, 54.5, 53.7, 52.9, 52.2, 51.5, 50.9, 50.4, 49.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 47.8, 48.3, 48.8, 49.3, 48.7, 48.2, 48.8, 48.3, 47.9, 48.6, 48.2, 47.8, 47.4, 48.3, 47.9, 47.6, 47.7, 48.4, 48.1, 48.4, 48.6, 48.9, 48.9, 48.3, 48.6, 47.8, 48.2, 47.4, 47.9, 47.2, 46.7, 47.1, 46.5, 46.9, 46.6, 46.1, 45.7, 46.4, 46.0, 45.7, 46.4, 46.2, 46.2, 46.7, 46.6, 47.4, 47.3, 47.2, 47.1, 47.1, 48.1, 48.1, 48.1, 49.2, 49.3, 49.1, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.9, 47.8, 48.3, 47.7, 48.2, 48.7, 48.2, 48.8, 48.7, 49.0, 48.6, 48.6, 47.8, 47.4, 47.2, 47.3, 46.3, 46.2, 46.5, 46.7, 45.6, 45.9, 46.0, 45.3, 45.6, 45.4, 45.3, 45.8, 45.0, 45.5, 46.0, 45.4, 46.0, 46.5, 46.9, 46.6, 47.2, 47.5, 47.4, 48.1, 48.8, 48.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 48.5, 48.8, 48.1, 47.4, 47.5, 47.2, 46.6, 46.0, 46.5, 46.0, 45.4, 46.0, 45.5, 45.0, 45.0, 45.3, 45.4, 45.6, 45.3, 46.0, 45.9, 45.6, 45.3, 46.5, 46.2, 46.3, 47.3, 47.2, 47.4, 47.8, 48.6, 48.6, 49.0, 48.3, 48.8, 48.2, 48.7, 48.2, 47.7, 48.3, 47.8, 47.9, 48.1, 47.8, 48.5, 48.2, 48.0, 48.8, 48.6, 49.1, 49.3, 48.2, 48.1, 48.1, 48.1, 47.1, 47.1, 47.2, 47.3, 47.4, 46.6, 46.7, 46.2, 46.2, 46.4, 45.7, 46.0, 46.4, 45.7, 46.1, 46.6, 46.9, 46.5, 47.1, 46.7, 47.2, 47.9, 47.4, 48.2, 47.8, 48.6, 48.3, 48.9, 48.9, 48.6, 48.4, 48.1, 48.4, 47.7, 47.6, 47.9, 48.3, 47.4, 47.8, 48.2, 47.4, 47.9, 48.3, 48.8, 48.2, 48.7, 49.3, 48.8, 48.3, 47.8, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 46.1, 46.1, 46.2, 45.3, 45.4, 44.5, 44.7, 44.9, 44.1, 44.4, 44.7, 43.9, 44.3, 44.6, 44.0, 44.4, 43.8, 44.3, 44.5, 44.3, 44.9, 44.8, 45.0, 45.0, 45.3, 46.1, 45.7, 46.6, 47.5, 47.3, 47.9, 48.1, 49.4, 49.2, 50.6, 50.5, 50.8, 50.4, 50.2, 50.4, 49.8, 49.0, 49.5, 48.8, 49.3, 48.7, 49.3, 48.8, 49.4, 48.9, 48.5, 48.1, 47.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 48.8, 49.3, 49.2, 49.3, 48.8, 49.5, 50.2, 49.8, 50.6, 50.4, 51.1, 50.8, 51.8, 52.1, 52.7, 52.3, 51.0, 51.1, 50.7, 50.2, 49.2, 49.5, 48.7, 49.0, 48.2, 48.6, 47.9, 48.3, 47.7, 48.2, 47.6, 47.1, 47.7, 47.3, 47.8, 47.4, 48.1, 47.8, 48.5, 48.2, 48.0, 48.8, 48.6, 49.4, 49.3, 50.2, 50.1, 51.1, 51.1, 51.1, 50.1, 50.2, 49.3, 49.4, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.4, 47.8, 47.3, 47.7, 47.1, 47.6, 47.1, 47.7, 48.3, 47.9, 48.6, 48.2, 49.0, 48.7, 49.5, 49.2, 50.2, 50.7, 51.1, 51.0, 52.3, 52.7, 52.1, 51.8, 50.8, 51.1, 50.2, 50.4, 49.8, 50.2, 49.5, 48.8, 49.3, 49.2, 49.3, 48.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 47.8, 48.1, 48.5, 48.9, 48.3, 48.8, 49.3, 48.7, 49.3, 48.8, 49.5, 49.0, 49.8, 50.4, 50.2, 50.4, 50.8, 50.5, 50.6, 49.2, 49.4, 48.1, 47.9, 47.3, 47.5, 46.6, 45.7, 46.1, 45.3, 45.0, 45.0, 44.8, 44.9, 44.3, 44.5, 44.3, 43.8, 44.4, 44.0, 44.6, 44.3, 43.9, 44.7, 44.4, 44.1, 44.9, 44.7, 44.5, 45.4, 45.3, 46.2, 46.1, 46.1, 46.1, 45.1, 44.1, 43.2, 42.3, 42.4, 41.5, 41.0, 40.8, 40.0, 39.2, 38.4, 37.9, 38.0, 37.2, 36.5, 36.6, 36.1, 36.6, 35.9, 36.1, 35.7, 35.1, 35.6, 34.9, 34.8, 34.9, 34.3, 34.7, 34.4, 34.3, 34.6, 35.4, 34.9, 35.1, 35.3, 35.0, 35.6, 35.3, 35.5, 36.0, 35.6, 36.2, 36.6, 36.3, 37.0, 37.5, 38.3, 39.0, 39.0, 39.3, 40.1, 40.8, 41.3, 41.3, 42.1, 42.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 47.2, 46.3, 44.4, 43.5, 42.7, 41.1, 41.0, 40.3, 39.5, 37.9, 38.0, 37.2, 36.5, 36.6, 35.1, 35.1, 34.8, 34.1, 34.5, 33.1, 33.2, 32.5, 33.0, 31.9, 31.8, 31.6, 31.7, 31.3, 31.8, 31.2, 30.5, 31.1, 30.7, 31.1, 30.9, 31.2, 30.6, 30.6, 30.8, 31.2, 31.1, 31.8, 31.4, 31.0, 31.8, 31.4, 32.2, 32.7, 32.7, 32.4, 33.3, 33.0, 33.9, 34.7, 34.6, 34.4, 35.3, 36.2, 36.1, 37.1, 38.1, 38.1, 38.1, 37.1, 36.1, 36.2, 35.3, 34.4, 34.6, 34.7, 33.9, 33.0, 33.3, 32.4, 32.7, 32.7, 32.2, 31.4, 31.8, 31.0, 31.4, 31.8, 31.1, 31.2, 30.8, 30.6, 30.6, 31.2, 30.9, 31.1, 30.7, 31.1, 30.5, 31.2, 31.8, 31.3, 31.7, 31.6, 31.8, 31.9, 33.0, 32.5, 33.2, 33.1, 34.5, 34.1, 34.8, 35.1, 35.1, 36.6, 36.5, 37.2, 38.0, 37.9, 39.5, 40.3, 41.0, 41.1, 42.7, 43.5, 44.4, 46.3, 47.2, 48.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 42.9, 42.1, 41.3, 41.3, 40.8, 40.1, 39.3, 39.0, 39.0, 38.3, 37.5, 37.0, 36.3, 36.6, 36.2, 35.6, 36.0, 35.5, 35.3, 35.6, 35.0, 35.3, 35.1, 34.9, 35.4, 34.6, 34.3, 34.4, 34.7, 34.3, 34.9, 34.8, 34.9, 35.6, 35.1, 35.7, 36.1, 35.9, 36.6, 36.1, 36.6, 36.5, 37.2, 38.0, 37.9, 38.4, 39.2, 40.0, 40.8, 41.0, 41.5, 42.4, 42.3, 43.2, 44.1, 45.1, 22.0, 22.1, 23.1, 23.1, 23.2, 23.2, 24.3, 24.4, 24.5, 25.7, 25.8, 26.0, 26.2, 27.4, 27.7, 29.0, 29.3, 29.6, 31.0, 31.4, 31.8, 33.4, 35.0, 35.6, 37.3, 38.0, 39.9, 41.9, 44.0, 46.3, 48.6, 51.1, 55.2, 56.6, 62.6, 65.9, 69.9, 68.5, 67.3, 66.1, 65.0, 62.8, 61.8, 61.0, 60.1, 59.4, 57.6, 56.9, 56.3, 55.8, 55.3, 53.8, 53.3, 53.0, 52.6, 52.3, 52.0, 51.8, 50.6, 50.4, 50.3, 50.2, 50.1, 50.1, 50.1, 49.1, 49.1, 49.2, 49.3, 49.4, 49.6, 49.8, 49.0, 49.2, 49.5, 49.9, 50.2, 50.6, 51.0, 50.4, 50.9, 51.5, 52.0, 52.7, 53.3, 54.1, 53.7, 54.5, 55.4, 56.3, 57.3, 58.4, 58.3, 55.2, 52.2, 47.9, 46.7, 44.2, 41.9, 39.7, 37.6, 35.6, 34.9, 34.3, 32.5, 30.8, 30.4, 29.9, 28.4, 28.0, 27.7, 26.3, 26.0, 24.7, 24.5, 24.3, 24.1, 23.9, 22.7, 22.6, 22.5, 21.4, 21.3, 21.2, 21.2, 21.1, 20.1, 20.1, 20.0, 20.1, 20.1, 20.1, 20.1, 19.2, 19.3, 19.3, 19.4, 18.5, 18.6, 18.7, 18.9, 19.0, 19.2, 19.3, 18.5, 18.6, 18.9, 19.1, 19.1, 18.4, 18.7, 19.0, 19.3, 19.6, 20.0, 19.6, 19.5, 19.9, 20.3, 20.8, 21.3, 20.8, 20.9, 21.5, 22.0, 21.6, 21.9, 22.6, 23.4, 23.7, 23.4, 24.4, 25.0, 24.7, 25.8, 27.2, 27.1, 27.8, 28.7, 28.7, 31.1, 31.2, 33.0, 33.9, 35.7, 35.6, 38.5, 40.4, 40.9, 43.2, 46.1, 48.1, 51.1, 49.1, 46.1, 44.2, 42.3, 40.9, 39.5, 37.6, 35.9, 35.9, 33.0, 33.3, 31.4, 31.6, 29.8, 30.1, 28.8, 27.4, 27.7, 26.7, 26.1, 26.4, 25.3, 24.3, 24.1, 24.4, 23.6, 22.9, 23.3, 23.0, 22.4, 22.1, 22.7, 22.1, 21.6, 21.2, 20.7, 21.2, 21.2, 20.8, 20.5, 20.6, 21.0, 20.7, 20.5, 20.2, 21.1, 20.8, 20.6, 20.4, 20.2, 20.1, 20.7, 20.8, 20.7, 20.5, 20.6, 21.4, 21.3, 21.2, 21.2, 22.1, 22.1, 22.1, 47.1, 47.1, 46.1, 46.2, 46.3, 46.4, 46.6, 45.7, 45.9, 46.2, 46.4, 45.7, 46.0, 46.4, 46.8, 47.2, 46.6, 47.1, 47.6, 47.1, 47.7, 48.3, 49.0, 48.6, 49.4, 50.2, 51.1, 50.4, 50.5, 49.0, 49.2, 48.4, 48.1, 47.9, 47.3, 47.5, 46.6, 47.0, 46.1, 46.5, 45.8, 46.2, 45.5, 46.0, 45.4, 44.8, 45.4, 44.9, 45.5, 45.1, 45.7, 45.3, 45.0, 45.0, 45.4, 45.1, 44.9, 44.7, 45.5, 45.4, 45.3, 45.2, 45.1, 46.1, 46.1, 46.1, 46.1, 47.2, 47.3, 47.4, 47.6, 48.8, 49.0, 49.2, 49.5, 50.9, 51.3, 51.7, 52.1, 52.6, 50.9, 50.4, 49.2, 49.0, 48.8, 48.3, 46.7, 46.8, 46.8, 45.3, 45.4, 45.6, 45.3, 44.4, 44.6, 44.2, 43.9, 43.6, 43.2, 43.6, 44.0, 43.2, 43.6, 43.5, 43.3, 43.0, 43.2, 43.7, 44.3, 43.7, 44.3, 44.5, 44.4, 44.5, 44.7, 45.3, 46.0, 45.7, 46.4, 47.2, 47.0, 47.8, 48.6, 49.4, 50.3, 51.2, 51.1, 52.1, 53.1, 52.1, 51.1, 51.2, 50.3, 49.4, 48.6, 47.8, 47.0, 47.2, 46.4, 45.7, 46.0, 45.3, 44.7, 44.5, 44.4, 44.5, 44.3, 43.7, 44.3, 43.7, 43.2, 43.0, 43.3, 43.5, 43.6, 43.2, 44.0, 43.6, 43.2, 43.6, 43.9, 44.2, 44.6, 44.4, 45.3, 45.6, 45.4, 45.3, 46.8, 46.8, 46.7, 48.3, 48.8, 49.0, 49.2, 50.4, 50.9, 52.6, 52.1, 51.7, 51.3, 50.9, 49.5, 49.2, 49.0, 48.8, 47.6, 47.4, 47.3, 47.2, 46.1, 46.1, 46.1, 46.1, 45.1, 45.2, 45.3, 45.4, 45.5, 44.7, 44.9, 45.1, 45.4, 45.0, 45.0, 45.3, 45.7, 45.1, 45.5, 44.9, 45.4, 44.8, 45.4, 44.9, 45.5, 46.2, 45.8, 46.5, 46.1, 47.0, 46.6, 47.5, 47.3, 47.9, 48.1, 48.4, 49.2, 49.0, 50.5, 50.4, 51.1, 50.2, 49.4, 48.6, 49.0, 48.3, 47.7, 47.1, 47.6, 47.1, 46.6, 47.2, 46.8, 46.4, 46.0, 45.7, 46.4, 46.2, 45.9, 45.7, 46.6, 46.4, 46.3, 46.2, 46.1, 47.1, 33.0, 33.1, 32.1, 32.1, 31.2, 31.3, 30.4, 30.5, 30.6, 29.8, 28.9, 29.1, 29.3, 28.7, 28.7, 27.9, 28.2, 28.5, 28.1, 28.0, 28.4, 28.5, 28.0, 28.1, 27.7, 28.2, 28.6, 28.0, 28.4, 27.8, 28.4, 29.0, 28.3, 29.0, 28.4, 29.1, 29.8, 29.3, 30.3, 30.6, 30.6, 30.8, 31.2, 32.2, 31.9, 32.5, 32.8, 34.0, 34.0, 34.3, 35.7, 35.9, 37.7, 37.5, 38.2, 40.0, 40.8, 41.0, 42.5, 43.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 47.2, 45.3, 44.4, 42.5, 41.7, 41.1, 40.0, 39.2, 37.5, 37.7, 36.9, 35.7, 35.4, 34.7, 34.6, 33.2, 33.4, 31.9, 32.2, 31.5, 31.8, 30.6, 30.6, 30.3, 30.5, 30.0, 29.1, 29.7, 29.1, 29.7, 29.0, 28.4, 29.1, 28.5, 29.2, 28.7, 28.2, 28.8, 28.5, 29.2, 28.8, 28.4, 29.0, 28.8, 29.6, 29.3, 29.0, 29.7, 29.5, 30.4, 30.1, 29.9, 30.8, 30.8, 31.5, 31.4, 32.3, 32.2, 33.1, 33.1, 34.1, 34.0, 35.1, 35.1, 36.1, 37.2, 37.3, 38.5, 39.6, 39.8, 41.0, 42.3, 43.6, 45.0, 46.4, 47.8, 49.4, 50.9, 53.6, 55.4, 55.7, 55.6, 55.2, 54.8, 54.5, 54.2, 55.1, 54.8, 54.6, 54.4, 54.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.5, 55.7, 55.9, 56.1, 57.4, 57.6, 58.0, 58.3, 58.9, 59.4, 59.4, 58.7, 58.0, 58.5, 57.9, 57.4, 57.4, 57.5, 57.1, 56.7, 56.4, 56.1, 55.9, 55.7, 56.5, 56.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 56.3, 56.5, 56.7, 56.9, 56.4, 56.4, 56.7, 57.1, 57.5, 57.4, 57.4, 57.9, 58.5, 59.1, 58.7, 59.4, 59.0, 58.7, 58.3, 56.9, 56.6, 56.3, 55.4, 55.3, 55.2, 55.2, 55.1, 53.9, 53.8, 53.9, 54.0, 54.2, 53.6, 53.7, 53.8, 53.9, 54.0, 54.3, 54.5, 54.8, 54.5, 54.9, 52.0, 50.4, 48.8, 47.2, 45.7, 44.3, 42.9, 41.6, 40.3, 40.0, 38.8, 37.6, 37.5, 36.3, 35.2, 35.1, 34.1, 33.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 49.5, 49.9, 50.2, 50.6, 51.0, 51.5, 52.0, 52.6, 53.1, 53.8, 54.5, 55.2, 56.0, 56.1, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 56.1, 56.0, 56.4, 55.6, 55.7, 55.4, 54.7, 54.2, 53.6, 53.2, 52.7, 52.3, 51.9, 50.6, 50.3, 50.0, 49.8, 49.6, 49.4, 49.3, 49.2, 49.1, 49.1, 49.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 49.5, 48.8, 49.2, 49.5, 50.0, 50.4, 50.9, 51.5, 52.0, 52.7, 53.3, 52.9, 53.7, 54.5, 54.0, 53.9, 53.6, 53.3, 52.1, 52.1, 52.2, 52.3, 52.4, 51.1, 51.3, 51.6, 51.8, 52.1, 51.1, 51.4, 51.8, 52.1, 51.3, 50.6, 49.9, 49.3, 48.7, 48.2, 47.7, 47.2, 46.8, 46.4, 46.0, 45.7, 45.4, 45.1, 44.9, 44.7, 44.5, 44.4, 44.3, 44.2, 44.1, 44.1, 44.1, 44.1, 44.1, 44.2, 44.3, 44.4, 44.5, 44.7, 44.9, 45.1, 45.4, 45.7, 46.0, 46.4, 46.8, 47.2, 47.7, 48.2, 48.7, 49.3, 49.9, 50.6, 51.3, 52.1, 51.8, 51.4, 51.1, 52.1, 51.8, 51.6, 51.3, 51.1, 52.4, 52.3, 52.2, 52.1, 52.1, 53.3, 53.6, 53.9, 54.0, 54.3, 53.7, 52.9, 53.1, 52.7, 52.0, 51.5, 50.9, 50.4, 50.0, 49.5, 49.2, 48.8, 49.4, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 49.1, 49.1, 49.2, 49.3, 49.4, 49.6, 49.8, 50.0, 50.3, 50.6, 51.9, 52.3, 52.7, 53.2, 53.6, 54.2, 54.7, 55.4, 55.7, 55.6, 56.4, 56.0, 56.1, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 56.1, 56.0, 55.2, 54.5, 53.8, 53.1, 52.6, 52.0, 51.5, 51.0, 50.6, 50.2, 49.9, 49.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 46.7, 47.1, 47.4, 47.8, 48.3, 48.8, 49.3, 48.7, 48.2, 48.8, 48.3, 47.9, 47.4, 48.2, 47.8, 47.4, 48.3, 47.9, 47.6, 47.7, 48.4, 48.1, 48.4, 48.6, 48.9, 47.9, 48.3, 47.4, 47.8, 47.0, 46.8, 46.7, 46.0, 46.5, 46.0, 45.4, 46.0, 45.5, 45.1, 45.7, 45.3, 45.0, 45.7, 45.4, 45.7, 45.9, 45.7, 46.6, 46.4, 47.3, 47.2, 47.1, 47.1, 48.1, 48.1, 49.1, 49.2, 49.3, 48.4, 48.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 47.9, 47.8, 48.3, 47.7, 48.2, 48.7, 48.2, 48.8, 48.7, 48.7, 48.6, 48.6, 48.7, 48.6, 48.3, 47.9, 47.6, 47.7, 47.0, 46.7, 47.0, 47.3, 46.3, 46.6, 47.0, 47.1, 46.5, 46.8, 46.8, 46.7, 47.2, 46.7, 47.1, 47.6, 47.1, 47.7, 48.3, 47.8, 47.9, 48.1, 48.8, 48.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 48.5, 48.8, 48.1, 47.9, 47.8, 48.3, 47.7, 47.1, 47.6, 47.1, 46.7, 47.2, 46.7, 46.8, 46.8, 46.5, 47.1, 47.0, 46.6, 46.3, 47.3, 47.0, 46.7, 47.0, 47.7, 47.6, 47.9, 48.3, 48.6, 48.7, 48.2, 48.6, 48.7, 48.7, 48.8, 48.2, 48.7, 48.2, 47.7, 48.3, 47.8, 47.9, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 48.6, 48.4, 49.3, 49.2, 49.1, 48.1, 48.1, 47.1, 47.1, 47.2, 46.3, 46.4, 46.6, 45.7, 45.9, 45.7, 45.4, 45.7, 45.0, 45.3, 45.7, 45.1, 45.5, 46.0, 45.4, 46.0, 46.5, 46.0, 46.7, 46.8, 47.0, 47.8, 47.4, 48.3, 47.9, 48.9, 48.6, 48.4, 48.1, 48.4, 47.7, 47.6, 47.9, 48.3, 47.4, 47.8, 48.2, 47.4, 47.9, 48.3, 48.8, 48.2, 48.7, 49.3, 48.8, 48.3, 47.8, 47.4, 47.1, 46.7, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 50.1, 50.1, 49.1, 49.2, 49.3, 48.4, 47.8, 47.8, 48.0, 47.2, 47.5, 46.7, 47.1, 47.4, 46.8, 47.2, 46.6, 47.1, 46.8, 47.1, 46.7, 47.2, 47.9, 47.4, 48.2, 47.8, 48.6, 48.8, 49.2, 49.0, 50.0, 50.8, 51.0, 51.1, 52.2, 52.1, 51.8, 50.8, 51.1, 50.4, 50.6, 49.8, 50.2, 49.5, 48.8, 49.3, 49.2, 49.3, 48.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 48.8, 49.3, 48.7, 49.3, 48.8, 49.5, 49.0, 49.8, 50.4, 50.2, 51.1, 50.8, 51.8, 51.6, 50.7, 49.8, 49.5, 48.4, 48.6, 47.6, 47.9, 47.0, 47.1, 46.5, 45.8, 46.2, 45.5, 46.0, 45.4, 44.8, 45.4, 44.9, 45.5, 45.1, 44.7, 45.3, 45.0, 45.0, 45.4, 45.7, 45.9, 45.7, 46.6, 46.4, 46.3, 47.2, 47.1, 48.1, 48.1, 48.1, 47.1, 47.2, 46.3, 46.4, 46.6, 45.7, 45.9, 45.7, 45.4, 45.0, 45.0, 45.3, 44.7, 45.1, 45.5, 44.9, 45.4, 44.8, 45.4, 46.0, 45.5, 46.2, 45.8, 46.5, 47.1, 47.0, 47.9, 47.6, 48.6, 48.4, 49.5, 49.8, 50.7, 50.6, 51.8, 50.8, 51.1, 50.2, 50.4, 49.8, 49.0, 49.5, 48.8, 49.3, 48.7, 49.3, 48.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 48.8, 49.3, 49.2, 49.3, 48.8, 49.5, 50.2, 49.8, 50.4, 50.2, 51.1, 50.8, 51.8, 52.1, 52.2, 51.1, 51.0, 50.8, 50.0, 49.0, 49.2, 48.8, 48.6, 47.8, 48.2, 47.4, 47.9, 47.2, 46.7, 47.1, 46.8, 47.1, 46.6, 47.2, 46.8, 47.4, 47.1, 46.7, 47.5, 47.2, 48.0, 47.8, 47.8, 48.4, 49.3, 49.2, 49.1, 50.1, 49.1, 49.1, 48.1, 47.2, 46.3, 45.4, 44.5, 43.7, 42.9, 42.1, 41.3, 41.3, 40.8, 40.1, 39.3, 39.0, 39.0, 38.3, 37.7, 37.9, 37.5, 36.8, 37.0, 36.7, 36.1, 36.5, 36.2, 35.8, 36.3, 35.7, 35.8, 35.9, 35.4, 35.9, 35.8, 36.8, 36.3, 36.8, 37.0, 36.7, 37.3, 37.4, 37.4, 38.0, 38.2, 38.1, 38.8, 39.4, 39.2, 39.7, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 46.3, 45.4, 44.5, 43.7, 42.9, 41.1, 41.2, 40.5, 39.8, 39.0, 38.6, 38.6, 36.9, 37.1, 36.6, 35.9, 36.1, 35.7, 35.1, 35.6, 34.2, 34.3, 33.7, 34.2, 33.7, 33.7, 33.8, 33.4, 34.0, 33.2, 32.8, 33.1, 33.2, 33.0, 33.6, 33.1, 33.7, 33.7, 33.9, 33.4, 34.0, 33.6, 34.3, 34.6, 34.7, 35.4, 35.7, 35.9, 35.6, 36.4, 37.1, 36.9, 37.8, 38.6, 39.5, 39.3, 40.2, 40.8, 41.1, 42.1, 43.1, 42.1, 41.1, 40.8, 40.2, 39.3, 38.5, 38.6, 37.8, 36.9, 37.1, 36.4, 35.6, 35.1, 35.1, 35.4, 34.7, 34.6, 34.3, 33.6, 34.0, 33.4, 33.9, 33.7, 33.7, 33.1, 33.6, 33.0, 33.2, 33.1, 32.8, 33.2, 34.0, 33.4, 33.8, 33.7, 33.7, 34.2, 33.7, 34.3, 34.2, 35.6, 35.1, 35.7, 36.1, 35.9, 36.6, 37.1, 36.9, 38.6, 38.6, 39.0, 39.8, 40.5, 41.2, 41.1, 42.9, 43.7, 44.5, 45.4, 46.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 40.4, 39.7, 39.2, 39.4, 38.8, 38.1, 38.2, 38.0, 37.4, 37.4, 37.3, 36.7, 37.0, 36.8, 36.3, 35.7, 35.8, 35.9, 35.4, 35.9, 35.8, 35.7, 36.3, 35.8, 36.2, 36.5, 36.1, 36.7, 37.0, 36.8, 37.5, 37.9, 37.7, 38.3, 39.0, 38.9, 39.3, 40.1, 40.8, 41.3, 41.3, 42.1, 42.9, 43.7, 44.5, 45.4, 46.3, 47.2, 48.1, 48.1, 24.0, 24.1, 25.1, 25.1, 25.2, 26.2, 26.3, 26.4, 27.6, 27.7, 27.9, 29.1, 29.3, 30.6, 30.9, 31.1, 32.5, 32.9, 34.3, 34.8, 36.3, 38.0, 38.5, 40.3, 42.1, 42.9, 44.9, 47.0, 50.5, 52.9, 56.7, 58.0, 63.7, 68.2, 71.5, 70.0, 68.6, 67.3, 66.0, 63.7, 62.6, 61.6, 60.7, 59.8, 59.0, 58.3, 56.5, 55.8, 55.3, 54.7, 54.2, 53.8, 53.3, 53.0, 52.6, 51.3, 51.0, 50.8, 50.6, 50.4, 50.3, 50.2, 50.1, 50.1, 50.1, 49.1, 49.1, 49.2, 49.3, 49.4, 49.6, 49.8, 50.0, 50.3, 50.6, 49.9, 50.2, 50.6, 51.0, 51.5, 52.0, 52.6, 53.1, 53.8, 54.5, 54.1, 54.8, 55.7, 56.6, 57.5, 58.6, 59.7, 60.9, 60.8, 62.1, 59.5, 55.2, 52.5, 48.6, 46.3, 44.0, 41.9, 39.9, 39.2, 37.3, 36.7, 35.0, 33.4, 32.9, 32.5, 31.0, 29.6, 29.3, 29.0, 27.7, 27.4, 27.2, 26.0, 25.8, 25.7, 24.5, 24.4, 24.3, 23.2, 23.2, 23.1, 23.1, 23.1, 23.0, 22.1, 22.1, 22.1, 21.2, 21.2, 21.3, 21.4, 20.6, 20.5, 20.7, 20.8, 20.9, 21.1, 20.8, 20.4, 20.6, 20.8, 21.1, 20.2, 20.5, 20.7, 21.0, 20.6, 20.5, 20.8, 21.2, 21.6, 22.0, 21.5, 21.6, 22.1, 22.7, 22.1, 22.4, 23.0, 23.3, 22.9, 23.6, 24.4, 25.2, 24.9, 25.3, 26.4, 26.1, 26.7, 27.7, 27.4, 28.8, 30.1, 29.8, 31.6, 31.4, 33.3, 33.0, 35.9, 35.9, 37.6, 39.5, 40.9, 42.3, 44.2, 46.1, 49.1, 51.1, 49.1, 47.1, 45.2, 42.3, 40.9, 40.5, 38.6, 36.8, 36.6, 35.1, 33.8, 33.5, 31.9, 31.9, 30.6, 29.3, 29.6, 28.1, 28.0, 27.6, 26.5, 26.9, 26.2, 25.3, 25.7, 25.2, 24.4, 24.6, 24.5, 23.9, 23.5, 24.1, 23.5, 23.0, 22.5, 22.1, 22.8, 22.5, 22.1, 21.7, 22.5, 22.2, 21.9, 21.6, 22.3, 22.2, 21.9, 21.7, 22.3, 22.4, 22.2, 22.0, 22.5, 22.7, 22.6, 22.5, 23.4, 23.3, 23.2, 23.2, 23.1, 23.1, 24.1, 44.1, 44.1, 44.1, 44.2, 44.3, 44.4, 44.5, 44.7, 44.9, 45.1, 45.4, 45.7, 46.0, 46.4, 46.8, 47.2, 47.7, 48.2, 48.7, 49.3, 49.9, 50.6, 51.3, 52.1, 53.0, 52.6, 52.1, 52.1, 50.5, 50.2, 49.2, 48.4, 48.1, 47.9, 47.3, 46.3, 46.6, 45.7, 46.1, 45.3, 45.0, 45.0, 44.4, 44.7, 44.3, 44.5, 44.3, 43.8, 44.4, 44.0, 44.6, 44.3, 43.9, 44.7, 44.4, 44.1, 43.9, 44.7, 44.5, 44.4, 45.3, 45.2, 45.1, 45.1, 46.1, 46.1, 47.1, 47.2, 47.3, 47.4, 48.6, 48.8, 50.0, 50.3, 50.6, 51.9, 51.3, 50.6, 50.0, 49.4, 48.8, 49.3, 48.7, 48.2, 47.7, 47.2, 46.7, 46.8, 46.8, 46.5, 46.1, 45.7, 45.8, 46.0, 45.9, 45.6, 45.3, 45.6, 45.9, 46.0, 45.8, 45.7, 46.1, 46.5, 46.8, 46.2, 46.7, 46.0, 46.5, 46.0, 46.5, 46.0, 45.5, 46.1, 45.7, 46.4, 46.0, 46.7, 46.4, 47.2, 47.0, 47.8, 47.6, 48.4, 48.3, 49.2, 49.1, 50.1, 50.1, 50.1, 49.1, 49.2, 48.3, 48.4, 47.6, 47.8, 47.0, 47.2, 46.4, 46.7, 46.0, 46.4, 45.7, 46.1, 45.5, 46.0, 46.5, 46.0, 46.5, 46.0, 46.7, 46.2, 46.8, 46.5, 46.1, 45.7, 45.8, 46.0, 45.9, 45.6, 45.3, 45.6, 45.9, 46.0, 45.8, 45.7, 46.1, 46.5, 46.8, 46.8, 46.7, 47.2, 47.7, 48.2, 48.7, 48.2, 48.8, 49.4, 50.0, 50.6, 51.3, 51.9, 50.6, 50.3, 50.0, 48.8, 48.6, 47.4, 47.3, 47.2, 47.1, 46.1, 46.1, 45.1, 45.1, 45.2, 45.3, 44.4, 44.5, 44.7, 43.9, 44.1, 44.4, 44.7, 43.9, 44.3, 44.6, 44.0, 44.4, 43.8, 44.3, 44.5, 44.3, 44.7, 44.4, 45.0, 45.0, 45.3, 46.1, 45.7, 46.6, 46.3, 47.3, 47.9, 48.1, 48.4, 49.2, 50.2, 50.5, 52.1, 52.1, 52.6, 53.0, 52.1, 51.3, 50.6, 49.9, 49.3, 48.7, 48.2, 47.7, 47.2, 46.8, 46.4, 46.0, 45.7, 45.4, 45.1, 44.9, 44.7, 44.5, 44.4, 44.3, 44.2, 44.1, 44.1, 34.0, 34.1, 34.1, 33.1, 32.2, 32.3, 32.4, 31.5, 30.8, 30.8, 31.0, 30.1, 30.4, 29.5, 29.8, 30.1, 29.3, 29.6, 28.8, 29.2, 29.5, 28.8, 29.2, 28.5, 28.9, 29.4, 28.7, 29.2, 28.5, 29.1, 29.7, 29.1, 29.7, 29.1, 29.8, 30.4, 30.0, 30.5, 30.3, 31.3, 31.3, 31.8, 31.5, 32.5, 32.9, 33.4, 33.2, 34.6, 34.7, 35.4, 35.7, 36.9, 37.7, 37.5, 39.2, 40.0, 41.1, 41.7, 42.5, 44.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 46.2, 45.3, 43.4, 42.5, 41.0, 40.8, 39.0, 38.2, 37.5, 36.6, 35.9, 35.7, 34.3, 34.0, 32.9, 32.8, 32.5, 31.9, 31.1, 31.2, 30.8, 30.6, 29.6, 29.9, 29.3, 28.5, 29.1, 28.4, 29.0, 28.3, 27.7, 28.3, 27.8, 28.4, 28.0, 27.4, 27.8, 27.7, 27.3, 27.3, 27.6, 27.6, 28.0, 27.7, 27.4, 28.2, 27.9, 28.7, 28.5, 28.3, 29.1, 28.9, 29.8, 29.6, 29.5, 30.4, 30.3, 30.7, 31.1, 32.1, 32.1, 32.0, 33.1, 34.1, 34.1, 35.2, 35.3, 36.4, 37.6, 37.8, 39.0, 40.3, 40.5, 41.8, 43.2, 44.7, 46.1, 47.7, 49.3, 50.9, 52.7, 54.5, 54.1, 53.7, 53.3, 54.0, 53.9, 53.6, 53.3, 53.6, 53.6, 53.7, 53.9, 53.8, 53.9, 54.0, 54.2, 55.2, 55.3, 55.4, 55.6, 56.6, 56.9, 57.2, 57.5, 59.0, 59.4, 58.7, 59.1, 58.5, 57.9, 57.4, 57.4, 57.5, 57.1, 56.7, 56.4, 56.4, 56.9, 56.7, 56.5, 56.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 56.3, 55.5, 55.7, 55.9, 56.1, 56.4, 56.7, 57.1, 57.5, 57.4, 57.4, 57.9, 58.5, 58.0, 58.7, 59.4, 59.0, 58.9, 58.4, 58.0, 57.6, 57.4, 57.1, 55.9, 55.7, 55.5, 55.4, 55.2, 55.2, 55.2, 55.1, 55.2, 54.4, 54.6, 54.8, 55.1, 55.4, 54.5, 54.8, 55.2, 55.6, 56.0, 55.4, 53.6, 52.0, 49.4, 48.9, 46.4, 46.0, 43.6, 43.3, 41.0, 40.8, 39.6, 38.5, 38.3, 37.2, 36.1, 36.1, 35.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 49.5, 49.9, 50.2, 50.6, 51.0, 51.5, 52.0, 52.6, 53.1, 53.8, 54.5, 55.2, 56.0, 56.1, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 55.7, 56.0, 56.4, 55.6, 56.0, 55.4, 53.6, 53.1, 52.6, 52.1, 51.7, 51.3, 50.9, 50.6, 50.3, 50.0, 49.8, 49.6, 49.4, 49.3, 49.2, 49.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 49.5, 49.9, 50.2, 50.6, 51.0, 50.4, 50.9, 51.5, 52.0, 52.7, 53.3, 54.1, 54.8, 55.7, 55.4, 55.1, 54.8, 54.6, 54.4, 53.6, 53.7, 53.7, 53.8, 53.7, 53.7, 53.6, 53.6, 53.7, 53.6, 53.9, 54.0, 54.3, 53.7, 52.9, 52.2, 51.5, 50.9, 50.4, 49.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 49.8, 50.4, 50.9, 51.5, 52.2, 52.9, 53.7, 54.3, 54.0, 53.9, 53.6, 53.7, 53.6, 53.6, 53.7, 53.7, 53.8, 53.7, 53.7, 53.6, 54.4, 54.6, 54.8, 55.1, 55.4, 55.7, 54.8, 54.1, 53.3, 52.7, 52.0, 51.5, 50.9, 50.4, 51.0, 50.6, 50.2, 49.9, 49.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 49.2, 49.3, 49.4, 49.6, 49.8, 50.0, 50.3, 50.6, 50.9, 51.3, 51.7, 52.1, 52.6, 53.1, 53.6, 55.4, 56.0, 55.6, 56.4, 56.0, 55.7, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 56.1, 56.0, 55.2, 54.5, 53.8, 53.1, 52.6, 52.0, 51.5, 51.0, 50.6, 50.2, 49.9, 49.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 48.0, 48.2, 48.5, 47.8, 48.1, 47.9, 47.8, 47.3, 47.7, 48.2, 47.6, 47.1, 47.7, 47.2, 46.7, 47.4, 47.0, 46.9, 47.4, 47.2, 47.3, 47.6, 47.7, 47.9, 48.1, 47.9, 48.6, 47.6, 47.9, 47.2, 47.4, 46.9, 47.0, 46.8, 46.7, 46.0, 46.5, 46.0, 45.4, 46.0, 45.5, 46.1, 45.7, 45.3, 46.0, 45.7, 45.4, 46.2, 45.9, 46.7, 46.6, 46.4, 47.3, 47.2, 47.1, 48.1, 48.1, 49.1, 49.1, 49.2, 48.3, 48.4, 48.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 47.4, 47.8, 48.3, 47.7, 48.2, 48.7, 48.2, 48.8, 48.3, 48.7, 48.6, 48.2, 48.7, 48.6, 48.3, 47.9, 48.9, 48.6, 48.4, 48.1, 47.9, 47.7, 47.6, 47.9, 47.2, 47.4, 47.8, 48.2, 47.4, 47.9, 48.3, 47.7, 48.2, 48.7, 49.3, 48.8, 48.3, 47.8, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 47.8, 48.3, 48.8, 49.3, 48.7, 48.2, 47.7, 48.3, 47.9, 47.4, 48.2, 47.8, 47.4, 47.2, 47.9, 47.6, 47.7, 47.9, 48.1, 48.4, 48.6, 48.9, 47.9, 48.3, 48.6, 48.7, 48.2, 48.6, 48.7, 48.3, 48.8, 48.2, 48.7, 48.2, 47.7, 48.3, 47.8, 47.4, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.8, 48.4, 48.3, 49.2, 49.1, 49.1, 48.1, 48.1, 47.1, 47.2, 47.3, 46.4, 46.6, 46.7, 45.9, 46.2, 45.4, 45.7, 46.0, 45.3, 45.7, 46.1, 45.5, 46.0, 45.4, 46.0, 46.5, 46.0, 46.7, 46.8, 47.0, 46.9, 47.4, 47.2, 47.9, 47.6, 48.6, 47.9, 48.1, 47.9, 47.3, 47.5, 47.3, 47.2, 47.4, 46.9, 47.0, 47.4, 46.7, 47.2, 47.7, 47.1, 47.6, 48.2, 47.7, 47.3, 47.8, 47.9, 48.1, 47.8, 48.5, 48.2, 48.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 52.1, 52.1, 51.1, 51.2, 51.1, 50.4, 49.6, 49.8, 50.0, 49.2, 49.4, 48.8, 48.3, 48.5, 48.9, 48.3, 48.8, 48.2, 48.7, 49.0, 48.8, 48.7, 49.0, 48.6, 49.4, 50.2, 49.9, 50.4, 50.5, 51.6, 51.3, 52.3, 52.4, 52.5, 52.7, 52.1, 51.8, 50.8, 51.1, 50.2, 50.4, 49.8, 50.2, 49.5, 48.8, 49.3, 49.2, 49.3, 48.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 48.8, 48.3, 48.5, 48.9, 48.3, 48.8, 48.2, 48.7, 49.0, 48.8, 48.7, 49.0, 48.6, 49.4, 50.2, 49.9, 49.5, 49.2, 49.0, 49.2, 49.4, 48.1, 48.4, 47.7, 47.6, 46.6, 47.0, 46.1, 45.3, 45.8, 45.0, 45.5, 44.9, 44.6, 44.8, 44.3, 44.5, 44.4, 44.5, 44.7, 44.3, 44.8, 44.7, 44.4, 45.1, 44.9, 45.7, 45.5, 45.4, 46.3, 46.2, 46.1, 47.1, 47.1, 47.1, 46.1, 46.2, 46.3, 45.4, 45.5, 45.7, 44.9, 45.1, 44.4, 44.7, 44.8, 44.3, 44.7, 44.5, 44.4, 44.5, 44.3, 44.8, 44.6, 44.9, 45.5, 45.0, 45.8, 45.3, 46.1, 47.0, 46.6, 47.6, 47.7, 48.4, 48.1, 49.4, 49.2, 49.0, 49.2, 49.5, 49.9, 50.2, 49.4, 48.6, 49.0, 48.7, 48.8, 49.0, 48.7, 48.2, 48.8, 48.3, 48.9, 48.5, 48.3, 48.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 48.8, 49.3, 49.2, 49.3, 48.8, 49.5, 50.2, 49.8, 50.4, 50.2, 51.1, 50.8, 51.8, 52.1, 52.7, 52.5, 52.4, 52.3, 51.3, 51.6, 50.5, 50.4, 49.9, 50.2, 49.4, 48.6, 49.0, 48.7, 48.8, 49.0, 48.7, 48.2, 48.8, 48.3, 48.9, 48.5, 48.3, 48.8, 49.4, 49.2, 50.0, 49.8, 49.6, 50.4, 51.1, 51.2, 51.1, 52.1, 51.1, 51.1, 50.1, 49.2, 48.3, 47.4, 46.6, 45.7, 44.9, 43.1, 42.3, 41.6, 41.4, 41.1, 40.4, 39.7, 39.2, 39.4, 38.8, 38.1, 38.2, 38.0, 37.4, 37.4, 37.3, 36.7, 37.0, 36.8, 36.3, 36.8, 36.5, 36.3, 36.8, 36.3, 36.5, 36.8, 36.3, 36.8, 37.0, 36.7, 37.3, 37.4, 37.4, 38.0, 38.2, 38.1, 38.8, 39.4, 39.2, 39.7, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 42.1, 41.3, 41.3, 40.8, 40.1, 39.3, 39.0, 39.0, 38.3, 37.7, 37.9, 37.5, 36.6, 36.2, 35.6, 36.0, 35.5, 35.3, 35.6, 35.0, 35.3, 35.1, 34.9, 35.4, 34.9, 35.1, 35.3, 35.0, 35.6, 34.9, 34.8, 34.9, 35.6, 35.1, 35.7, 36.1, 35.9, 36.6, 37.1, 36.9, 37.6, 38.3, 38.3, 38.7, 38.4, 39.2, 40.0, 40.8, 41.0, 41.5, 42.4, 43.3, 44.2, 45.1, 46.1, 47.1, 46.1, 45.1, 44.2, 43.3, 42.4, 41.5, 41.0, 40.8, 40.0, 39.2, 38.4, 38.7, 38.3, 38.3, 37.6, 36.9, 37.1, 36.6, 35.9, 36.1, 35.7, 35.1, 35.6, 34.9, 34.8, 34.9, 35.6, 35.0, 35.3, 35.1, 34.9, 35.4, 34.9, 35.1, 35.3, 35.0, 35.6, 35.3, 35.5, 36.0, 35.6, 36.2, 36.6, 37.5, 37.9, 37.7, 38.3, 39.0, 38.9, 39.3, 40.1, 40.8, 41.3, 41.3, 42.1, 42.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 40.4, 39.7, 39.2, 39.4, 38.8, 38.1, 38.2, 38.0, 37.4, 37.4, 37.3, 36.7, 37.0, 36.8, 36.3, 36.8, 36.5, 36.3, 36.8, 36.3, 36.5, 36.8, 36.3, 36.8, 37.0, 36.7, 37.3, 37.4, 37.4, 38.0, 38.2, 38.1, 38.8, 39.4, 39.2, 39.7, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 26.0, 26.1, 26.1, 26.1, 27.2, 27.3, 28.4, 28.5, 28.6, 29.8, 29.9, 31.2, 31.4, 31.6, 33.0, 33.3, 34.7, 36.1, 36.6, 38.1, 38.6, 40.3, 42.0, 42.7, 44.5, 46.5, 48.6, 52.1, 54.4, 58.2, 60.8, 64.9, 70.8, 71.8, 70.2, 68.7, 67.3, 66.0, 63.5, 62.4, 61.4, 60.4, 59.5, 58.7, 57.9, 57.1, 56.5, 55.8, 55.3, 54.7, 53.2, 52.7, 52.3, 51.9, 51.6, 51.3, 51.0, 50.8, 50.6, 50.4, 50.3, 50.2, 50.1, 50.1, 50.1, 49.1, 49.1, 49.2, 49.3, 49.4, 49.6, 49.8, 50.0, 50.3, 50.6, 50.9, 51.3, 51.7, 52.1, 52.6, 53.1, 52.6, 53.1, 53.8, 54.5, 55.2, 56.0, 56.9, 57.8, 58.8, 59.8, 60.9, 62.1, 62.8, 63.5, 64.9, 63.7, 58.0, 56.7, 52.9, 50.5, 47.0, 44.9, 44.1, 42.1, 40.3, 38.5, 38.0, 36.3, 34.8, 34.3, 32.9, 32.5, 32.2, 30.9, 30.6, 29.3, 29.1, 27.9, 27.7, 27.6, 26.4, 26.3, 26.2, 25.2, 25.1, 25.1, 24.1, 24.0, 24.1, 23.1, 23.1, 23.2, 23.2, 23.3, 23.4, 22.5, 22.6, 22.7, 22.5, 22.0, 22.2, 22.4, 22.3, 21.7, 21.9, 22.2, 22.3, 21.6, 21.9, 22.2, 22.5, 21.7, 22.1, 22.5, 22.8, 22.1, 22.5, 23.0, 23.5, 24.1, 23.5, 23.9, 24.5, 24.6, 24.4, 25.2, 25.7, 25.3, 26.2, 26.9, 26.5, 27.6, 28.0, 28.1, 29.6, 29.3, 30.6, 30.9, 31.9, 33.5, 33.8, 35.1, 36.6, 36.8, 38.6, 40.5, 40.9, 42.3, 45.2, 47.1, 49.1, 51.1, 49.1, 47.1, 45.2, 43.3, 41.4, 40.9, 39.6, 37.8, 36.6, 36.1, 34.3, 34.5, 32.7, 32.7, 31.1, 31.4, 29.7, 29.9, 29.0, 28.4, 28.5, 27.3, 26.2, 26.5, 26.1, 25.2, 25.4, 25.3, 24.5, 24.3, 24.7, 24.1, 23.5, 23.9, 23.8, 23.3, 22.9, 23.6, 23.3, 22.9, 22.5, 23.4, 23.0, 22.7, 22.4, 23.3, 23.0, 22.8, 22.6, 23.4, 23.2, 23.0, 22.9, 23.8, 23.6, 23.5, 23.4, 24.3, 24.2, 24.2, 25.1, 25.1, 25.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 49.8, 50.4, 50.9, 51.5, 52.2, 52.9, 53.7, 54.3, 54.0, 52.6, 52.1, 52.1, 50.5, 50.2, 49.2, 48.4, 48.1, 47.9, 47.3, 46.3, 46.6, 45.7, 45.4, 45.3, 44.5, 44.9, 44.4, 44.7, 44.3, 43.7, 44.3, 43.8, 43.3, 44.0, 43.6, 44.3, 43.9, 43.6, 44.4, 44.1, 43.9, 44.7, 44.5, 45.4, 45.3, 45.2, 46.1, 46.1, 46.1, 47.1, 47.1, 48.2, 48.3, 49.4, 49.6, 50.8, 51.0, 50.3, 49.5, 48.8, 49.2, 48.5, 47.8, 47.3, 47.7, 47.1, 46.8, 47.1, 46.7, 46.7, 46.7, 46.2, 46.8, 46.5, 46.1, 47.0, 46.6, 46.3, 46.2, 47.0, 46.7, 47.0, 47.7, 47.6, 47.9, 48.3, 48.7, 49.0, 49.4, 49.8, 49.0, 48.3, 47.7, 48.2, 47.6, 47.1, 46.6, 46.1, 46.8, 46.4, 46.0, 45.7, 45.4, 45.7, 45.9, 45.7, 45.5, 45.4, 45.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 45.3, 45.4, 45.5, 45.7, 45.9, 45.7, 45.4, 45.7, 46.0, 46.4, 46.8, 46.1, 46.6, 47.1, 47.6, 48.2, 47.7, 48.3, 49.0, 49.8, 49.4, 49.0, 48.7, 48.3, 47.9, 47.6, 47.7, 47.0, 46.7, 47.0, 46.2, 46.3, 46.6, 47.0, 46.1, 46.5, 46.8, 46.2, 46.7, 46.7, 46.7, 47.1, 46.8, 47.1, 47.7, 47.3, 47.8, 48.5, 49.2, 48.8, 49.5, 50.3, 51.0, 50.8, 49.6, 49.4, 48.3, 48.2, 47.1, 47.1, 47.1, 46.1, 46.1, 45.2, 45.3, 44.4, 44.5, 44.7, 43.9, 44.1, 44.4, 43.6, 43.9, 44.3, 43.6, 44.0, 43.3, 43.8, 44.3, 43.7, 44.3, 44.7, 44.4, 44.9, 44.5, 45.3, 45.4, 45.7, 46.6, 46.3, 47.3, 47.9, 48.1, 48.4, 49.2, 50.2, 50.5, 52.1, 52.1, 52.6, 54.0, 54.3, 53.7, 52.9, 52.2, 51.5, 50.9, 50.4, 49.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 35.0, 35.1, 34.1, 34.1, 33.2, 32.7, 32.4, 32.5, 31.7, 31.8, 31.0, 31.2, 31.1, 30.6, 29.8, 30.1, 29.3, 29.6, 29.9, 29.2, 29.5, 28.8, 29.2, 29.6, 28.9, 29.4, 28.7, 29.2, 29.8, 29.1, 29.7, 29.1, 29.7, 30.4, 29.8, 30.4, 30.0, 30.9, 31.2, 31.3, 31.3, 31.8, 32.7, 32.5, 32.9, 33.4, 34.3, 34.6, 34.7, 36.2, 36.2, 36.9, 37.9, 38.4, 39.2, 40.0, 41.1, 41.7, 42.5, 44.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 47.2, 45.3, 44.4, 42.5, 41.7, 41.1, 40.0, 38.2, 37.5, 37.7, 35.9, 35.7, 35.4, 34.0, 34.0, 33.2, 33.4, 31.9, 32.2, 31.5, 31.8, 30.6, 30.6, 30.3, 30.5, 30.0, 29.1, 29.7, 29.1, 29.7, 29.0, 28.4, 29.1, 28.5, 29.2, 28.7, 28.2, 28.8, 28.5, 29.2, 28.8, 28.4, 29.0, 28.8, 29.6, 29.3, 29.0, 29.7, 29.5, 30.4, 30.1, 29.9, 30.8, 30.8, 31.5, 31.4, 32.3, 32.2, 33.1, 33.1, 34.1, 34.0, 34.1, 35.1, 36.1, 36.2, 37.3, 38.5, 38.6, 39.8, 41.0, 42.3, 43.6, 43.9, 46.4, 46.8, 49.4, 50.9, 52.6, 53.8, 53.8, 53.3, 52.9, 52.6, 53.3, 53.0, 52.6, 52.3, 52.1, 53.1, 52.9, 52.7, 52.5, 53.8, 53.7, 53.7, 53.6, 54.4, 54.6, 54.8, 55.6, 55.8, 56.1, 56.5, 57.5, 57.9, 58.3, 58.7, 59.1, 58.5, 57.9, 57.4, 57.4, 57.5, 57.1, 56.7, 56.4, 56.1, 55.9, 56.7, 56.5, 56.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 55.3, 55.5, 55.7, 55.9, 56.1, 56.4, 56.7, 57.1, 57.5, 58.0, 58.5, 57.9, 58.5, 58.0, 58.7, 58.3, 59.0, 58.9, 58.4, 58.0, 57.6, 57.4, 57.1, 55.9, 55.7, 55.5, 55.4, 55.2, 55.2, 55.2, 55.1, 55.2, 54.4, 54.6, 54.8, 55.1, 55.4, 55.7, 54.8, 55.2, 55.6, 56.0, 56.5, 55.8, 53.1, 51.5, 48.9, 47.4, 46.0, 44.7, 43.3, 43.1, 40.8, 40.6, 39.5, 38.3, 38.2, 37.2, 36.1, 36.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 49.5, 49.9, 50.2, 50.6, 51.0, 51.5, 52.0, 52.6, 53.1, 53.8, 54.5, 55.2, 56.0, 56.1, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 56.1, 56.5, 56.4, 55.6, 54.9, 54.3, 53.6, 53.1, 52.6, 52.1, 51.7, 51.3, 50.9, 50.6, 50.3, 50.0, 49.8, 49.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 49.5, 49.9, 50.2, 50.6, 51.0, 51.5, 52.0, 52.6, 53.1, 53.8, 54.5, 55.2, 56.0, 56.1, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 54.4, 54.6, 54.8, 55.1, 55.4, 55.7, 56.0, 55.2, 54.5, 53.8, 53.1, 52.6, 52.0, 51.5, 51.0, 50.6, 50.2, 49.9, 49.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 49.2, 49.5, 49.9, 50.2, 50.6, 51.0, 51.5, 52.0, 52.6, 53.1, 53.8, 54.5, 55.2, 56.0, 55.7, 55.4, 55.1, 54.8, 54.6, 54.4, 54.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 56.1, 56.0, 55.2, 54.5, 53.8, 53.1, 52.6, 52.0, 51.5, 51.0, 50.6, 50.2, 49.9, 49.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 49.8, 50.0, 50.3, 50.6, 50.9, 51.3, 51.7, 52.1, 52.6, 53.1, 53.6, 54.3, 54.9, 55.6, 56.4, 56.5, 56.1, 55.8, 55.6, 55.4, 55.3, 55.2, 55.2, 55.1, 55.2, 55.2, 55.2, 55.1, 55.2, 55.2, 55.3, 55.4, 55.6, 55.8, 56.1, 56.0, 55.2, 54.5, 53.8, 53.1, 52.6, 52.0, 51.5, 51.0, 50.6, 50.2, 49.9, 49.5, 49.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 48.1, 48.1, 48.1, 48.2, 48.3, 48.4, 48.6, 48.8, 49.0, 48.2, 48.5, 47.8, 47.1, 47.4, 46.8, 47.2, 46.6, 46.0, 46.5, 46.0, 46.5, 46.0, 45.5, 46.2, 45.8, 45.3, 46.1, 45.7, 46.6, 46.3, 46.2, 47.0, 46.7, 47.0, 47.7, 47.6, 47.9, 48.3, 48.6, 47.8, 47.0, 47.4, 46.7, 47.2, 46.5, 46.8, 46.5, 46.9, 46.6, 47.2, 46.8, 46.4, 47.1, 46.7, 46.4, 47.2, 47.0, 46.7, 47.6, 47.4, 47.3, 48.2, 48.1, 48.1, 49.1, 49.1, 49.1, 48.2, 48.3, 48.4, 47.8, 47.8, 48.0, 47.2, 47.5, 47.8, 48.1, 47.4, 47.8, 47.3, 47.7, 48.2, 48.7, 48.2, 47.7, 48.3, 47.9, 48.6, 48.2, 48.7, 48.6, 48.3, 48.9, 48.9, 48.6, 48.4, 48.1, 48.4, 47.7, 47.6, 47.9, 48.3, 47.4, 47.8, 48.2, 48.6, 47.9, 48.3, 48.8, 48.2, 48.7, 49.3, 48.8, 48.3, 47.8, 47.4, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 47.4, 47.8, 48.3, 48.8, 49.3, 48.7, 48.2, 48.8, 48.3, 47.9, 48.6, 48.2, 47.8, 47.4, 48.3, 47.9, 47.6, 47.7, 48.4, 48.1, 48.4, 49.2, 48.9, 48.9, 48.3, 48.6, 48.7, 48.2, 48.6, 47.9, 48.3, 47.7, 48.2, 47.6, 48.2, 47.7, 47.3, 47.8, 47.4, 48.1, 47.8, 47.5, 47.2, 48.0, 47.8, 47.8, 48.4, 48.3, 48.2, 49.1, 49.1, 49.1, 48.1, 48.1, 48.2, 47.3, 47.4, 47.6, 46.7, 47.0, 47.2, 46.4, 46.7, 47.1, 46.4, 46.8, 47.2, 46.6, 46.9, 46.5, 46.8, 46.5, 47.2, 46.7, 47.4, 47.0, 47.8, 48.6, 48.3, 47.9, 47.6, 47.7, 47.0, 46.7, 47.0, 46.2, 46.3, 45.8, 45.7, 46.1, 45.3, 45.8, 46.2, 45.5, 46.0, 46.5, 46.0, 46.5, 46.0, 46.6, 47.2, 46.8, 47.4, 47.1, 47.8, 48.5, 48.2, 49.0, 48.8, 48.6, 48.4, 48.3, 48.2, 48.1, 48.1, 53.1, 52.1, 52.1, 52.2, 51.3, 50.4, 50.6, 50.8, 50.0, 50.3, 49.5, 48.8, 49.2, 49.5, 48.9, 49.4, 48.8, 49.3, 48.7, 49.3, 48.8, 49.5, 49.0, 49.8, 50.4, 50.2, 50.4, 50.8, 50.5, 51.6, 52.2, 52.5, 52.4, 52.5, 52.2, 51.6, 51.8, 50.8, 50.4, 50.2, 50.4, 49.8, 49.0, 49.5, 48.8, 49.3, 48.7, 49.3, 48.8, 48.3, 47.8, 48.5, 48.1, 47.8, 47.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 48.5, 48.8, 48.1, 47.9, 47.8, 48.3, 47.7, 48.2, 47.6, 48.2, 47.7, 48.3, 47.9, 48.6, 48.6, 49.0, 48.7, 49.5, 49.2, 50.2, 50.0, 51.1, 51.0, 50.8, 50.0, 49.0, 49.2, 48.8, 48.6, 47.8, 48.2, 47.4, 47.9, 47.2, 46.7, 47.1, 46.8, 47.1, 46.6, 47.2, 46.8, 47.4, 47.1, 46.7, 47.5, 47.2, 48.0, 47.8, 47.8, 48.4, 49.3, 49.2, 49.1, 50.1, 50.1, 50.1, 49.1, 49.2, 49.3, 48.4, 47.8, 47.8, 48.0, 47.2, 47.5, 46.7, 47.1, 47.4, 46.8, 47.2, 46.6, 47.1, 46.8, 47.1, 46.7, 47.2, 47.9, 47.4, 48.2, 47.8, 48.6, 48.8, 49.2, 49.0, 50.0, 50.8, 51.0, 51.1, 50.0, 50.2, 49.2, 49.5, 48.7, 49.0, 48.6, 48.6, 47.9, 48.3, 47.7, 48.2, 47.6, 48.2, 47.7, 48.3, 47.8, 47.9, 48.1, 48.8, 48.5, 48.2, 48.0, 47.8, 47.6, 47.4, 47.3, 47.2, 47.1, 47.1, 47.1, 47.1, 47.1, 47.2, 47.3, 47.4, 47.6, 47.8, 48.0, 48.2, 47.5, 47.8, 48.1, 48.5, 47.8, 48.3, 48.8, 49.3, 48.7, 49.3, 48.8, 49.5, 49.0, 49.8, 50.4, 50.2, 50.4, 50.8, 51.8, 51.6, 52.2, 52.5, 52.4, 52.5, 52.2, 51.6, 50.5, 50.8, 50.4, 50.2, 50.4, 49.8, 49.0, 49.5, 48.8, 49.3, 48.7, 49.3, 48.8, 49.4, 48.9, 49.5, 49.2, 48.8, 49.5, 50.3, 50.0, 50.8, 50.6, 50.4, 51.3, 52.2, 52.1, 52.1, 52.1, 51.1, 50.1, 49.2, 48.3, 47.4, 46.6, 45.7, 44.9, 44.1, 43.3, 42.6, 41.8, 41.5, 41.5, 40.8, 40.1, 39.5, 39.8, 39.2, 38.6, 38.6, 38.5, 37.9, 37.8, 38.0, 37.4, 37.4, 37.6, 37.0, 37.3, 37.3, 36.8, 37.3, 37.3, 37.0, 37.6, 37.4, 37.4, 38.0, 37.8, 37.9, 38.5, 38.6, 38.6, 39.2, 39.8, 39.5, 40.1, 40.8, 41.5, 41.5, 41.8, 42.6, 43.3, 44.1, 44.9, 45.7, 46.6, 47.4, 48.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 45.5, 44.7, 43.9, 43.1, 42.3, 41.6, 41.4, 41.1, 40.4, 39.7, 39.2, 39.4, 38.8, 38.1, 38.2, 38.0, 37.4, 37.4, 37.3, 36.7, 37.0, 36.8, 36.3, 35.7, 35.8, 35.9, 35.4, 35.9, 35.8, 35.7, 36.3, 35.8, 36.2, 36.5, 36.1, 36.7, 37.0, 36.8, 37.5, 37.9, 37.7, 38.3, 39.0, 38.9, 39.3, 40.1, 40.8, 41.3, 41.3, 42.1, 42.9, 43.7, 44.5, 45.4, 46.3, 47.2, 48.1, 49.1, 50.1, 49.1, 48.1, 47.2, 46.3, 45.4, 44.5, 43.7, 42.9, 42.1, 41.3, 41.3, 40.8, 40.1, 39.3, 39.0, 39.0, 38.3, 37.7, 37.9, 37.5, 36.8, 37.0, 36.7, 36.1, 36.5, 36.2, 35.8, 36.3, 35.7, 35.8, 35.9, 35.4, 35.9, 35.8, 35.7, 36.3, 36.8, 37.0, 36.7, 37.3, 37.4, 37.4, 38.0, 38.2, 38.1, 38.8, 39.4, 39.2, 39.7, 40.4, 41.1, 41.4, 41.6, 42.3, 43.1, 43.9, 44.7, 45.5, 46.4, 47.3, 48.2, 49.1, 50.1, 51.1, 50.1, 49.1, 48.2, 47.3, 46.4, 46.6, 45.7, 44.9, 44.1, 43.3, 42.6, 41.8, 41.5, 41.5, 40.8, 40.1, 39.5, 39.8, 39.2, 38.6, 38.6, 38.5, 37.9, 37.8, 38.0, 37.4, 37.4, 37.6, 37.0, 37.3, 37.3, 36.8, 37.3, 37.3, 37.0, 37.6, 37.4, 37.4, 38.0, 37.8, 37.9, 38.5, 38.6, 38.6, 39.2, 39.8, 39.5, 40.1, 40.8, 41.5, 41.5, 41.8, 42.6, 43.3, 44.1, 44.9, 45.7, 46.6, 47.4, 48.3, 49.2, 50.1, 51.1, 26.0, 26.1, 27.1, 27.1, 27.2, 28.3, 28.4, 28.5, 29.6, 29.8, 31.0, 31.2, 32.4, 32.7, 34.0, 34.3, 35.8, 36.1, 37.7, 39.2, 39.7, 41.4, 43.2, 45.0, 47.0, 49.0, 51.1, 53.3, 57.0, 59.5, 63.5, 67.7, 72.2, 70.5, 68.9, 67.4, 66.0, 64.7, 62.3, 61.2, 60.2, 59.2, 58.3, 57.5, 56.7, 56.0, 55.4, 54.7, 54.2, 53.6, 53.2, 52.7, 52.3, 51.9, 51.6, 51.3, 51.0, 50.8, 50.6, 50.4, 50.3, 50.2, 50.1, 50.1, 50.1, 50.1, 49.1, 49.2, 49.3, 49.4, 49.6, 49.8, 50.0, 50.3, 50.6, 50.9, 51.3, 51.7, 52.1, 52.6, 53.1, 53.6, 54.3, 54.9, 55.6, 56.4, 57.2, 58.0, 59.0, 60.0, 61.1, 62.2, 63.4, 64.8, 64.8, 66.3, 67.9, 64.9, 60.8, 58.2, 54.4, 52.1, 48.6, 46.5, 44.5, 42.7, 42.0, 40.3, 38.6, 37.0, 36.6, 35.1, 34.7, 33.3, 33.0, 31.6, 31.4, 31.2, 29.9, 29.8, 28.6, 28.5, 28.4, 27.3, 27.2, 26.1, 26.1, 26.1, 26.0, 25.1, 25.1, 25.1, 24.2, 24.2, 24.3, 23.4, 23.5, 23.6, 23.8, 22.9, 23.0, 23.2, 23.4, 22.6, 22.8, 23.0, 23.3, 22.4, 22.7, 23.0, 23.4, 22.5, 22.9, 23.3, 23.6, 22.9, 23.3, 23.8, 23.9, 23.5, 24.1, 24.7, 24.3, 24.5, 25.3, 25.4, 25.2, 26.1, 26.5, 26.2, 27.3, 27.6, 27.6, 29.0, 28.8, 29.7, 31.4, 31.1, 32.7, 32.7, 34.5, 34.3, 36.1, 36.6, 37.8, 39.6, 40.9, 41.4, 43.3, 45.2, 47.1, 49.1, 51.1, 49.1, 47.1, 45.2, 43.3, 41.4, 40.9, 39.6, 37.8, 36.6, 36.1, 34.3, 34.5, 32.7, 32.7, 31.1, 31.4, 29.7, 29.9, 29.0, 28.4, 28.5, 27.3, 27.3, 27.0, 26.1, 26.2, 26.1, 25.3, 25.1, 25.4, 24.7, 24.1, 24.7, 24.3, 23.8, 23.7, 24.2, 23.7, 23.3, 23.4, 23.7, 23.4, 23.0, 23.4, 23.6, 23.3, 23.0, 23.6, 23.6, 23.4, 23.2, 24.1, 23.9, 23.8, 23.6, 24.5, 24.4, 24.3, 24.6, 25.2, 25.1, 25.1, 26.1, 46.1, 46.1, 46.1, 46.2, 46.3, 46.4, 46.6, 46.7, 47.0, 47.2, 47.5, 47.8, 48.1, 48.5, 48.9, 49.4, 49.8, 50.4, 50.9, 51.5, 52.2, 52.9, 53.7, 54.3, 54.0, 52.6, 52.1, 50.8, 50.5, 50.2, 49.2, 49.4, 48.1, 47.9, 47.3, 47.5, 46.6, 45.7, 46.1, 45.3, 45.8, 45.0, 44.8, 44.9, 44.6, 44.8, 44.5, 44.9, 44.4, 44.5, 44.7, 44.7, 45.0, 44.7, 45.3, 45.1, 45.9, 45.7, 46.6, 46.4, 46.3, 47.2, 47.1, 48.1, 48.1, 49.1, 49.1, 50.2, 50.3, 49.4, 49.6, 48.8, 49.0, 48.2, 47.5, 47.8, 47.1, 47.4, 46.8, 47.2, 46.6, 46.0, 46.5, 46.0, 46.5, 46.0, 46.7, 46.2, 45.8, 46.5, 46.1, 47.0, 46.6, 47.5, 47.3, 47.0, 48.1, 47.9, 48.6, 49.0, 49.2, 49.5, 50.4, 50.4, 51.8, 52.1, 51.3, 50.6, 49.9, 49.3, 48.7, 48.2, 47.7, 47.2, 46.8, 46.4, 46.0, 45.7, 45.4, 45.1, 44.9, 44.7, 44.5, 44.4, 44.3, 44.2, 44.1, 44.1, 44.1, 44.1, 44.1, 44.2, 44.3, 44.4, 44.5, 44.7, 44.9, 45.1, 45.4, 45.7, 46.0, 46.4, 46.8, 47.2, 47.7, 48.2, 48.7, 49.3, 49.9, 50.6, 51.3, 52.1, 51.8, 50.4, 50.4, 49.5, 49.2, 49.0, 48.6, 47.9, 48.1, 47.0, 47.3, 47.5, 46.6, 47.0, 46.1, 46.5, 45.8, 46.2, 46.7, 46.0, 46.5, 46.0, 46.5, 46.0, 46.6, 47.2, 46.8, 47.4, 47.1, 47.8, 47.5, 48.2, 49.0, 48.8, 49.6, 49.4, 50.3, 50.2, 49.1, 49.1, 48.1, 48.1, 47.1, 47.2, 46.3, 46.4, 46.6, 45.7, 45.9, 45.1, 45.3, 44.7, 45.0, 44.7, 44.7, 44.5, 44.4, 44.9, 44.5, 44.8, 44.6, 44.9, 44.8, 45.0, 45.8, 45.3, 46.1, 45.7, 46.6, 47.5, 47.3, 47.9, 48.1, 48.4, 49.2, 50.2, 50.5, 50.8, 52.1, 52.6, 54.0, 54.3, 53.7, 52.9, 52.2, 51.5, 50.9, 50.4, 49.8, 49.4, 48.9, 48.5, 48.1, 47.8, 47.5, 47.2, 47.0, 46.7, 46.6, 46.4, 46.3, 46.2, 46.1, 46.1, 35.0, 35.1, 34.1, 33.1, 33.2, 32.7, 32.4, 31.5, 31.7, 31.8, 31.0, 30.1, 30.4, 30.6, 29.8, 30.1, 29.3, 29.6, 29.9, 29.2, 29.5, 28.8, 29.2, 29.6, 28.9, 29.4, 28.7, 29.2, 29.8, 29.1, 29.7, 29.1, 29.7, 30.4, 29.8, 30.4, 30.0, 30.9, 31.2, 31.3, 31.3, 31.8, 31.5, 32.5, 32.9, 33.4, 33.2, 34.6, 34.7, 35.4, 35.7, 36.9, 37.7, 37.5, 39.2, 40.0, 41.1, 41.7, 42.5, 44.4, 45.3, 47.2, 48.1, 50.1, 51.1, 50.1, 48.1, 47.2, 45.3, 44.4, 42.5, 41.7, 41.1, 40.0, 39.2, 37.5, 37.7, 36.9, 35.7, 35.4, 34.7, 34.6, 33.2, 33.4, 32.9, 32.5, 32.7, 31.8, 31.3, 31.3, 31.2, 30.9, 30.0, 30.4, 29.8, 30.4, 29.7, 29.1, 29.7, 29.1, 29.8, 29.2, 28.7, 29.4, 28.9, 29.6, 29.2, 28.8, 29.5, 29.2, 29.9, 29.6, 29.3, 30.1, 29.8, 30.6, 30.4, 30.1, 31.0, 31.8, 31.7, 31.5, 32.4, 32.7, 33.2, 33.1, 34.1, 35.1, 35.0, 35.1, 36.1, 37.2, 37.2, 38.3, 39.5, 39.6, 40.8, 43.1, 43.3, 44.7, 46.0, 47.4, 48.9, 51.5, 52.0, 54.7, 55.4, 55.7, 55.2, 54.8, 54.5, 54.5, 54.2, 53.9, 53.8, 54.6, 54.4, 54.2, 54.0, 53.9, 55.2, 55.2, 55.1, 55.2, 55.2, 55.9, 56.1, 56.3, 56.6, 58.0, 58.3, 58.7, 59.0, 58.3, 58.7, 58.0, 58.5, 58.4, 58.5, 58.0, 57.5, 57.1, 56.7, 56.4, 56.1, 55.9, 55.7, 56.5, 56.3, 56.2, 56.1, 56.1, 56.1, 56.1, 56.1, 56.2, 56.3, 56.5, 55.7, 55.9, 56.1, 56.4, 56.7, 57.1, 57.5, 58.0, 58.5, 57.9, 58.5, 59.1, 58.7, 58.3, 57.9, 58.7, 58.3, 56.9, 56.6, 56.3, 56.1, 55.3, 55.2, 55.2, 55.1, 55.2, 53.8, 53.9, 54.0, 54.2, 53.6, 53.7, 53.8, 53.9, 54.2, 54.3, 54.5, 54.8, 55.2, 54.9, 55.4, 53.6, 52.0, 50.4, 48.9, 47.4, 46.0, 44.7, 43.3, 42.1, 40.8, 39.6, 39.5, 38.3, 37.2, 37.2, 36.1, 35.1);
}
Game.GemOutlines.prototype = {
    GEM_OUTLINE_RADIUS_POINTS : null,
    GEM_OUTLINE_RADIUS_POINTS2 : null
}
Game.GemOutlines.staticInit = function Game_GemOutlines$staticInit() {
}

JS_AddInitFunc(function() {
    Game.GemOutlines.registerClass('Game.GemOutlines', null);
});
JS_AddStaticInitFunc(function() {
    Game.GemOutlines.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\GemOutlines.cs
//LineMap:2=3 7=9 8=424 
//Start:Globals
/**
 * @constructor
 */
Game.DM = function Game_DM() {
}
Game.DM.prototype = {

}
Game.DM.staticInit = function Game_DM$staticInit() {
    Game.DM.gAutoplayDesc = Array.Create(5, 5, 'Off', 'Random moves', 'Aggressive moves', 'Aggressive with invalid moves', 'Test hyperspace');
    Game.DM.gTutorialNames = Array.Create(18, 18, null, null, 'LASER', 'HYPERCUBE', null, null, 'SUPERNOVA', null, 'CLASSIC_TUTORIAL_VERT_MATCH', 'CLASSIC_TUTORIAL_HORIZ_MATCH', 'CLASSIC_TUTORIAL_SPECIAL_GEM_CREATE', 'CLASSIC_TUTORIAL_SPECIAL_GEM_MATCH', 'CLASSIC_TUTORIAL_HINT_BUTTON', 'CLASSIC_TUTORIAL_MAKE_MORE_MATCHES', 'SPEED_TUTORIAL_BASIC_MATCH', 'SPEED_TUTORIAL_TIMER', 'SPEED_TUTORIAL_TIME_GEM', 'SPEED_TUTORIAL_MULTIPLIER_UP');
    Game.DM.SAVEGAME_VERSION = 17;
    Game.DM.SAVEGAME_VERSION_MIN = 17;
    Game.DM.SAVEBOARD_VERSION = 7;
    Game.DM.SAVEBOARD_VERSION_MIN = 7;
    Game.DM.DEFAULT_COMBO_LEN = 3;
    Game.DM.MAX_COMBO_LEN = 5;
    Game.DM.MAX_COMBO_POWERUP_LEVEL = 3;
    Game.DM.UI_SLIDE_LEFT = -700;
    Game.DM.UI_SLIDE_RIGHT = 1260;
    Game.DM.UI_SLIDE_UP = -400;
    Game.DM.UI_SLIDE_DOWN = 350;
    Game.DM.GRAVITY = 0.275;
    Game.DM.SPEED_TIME1 = 175;
    Game.DM.SPEED_TIME2 = 275;
    Game.DM.SPEED_START_THRESHOLD = 6;
    Game.DM.SPEED_MAX_THRESHOLD = 25;
    Game.DM.SPEED_SCORE_MULT = 50;
    Game.DM.SPEED_TIME_LEFT = 180;
    Game.DM.SPEED_TIME_RIGHT = 100;
    Game.DM.SPEED_MED_THRESHOLD = 0.25;
    Game.DM.SPEED_HIGH_THRESHOLD = 0.75;
    Game.DM.gCommonMTRand = null;
    Game.DM.gArcColors = Array.Create(8, 8, GameFramework.gfx.Color.RGBToInt(255, 96, 96), GameFramework.gfx.Color.RGBToInt(255, 255, 255), GameFramework.gfx.Color.RGBToInt(128, 255, 64), GameFramework.gfx.Color.RGBToInt(225, 225, 128), GameFramework.gfx.Color.RGBToInt(225, 128, 225), GameFramework.gfx.Color.RGBToInt(255, 160, 64), GameFramework.gfx.Color.RGBToInt(48, 160, 255), GameFramework.gfx.Color.RGBToInt(0, 0, 0));
    Game.DM.gCrossoverColors = Array.Create(8, 8, GameFramework.gfx.Color.RGBToInt(255, 200, 200), GameFramework.gfx.Color.RGBToInt(255, 250, 255), GameFramework.gfx.Color.RGBToInt(220, 255, 128), GameFramework.gfx.Color.RGBToInt(255, 255, 200), GameFramework.gfx.Color.RGBToInt(255, 128, 255), GameFramework.gfx.Color.RGBToInt(255, 160, 64), GameFramework.gfx.Color.RGBToInt(80, 200, 255), GameFramework.gfx.Color.RGBToInt(0, 0, 0));
    Game.DM.gAllGemColors = Array.Create(9, null, GameFramework.gfx.Color.RGBToInt(255, 255, 255), GameFramework.gfx.Color.RGBToInt(255, 0, 0), GameFramework.gfx.Color.RGBToInt(255, 255, 255), GameFramework.gfx.Color.RGBToInt(0, 255, 0), GameFramework.gfx.Color.RGBToInt(255, 255, 0), GameFramework.gfx.Color.RGBToInt(255, 0, 255), GameFramework.gfx.Color.RGBToInt(255, 128, 0), GameFramework.gfx.Color.RGBToInt(0, 128, 255), GameFramework.gfx.Color.RGBToInt(255, 255, 255));
    Game.DM.gGemColors = Array.Create(9, null, GameFramework.gfx.Color.RGBToInt(255, 255, 255), GameFramework.gfx.Color.RGBToInt(255, 0, 0), GameFramework.gfx.Color.RGBToInt(255, 255, 255), GameFramework.gfx.Color.RGBToInt(0, 255, 0), GameFramework.gfx.Color.RGBToInt(255, 255, 0), GameFramework.gfx.Color.RGBToInt(255, 0, 255), GameFramework.gfx.Color.RGBToInt(255, 128, 0), GameFramework.gfx.Color.RGBToInt(0, 128, 255), GameFramework.gfx.Color.RGBToInt(255, 255, 255));
    Game.DM.gElectColors = Array.Create(9, null, GameFramework.gfx.Color.RGBToInt(255, 255, 255), GameFramework.gfx.Color.RGBToInt(255, 0, 0), GameFramework.gfx.Color.RGBToInt(255, 255, 255), GameFramework.gfx.Color.RGBToInt(0, 255, 0), GameFramework.gfx.Color.RGBToInt(255, 255, 0), GameFramework.gfx.Color.RGBToInt(255, 0, 255), GameFramework.gfx.Color.RGBToInt(255, 128, 0), GameFramework.gfx.Color.RGBToInt(0, 128, 255), GameFramework.gfx.Color.RGBToInt(255, 255, 255));
    Game.DM.gPointColors = Array.Create(9, null, GameFramework.gfx.Color.RGBToInt(255, 255, 255), GameFramework.gfx.Color.RGBToInt(255, 0, 0), GameFramework.gfx.Color.RGBToInt(255, 255, 255), GameFramework.gfx.Color.RGBToInt(0, 255, 0), GameFramework.gfx.Color.RGBToInt(255, 255, 0), GameFramework.gfx.Color.RGBToInt(255, 0, 255), GameFramework.gfx.Color.RGBToInt(255, 128, 0), GameFramework.gfx.Color.RGBToInt(0, 128, 255), GameFramework.gfx.Color.RGBToInt(255, 255, 255));
    Game.DM.gComboColors = Array.Create(9, null, GameFramework.gfx.Color.RGBToInt(255, 0, 0), GameFramework.gfx.Color.RGBToInt(192, 192, 192), GameFramework.gfx.Color.RGBToInt(0, 224, 0), GameFramework.gfx.Color.RGBToInt(224, 224, 0), GameFramework.gfx.Color.RGBToInt(224, 0, 224), GameFramework.gfx.Color.RGBToInt(255, 128, 0), GameFramework.gfx.Color.RGBToInt(0, 0, 255), GameFramework.gfx.Color.RGBToInt(0, 0, 0), GameFramework.gfx.Color.RGBToInt(255, 255, 255));
    Game.DM.gRankNames = Array.Create(131, 131, 'Novice', 'Apprentice', 'Trainee', 'Beginner', 'Amateur', 'Jr. Appraiser', 'Appraiser', 'Gem Polisher', 'Gem Scraper', 'Gem Grinder', 'Jewel Thief', 'Jewel Scavenger', 'Gem Scrounger', 'Jr. Gemfinder', 'Gemfinder', 'Sr. Gemfinder', 'Jr. Jewelkeep', 'Jewelkeep', 'Master Jewelkeep', 'Gemhunter Lv 1', 'Gemhunter Lv 2', 'Gemhunter Lv 3', 'Gemhunter Lv 4', 'Gemhunter Lv 5', 'Gemcrafter Lv 1', 'Gemcrafter Lv 2', 'Gemcrafter Lv 3', 'Gemcrafter Lv 4', 'Gemcrafter Lv 5', 'Jr. Gemstalker', 'Gemstalker', 'Sr. Gemstalker', 'Topaz Hunter', 'Onyx Hunter', 'Amethyst Hunter', 'Ruby Hunter', 'Emerald Hunter', 'Opal Hunter', 'Sapphire Hunter', 'Diamond Hunter', 'Topaz Blaster', 'Onyx Blaster', 'Amethyst Blaster', 'Ruby Blaster', 'Emerald Blaster', 'Opal Blaster', 'Sapphire Blaster', 'Diamond Blaster', 'Topaz Hoarder', 'Onyx Hoarder', 'Amethyst Hoarder', 'Ruby Hoarder', 'Emerald Hoarder', 'Opal Hoarder', 'Sapphire Hoarder', 'Diamond Hoarder', 'Topaz Master', 'Onyx Master', 'Amethyst Master', 'Ruby Master', 'Emerald Master', 'Opal Master', 'Sapphire Master', 'Diamond Master', 'Lapidary Lv 1', 'Lapidary Lv 2', 'Lapidary Lv 3', 'Lapidary Lv 4', 'Lapidary Lv 5', 'Master Lapidary', 'Supreme Lapidary', 'Ruby Wizard', 'Emerald Wizard', 'Opal Wizard', 'Sapphire Wizard', 'Diamond Wizard', 'Jeweled Wizard', 'Jeweled Mage', 'Jeweled Archmage', 'Jewelcrafter', 'Jewelforger', 'Bronze Blitzer', 'Silver Blitzer', 'Gold Blitzer', 'Platinum Blitzer', 'Bronze Master', 'Silver Master', 'Gold Master', 'Platinum Master', 'Jr. Bejeweler', 'Bejeweler', 'Sr. Bejeweler', 'Master Bejeweler', 'Mega Bejeweler', 'Hyper Bejeweler', 'Ultra Bejeweler', 'Prime Bejeweler', 'Ultimate Bejeweler', 'Bejeweled Regent', 'Bejeweled Demigod', 'Supreme Bejeweler', 'Jewelmagus Lv 1', 'Jewelmagus Lv 2', 'Jewelmagus Lv 3', 'Jewelmagus Lv 4', 'Jewelmagus Lv 5', 'Jewelmagus Lv 6', 'Jewelmagus Lv 7', 'Jewelmagus Lv 8', 'Jewelmagus Lv 9', 'Elder Jewelmagus', 'Jewelknight Lv 1', 'Jewelknight Lv 2', 'Jewelknight Lv 3', 'Jewelknight Lv 4', 'Jewelknight Lv 5', 'Jewelknight Lv 6', 'Jewelknight Lv 7', 'Jewelknight Lv 8', 'Jewelknight Lv 9', 'Elder Jewelknight', 'Bejewelian Lv 1', 'Bejewelian Lv 2', 'Bejewelian Lv 3', 'Bejewelian Lv 4', 'Bejewelian Lv 5', 'Bejewelian Lv 6', 'Bejewelian Lv 7', 'Bejewelian Lv 8', 'Bejewelian Lv 9', 'Elder Bejewelian');
}

JS_AddInitFunc(function() {
    Game.DM.registerClass('Game.DM', null);
});
JS_AddStaticInitFunc(function() {
    Game.DM.staticInit();
});
Game.DM.EGemColor = {};
Game.DM.EGemColor.staticInit = function Game_DM_EGemColor$staticInit() {
    Game.DM.EGemColor._INVALID = -1;
    Game.DM.EGemColor.RED = 0;
    Game.DM.EGemColor.WHITE = 1;
    Game.DM.EGemColor.GREEN = 2;
    Game.DM.EGemColor.YELLOW = 3;
    Game.DM.EGemColor.PURPLE = 4;
    Game.DM.EGemColor.ORANGE = 5;
    Game.DM.EGemColor.BLUE = 6;
    Game.DM.EGemColor.HYPERCUBE = 7;
    Game.DM.EGemColor._COUNT = 8;
}
JS_AddInitFunc(function() {
    Game.DM.EGemColor.staticInit();
});
Game.DM.EStat = {};
Game.DM.EStat.staticInit = function Game_DM_EStat$staticInit() {
    Game.DM.EStat.SECONDS_PLAYED = 0;
    Game.DM.EStat.POINTS = 1;
    Game.DM.EStat.ZEN_POINTS = 2;
    Game.DM.EStat.SKULL_COIN_FLIPS = 3;
    Game.DM.EStat.GEMS_CLEARED = 4;
    Game.DM.EStat.RED_CLEARED = 5;
    Game.DM.EStat.WHITE_CLEARED = 6;
    Game.DM.EStat.GREEN_CLEARED = 7;
    Game.DM.EStat.YELLOW_CLEARED = 8;
    Game.DM.EStat.PURPLE_CLEARED = 9;
    Game.DM.EStat.ORANGE_CLEARED = 10;
    Game.DM.EStat.BLUE_CLEARED = 11;
    Game.DM.EStat.FLAMEGEMS_USED = 12;
    Game.DM.EStat.LASERGEMS_USED = 13;
    Game.DM.EStat.HYPERCUBES_USED = 14;
    Game.DM.EStat.NUM_MOVES = 15;
    Game.DM.EStat.NUM_MOVES_DRAG = 16;
    Game.DM.EStat.NUM_MOVES_CLICK = 17;
    Game.DM.EStat.BLAZING_SPEED_EXPLOSION = 18;
    Game.DM.EStat.FLAMEGEMS_MADE = 19;
    Game.DM.EStat.LASERGEMS_MADE = 20;
    Game.DM.EStat.HYPERCUBES_MADE = 21;
    Game.DM.EStat.NUM_GOOD_MOVES = 22;
    Game.DM.EStat.BLASTGEMS_USED = 23;
    Game.DM.EStat.SPEEDY = 24;
    Game.DM.EStat.INFERNO_COUNT = 25;
    Game.DM.EStat.BIGGESTMATCH = 26;
    Game.DM.EStat.BIGGESTMOVE = 27;
    Game.DM.EStat.MATCHES = 28;
    Game.DM.EStat.CASCADES = 29;
    Game.DM.EStat.BUTTERFLIES_COLLECTED = 30;
    Game.DM.EStat.BIGGEST_MOVE_BUTTERFLIES = 31;
    Game.DM.EStat.SUPERNOVAS_MADE = 32;
    Game.DM.EStat.SUPERNOVAS_USED = 33;
    Game.DM.EStat.POKER_FLUSHES = 34;
    Game.DM.EStat.BIGGEST_GEMS_CLEARED = 35;
    Game.DM.EStat.TIMEGEMS_COLLECTED = 36;
    Game.DM.EStat.ICESTORM_COLUMNS_SMASHED = 37;
    Game.DM.EStat.DIAMONDMINE_ARTIFACTS_COLLECTED = 38;
    Game.DM.EStat.HYPERCUBE_ANNIHILATION = 39;
    Game.DM.EStat.FPS_MAX = 40;
    Game.DM.EStat.FPS_MIN = 41;
    Game.DM.EStat.FPS_SAMPLE_COUNT = 42;
    Game.DM.EStat.FPS_SAMPLE_TOTAL = 43;
    Game.DM.EStat.HINT_USED = 44;
    Game.DM.EStat._COUNT = 45;
}
JS_AddInitFunc(function() {
    Game.DM.EStat.staticInit();
});
Game.DM.EDialog = {};
Game.DM.EDialog.staticInit = function Game_DM_EDialog$staticInit() {
    Game.DM.EDialog.INFO = 0;
    Game.DM.EDialog.TUTORIAL = 1;
    Game.DM.EDialog.HELP = 2;
    Game.DM.EDialog.NEW_GAME = 3;
    Game.DM.EDialog.OPTIONS = 4;
    Game.DM.EDialog.RESET = 5;
    Game.DM.EDialog.AWARD = 6;
    Game.DM.EDialog.OPTION_CONFIRM = 7;
    Game.DM.EDialog.DISCONNECT = 8;
    Game.DM.EDialog.CONNECTING = 9;
    Game.DM.EDialog.NOT_CONNECTED = 10;
    Game.DM.EDialog.QUIT = 11;
    Game.DM.EDialog.RANKBAR = 12;
    Game.DM.EDialog.RANK_AWARD = 13;
    Game.DM.EDialog.MAX_GAMES_PLAYED = 14;
    Game.DM.EDialog.NEED_UPDATE = 15;
    Game.DM.EDialog.STATS_LOGIN = 16;
    Game.DM.EDialog.END_LEVEL = 17;
    Game.DM.EDialog.UNLOCK = 18;
    Game.DM.EDialog.QUEST_HELP = 19;
    Game.DM.EDialog.RECORDS = 20;
    Game.DM.EDialog.MAIN_MENU_CONFIRM = 21;
    Game.DM.EDialog.PLAY_SPEED_CONFIRM = 22;
    Game.DM.EDialog.UNKNOWN_MODAL = 23;
    Game.DM.EDialog._COUNT = 24;
}
JS_AddInitFunc(function() {
    Game.DM.EDialog.staticInit();
});
Game.DM.ETutorial = {};
Game.DM.ETutorial.staticInit = function Game_DM_ETutorial$staticInit() {
    Game.DM.ETutorial.NONE = -1;
    Game.DM.ETutorial.BASICS = 0;
    Game.DM.ETutorial.FLAME = 1;
    Game.DM.ETutorial.LASER = 2;
    Game.DM.ETutorial.HYPERCUBE = 3;
    Game.DM.ETutorial.MULTIPLIER = 4;
    Game.DM.ETutorial.TIME_BONUS = 5;
    Game.DM.ETutorial.SUPERNOVA = 6;
    Game.DM.ETutorial.PLAY_CLASSIC_FIRST = 7;
    Game.DM.ETutorial.CLASSIC_TUTORIAL_VERT_MATCH = 8;
    Game.DM.ETutorial.CLASSIC_TUTORIAL_HORIZ_MATCH = 9;
    Game.DM.ETutorial.CLASSIC_TUTORIAL_SPECIAL_GEM_CREATE = 10;
    Game.DM.ETutorial.CLASSIC_TUTORIAL_SPECIAL_GEM_MATCH = 11;
    Game.DM.ETutorial.CLASSIC_TUTORIAL_HINT_BUTTON = 12;
    Game.DM.ETutorial.CLASSIC_TUTORIAL_MAKE_MORE_MATCHES = 13;
    Game.DM.ETutorial.SPEED_TUTORIAL_BASIC_MATCH = 14;
    Game.DM.ETutorial.SPEED_TUTORIAL_TIMER = 15;
    Game.DM.ETutorial.SPEED_TUTORIAL_TIME_GEM = 16;
    Game.DM.ETutorial.SPEED_TUTORIAL_MULTIPLIER_UP = 17;
    Game.DM.ETutorial._COUNT = 18;
}
JS_AddInitFunc(function() {
    Game.DM.ETutorial.staticInit();
});
Game.DM.EAutoplay = {};
Game.DM.EAutoplay.staticInit = function Game_DM_EAutoplay$staticInit() {
    Game.DM.EAutoplay.None = 0;
    Game.DM.EAutoplay.Random = 1;
    Game.DM.EAutoplay.NoDelay = 2;
    Game.DM.EAutoplay.NoDelayWithInvalidMoves = 3;
    Game.DM.EAutoplay.TestHyper = 4;
    Game.DM.EAutoplay._COUNT = 5;
}
JS_AddInitFunc(function() {
    Game.DM.EAutoplay.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\Globals.cs
//LineMap:1=2 2=4 14=155 15=165 16=187 20=192 23=196 27=201 28=203 33=209 38=217 39=229 40=242 41=256 42=270 43=284 44=298 45=316 50=10 53=12 54=14 61=22 62=24 68=29 72=34 80=43 87=51 92=57 94=60 99=66 108=76 113=82 119=87 142=111 143=113 149=118 164=134 168=139 174=144 
//LineMap:179=150 
//Start:HighScoreMgr
/**
 * @constructor
 */
Game.GlobalMembersHighScoreMgr = function Game_GlobalMembersHighScoreMgr() {
}
Game.GlobalMembersHighScoreMgr.prototype = {

}
Game.GlobalMembersHighScoreMgr.staticInit = function Game_GlobalMembersHighScoreMgr$staticInit() {
    Game.GlobalMembersHighScoreMgr.HIGHSCORE_VERSION = 1;
    Game.GlobalMembersHighScoreMgr.HIGHSCORE_VERSION_MIN = 1;
    Game.GlobalMembersHighScoreMgr.HIGHSCORE_KEY = 0xb9e7e3f9;
}

JS_AddInitFunc(function() {
    Game.GlobalMembersHighScoreMgr.registerClass('Game.GlobalMembersHighScoreMgr', null);
});
JS_AddStaticInitFunc(function() {
    Game.GlobalMembersHighScoreMgr.staticInit();
});
/**
 * @constructor
 */
Game.HighScoreEntry = function Game_HighScoreEntry() {
    this.mTime = 0;
    this.mScore = -1;
    this.mIsNew = false;
}
Game.HighScoreEntry.prototype = {
    mName : null,
    mTime : 0,
    mScore : 0,
    mIsNew : null,
    Clone : function Game_HighScoreEntry$Clone() {
        var ret = new Game.HighScoreEntry();
        ret.mName = this.mName;
        ret.mScore = this.mScore;
        ret.mTime = this.mTime;
        ret.mIsNew = this.mIsNew;
        return ret;
    }
}
Game.HighScoreEntry.staticInit = function Game_HighScoreEntry$staticInit() {
}

JS_AddInitFunc(function() {
    Game.HighScoreEntry.registerClass('Game.HighScoreEntry', null);
});
JS_AddStaticInitFunc(function() {
    Game.HighScoreEntry.staticInit();
});
/**
 * @constructor
 */
Game.HighScoreTable = function Game_HighScoreTable() {
    this.mHighScores = Array.Create(Game.HighScoreTable.ENTRY_COUNT, null);
    for(var i = 0; i < this.mHighScores.length; ++i) {
        this.mHighScores[i] = new Game.HighScoreEntry();
    }
}
Game.HighScoreTable.prototype = {
    mHighScores : null,
    mManager : null,
    Submit : function Game_HighScoreTable$Submit(theName, theValue) {
        for(var i = 0; i < Game.HighScoreTable.ENTRY_COUNT; ++i) {
            if(theValue > this.mHighScores[i].mScore) {
                for(var j = Game.HighScoreTable.ENTRY_COUNT - 1; j > i; --j) {
                    this.mHighScores[j] = this.mHighScores[j - 1];
                }
                this.mHighScores[i] = new Game.HighScoreEntry();
                this.mHighScores[i].mName = theName;
                this.mHighScores[i].mIsNew = true;
                this.mHighScores[i].mScore = theValue;
                this.mHighScores[i].mTime = (GameFramework.Utils.GetUnixTime() | 0);
                this.mManager.mNeedSave = true;
                return true;
            }
        }
        return false;
    },
    GenerateDefaults : function Game_HighScoreTable$GenerateDefaults(theScoreStart, theScoreInterval, theScoreIntervalHi) {
        this.GenerateDefaults$2(theScoreStart, theScoreInterval, theScoreIntervalHi, true);
    },
    GenerateDefaults$2 : function Game_HighScoreTable$GenerateDefaults$2(theScoreStart, theScoreInterval, theScoreIntervalHi, theGenerateNewOnly) {
        var names = Array.Create(27, 27, 'Abi', 'Bill', 'Bob', 'Brian', 'Chad', 'Chris', 'David', 'Derek', 'DJ', 'Ed', 'Ellen', 'Heather', 'Jake', 'Jason', 'Jeremy', 'Josh', 'Katie', 'Leah', 'Matt', 'Michael', 'Misael', 'John', 'Rick', 'Sharon', 'Snackers', 'Stephen', 'Tysen');
        var nameCount = (names.length);
        for(var i = 0; i < Game.HighScoreTable.ENTRY_COUNT; ++i) {
            if(theGenerateNewOnly && this.mHighScores[i].mScore >= 0) {
                break;
            }
            var count = 100;
            while(--count > 0) {
                this.mHighScores[i].mName = names[GameFramework.Utils.GetRand() % nameCount];
                for(var j = i - 1; j >= 0; --j) {
                    if(this.mHighScores[i].mName == this.mHighScores[j].mName) {
                        break;
                    } else if(j == 0) {
                        count = 0;
                    }
                }
            }
            this.mHighScores[i].mIsNew = false;
            if(i < ((Game.HighScoreTable.ENTRY_COUNT / 2) | 0)) {
                this.mHighScores[i].mScore = theScoreStart + theScoreIntervalHi * (Game.HighScoreTable.ENTRY_COUNT - i - 1 - ((Game.HighScoreTable.ENTRY_COUNT / 2) | 0)) + theScoreInterval * (((Game.HighScoreTable.ENTRY_COUNT / 2) | 0));
            } else {
                this.mHighScores[i].mScore = theScoreStart + theScoreInterval * (Game.HighScoreTable.ENTRY_COUNT - i - 1);
            }
            this.mHighScores[i].mTime = 0;
        }
    }
}
Game.HighScoreTable.staticInit = function Game_HighScoreTable$staticInit() {
    Game.HighScoreTable.ENTRY_COUNT = 5;
    Game.HighScoreTable.HASH_KEY = 0x42beef;
}

JS_AddInitFunc(function() {
    Game.HighScoreTable.registerClass('Game.HighScoreTable', null);
});
JS_AddStaticInitFunc(function() {
    Game.HighScoreTable.staticInit();
});
/**
 * @constructor
 */
Game.HighScoreMgr = function Game_HighScoreMgr() {
    this.mHighScoreMap = {};
    this.mNeedSave = false;
}
Game.HighScoreMgr.prototype = {
    mHighScoreMap : null,
    mNeedSave : null,
    Dispose : function Game_HighScoreMgr$Dispose() {
    },
    Submit : function Game_HighScoreMgr$Submit(theTable, theName, theValue) {
        if(this.GetOrCreateTable(theTable).Submit(theName, theValue)) {
            return true;
        }
        return false;
    },
    GetOrCreateTable : function Game_HighScoreMgr$GetOrCreateTable(theTable) {
        var findIt = this.mHighScoreMap[theTable];
        if(findIt != null) {
            return findIt;
        }

        else {
            this.mHighScoreMap[theTable] = new Game.HighScoreTable();
            this.mHighScoreMap[theTable].mManager = this;
            this.mNeedSave = true;
            return this.mHighScoreMap[theTable];
        }
    },
    GenerateDefaults : function Game_HighScoreMgr$GenerateDefaults(theTable, theScoreStart, theScoreInterval, theScoreIntervalHi) {
        this.GenerateDefaults$3(theTable, theScoreStart, theScoreInterval, theScoreIntervalHi, true);
    },
    GenerateDefaults$2 : function Game_HighScoreMgr$GenerateDefaults$2(theTable, theScoreStart, theScoreInterval) {
        this.GenerateDefaults$3(theTable, theScoreStart, theScoreInterval, -1, true);
    },
    GenerateDefaults$3 : function Game_HighScoreMgr$GenerateDefaults$3(theTable, theScoreStart, theScoreInterval, theScoreIntervalHi, theGenerateNewOnly) {
        if(theScoreIntervalHi == -1) {
            theScoreIntervalHi = theScoreInterval;
        }
        var aTable = this.GetOrCreateTable(theTable);
        aTable.GenerateDefaults$2(theScoreStart, theScoreInterval, theScoreIntervalHi, theGenerateNewOnly);
    },
    RenameDefaultScore : function Game_HighScoreMgr$RenameDefaultScore(theName) {

        {
            for($enum1 in this.mHighScoreMap) {
                var aTable = this.mHighScoreMap[$enum1];
                for(var anEntryIdx = 0; anEntryIdx < Game.HighScoreTable.ENTRY_COUNT; anEntryIdx++) {
                    if(aTable.mHighScores[anEntryIdx].mTime == 0 && aTable.mHighScores[anEntryIdx].mName == theName) {
                        aTable.mHighScores[anEntryIdx].mName = 'Noni';
                        this.mNeedSave = true;
                    }
                }
            }
        }
    },
    Load : function Game_HighScoreMgr$Load() {
        var aHighScoreString = GameFramework.BaseApp.mApp.GetLocalData(GameFramework.BaseApp.mApp.mProdName, 'HighScores');
        if(aHighScoreString == null) {
            return false;
        }
        var aSaveTable = {};
        GameFramework.BaseApp.mApp.DecodeJSON(aHighScoreString, aSaveTable);
        if(aSaveTable.hasOwnProperty('_VERSION')) {
            var aVersion = (aSaveTable['_VERSION'] | 0);
            delete aSaveTable['_VERSION'];
        }
        this.mHighScoreMap = {};

        {
            for(aName in aSaveTable) {
                var aHighScoreTable = new Game.HighScoreTable();
                aHighScoreTable.mManager = this;
                this.mHighScoreMap[aName] = aHighScoreTable;
                var anIdx = 0;

                {
                    var $enum3 = ss.IEnumerator.getEnumerator(aSaveTable[aName]);
                    while($enum3.moveNext()) {
                        var aDictionary = $enum3.get_current();
                        var anEntry = new Game.HighScoreEntry();
                        anEntry.mName = aDictionary['Name'];
                        anEntry.mScore = (aDictionary['Score'] | 0);
                        anEntry.mTime = ((aDictionary['Time'] | 0) | 0);
                        if(anIdx < aHighScoreTable.mHighScores.length) {
                            aHighScoreTable.mHighScores[anIdx++] = anEntry;
                        }
                    }
                }
            }
        }
        return false;
    },
    Save : function Game_HighScoreMgr$Save() {
        var aSaveData = {};
        aSaveData['_VERSION'] = Game.HighScoreMgr.VERSION;

        {
            for(aName in this.mHighScoreMap) {
                var aSaveTable = [];
                aSaveData[aName] = aSaveTable;

                {
                    var $srcArray5 = this.mHighScoreMap[aName].mHighScores;
                    for(var $enum5 = 0; $enum5 < $srcArray5.length; $enum5++) {
                        var aHighScoreEntry = $srcArray5[$enum5];
                        aSaveTable.push(Array.Create(3, null, new GameFramework.misc.KeyVal('Name', aHighScoreEntry.mName), new GameFramework.misc.KeyVal('Score', aHighScoreEntry.mScore), new GameFramework.misc.KeyVal('Time', aHighScoreEntry.mTime)));
                    }
                }
            }
        }
        GameFramework.BaseApp.mApp.SetLocalData(GameFramework.BaseApp.mApp.mProdName, 'HighScores', GameFramework.BaseApp.mApp.EncodeJSON(aSaveData));
        return true;
    }
}
Game.HighScoreMgr.staticInit = function Game_HighScoreMgr$staticInit() {
    Game.HighScoreMgr.VERSION = 1;
}

JS_AddInitFunc(function() {
    Game.HighScoreMgr.registerClass('Game.HighScoreMgr', null);
});
JS_AddStaticInitFunc(function() {
    Game.HighScoreMgr.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\HighScoreMgr.cs
//LineMap:2=3 14=9 21=18 26=22 37=27 53=49 56=58 58=54 59=59 69=68 75=75 79=80 84=86 85=88 88=92 99=104 104=111 112=120 115=124 126=51 132=138 135=143 137=151 138=144 145=147 149=154 155=161 158=163 160=167 161=169 168=175 175=181 180=185 185=191 189=196 193=199 197=201 
//LineMap:199=201 200=203 202=206 204=209 212=216 217=222 219=225 224=231 227=232 232=238 235=239 239=241 249=250 256=258 258=258 262=263 264=263 268=265 273=273 274=275 279=140 
//Start:HintDialog
/**
 * @constructor
 */
Game.HintDialog = function Game_HintDialog(theHeader, theText, theHasButton, theIsModal, disableBox) {
    if(theIsModal === undefined) {
        theIsModal = true;
    }
    if(disableBox === undefined) {
        disableBox = true;
    }
    this.mNoHintsPct = GameFramework.CurvedVal.CreateAsConstant(0.0);
    this.mTutorialFlag = Game.DM.ETutorial.NONE;
    Game.HintDialog.initializeBase(this, [theIsModal ? Game.Resources['IMAGE_DIALOG_BACKGROUND'] : Game.Resources['IMAGE_DIALOG_HEADERLESS_BKG'], Game.Resources['IMAGE_DIALOG_BUTTON'], Game.DM.EDialog.TUTORIAL, true, theHeader, theText, '', theHasButton ? GameFramework.widgets.Dialog.BUTTONS_FOOTER : GameFramework.widgets.Dialog.BUTTONS_NONE]);
    this.mWantDisableBox = disableBox;
    this.mWantsDarken = theIsModal;
    this.mIsModal = theIsModal;
    this.mContentInsets = new GameFramework.Insets(128, 20, 128, 64);
    this.SetButtonFont(Game.Resources['FONT_DIALOG_BUTTONS']);
    this.SetHeaderFont(Game.Resources['FONT_DIALOG_HEADER']);
    this.SetColor(GameFramework.widgets.Dialog.COLOR_LINES, 0xff000000);
    this.mSpaceAfterHeader = 32;
    if(this.mComponentImage == Game.Resources['IMAGE_DIALOG_HEADERLESS_BKG']) {
        this.mContentInsets.mTop += 30.0;
        this.mContentInsets.mBottom += 20.0;
        this.mSpaceAfterHeader -= 15;
    }
    if(this.mWantDisableBox) {
        this.mNoHintsCheckbox = new Game.Checkbox(Game.Resources['IMAGE_DIALOG_CHECKBOX_BLANK'], Game.Resources['IMAGE_DIALOG_CHECKBOX_CHECKED']);
        this.mNoHintsCheckbox.Resize(0, 0, Game.Resources['IMAGE_DIALOG_CHECKBOX_CHECKED'].mWidth, Game.Resources['IMAGE_DIALOG_CHECKBOX_CHECKED'].mHeight);
        this.mNoHintsCheckbox.mChecked = false;
        this.mNoHintsCheckbox.mAlpha = 1.0;
        this.mNoHintsCheckbox.AddEventListener(GameFramework.widgets.WidgetEvent.CHECKBOX_CHECKED, ss.Delegate.create(this, this.handleCheckboxChecked));
        this.AddWidget(this.mNoHintsCheckbox);
    }
    if(this.mYesButton != null) {
        this.mYesButton.mLabel = 'OK';
    }
    if(this.mNoButton != null) {
        this.mNoButton.mLabel = 'REPLAY';
    }
    this.Resize(0, 0, 800, this.GetPreferredHeight(800));
    this.mFullHeight = this.mHeight;
}
Game.HintDialog.prototype = {
    mNoHintsCheckbox : null,
    mWantDisableBox : null,
    mNoHintsPct : null,
    mShowBtnPct : 1.0,
    mFullHeight : 0,
    mTutorialFlag : null,
    Resize : function Game_HintDialog$Resize(theX, theY, theWidth, theHeight) {
        Game.Bej3Dialog.prototype.Resize.apply(this, [theX, theY, theWidth, theHeight]);
        if(this.mYesButton != null && this.mComponentImage == Game.Resources['IMAGE_DIALOG_HEADERLESS_BKG']) {
            this.mYesButton.mY += 20.0;
        }
    },
    handleCheckboxChecked : function Game_HintDialog$handleCheckboxChecked(theE) {
        this.DispatchEvent(theE);
    },
    Dispose : function Game_HintDialog$Dispose() {
        this.RemoveAllWidgets(true);
        Game.Bej3Dialog.prototype.Dispose.apply(this);
    },
    Update : function Game_HintDialog$Update() {
        Game.Bej3Dialog.prototype.Update.apply(this);
        if(this.mNoHintsCheckbox.IsChecked() && this.mNoHintsPct.GetOutFinalVal() != 1.0) {
            this.mNoHintsPct.SetCurveRef('HintDialog_cs_11_14_11__18_37_44_846');
        } else if(!this.mNoHintsCheckbox.IsChecked() && this.mNoHintsPct.GetOutFinalVal() != 0.0) {
            this.mNoHintsPct.SetCurveRef('HintDialog_cs_11_14_11__18_38_10_200');
        }
        var showBtnPct = Math.max(this.mShowBtnPct, this.mNoHintsPct.get_v());
        this.Resize(this.mX, this.mY, this.mWidth, this.mFullHeight - (100.0 * (1.0 - showBtnPct)));
    },
    Draw : function Game_HintDialog$Draw(g) {
        this.mNoHintsCheckbox.mAlpha = 0.5 + 0.5 * this.mNoHintsPct.get_v();
        var showBtnPct = Math.max(this.mShowBtnPct, this.mNoHintsPct.get_v());
        if(this.mYesButton != null) {
            this.mYesButton.mAlpha = Math.max(0.0, Math.min(1.0, (showBtnPct - 0.5) * 2.0));
        }
        if(this.mComponentImage == Game.Resources['IMAGE_DIALOG_HEADERLESS_BKG']) {
            this.mHeaderFont.PushLayerColor('MAIN', 0xfffee2b7);
            this.mHeaderFont.PushLayerColor('GLOW', 0xff000000);
            this.mHeaderFont.PushLayerColor('OUTLINE', 0xff000000);
        }
        Game.Bej3Dialog.prototype.Draw.apply(this, [g]);
        if(this.mComponentImage == Game.Resources['IMAGE_DIALOG_HEADERLESS_BKG']) {
            this.mHeaderFont.PopLayerColor('MAIN');
            this.mHeaderFont.PopLayerColor('GLOW');
            this.mHeaderFont.PopLayerColor('OUTLINE');
        }
        if(this.mWantDisableBox) {
            g.SetFont(Game.Resources['FONT_DISABLE_HINTS']);
            var alpha = (((0.5 + 0.5 * this.mNoHintsPct.get_v()) * 255.0) | 0);
            var _t1 = g.PushColor(GameFramework.gfx.Color.UInt_AToInt(0xffffffff, alpha));
            try {
                var x = this.mWidth / 2 - 45;
                var y = this.mHeight - 160;
                if(this.mYesButton == null) {
                    y += 85.0;
                } else {
                    y += (1.0 - showBtnPct) * 100.0;
                }
                if(this.mComponentImage == Game.Resources['IMAGE_DIALOG_HEADERLESS_BKG']) {
                    y -= 20.0;
                }
                g.DrawString('Disable Hints', x, y);
                this.mNoHintsCheckbox.Move(x - 60, y - 30);
            } finally {
                _t1.Dispose();
            }
        }
    },
    GetPreferredHeight : function Game_HintDialog$GetPreferredHeight(theWidth) {
        var aHeight = Game.Bej3Dialog.prototype.GetPreferredHeight.apply(this, [theWidth]);
        if(this.mWantDisableBox) {
            aHeight += 50.0;
            this.mNoHintsCheckbox.Move(theWidth / 2 - 125, aHeight - 190);
        }
        return aHeight;
    }
}
Game.HintDialog.staticInit = function Game_HintDialog$staticInit() {
}

JS_AddInitFunc(function() {
    Game.HintDialog.registerClass('Game.HintDialog', Game.Bej3Dialog);
});
JS_AddStaticInitFunc(function() {
    Game.HintDialog.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\HintDialog.cs
//LineMap:2=3 5=24 7=22 8=22 9=17 10=20 11=23 12=25 14=29 16=32 18=36 20=39 22=42 26=47 35=57 37=60 39=63 47=18 51=67 54=71 62=80 74=93 76=96 77=98 84=106 85=108 87=111 93=118 94=120 100=127 103=132 104=134 107=136 109=139 113=144 115=147 125=152 128=156 133=162 
//Start:Hyperspace
/**
 * @constructor
 */
Game.GemInfo = function Game_GemInfo() {
    this.mLightingCamOffset = new GameFramework.geom.Vector3();
    this.mCoords = new GameFramework.geom.Coords3();
    this.mPos = new GameFramework.geom.Vector3();
    this.mPosScreen = new GameFramework.geom.Vector3();
}
Game.GemInfo.prototype = {
    mLightingCamOffset : null,
    mCoords : null,
    mPos : null,
    mPosScreen : null,
    mScaleScreen : 0,
    mPiece : null,
    mDistToCamera : 0,
    mBoardHitFrame : 0,
    mColorIndexStart : 0,
    mColorIndexEnd : 0,
    mDraw3D : null,
    SetCoords : function Game_GemInfo$SetCoords(inCoords) {
        this.mCoords = inCoords;
    },
    Init : function Game_GemInfo$Init(piece, animSeq) {
        this.mPiece = piece;
        this.mColorIndexStart = (this.mPiece.mColor | 0);
        this.mColorIndexEnd = -1;
        this.mDraw3D = false;
        this.mBoardHitFrame = animSeq.GetGemHitFrame(piece.mRow, piece.mCol);
        var rot = animSeq.GetGemRot(piece.mRow, piece.mCol);
        var pos = animSeq.GetGemPos(piece.mRow, piece.mCol);
        var scale = animSeq.GetGemScale(piece.mRow, piece.mCol);
        this.mPos = pos;
        var gemCoords = new GameFramework.geom.Coords3();
        gemCoords.RotateRadX(rot.x);
        gemCoords.RotateRadY(rot.y);
        gemCoords.RotateRadZ(rot.z);
        gemCoords.Scale(scale.x, scale.y, scale.z);
        gemCoords.Translate(pos.x, pos.y, pos.z);
        this.mLightingCamOffset = gemCoords.t.Scale(-1.0);
        this.mLightingCamOffset.z = 0.0;
        this.SetCoords(gemCoords);
    }
}
Game.GemInfo.staticInit = function Game_GemInfo$staticInit() {
}

JS_AddInitFunc(function() {
    Game.GemInfo.registerClass('Game.GemInfo', null);
});
JS_AddStaticInitFunc(function() {
    Game.GemInfo.staticInit();
});
/**
 * @constructor
 */
Game.BoardInfo = function Game_BoardInfo() {
}
Game.BoardInfo.prototype = {
    mCoords : null,
    mBoard : null,
    SetCoords : function Game_BoardInfo$SetCoords(inCoords) {
        this.mCoords = inCoords;
    },
    Init : function Game_BoardInfo$Init(board, animSeq) {
        this.mBoard = board;
        var rot = animSeq.GetBoardRot();
        var pos = animSeq.GetBoardPos();
        var scale = animSeq.GetBoardScale();
        var boardCoords = new GameFramework.geom.Coords3();
        boardCoords.RotateRadX(rot.x);
        boardCoords.RotateRadY(rot.y);
        boardCoords.RotateRadZ(rot.z);
        boardCoords.Scale(scale.x, scale.y, scale.z);
        boardCoords.Translate(pos.x, pos.y, pos.z);
        this.SetCoords(boardCoords);
    }
}
Game.BoardInfo.staticInit = function Game_BoardInfo$staticInit() {
}

JS_AddInitFunc(function() {
    Game.BoardInfo.registerClass('Game.BoardInfo', null);
});
JS_AddStaticInitFunc(function() {
    Game.BoardInfo.staticInit();
});
/**
 * @constructor
 */
Game.HyperAnimKey = function Game_HyperAnimKey() {
    this.mPos = new GameFramework.geom.Vector3();
    this.mRot = new GameFramework.geom.Vector3();
    this.mScale = new GameFramework.geom.Vector3();
}
Game.HyperAnimKey.prototype = {
    mPos : null,
    mRot : null,
    mScale : null
}
Game.HyperAnimKey.staticInit = function Game_HyperAnimKey$staticInit() {
}

JS_AddInitFunc(function() {
    Game.HyperAnimKey.registerClass('Game.HyperAnimKey', null);
});
JS_AddStaticInitFunc(function() {
    Game.HyperAnimKey.staticInit();
});
/**
 * @constructor
 */
Game.HyperAnimSequence = function Game_HyperAnimSequence() {
    this.mGemHitFrame = Array.Create2D(Game.Board.NUM_ROWS, Game.Board.NUM_COLS, 0);
    this.mFrameCount = 0;
    this.mLightCount = 0;
    this.mCamera = null;
    this.mBoard = null;
}
Game.HyperAnimSequence.EulerInterpolate = function Game_HyperAnimSequence$EulerInterpolate(from, to, u) {
    var diff = (to - from) % (Math.PI * 2);
    if(diff < 0) {
        diff = Math.PI * 2 + diff;
    }
    if(diff > Math.PI) {
        diff = -1.0 * (Math.PI * 2 - diff);
    }
    var angle = (from + (diff * u)) % (Math.PI * 2);
    if(angle < 0) {
        angle = Math.PI * 2 + angle;
    }
    return angle;
}
Game.HyperAnimSequence.prototype = {
    mFrameCount : 0,
    mLightCount : 0,
    mGemHitFrame : null,
    mCamera : null,
    mBoard : null,
    mGems : null,
    mLights : null,
    mTickF : 0,
    GetCurFrame : function Game_HyperAnimSequence$GetCurFrame() {
        return ((this.mTickF) | 0);
    },
    IsComplete : function Game_HyperAnimSequence$IsComplete() {
        return this.mTickF >= this.mFrameCount - 1.01;
    },
    GetGemHitFrame : function Game_HyperAnimSequence$GetGemHitFrame(row, col) {
        return this.mGemHitFrame[this.mGemHitFrame.mIdxMult0 * (row) + col];
    },
    Reset : function Game_HyperAnimSequence$Reset() {
        this.mTickF = 0;
    },
    Tick : function Game_HyperAnimSequence$Tick() {
        this.mTickF += 1.67 / 2.0;
        var aMaxTickF = this.mFrameCount - 1.01;
        if(this.mTickF >= aMaxTickF) {
            this.mTickF = aMaxTickF;
        }
    },
    GetGemPos : function Game_HyperAnimSequence$GetGemPos(row, col) {
        var aFrame = (this.mTickF | 0);
        var a = this.mTickF - aFrame;
        var oma = 1.0 - a;
        return new GameFramework.geom.Vector3(this.mGems[this.mGems.mIdxMult0 * (row) + this.mGems.mIdxMult1 * (col) + aFrame].mPos.x * oma + this.mGems[this.mGems.mIdxMult0 * (row) + this.mGems.mIdxMult1 * (col) + aFrame + 1].mPos.x * a, this.mGems[this.mGems.mIdxMult0 * (row) + this.mGems.mIdxMult1 * (col) + aFrame].mPos.y * oma + this.mGems[this.mGems.mIdxMult0 * (row) + this.mGems.mIdxMult1 * (col) + aFrame + 1].mPos.y * a, this.mGems[this.mGems.mIdxMult0 * (row) + this.mGems.mIdxMult1 * (col) + aFrame].mPos.z * oma + this.mGems[this.mGems.mIdxMult0 * (row) + this.mGems.mIdxMult1 * (col) + aFrame + 1].mPos.z * a);
    },
    GetGemRot : function Game_HyperAnimSequence$GetGemRot(row, col) {
        var aFrame = (this.mTickF | 0);
        var a = this.mTickF - aFrame;
        return new GameFramework.geom.Vector3(Game.HyperAnimSequence.EulerInterpolate(this.mGems[this.mGems.mIdxMult0 * (row) + this.mGems.mIdxMult1 * (col) + aFrame].mRot.x, this.mGems[this.mGems.mIdxMult0 * (row) + this.mGems.mIdxMult1 * (col) + aFrame + 1].mRot.x, a), Game.HyperAnimSequence.EulerInterpolate(this.mGems[this.mGems.mIdxMult0 * (row) + this.mGems.mIdxMult1 * (col) + aFrame].mRot.y, this.mGems[this.mGems.mIdxMult0 * (row) + this.mGems.mIdxMult1 * (col) + aFrame + 1].mRot.y, a), Game.HyperAnimSequence.EulerInterpolate(this.mGems[this.mGems.mIdxMult0 * (row) + this.mGems.mIdxMult1 * (col) + aFrame].mRot.z, this.mGems[this.mGems.mIdxMult0 * (row) + this.mGems.mIdxMult1 * (col) + aFrame + 1].mRot.z, a));
    },
    GetGemScale : function Game_HyperAnimSequence$GetGemScale(row, col) {
        var aFrame = (this.mTickF | 0);
        var a = this.mTickF - aFrame;
        var oma = 1.0 - a;
        return new GameFramework.geom.Vector3(this.mGems[this.mGems.mIdxMult0 * (row) + this.mGems.mIdxMult1 * (col) + aFrame].mScale.x * oma + this.mGems[this.mGems.mIdxMult0 * (row) + this.mGems.mIdxMult1 * (col) + aFrame + 1].mScale.x * a, this.mGems[this.mGems.mIdxMult0 * (row) + this.mGems.mIdxMult1 * (col) + aFrame].mScale.y * oma + this.mGems[this.mGems.mIdxMult0 * (row) + this.mGems.mIdxMult1 * (col) + aFrame + 1].mScale.y * a, this.mGems[this.mGems.mIdxMult0 * (row) + this.mGems.mIdxMult1 * (col) + aFrame].mScale.z * oma + this.mGems[this.mGems.mIdxMult0 * (row) + this.mGems.mIdxMult1 * (col) + aFrame + 1].mScale.z * a);
    },
    GetBoardPos : function Game_HyperAnimSequence$GetBoardPos() {
        var aFrame = (this.mTickF | 0);
        var a = this.mTickF - aFrame;
        var oma = 1.0 - a;
        return new GameFramework.geom.Vector3(this.mBoard[aFrame].mPos.x * oma + this.mBoard[aFrame + 1].mPos.x * a, this.mBoard[aFrame].mPos.y * oma + this.mBoard[aFrame + 1].mPos.y * a, this.mBoard[aFrame].mPos.z * oma + this.mBoard[aFrame + 1].mPos.z * a);
    },
    GetBoardRot : function Game_HyperAnimSequence$GetBoardRot() {
        var aFrame = (this.mTickF | 0);
        var a = this.mTickF - aFrame;
        return new GameFramework.geom.Vector3(Game.HyperAnimSequence.EulerInterpolate(this.mBoard[aFrame].mRot.x, this.mBoard[aFrame + 1].mRot.x, a), Game.HyperAnimSequence.EulerInterpolate(this.mBoard[aFrame].mRot.y, this.mBoard[aFrame + 1].mRot.y, a), Game.HyperAnimSequence.EulerInterpolate(this.mBoard[aFrame].mRot.z, this.mBoard[aFrame + 1].mRot.z, a));
    },
    GetBoardScale : function Game_HyperAnimSequence$GetBoardScale() {
        var aFrame = (this.mTickF | 0);
        var a = this.mTickF - aFrame;
        var oma = 1.0 - a;
        return new GameFramework.geom.Vector3(this.mBoard[aFrame].mScale.x * oma + this.mBoard[aFrame + 1].mScale.x * a, this.mBoard[aFrame].mScale.y * oma + this.mBoard[aFrame + 1].mScale.y * a, this.mBoard[aFrame].mScale.z * oma + this.mBoard[aFrame + 1].mScale.z * a);
    },
    GetCameraPos : function Game_HyperAnimSequence$GetCameraPos() {
        var aFrame = (this.mTickF | 0);
        var a = this.mTickF - aFrame;
        var oma = 1.0 - a;
        return new GameFramework.geom.Vector3(this.mCamera[aFrame].mPos.x * oma + this.mCamera[aFrame + 1].mPos.x * a, this.mCamera[aFrame].mPos.y * oma + this.mCamera[aFrame + 1].mPos.y * a, this.mCamera[aFrame].mPos.z * oma + this.mCamera[aFrame + 1].mPos.z * a);
    },
    GetCameraRot : function Game_HyperAnimSequence$GetCameraRot() {
        var aFrame = (this.mTickF | 0);
        var a = this.mTickF - aFrame;
        return new GameFramework.geom.Vector3(Game.HyperAnimSequence.EulerInterpolate(this.mCamera[aFrame].mRot.x, this.mCamera[aFrame + 1].mRot.x, a), Game.HyperAnimSequence.EulerInterpolate(this.mCamera[aFrame].mRot.y, this.mCamera[aFrame + 1].mRot.y, a), Game.HyperAnimSequence.EulerInterpolate(this.mCamera[aFrame].mRot.z, this.mCamera[aFrame + 1].mRot.z, a));
    },
    GetCameraScale : function Game_HyperAnimSequence$GetCameraScale() {
        var aFrame = (this.mTickF | 0);
        var a = this.mTickF - aFrame;
        var oma = 1.0 - a;
        return new GameFramework.geom.Vector3(this.mCamera[aFrame].mScale.x * oma + this.mCamera[aFrame + 1].mScale.x * a, this.mCamera[aFrame].mScale.y * oma + this.mCamera[aFrame + 1].mScale.y * a, this.mCamera[aFrame].mScale.z * oma + this.mCamera[aFrame + 1].mScale.z * a);
    }
}
Game.HyperAnimSequence.staticInit = function Game_HyperAnimSequence$staticInit() {
}

JS_AddInitFunc(function() {
    Game.HyperAnimSequence.registerClass('Game.HyperAnimSequence', null);
});
JS_AddStaticInitFunc(function() {
    Game.HyperAnimSequence.staticInit();
});
/**
 * @constructor
 */
Game.HyperMaterial = function Game_HyperMaterial(theAmbient, theDiffuse, theSpecular, thePower) {
    if(theAmbient === undefined) {
        theAmbient = null;
    }
    if(theDiffuse === undefined) {
        theDiffuse = null;
    }
    if(theSpecular === undefined) {
        theSpecular = null;
    }
    if(thePower === undefined) {
        thePower = 0;
    }
    this.ambient = (theAmbient != null) ? theAmbient : Array.Create(4, null);
    this.diffuse = (theDiffuse != null) ? theDiffuse : Array.Create(4, null);
    this.specular = (theSpecular != null) ? theSpecular : Array.Create(4, null);
    this.power = thePower;
}
Game.HyperMaterial.prototype = {
    ambient : null,
    diffuse : null,
    specular : null,
    power : 0
}
Game.HyperMaterial.staticInit = function Game_HyperMaterial$staticInit() {
}

JS_AddInitFunc(function() {
    Game.HyperMaterial.registerClass('Game.HyperMaterial', null);
});
JS_AddStaticInitFunc(function() {
    Game.HyperMaterial.staticInit();
});
/**
 * @constructor
 */
Game.Hyperspace = function Game_Hyperspace() {
    Game.Hyperspace.initializeBase(this);
}
Game.Hyperspace.prototype = {

    DrawBackground : function Game_Hyperspace$DrawBackground(g) {
    },
    GetPieceAlpha : function Game_Hyperspace$GetPieceAlpha() {
        return 1.0;
    },
    IsUsing3DTransition : function Game_Hyperspace$IsUsing3DTransition() {
        return false;
    },
    SetBGImage : function Game_Hyperspace$SetBGImage(inImage) {
    }
}
Game.Hyperspace.staticInit = function Game_Hyperspace$staticInit() {
    Game.Hyperspace.MAX_HYPERSPACE_LIGHT = 4;
}

JS_AddInitFunc(function() {
    Game.Hyperspace.registerClass('Game.Hyperspace', GameFramework.widgets.ClassicWidget);
});
JS_AddStaticInitFunc(function() {
    Game.Hyperspace.staticInit();
});
Game.Hyperspace.HyperspaceEvent = {};
Game.Hyperspace.HyperspaceEvent.staticInit = function Game_Hyperspace_HyperspaceEvent$staticInit() {
    Game.Hyperspace.HyperspaceEvent.Start = 0;
    Game.Hyperspace.HyperspaceEvent.HideAll = 1;
    Game.Hyperspace.HyperspaceEvent.BoardShatter = 2;
    Game.Hyperspace.HyperspaceEvent.NextBkg = 3;
    Game.Hyperspace.HyperspaceEvent.ZoomIn = 4;
    Game.Hyperspace.HyperspaceEvent.SlideOver = 5;
    Game.Hyperspace.HyperspaceEvent.OldLevelClear = 6;
    Game.Hyperspace.HyperspaceEvent.Finish = 7;
}
JS_AddInitFunc(function() {
    Game.Hyperspace.HyperspaceEvent.staticInit();
});
/**
 * @constructor
 */
Game.HyperspaceUltra = function Game_HyperspaceUltra(theBoard) {
    this.mGemInfo = Array.Create2D(Game.Board.NUM_ROWS, Game.Board.NUM_COLS, null);
    this.mBoardInfo = new Game.BoardInfo();
    this.mGemRenderOrder = [];
    this.mCameraPersp = new GameFramework.gfx.PerspectiveCamera();
    this.mBGScale = new GameFramework.CurvedVal();
    this.mXOffsetAnim = new GameFramework.CurvedVal();
    this.mMinAlpha = new GameFramework.CurvedVal();
    this.mShatterScale = new GameFramework.CurvedVal();
    this.mWarpTubeTextureFade = new GameFramework.CurvedVal();
    this.mRingFadeTunnelIn = new GameFramework.CurvedVal();
    this.mRingFadeTunnelOut = new GameFramework.CurvedVal();
    this.mPieceAlpha = new GameFramework.CurvedVal();
    this.mBoardScreenPos = new GameFramework.geom.Vector3();
    Game.HyperspaceUltra.initializeBase(this);
    var iAnim = 0;
    iAnim = 0;
    this.mAnimSeq = Game.BejApp.mBejApp.mHyperSpaceAnims[iAnim];
    this.mAnimSeq.Reset();
    this.mCameraPersp.Init(this.GetFocalLength(), GameFramework.BaseApp.mApp.mWidth / GameFramework.BaseApp.mApp.mHeight, 100.0, this.GetZFarClip());
    this.mBoardInfo.Init(theBoard, this.mAnimSeq);
    for(var aRow = 0; aRow < Game.Board.NUM_ROWS; aRow++) {
        for(var aCol = 0; aCol < Game.Board.NUM_COLS; aCol++) {
            this.mGemInfo[this.mGemInfo.mIdxMult0 * (aRow) + aCol] = new Game.GemInfo();
            this.mGemInfo[this.mGemInfo.mIdxMult0 * (aRow) + aCol].Init(theBoard.mBoard[theBoard.mBoard.mIdxMult0 * (aRow) + aCol], this.mAnimSeq);
        }
    }
    Game.HyperspaceUltra.mHypertubeTextures[0] = Game.Resources['IMAGE_WARP_LINES_01'];
    Game.HyperspaceUltra.mHypertubeTextures[1] = Game.Resources['IMAGE_HYPERSPACE_INITIAL'];
    this.mState = Game.HyperspaceUltra.HyperSpaceState.Nil;
    this.SetState(Game.HyperspaceUltra.HyperSpaceState.Init);
}
Game.HyperspaceUltra.HypertubePredrawSet = function Game_HyperspaceUltra$HypertubePredrawSet(e) {
    var aMeshEvent = e;
    Game.HyperspaceUltra.mG3D.SetTexture(1, Game.HyperspaceUltra.mHypertubeTextures[1]);
    Game.HyperspaceUltra.mG3D.SetTexture(0, Game.HyperspaceUltra.mHypertubeTextures[0]);
}
Game.HyperspaceUltra.HypertubePostdrawSet = function Game_HyperspaceUltra$HypertubePostdrawSet(e) {
    var aMeshEvent = e;
    Game.HyperspaceUltra.mG3D.SetTexture(0, null);
    Game.HyperspaceUltra.mG3D.SetTexture(1, null);
}
Game.HyperspaceUltra.prototype = {
    mTicks : 0,
    mUVAnimTicks : 0,
    mStateStartTick : 0,
    mState : null,
    mGemInfo : null,
    mBoardInfo : null,
    mGemRenderOrder : null,
    mCameraPersp : null,
    mBGScale : null,
    mBGImage : null,
    mAnimSeq : null,
    mXOffsetAnim : null,
    mMinAlpha : null,
    mShatterScale : null,
    mWarpTubeTextureFade : null,
    mRingFadeTunnelIn : null,
    mRingFadeTunnelOut : null,
    mPieceAlpha : null,
    mFadeTo3D : 0,
    mFadeFrom3D : 0,
    mGemHitCount : 0,
    mGemHitTick : 0,
    mBoardScreenPos : null,
    GetPieceAlpha : function Game_HyperspaceUltra$GetPieceAlpha() {
        return this.mPieceAlpha.get_v();
    },
    IsUsing3DTransition : function Game_HyperspaceUltra$IsUsing3DTransition() {
        return true;
    },
    SetBGImage : function Game_HyperspaceUltra$SetBGImage(inImage) {
        this.mBGImage = inImage;
    },
    Update : function Game_HyperspaceUltra$Update() {
        Game.Hyperspace.prototype.Update.apply(this);
        this.mTicks += 1.67;
        for(; ;) {
            var prevState = this.mState;
            switch(this.mState) {
                case Game.HyperspaceUltra.HyperSpaceState.Init:

                {
                    this.SetState(Game.HyperspaceUltra.HyperSpaceState.SlideOver);
                }

                    break;
                case Game.HyperspaceUltra.HyperSpaceState.SlideOver:

                {
                    if(this.mTicks - this.mStateStartTick > 160) {
                        this.SetState(Game.HyperspaceUltra.HyperSpaceState.FadeTo3D);
                    }
                }

                    break;
                case Game.HyperspaceUltra.HyperSpaceState.FadeTo3D:

                {
                    if(this.mPieceAlpha.HasBeenTriggered()) {
                        this.SetState(Game.HyperspaceUltra.HyperSpaceState.GemRise);
                    }
                }

                    break;
                case Game.HyperspaceUltra.HyperSpaceState.GemRise:

                {
                    if(this.mAnimSeq.GetCurFrame() >= 20) {
                        this.SetState(Game.HyperspaceUltra.HyperSpaceState.GemFly);
                    }
                }

                    break;
                case Game.HyperspaceUltra.HyperSpaceState.GemFly:

                {
                    if(this.mAnimSeq.GetCurFrame() >= 65) {
                        this.SetState(Game.HyperspaceUltra.HyperSpaceState.BoardShatter);
                    }
                }

                    break;
                case Game.HyperspaceUltra.HyperSpaceState.BoardShatter:

                {
                    if(this.mAnimSeq.GetCurFrame() >= 95) {
                        this.SetState(Game.HyperspaceUltra.HyperSpaceState.PortalRide);
                    }
                }

                    break;
                case Game.HyperspaceUltra.HyperSpaceState.PortalRide:

                {
                    if(this.mAnimSeq.GetCurFrame() >= 250) {
                        this.SetState(Game.HyperspaceUltra.HyperSpaceState.LandOnBoard);
                    }
                }

                    break;
                case Game.HyperspaceUltra.HyperSpaceState.LandOnBoard:

                {
                    if(this.mAnimSeq.IsComplete()) {
                        this.SetState(Game.HyperspaceUltra.HyperSpaceState.Outro);
                    }
                }

                    break;
                case Game.HyperspaceUltra.HyperSpaceState.FadeFrom3D:

                {
                    if(this.mFadeFrom3D <= 0.0) {
                        this.SetState(Game.HyperspaceUltra.HyperSpaceState.Outro);
                    }
                }

                    break;
                case Game.HyperspaceUltra.HyperSpaceState.Outro:

                {
                    if(this.mTicks - this.mStateStartTick > 0) {
                        this.SetState(Game.HyperspaceUltra.HyperSpaceState.Complete);
                    }
                }

                    break;
            }
            if(this.mState == prevState) {
                break;
            }
        }
        this.UpdateAnimation();
        this.UpdateCamera();
        this.UpdateTransitionTo3D();
        this.UpdateBackground();
        this.Update3DGems();
        this.Update3DBoard();
        this.Update3DPortal();
        this.UpdateSounds();
    },
    Draw : function Game_HyperspaceUltra$Draw(g) {
        if(!GameFramework.BaseApp.mApp.get_Is3D()) {
            return;
        }
        Game.HyperspaceUltra.mG3D = g.Begin3DScene();
        switch(this.mState) {
            case Game.HyperspaceUltra.HyperSpaceState.SlideOver:

            {
                Game.HyperspaceUltra.mG3D.ClearDepthBuffer();
                this.Draw3DGems(g);
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.FadeTo3D:

            {
                Game.HyperspaceUltra.mG3D.ClearDepthBuffer();
                this.Draw3DGems(g);
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.GemRise:

            {
                Game.HyperspaceUltra.mG3D.ClearDepthBuffer();
                this.Draw3DWarpTube(g);
                this.Draw3DBoard(g);
                this.Draw3DGems(g);
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.GemFly:

            {
                Game.HyperspaceUltra.mG3D.ClearDepthBuffer();
                this.Draw3DWarpTube(g);
                this.Draw3DBoard(g);
                this.Draw3DGems(g);
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.BoardShatter:

            {
                Game.HyperspaceUltra.mG3D.ClearDepthBuffer();
                this.Draw3DWarpTube(g);
                g.End3DScene(Game.HyperspaceUltra.mG3D);
                this.Draw2DBoardSmash(g);
                Game.HyperspaceUltra.mG3D = g.Begin3DScene();
                this.Draw3DGems(g);
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.PortalRide:

            {
                Game.HyperspaceUltra.mG3D.ClearDepthBuffer();
                this.Draw3DWarpTube(g);
                if(this.mAnimSeq.GetCurFrame() < 120) {
                    g.End3DScene(Game.HyperspaceUltra.mG3D);
                    this.Draw2DBoardSmash(g);
                    Game.HyperspaceUltra.mG3D = g.Begin3DScene();
                } else if(this.mAnimSeq.GetCurFrame() >= 170) {
                    Game.BejApp.mBejApp.mBoard.mDrawAll = true;
                    this.Draw3DBoard(g);
                }
                this.Draw3DGems(g);
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.LandOnBoard:

            {
                Game.HyperspaceUltra.mG3D.ClearDepthBuffer();
                this.Draw3DWarpTube(g);
                this.Draw3DGems(g);
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.FadeFrom3D:

            {
                Game.HyperspaceUltra.mG3D.ClearDepthBuffer();
                this.Draw3DGems(g);
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.DebugDrawEveryOther:

            {
                Game.HyperspaceUltra.mG3D.ClearDepthBuffer();
                this.Draw3DGemsEveryOther(g);
            }

                break;
        }
        g.End3DScene(Game.HyperspaceUltra.mG3D);
    },
    DrawBackground : function Game_HyperspaceUltra$DrawBackground(g) {
        switch(this.mState) {
            case Game.HyperspaceUltra.HyperSpaceState.SlideOver:
            case Game.HyperspaceUltra.HyperSpaceState.FadeTo3D:
            case Game.HyperspaceUltra.HyperSpaceState.GemRise:
            case Game.HyperspaceUltra.HyperSpaceState.GemFly:
            case Game.HyperspaceUltra.HyperSpaceState.BoardShatter:

            {
                this.Draw3DBackground(g);
            }

                break;
        }
    },
    SetState : function Game_HyperspaceUltra$SetState(state) {
        if(state == this.mState) {
            return;
        }
        this.mStateStartTick = this.mTicks;
        this.mState = state;
        switch(this.mState) {
            case Game.HyperspaceUltra.HyperSpaceState.Init:

            {
                this.mTicks = 0;
                this.mAnimSeq.Reset();
                this.mMinAlpha.SetConstant(0.0);
                this.mXOffsetAnim.SetConstant(0.0);
                this.mRingFadeTunnelIn.SetConstant(0.0);
                this.mRingFadeTunnelOut.SetConstant(0.0);
                this.mWarpTubeTextureFade.SetConstant(1.0);
                this.mBGScale.SetConstant(1.0);
                this.mShatterScale.SetConstant(1.0);
                this.mPieceAlpha.SetConstant(1.0);
                this.mFadeTo3D = 1.0;
                this.mFadeFrom3D = 0.0;
                this.mGemHitCount = 0;
                this.mGemHitTick = (this.mTicks | 0);
                for(var row = 0; row < Game.Board.NUM_ROWS; ++row) {
                    for(var col = 0; col < Game.Board.NUM_COLS; ++col) {
                        var gemInfoPointer = this.mGemInfo[this.mGemInfo.mIdxMult0 * (row) + col];
                        gemInfoPointer.mDraw3D = false;
                    }
                }
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.SlideOver:

            {
                this.mFadeTo3D = 0.0;
                this.mXOffsetAnim.SetCurve('b+0,-234,0.009091,1,####         ~~auJ');
                this.mBoardInfo.mBoard.HyperspaceEvent(Game.Hyperspace.HyperspaceEvent.Start);
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.FadeTo3D:

            {
                this.mPieceAlpha.ClearTrigger();
                this.mPieceAlpha.SetCurve('b-0.02,1,0.2,1,~rgP         ~#DgP');
                for(var row_2 = 0; row_2 < Game.Board.NUM_ROWS; ++row_2) {
                    for(var col_2 = 0; col_2 < Game.Board.NUM_COLS; ++col_2) {
                        var gemInfoPointer_2 = this.mGemInfo[this.mGemInfo.mIdxMult0 * (row_2) + col_2];
                        gemInfoPointer_2.mDraw3D = true;
                    }
                }
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.GemRise:

            {
                GameFramework.BaseApp.mApp.PlaySound(Game.Resources['SOUND_HYPERSPACE']);
                this.mBoardInfo.mBoard.HyperspaceEvent(Game.Hyperspace.HyperspaceEvent.HideAll);
                this.mUVAnimTicks = 0;
                this.mBGScale.SetCurve('b+1,8,0.004762,1,####     l#Pr]\'#*NA    1}dR)');
                this.mMinAlpha.SetCurve('b+0,1,0.004444,1,####Q####         O}P8x');
                this.mRingFadeTunnelIn.SetCurve('b+0,255,0.004255,1,##xa  @L6zN d~}Q&    I~P## T#<G{');
                this.mWarpTubeTextureFade.SetCurve('b+0,1,0.004348,1,####      W+(q>   I~cu?');
                var mapBgIdToHyperspaceTubeTextures = Array.Create(4, 4, Game.Resources['IMAGE_WARP_LINES_01'], Game.Resources['IMAGE_WARP_LINES_01'], Game.Resources['IMAGE_WARP_LINES_01'], Game.Resources['IMAGE_WARP_LINES_01']);
                var bgId = GameFramework.Utils.GetRand() % 4;
                Game.HyperspaceUltra.mHypertubeTextures[0] = mapBgIdToHyperspaceTubeTextures[bgId];
                Game.HyperspaceUltra.mHypertubeTextures[1] = Game.Resources['IMAGE_HYPERSPACE_INITIAL'];
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.GemFly:

            {
                this.mXOffsetAnim.SetConstant(0.0);
                this.mPieceAlpha.SetConstant(1.0);
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.BoardShatter:

            {
                this.mBoardInfo.mBoard.HyperspaceEvent(Game.Hyperspace.HyperspaceEvent.BoardShatter);
                this.mShatterScale.SetCurve('b+0.8,2.4,0.008333,1,#.ov         ~~###');
                {
                    Game.Resources['POPANIM_ANIMS_BOARDSHATTER'].Play('shatter');
                    GameFramework.BaseApp.mApp.PlaySound(Game.Resources['SOUND_HYPERSPACE_SHATTER_1']);
                }
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.PortalRide:

            {
                this.mBoardInfo.mBoard.HyperspaceEvent(Game.Hyperspace.HyperspaceEvent.OldLevelClear);
                this.mBoardInfo.mBoard.HyperspaceEvent(Game.Hyperspace.HyperspaceEvent.NextBkg);
                this.mBGScale.SetConstant(1.0);
                this.mMinAlpha.SetConstant(1.0);
                this.mRingFadeTunnelIn.SetConstant(0.0);
                this.mWarpTubeTextureFade.SetConstant(1.0);
                Game.HyperspaceUltra.mHypertubeTextures[1] = Game.Resources['IMAGE_HYPERSPACE'];
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.LandOnBoard:

            {
                for(var row_3 = 0; row_3 < Game.Board.NUM_ROWS; ++row_3) {
                    for(var col_3 = 0; col_3 < Game.Board.NUM_COLS; ++col_3) {
                        var gemInfoPointer_3 = this.mGemInfo[this.mGemInfo.mIdxMult0 * (row_3) + col_3];
                        if(gemInfoPointer_3.mBoardHitFrame > this.mAnimSeq.GetCurFrame()) {
                            gemInfoPointer_3.mPiece.mAlpha.SetConstant(0.0);
                        }

                        else {
                            gemInfoPointer_3.mDraw3D = false;
                        }
                    }
                }
                this.mBoardInfo.mBoard.HyperspaceEvent(Game.Hyperspace.HyperspaceEvent.ZoomIn);
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.FadeFrom3D:

            {
                this.mFadeFrom3D = 1.0;
                this.mBoardInfo.mBoard.HyperspaceEvent(Game.Hyperspace.HyperspaceEvent.SlideOver);
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.Outro:

            {
                for(var row_4 = 0; row_4 < Game.Board.NUM_ROWS; ++row_4) {
                    for(var col_4 = 0; col_4 < Game.Board.NUM_COLS; ++col_4) {
                        var gemInfoPointer_4 = this.mGemInfo[this.mGemInfo.mIdxMult0 * (row_4) + col_4];
                        gemInfoPointer_4.mPiece.mAlpha.SetConstant(1.0);
                        gemInfoPointer_4.mDraw3D = false;
                    }
                }
                this.mBoardInfo.mBoard.HyperspaceEvent(Game.Hyperspace.HyperspaceEvent.SlideOver);
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.Complete:

            {
                this.mBoardInfo.mBoard.HyperspaceEvent(Game.Hyperspace.HyperspaceEvent.Finish);
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.DebugDrawEveryOther:

            {
                this.mAnimSeq.Reset();
                this.mMinAlpha.SetConstant(1.0);
                this.mFadeTo3D = 1.0;
            }

                break;
        }
    },
    UpdateAnimation : function Game_HyperspaceUltra$UpdateAnimation() {
        switch(this.mState) {
            case Game.HyperspaceUltra.HyperSpaceState.Init:
            case Game.HyperspaceUltra.HyperSpaceState.SlideOver:
            case Game.HyperspaceUltra.HyperSpaceState.DebugDrawEveryOther:
            case Game.HyperspaceUltra.HyperSpaceState.FadeTo3D:

            {
                return;
            }

        }
        this.mAnimSeq.Tick();
    },
    UpdateCamera : function Game_HyperspaceUltra$UpdateCamera() {
        this.mCameraPersp.Init(this.GetFocalLength(), GameFramework.BaseApp.mApp.mWidth / GameFramework.BaseApp.mApp.mHeight, 100.0, this.GetZFarClip());
        var xCamOff = 0.0;
        switch(this.mState) {
            case Game.HyperspaceUltra.HyperSpaceState.SlideOver:
            case Game.HyperspaceUltra.HyperSpaceState.FadeTo3D:
            case Game.HyperspaceUltra.HyperSpaceState.GemRise:

            {
                this.mXOffsetAnim.IncInVal();
                xCamOff = 234.0 + this.mXOffsetAnim.get_v();
            }

                break;
        }
        var animSeqFrame = this.mAnimSeq.GetCurFrame();
        var rot = this.mAnimSeq.GetCameraRot();
        var pos = this.mAnimSeq.GetCameraPos();
        var cameraCoords = new GameFramework.geom.Coords3();
        cameraCoords.RotateRadX(rot.x);
        cameraCoords.RotateRadY(rot.y);
        cameraCoords.RotateRadZ(rot.z);
        cameraCoords.Translate(pos.x - xCamOff, pos.y, pos.z);
        this.mCameraPersp.SetCoords(cameraCoords);
    },
    UpdateTransitionTo3D : function Game_HyperspaceUltra$UpdateTransitionTo3D() {
        switch(this.mState) {
            case Game.HyperspaceUltra.HyperSpaceState.SlideOver:

            {
                if(this.mTicks - this.mStateStartTick == 66) {
                }
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.FadeTo3D:

            {
                this.mFadeTo3D += (0.15) * 1.67;
                if(this.mFadeTo3D >= 1.0) {
                    this.mPieceAlpha.IncInVal();
                }
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.FadeFrom3D:

            {
                this.mFadeFrom3D -= 0.1 * 1.67;
            }

                break;
        }
    },
    UpdateBackground : function Game_HyperspaceUltra$UpdateBackground() {
        if(this.mAnimSeq.GetCurFrame() >= 177) {
        }
        switch(this.mState) {
            case Game.HyperspaceUltra.HyperSpaceState.GemRise:
            case Game.HyperspaceUltra.HyperSpaceState.GemFly:
            case Game.HyperspaceUltra.HyperSpaceState.BoardShatter:

            {
                this.mBGScale.IncInVal();
            }

                break;
        }
    },
    Update3DBoard : function Game_HyperspaceUltra$Update3DBoard() {
        var animSeqFrame = this.mAnimSeq.GetCurFrame();
        var rot = this.mAnimSeq.GetBoardRot();
        var pos = this.mAnimSeq.GetBoardPos();
        var scale = this.mAnimSeq.GetBoardScale();
        var boardCoords = new GameFramework.geom.Coords3();
        boardCoords.RotateRadX(rot.x);
        boardCoords.RotateRadY(rot.y);
        boardCoords.RotateRadZ(rot.z);
        boardCoords.Scale(scale.x, scale.y, scale.z);
        boardCoords.Translate(pos.x, pos.y, pos.z);
        this.mBoardInfo.SetCoords(boardCoords);
        if(Game.Resources['POPANIM_ANIMS_BOARDSHATTER'].IsActive()) {
            Game.Resources['POPANIM_ANIMS_BOARDSHATTER'].Update();
        }
    },
    Update3DGems : function Game_HyperspaceUltra$Update3DGems() {
        if(this.mAnimSeq.GetCurFrame() >= 68) {
            for(var row = 0; row < Game.Board.NUM_ROWS; ++row) {
                for(var col = 0; col < Game.Board.NUM_COLS; ++col) {
                    this.mGemInfo[this.mGemInfo.mIdxMult0 * (row) + col].mPiece = this.mBoardInfo.mBoard.mBoard[this.mBoardInfo.mBoard.mBoard.mIdxMult0 * (row) + col];
                }
            }
        }
        this.mGemRenderOrder.clear();
        var cameraCoords = this.mCameraPersp.GetCoords();
        var animSeqFrame = this.mAnimSeq.GetCurFrame();
        var matView = new GameFramework.geom.Matrix3D();
        var matProj = new GameFramework.geom.Matrix3D();
        var matWorld = new GameFramework.geom.Matrix3D();
        var matWorldViewProj = new GameFramework.geom.Matrix3D();
        this.mCameraPersp.GetViewMatrix(matView);
        this.mCameraPersp.GetProjectionMatrix(matProj);
        for(var row_2 = 0; row_2 < Game.Board.NUM_ROWS; ++row_2) {
            for(var col_2 = 0; col_2 < Game.Board.NUM_COLS; ++col_2) {
                var gemInfoPointer = this.mGemInfo[this.mGemInfo.mIdxMult0 * (row_2) + col_2];
                var colorIndex = this.GetGemColor(gemInfoPointer);
                if(this.mState == Game.HyperspaceUltra.HyperSpaceState.LandOnBoard && gemInfoPointer.mDraw3D && this.mAnimSeq.GetCurFrame() >= gemInfoPointer.mBoardHitFrame) {
                    gemInfoPointer.mPiece.mAlpha.SetConstant(1.0);
                    gemInfoPointer.mDraw3D = false;
                    var mapHitCountToSound = Array.Create(7, 7, Game.Resources['SOUND_HYPERSPACE_GEM_LAND_1'], Game.Resources['SOUND_HYPERSPACE_GEM_LAND_2'], Game.Resources['SOUND_HYPERSPACE_GEM_LAND_3'], Game.Resources['SOUND_HYPERSPACE_GEM_LAND_4'], Game.Resources['SOUND_HYPERSPACE_GEM_LAND_5'], Game.Resources['SOUND_HYPERSPACE_GEM_LAND_6'], Game.Resources['SOUND_HYPERSPACE_GEM_LAND_7']);
                    var landingFx;
                    var landingSoundFx;
                    var landingSoundFxPitch;
                    {
                        landingFx = Game.Resources['PIEFFECT_GEM_LANDING_FX'];
                        landingSoundFx = mapHitCountToSound[this.mGemHitCount % mapHitCountToSound.length];
                        landingSoundFxPitch = ((this.mGemHitCount / mapHitCountToSound.length) | 0);
                    }
                    if(this.mAnimSeq.GetCurFrame() > 270 && this.mTicks - this.mGemHitTick > 2) {
                        GameFramework.BaseApp.mApp.PlaySound(landingSoundFx);
                        this.mGemHitTick = (this.mTicks | 0);
                        this.mGemHitCount++;
                    }
                    var splatEffect = new Game.ParticleEffect(landingFx);
                    if((colorIndex >= 0) && (colorIndex <= (Game.DM.EGemColor.HYPERCUBE | 0))) {
                        splatEffect.SetEmitterTint(0, 0, Game.DM.gGemColors[colorIndex + 1]);
                        splatEffect.SetEmitterTint(0, 1, Game.DM.gGemColors[colorIndex + 1]);
                        splatEffect.SetEmitterTint(0, 2, Game.DM.gGemColors[colorIndex + 1]);
                    }
                    gemInfoPointer.mPiece.BindEffect(splatEffect);
                    this.mBoardInfo.mBoard.mPreFXManager.AddEffect(splatEffect);
                }
                if(!gemInfoPointer.mDraw3D) {
                    continue;
                }
                var rot = this.mAnimSeq.GetGemRot(row_2, col_2);
                var pos = this.mAnimSeq.GetGemPos(row_2, col_2);
                var scale = this.mAnimSeq.GetGemScale(row_2, col_2);
                var gemCoords = new GameFramework.geom.Coords3();
                gemCoords.RotateRadX(rot.x);
                gemCoords.RotateRadY(rot.y);
                gemCoords.RotateRadZ(rot.z);
                var mapIndexToScaleFactor = Array.Create(8, 8, 1.14, 1.04, 1.17, 1.04, 1.1, 1.09, 1.1, 1.0);
                if(colorIndex >= 0) {
                    scale = scale.Scale(mapIndexToScaleFactor[colorIndex]);
                }
                gemCoords.Scale(scale.x, scale.y, -scale.z);
                gemCoords.Translate(pos.x, pos.y, pos.z);
                gemInfoPointer.SetCoords(gemCoords);
                gemInfoPointer.mPos = pos;
                gemInfoPointer.mCoords.GetOutboundMatrix(matWorld);
                matWorldViewProj = new GameFramework.geom.Matrix3D();
                matWorldViewProj.CopyFrom(matProj);
                matWorldViewProj.Append(matView);
                matWorldViewProj.Append(matWorld);
                gemInfoPointer.mPosScreen.x = matWorldViewProj.m[matWorldViewProj.m.mIdxMult0 * (3) + 0];
                gemInfoPointer.mPosScreen.y = matWorldViewProj.m[matWorldViewProj.m.mIdxMult0 * (3) + 1];
                gemInfoPointer.mPosScreen.z = matWorldViewProj.m[matWorldViewProj.m.mIdxMult0 * (3) + 2];
                var w = matWorldViewProj.m[matWorldViewProj.m.mIdxMult0 * (3) + 3];
                var scaleFactor = gemInfoPointer.mPosScreen.z;
                gemInfoPointer.mPosScreen = gemInfoPointer.mPosScreen.Scale(1 / w);
                if(scaleFactor < 500) {
                    gemInfoPointer.mScaleScreen = 3.0;
                }

                else {
                    gemInfoPointer.mScaleScreen = 3225.0 / scaleFactor;
                }
                gemInfoPointer.mDistToCamera = (cameraCoords.t.Sub(gemCoords.t)).Magnitude();
                this.mGemRenderOrder.push(gemInfoPointer);
            }
        }
        this.mCameraPersp.GetViewMatrix(matView);
        this.mCameraPersp.GetProjectionMatrix(matProj);
        this.mBoardInfo.mCoords.GetOutboundMatrix(matWorld);
        matWorldViewProj = matProj;
        matWorldViewProj.Append(matView);
        matWorldViewProj.Append(matWorld);
        this.mBoardScreenPos.x = matWorldViewProj.m[matWorldViewProj.m.mIdxMult0 * (3) + 0];
        this.mBoardScreenPos.y = matWorldViewProj.m[matWorldViewProj.m.mIdxMult0 * (3) + 1];
        this.mBoardScreenPos.z = matWorldViewProj.m[matWorldViewProj.m.mIdxMult0 * (3) + 2];
        var wScreen = matWorldViewProj.m[matWorldViewProj.m.mIdxMult0 * (3) + 3];
        var scaleFactorScreen = this.mBoardScreenPos.z;
        this.mBoardScreenPos = this.mBoardScreenPos.Scale(1 / wScreen);
        if((this.mState < Game.HyperspaceUltra.HyperSpaceState.LandOnBoard) && (this.mState >= Game.HyperspaceUltra.HyperSpaceState.BoardShatter)) {
            this.mBoardInfo.mBoard.mOfsX = this.mBoardScreenPos.x * 800;
            this.mBoardInfo.mBoard.mOfsY = this.mBoardScreenPos.y * -600;
        }
        if(this.mState < Game.HyperspaceUltra.HyperSpaceState.LandOnBoard) {
            this.mBoardInfo.mBoard.mScale.SetConstant(3328.328 / scaleFactorScreen);
        }
        this.mGemRenderOrder.sort(ss.Delegate.create(this, this.GemInfoSortPredicate));
    },
    GemInfoSortPredicate : function Game_HyperspaceUltra$GemInfoSortPredicate(gemOne, gemTwo) {
        if(gemOne.mDistToCamera < gemTwo.mDistToCamera) {
            return 1;
        } else if(gemOne.mDistToCamera > gemTwo.mDistToCamera) {
            return -1;
        }
        return 0;
    },
    Update3DPortal : function Game_HyperspaceUltra$Update3DPortal() {
        switch(this.mState) {
            case Game.HyperspaceUltra.HyperSpaceState.Init:
            case Game.HyperspaceUltra.HyperSpaceState.SlideOver:

            {
                return;
            }

            case Game.HyperspaceUltra.HyperSpaceState.GemRise:

            {
                this.mUVAnimTicks += 1.67;
                this.mMinAlpha.IncInVal();
                this.mRingFadeTunnelIn.IncInVal();
                this.mWarpTubeTextureFade.IncInVal();
                this.mUVAnimTicks += 1.67;
                this.mMinAlpha.IncInVal();
                this.mShatterScale.IncInVal();
                this.mRingFadeTunnelIn.IncInVal();
                this.mWarpTubeTextureFade.IncInVal();
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.GemFly:
            case Game.HyperspaceUltra.HyperSpaceState.BoardShatter:

            {
                this.mUVAnimTicks += 1.67;
                this.mMinAlpha.IncInVal();
                this.mShatterScale.IncInVal();
                this.mRingFadeTunnelIn.IncInVal();
                this.mWarpTubeTextureFade.IncInVal();
            }

                break;
            case Game.HyperspaceUltra.HyperSpaceState.PortalRide:
            case Game.HyperspaceUltra.HyperSpaceState.DebugDrawEveryOther:

            {
                this.mUVAnimTicks += 1.67;
            }

                break;
        }
    },
    UpdateSounds : function Game_HyperspaceUltra$UpdateSounds() {
        {
            if(this.mAnimSeq.GetCurFrame() == 68) {
                GameFramework.BaseApp.mApp.PlaySoundEx(Game.Resources['SOUND_HYPERSPACE_SHATTER_2'], 0.5, 0);
            } else if(this.mAnimSeq.GetCurFrame() == 76) {
                GameFramework.BaseApp.mApp.PlaySoundEx(Game.Resources['SOUND_HYPERSPACE_SHATTER_2'], 0.5, 0);
            }
        }
    },
    Draw3DBackground : function Game_HyperspaceUltra$Draw3DBackground(g) {
        var _t1 = g.PushColor(0xff000000);
        try {
            g.FillRect(0, 0, 1920, 1200);
        } finally {
            _t1.Dispose();
        }
    },
    Draw3DWarpTube : function Game_HyperspaceUltra$Draw3DWarpTube(g) {
        this.Draw3DWarpTubeTube(g);
        switch(this.mState) {
            case Game.HyperspaceUltra.HyperSpaceState.GemRise:
            case Game.HyperspaceUltra.HyperSpaceState.GemFly:
            case Game.HyperspaceUltra.HyperSpaceState.BoardShatter:

            {
                this.Draw3DWarpTubeFlare(g);
            }

                break;
            default:

            {
                this.Draw3DWarpTubeCap(g);
            }

                break;
        }
    },
    Draw3DWarpTubeTube : function Game_HyperspaceUltra$Draw3DWarpTubeTube(g) {
        Game.HyperspaceUltra.mG3D.SetBackfaceCulling(true, false);
        Game.HyperspaceUltra.mG3D.SetDepthState(GameFramework.gfx.Graphics3D.ECompareFunc.Less, true);
        Game.HyperspaceUltra.mG3D.SetBlend(GameFramework.gfx.Graphics3D.EBlend.Default, GameFramework.gfx.Graphics3D.EBlend.Default);
        Game.HyperspaceUltra.mG3D.SetTextureWrap(0, true);
        switch(this.mState) {
            case Game.HyperspaceUltra.HyperSpaceState.GemRise:
            case Game.HyperspaceUltra.HyperSpaceState.GemFly:
            case Game.HyperspaceUltra.HyperSpaceState.BoardShatter:

            {
                Game.HyperspaceUltra.mG3D.SetTextureWrapUV(1, true, false);
            }

                break;
            default:

            {
                Game.HyperspaceUltra.mG3D.SetTextureWrap(1, true);
            }

                break;
        }
        var renderEffect = Game.Resources['EFFECT_TUBE_3D'];
        var aRunHandle = renderEffect.Begin(Game.HyperspaceUltra.mG3D, 'Tube3D');
        var _t2 = aRunHandle;
        try {
            var time = this.mUVAnimTicks / 100.0;
            renderEffect.SetFloat('time', time);
            var streamFx = 0.5;
            var brightness = 1.0;
            var alphaVals = Array.Create(4, 4, this.mMinAlpha.get_v(), this.mWarpTubeTextureFade.get_v(), streamFx, brightness);
            renderEffect.SetFloatArray('alphaVals', alphaVals);
            var aMat = new GameFramework.geom.Matrix3D();
            this.mCameraPersp.GetViewMatrix(aMat);
            Game.HyperspaceUltra.mG3D.SetViewTransform(aMat);
            aMat.Identity();
            this.mCameraPersp.GetProjectionMatrix(aMat);
            Game.HyperspaceUltra.mG3D.SetProjectionTransform(aMat);
            var coords = new GameFramework.geom.Coords3();
            coords.Scale(1.0, 1.0, -1.0);
            var matWorld = new GameFramework.geom.Matrix3D();
            coords.GetOutboundMatrix(matWorld);
            Game.HyperspaceUltra.mG3D.SetWorldTransform(matWorld);
            var _t3 = aRunHandle.BeginPass(0);
            try {
                Game.HyperspaceUltra.mG3D.RenderMesh(Game.BejApp.mBejApp.mWarpTube3D);
            } finally {
                _t3.Dispose();
            }
        } finally {
            _t2.Dispose();
        }
    },
    Draw3DWarpTubeCap : function Game_HyperspaceUltra$Draw3DWarpTubeCap(g) {
        if(this.mState != Game.HyperspaceUltra.HyperSpaceState.PortalRide && this.mState != Game.HyperspaceUltra.HyperSpaceState.LandOnBoard) {
            return;
        }
        Game.HyperspaceUltra.mG3D.SetBackfaceCulling(true, false);
        Game.HyperspaceUltra.mG3D.SetDepthState(GameFramework.gfx.Graphics3D.ECompareFunc.Less, false);
        Game.HyperspaceUltra.mG3D.SetBlend(GameFramework.gfx.Graphics3D.EBlend.SrcColor, GameFramework.gfx.Graphics3D.EBlend.One);
        Game.HyperspaceUltra.mG3D.SetTextureWrap(0, true);
        var renderEffect = Game.Resources['EFFECT_TUBECAP_3D'];
        var aRunHandle = renderEffect.Begin(Game.HyperspaceUltra.mG3D, 'TubeCap3D');
        var _t4 = aRunHandle;
        try {
            var time = this.mUVAnimTicks / 100.0;
            renderEffect.SetFloat('time', time);
            var aMat = new GameFramework.geom.Matrix3D();
            this.mCameraPersp.GetViewMatrix(aMat);
            Game.HyperspaceUltra.mG3D.SetViewTransform(aMat);
            aMat.Identity();
            this.mCameraPersp.GetProjectionMatrix(aMat);
            Game.HyperspaceUltra.mG3D.SetProjectionTransform(aMat);
            var coords = new GameFramework.geom.Coords3();
            coords.Scale(1.0, 1.0, -1.0);
            var matWorld = new GameFramework.geom.Matrix3D();
            coords.GetOutboundMatrix(matWorld);
            Game.HyperspaceUltra.mG3D.SetWorldTransform(matWorld);
            var _t5 = aRunHandle.BeginPass(0);
            try {
                Game.HyperspaceUltra.mG3D.RenderMesh(Game.BejApp.mBejApp.mWarpTubeCap3D);
            } finally {
                _t5.Dispose();
            }
        } finally {
            _t4.Dispose();
        }
        Game.HyperspaceUltra.mG3D.SetBlend(GameFramework.gfx.Graphics3D.EBlend.Default, GameFramework.gfx.Graphics3D.EBlend.Default);
    },
    Draw3DWarpTubeFlare : function Game_HyperspaceUltra$Draw3DWarpTubeFlare(g) {
    },
    Draw3DBoard : function Game_HyperspaceUltra$Draw3DBoard(g) {
    },
    Draw2DBoardSmash : function Game_HyperspaceUltra$Draw2DBoardSmash(g) {
        if(!Game.Resources['POPANIM_ANIMS_BOARDSHATTER'].IsActive()) {
            return;
        }
        var shaterAnimWidth = 1500;
        var shaterAnimHeight = 1500;
        var x = 0;
        var y = 0;
        var width = 1600;
        var height = 1200;
        var xOffset = ((((width - shaterAnimWidth) / 2) | 0)) + x + 160;
        var yOffset = ((((height - shaterAnimHeight) / 2) | 0)) + y;
        var _t6 = g.PushTranslate(xOffset, yOffset);
        try {
            var _t7 = g.PushScale(this.mShatterScale.get_v(), this.mShatterScale.get_v(), shaterAnimWidth / 2.0, shaterAnimHeight / 2.0);
            try {
                Game.Resources['POPANIM_ANIMS_BOARDSHATTER'].Draw(g);
            } finally {
                _t7.Dispose();
            }
        } finally {
            _t6.Dispose();
        }
    },
    Draw3DGems2 : function Game_HyperspaceUltra$Draw3DGems2(g) {

        {
            var $srcArray8 = this.mGemRenderOrder;
            for(var $enum8 = 0; $enum8 < $srcArray8.length; $enum8++) {
                var gemInfoPointer = $srcArray8[$enum8];
                if(gemInfoPointer.mDraw3D) {
                    var colorIndex = this.GetGemColor(gemInfoPointer);
                    if(colorIndex < (Game.DM.EGemColor.HYPERCUBE | 0)) {
                    }
                }
            }
        }
    },
    Draw3DGemsEveryOther : function Game_HyperspaceUltra$Draw3DGemsEveryOther(g) {

        {
            var $srcArray9 = this.mGemRenderOrder;
            for(var $enum9 = 0; $enum9 < $srcArray9.length; $enum9++) {
                var gemInfoPointer = $srcArray9[$enum9];
                var colorIndex = this.GetGemColor(gemInfoPointer);
                if((colorIndex >= 0) && (colorIndex < (Game.DM.EGemColor.HYPERCUBE | 0)) && (gemInfoPointer.mPiece.mRow % 2) == 0) {
                }
            }
        }
    },
    Draw3DGems : function Game_HyperspaceUltra$Draw3DGems(g) {
        Game.HyperspaceUltra.mG3D.SetBlend(GameFramework.gfx.Graphics3D.EBlend.Default, GameFramework.gfx.Graphics3D.EBlend.Default);
        var matView = new GameFramework.geom.Matrix3D();
        this.mCameraPersp.GetViewMatrix(matView);
        matView.m[matView.m.mIdxMult0 * (0) + 0] += 0.003;
        matView.m[matView.m.mIdxMult0 * (3) + 0] += 3.0;
        matView.m[matView.m.mIdxMult0 * (1) + 1] += 0.003;
        var matProj = new GameFramework.geom.Matrix3D();
        this.mCameraPersp.GetProjectionMatrix(matProj);
        var renderEffect = Game.Resources['EFFECT_GEM_3D'];
        var aRenderEffectRunHandle = renderEffect.Begin(Game.HyperspaceUltra.mG3D, 'Gem3D');
        var _t10 = aRenderEffectRunHandle;
        try {
            Game.HyperspaceUltra.mG3D.SetViewTransform(matView);
            Game.HyperspaceUltra.mG3D.SetProjectionTransform(matProj);
            var cameraPoistion = this.mCameraPersp.GetCoords().t;
            cameraPoistion = new GameFramework.geom.Vector3(cameraPoistion.x, cameraPoistion.y, cameraPoistion.z * -1.0);
            renderEffect.SetVector('cameraPosition', cameraPoistion);
            renderEffect.SetFloatArray('ambientLightColor', Game.HyperspaceUltra.ambientLightColor);
            renderEffect.SetFloatArray('diffuseLightColor', Game.HyperspaceUltra.diffuseLightColor);
            renderEffect.SetFloatArray('specularLightColor', Game.HyperspaceUltra.specularLightColor);
            Game.HyperspaceUltra.mG3D.SetDepthState(GameFramework.gfx.Graphics3D.ECompareFunc.Less, true);
            Game.HyperspaceUltra.mG3D.SetBackfaceCulling(true, false);
            renderEffect.SetFloat('globalFade', this.mFadeTo3D);
            var aRenderEffectPass = aRenderEffectRunHandle.BeginPass(1);
            var aPass1WorldMatrices = [];
            var matWorld = new GameFramework.geom.Matrix3D();

            {
                var $srcArray11 = this.mGemRenderOrder;
                for(var $enum11 = 0; $enum11 < $srcArray11.length; $enum11++) {
                    var gemInfoPointer = $srcArray11[$enum11];
                    if(gemInfoPointer.mDraw3D) {
                        var colorIndex = this.GetGemColor(gemInfoPointer);
                        if(colorIndex < (Game.DM.EGemColor.HYPERCUBE | 0)) {
                            var distToCameraScale = Math.max(Math.min((gemInfoPointer.mDistToCamera / 3425.0), 1.0), 0.5);
                            var outlineScale = 0.99 + (distToCameraScale * 0.1);
                            var coords = new GameFramework.geom.Coords3();
                            coords.CopyFrom(gemInfoPointer.mCoords);
                            coords.GetOutboundMatrix(matWorld);
                            Game.HyperspaceUltra.mG3D.SetWorldTransform(matWorld);
                            var lightPosition = gemInfoPointer.mCoords.t.Add(Game.HyperspaceUltra.mapColorIndexToLightOffset[colorIndex]);
                            renderEffect.SetVector('lightPosition', lightPosition);
                            renderEffect.SetFloatArray('ambientMaterialColor', Game.HyperspaceUltra.mapColorIndexToMaterial[colorIndex].ambient);
                            renderEffect.SetFloatArray('diffuseMaterialColor', Game.HyperspaceUltra.mapColorIndexToMaterial[colorIndex].diffuse);
                            renderEffect.SetFloatArray('specularMaterialColor', Game.HyperspaceUltra.mapColorIndexToMaterial[colorIndex].specular);
                            renderEffect.SetFloat('specularPower', Game.HyperspaceUltra.mapColorIndexToMaterial[colorIndex].power);
                            Game.HyperspaceUltra.mG3D.RenderMesh(Game.BejApp.mBejApp.mGems3D[colorIndex]);
                        }
                    }
                }
            }
            aRenderEffectPass.Dispose();
            matProj.m[matProj.m.mIdxMult0 * (3) + 2] += 1.0;
            Game.HyperspaceUltra.mG3D.SetProjectionTransform(matProj);
            Game.HyperspaceUltra.mG3D.SetDepthState(GameFramework.gfx.Graphics3D.ECompareFunc.Less, false);
            Game.HyperspaceUltra.mG3D.SetBackfaceCulling(true, false);
            if(this.mState == Game.HyperspaceUltra.HyperSpaceState.FadeTo3D) {
                renderEffect.SetFloat('globalFade', 1.0 - this.mPieceAlpha.get_v());
            }

            else {
                renderEffect.SetFloat('globalFade', this.mFadeTo3D);
            }
            var matWorldScaled = new GameFramework.geom.Matrix3D();
            aRenderEffectPass = aRenderEffectRunHandle.BeginPass(0);

            {
                var $srcArray12 = this.mGemRenderOrder;
                for(var $enum12 = 0; $enum12 < $srcArray12.length; $enum12++) {
                    var gemInfoPointer_2 = $srcArray12[$enum12];
                    if(gemInfoPointer_2.mDraw3D) {
                        var aPiece = gemInfoPointer_2.mPiece;
                        var colorIndex_2 = this.GetGemColor(gemInfoPointer_2);
                        if(colorIndex_2 < (Game.DM.EGemColor.HYPERCUBE | 0)) {
                            gemInfoPointer_2.mCoords.GetOutboundMatrix(matWorld);
                            var coords_2 = new GameFramework.geom.Coords3();
                            coords_2.CopyFrom(gemInfoPointer_2.mCoords);
                            var distToCameraScale_2 = Math.max(Math.min((gemInfoPointer_2.mDistToCamera / 3425.0), 1.0), 0.5);
                            var outlineScale_2 = 0.99 + (distToCameraScale_2 * 0.1);
                            coords_2.Scale(outlineScale_2, outlineScale_2, outlineScale_2);
                            coords_2.GetOutboundMatrix(matWorldScaled);
                            aPass1WorldMatrices.push(matWorld);
                            Game.HyperspaceUltra.mG3D.SetWorldTransform(matWorldScaled);
                            Game.HyperspaceUltra.mG3D.RenderMesh(Game.BejApp.mBejApp.mGems3D[colorIndex_2]);
                        }
                        if((colorIndex_2 == (Game.DM.EGemColor.HYPERCUBE | 0)) || (aPiece.mBoundEffects.length > 0)) {
                            var hasPreFX = false;
                            var hasPostFX = false;
                            for(var anEffectIdx = 0; anEffectIdx < (aPiece.mBoundEffects.length | 0); anEffectIdx++) {
                                var anEffect = aPiece.mBoundEffects[anEffectIdx];
                                hasPreFX |= (anEffect.mFXManager == this.mBoardInfo.mBoard.mPreFXManager);
                                hasPostFX |= (anEffect.mFXManager == this.mBoardInfo.mBoard.mPostFXManager);
                            }
                            var _t13 = g.PushTranslate(160 + (gemInfoPointer_2.mPosScreen.x * 800) + 800, (gemInfoPointer_2.mPosScreen.y * -600) + 600);
                            try {
                                if(hasPreFX || (colorIndex_2 == (Game.DM.EGemColor.HYPERCUBE | 0))) {
                                    aRenderEffectPass.Dispose();
                                    Game.HyperspaceUltra.mG3D.Setup2DDrawing(Math.max(0.0, gemInfoPointer_2.mPosScreen.z + 0.0025));
                                    Game.HyperspaceUltra.mG3D.SetDepthState(GameFramework.gfx.Graphics3D.ECompareFunc.Less, false);
                                    Game.HyperspaceUltra.mG3D.SetBackfaceCulling(false, false);
                                    Game.HyperspaceUltra.mG3D.SetBlend(GameFramework.gfx.Graphics3D.EBlend.Default, GameFramework.gfx.Graphics3D.EBlend.Default);
                                    var prevAlpha = aPiece.mAlpha.get_v();
                                    aPiece.mAlpha.SetConstant(1.0);
                                    if(colorIndex_2 == (Game.DM.EGemColor.HYPERCUBE | 0)) {
                                        var _t14 = g.PushTranslate(-(aPiece.CX()), -(aPiece.CY()));
                                        try {
                                            this.mBoardInfo.mBoard.DrawPiece(g, aPiece, gemInfoPointer_2.mScaleScreen, true);
                                        } finally {
                                            _t14.Dispose();
                                        }
                                    }
                                    if(hasPreFX) {
                                        for(var anEffectIdx_2 = 0; anEffectIdx_2 < (aPiece.mBoundEffects.length | 0); anEffectIdx_2++) {
                                            var anEffect_2 = aPiece.mBoundEffects[anEffectIdx_2];
                                            if(anEffect_2.mFXManager == this.mBoardInfo.mBoard.mPreFXManager) {
                                                var _t15 = g.PushScale(gemInfoPointer_2.mScaleScreen, gemInfoPointer_2.mScaleScreen, 0.0, 0.0);
                                                try {
                                                    var _t16 = g.PushTranslate(-(anEffect_2.mX), -(anEffect_2.mY));
                                                    try {
                                                        anEffect_2.Draw(g);
                                                    } finally {
                                                        _t16.Dispose();
                                                    }
                                                } finally {
                                                    _t15.Dispose();
                                                }
                                            }
                                        }
                                    }
                                    aPiece.mAlpha.SetConstant(prevAlpha);
                                    Game.HyperspaceUltra.mG3D.End2DDrawing();
                                }
                                if(hasPostFX) {
                                    Game.HyperspaceUltra.mG3D.Setup2DDrawing(Math.max(0.0, gemInfoPointer_2.mPosScreen.z - 0.0025));
                                    Game.HyperspaceUltra.mG3D.SetDepthState(GameFramework.gfx.Graphics3D.ECompareFunc.Less, false);
                                    Game.HyperspaceUltra.mG3D.SetBackfaceCulling(false, false);
                                    Game.HyperspaceUltra.mG3D.SetBlend(GameFramework.gfx.Graphics3D.EBlend.Default, GameFramework.gfx.Graphics3D.EBlend.Default);
                                    if(hasPreFX) {
                                        for(var anEffectIdx_3 = 0; anEffectIdx_3 < (aPiece.mBoundEffects.length | 0); anEffectIdx_3++) {
                                            var anEffect_3 = aPiece.mBoundEffects[anEffectIdx_3];
                                            if(anEffect_3.mFXManager == this.mBoardInfo.mBoard.mPostFXManager) {
                                                var _t17 = g.PushScale(gemInfoPointer_2.mScaleScreen, gemInfoPointer_2.mScaleScreen, 0.0, 0.0);
                                                try {
                                                    var _t18 = g.PushTranslate(-(anEffect_3.mX), -(anEffect_3.mY));
                                                    try {
                                                        anEffect_3.Draw(g);
                                                    } finally {
                                                        _t18.Dispose();
                                                    }
                                                } finally {
                                                    _t17.Dispose();
                                                }
                                            }
                                        }
                                    }
                                    Game.HyperspaceUltra.mG3D.End2DDrawing();
                                }
                                Game.HyperspaceUltra.mG3D.SetBlend(GameFramework.gfx.Graphics3D.EBlend.Default, GameFramework.gfx.Graphics3D.EBlend.Default);
                                aRenderEffectPass = aRenderEffectRunHandle.BeginPass(0);
                                Game.HyperspaceUltra.mG3D.SetBackfaceCulling(true, false);
                            } finally {
                                _t13.Dispose();
                            }
                        }
                    }
                }
            }
            aRenderEffectPass.Dispose();
        } finally {
            _t10.Dispose();
        }
    },
    DrawBillboardEffects : function Game_HyperspaceUltra$DrawBillboardEffects(g, gemInfoPointer, front) {
        var colorIndex = this.GetGemColor(gemInfoPointer);
        var aPiece = gemInfoPointer.mPiece;
        var xScreenMax = 1600;
        var xScreenCenter = xScreenMax / 2.0;
        var yScreenMax = 1200;
        var yScreenCenter = yScreenMax / 2.0;
        if(gemInfoPointer.mPosScreen.z >= 1.0) {
            return;
        }
        Game.HyperspaceUltra.mG3D.SetBackfaceCulling(false, false);
        var _t19 = g.PushTranslate(160 + (gemInfoPointer.mPosScreen.x * xScreenCenter) + xScreenCenter, (gemInfoPointer.mPosScreen.y * -yScreenCenter) + yScreenCenter);
        try {
            var didSetup = false;
            if((colorIndex == (Game.DM.EGemColor.HYPERCUBE | 0)) && (!front)) {
                if(!didSetup) {
                    Game.HyperspaceUltra.mG3D.Setup2DDrawing(gemInfoPointer.mPosScreen.z);
                    Game.HyperspaceUltra.mG3D.SetDepthState(GameFramework.gfx.Graphics3D.ECompareFunc.Less, false);
                    didSetup = true;
                }
                var prevAlpha = aPiece.mAlpha.get_v();
                aPiece.mAlpha.SetConstant(1.0);
                var _t20 = g.PushTranslate(-(aPiece.CX()), -(aPiece.CY()));
                try {
                    this.mBoardInfo.mBoard.DrawPiece(g, aPiece, gemInfoPointer.mScaleScreen, true);
                } finally {
                    _t20.Dispose();
                }
                aPiece.mAlpha.SetConstant(prevAlpha);
            }
            for(var anEffectIdx = 0; anEffectIdx < (aPiece.mBoundEffects.length | 0); anEffectIdx++) {
                var anEffect = aPiece.mBoundEffects[anEffectIdx];
                if(((anEffect.mFXManager == this.mBoardInfo.mBoard.mPreFXManager) && (!front)) || ((anEffect.mFXManager == this.mBoardInfo.mBoard.mPostFXManager) && (front))) {
                    if(!didSetup) {
                        Game.HyperspaceUltra.mG3D.Setup2DDrawing(gemInfoPointer.mPosScreen.z);
                        Game.HyperspaceUltra.mG3D.SetDepthState(GameFramework.gfx.Graphics3D.ECompareFunc.Less, false);
                        didSetup = true;
                    }
                    var _t21 = g.PushScale(gemInfoPointer.mScaleScreen, gemInfoPointer.mScaleScreen, 0.0, 0.0);
                    try {
                        var _t22 = g.PushTranslate(-(anEffect.mX), -(anEffect.mY));
                        try {
                            anEffect.Draw(g);
                        } finally {
                            _t22.Dispose();
                        }
                    } finally {
                        _t21.Dispose();
                    }
                }
            }
            if(didSetup) {
                Game.HyperspaceUltra.mG3D.End2DDrawing();
                Game.HyperspaceUltra.mG3D.SetBlend(GameFramework.gfx.Graphics3D.EBlend.Default, GameFramework.gfx.Graphics3D.EBlend.Default);
            }
        } finally {
            _t19.Dispose();
        }
    },
    GetGemColor : function Game_HyperspaceUltra$GetGemColor(gemInfoPointer) {
        return (gemInfoPointer.mPiece.mColor | 0);
    },
    GetZFarClip : function Game_HyperspaceUltra$GetZFarClip() {
        switch(this.mState) {
            case Game.HyperspaceUltra.HyperSpaceState.GemRise:
            case Game.HyperspaceUltra.HyperSpaceState.GemFly:
            case Game.HyperspaceUltra.HyperSpaceState.BoardShatter:

            {
                return 30000.0;
            }

            default:

            {
                return 100000.0;
            }

        }
    },
    GetFocalLength : function Game_HyperspaceUltra$GetFocalLength() {
        var anAspectRatio = GameFramework.BaseApp.mApp.mWidth / GameFramework.BaseApp.mApp.mHeight;
        return 19.9 * anAspectRatio;
    }
}
Game.HyperspaceUltra.staticInit = function Game_HyperspaceUltra$staticInit() {
    Game.HyperspaceUltra.mG3D = null;
    Game.HyperspaceUltra.mHypertubeTextures = Array.Create(2, null);
    Game.HyperspaceUltra.mapColorIndexToMaterial = Array.Create(7, 7, new Game.HyperMaterial(Array.Create(4, null, 0.6, 0.6, 0.6, 0.6), Array.Create(4, null, 1.0, 1.0, 1.0, 1.0), Array.Create(4, null, 1.0, 1.0, 1.0, 0.6), 55.0), new Game.HyperMaterial(Array.Create(4, null, 0.7, 0.7, 0.7, 0.7), Array.Create(4, null, 1.0, 1.0, 1.0, 1.0), Array.Create(4, null, 1.0, 1.0, 1.0, 0.6), 55.0), new Game.HyperMaterial(Array.Create(4, null, 0.7, 0.7, 0.7, 0.7), Array.Create(4, null, 1.0, 1.0, 1.0, 1.0), Array.Create(4, null, 1.0, 1.0, 1.0, 0.6), 55.0), new Game.HyperMaterial(Array.Create(4, null, 0.7, 0.7, 0.7, 0.7), Array.Create(4, null, 1.0, 1.0, 1.0, 1.0), Array.Create(4, null, 1.0, 1.0, 1.0, 0.6), 55.0), new Game.HyperMaterial(Array.Create(4, null, 0.8, 0.8, 0.8, 0.7), Array.Create(4, null, 1.0, 1.0, 1.0, 1.0), Array.Create(4, null, 1.0, 1.0, 1.0, 0.6), 55.0), new Game.HyperMaterial(Array.Create(4, null, 0.7, 0.7, 0.7, 0.7), Array.Create(4, null, 1.0, 1.0, 1.0, 1.0), Array.Create(4, null, 1.0, 1.0, 1.0, 0.6), 55.0), new Game.HyperMaterial(Array.Create(4, null, 0.8, 0.8, 0.8, 0.7), Array.Create(4, null, 1.0, 1.0, 1.0, 1.0), Array.Create(4, null, 1.0, 1.0, 1.0, 0.6), 45.0));
    Game.HyperspaceUltra.mapColorIndexToLightOffset = Array.Create(7, 7, new GameFramework.geom.Vector3(50.0, 150.0, -200.0), new GameFramework.geom.Vector3(50.0, 150.0, -200.0), new GameFramework.geom.Vector3(50.0, 150.0, -200.0), new GameFramework.geom.Vector3(-100.0, -100.0, -200.0), new GameFramework.geom.Vector3(100.0, 50.0, 0.0), new GameFramework.geom.Vector3(50.0, 150.0, -200.0), new GameFramework.geom.Vector3(-100.0, 200.0, 0.0));
    Game.HyperspaceUltra.ambientLightColor = Array.Create(4, 4, 1.0, 1.0, 1.0, 1.0);
    Game.HyperspaceUltra.diffuseLightColor = Array.Create(4, 4, 0.6, 0.6, 0.6, 1.0);
    Game.HyperspaceUltra.specularLightColor = Array.Create(4, 4, 1.0, 1.0, 1.0, 1.0);
}

JS_AddInitFunc(function() {
    Game.HyperspaceUltra.registerClass('Game.HyperspaceUltra', Game.Hyperspace);
});
JS_AddStaticInitFunc(function() {
    Game.HyperspaceUltra.staticInit();
});
Game.HyperspaceUltra.HyperSpaceState = {};
Game.HyperspaceUltra.HyperSpaceState.staticInit = function Game_HyperspaceUltra_HyperSpaceState$staticInit() {
    Game.HyperspaceUltra.HyperSpaceState.Init = 0;
    Game.HyperspaceUltra.HyperSpaceState.SlideOver = 1;
    Game.HyperspaceUltra.HyperSpaceState.FadeTo3D = 2;
    Game.HyperspaceUltra.HyperSpaceState.GemRise = 3;
    Game.HyperspaceUltra.HyperSpaceState.GemFly = 4;
    Game.HyperspaceUltra.HyperSpaceState.BoardShatter = 5;
    Game.HyperspaceUltra.HyperSpaceState.PortalRide = 6;
    Game.HyperspaceUltra.HyperSpaceState.LandOnBoard = 7;
    Game.HyperspaceUltra.HyperSpaceState.FadeFrom3D = 8;
    Game.HyperspaceUltra.HyperSpaceState.Outro = 9;
    Game.HyperspaceUltra.HyperSpaceState.Complete = 10;
    Game.HyperspaceUltra.HyperSpaceState.DebugDrawEveryOther = 11;
    Game.HyperspaceUltra.HyperSpaceState.Max = 12;
    Game.HyperspaceUltra.HyperSpaceState.Nil = -1;
}
JS_AddInitFunc(function() {
    Game.HyperspaceUltra.HyperSpaceState.staticInit();
});
/**
 * @constructor
 */
Game.HyperspaceFallback = function Game_HyperspaceFallback(theBoard) {
    this.mFromCenterPct = new GameFramework.CurvedVal();
    this.mToCenterPct = new GameFramework.CurvedVal();
    this.mBallAlpha = new GameFramework.CurvedVal();
    this.mPrevBkgAlpha = new GameFramework.CurvedVal();
    Game.HyperspaceFallback.initializeBase(this);
    this.mBoard = theBoard;
    this.mBoard = theBoard;
    this.mFromBall = new Game.CrystalBall('', 0);
    this.mToBall = new Game.CrystalBall('', 0);
    this.mToBall.mShowShadow = false;
    this.mFromCenterPct.SetCurve(('b+0,1,0.0025,1,~###  .~###   4####    b####'));
    this.mToCenterPct.SetCurveLinked(('b+0,1,0.003333,1,####   g####     K~###m~###'), this.mFromCenterPct);
    this.mFromBall.mFullPct.SetCurveLinked('b+0,1,0.003333,1,~###x~###   ]####     J####', this.mFromCenterPct);
    this.mFromBall.mScale.SetCurveLinked('b+0,1,0,1,~###|~###  @/k=] 3####     R####', this.mFromCenterPct);
    this.mToBall.mFullPct.SetCurveLinked('b+0,1,0.003333,1,####    i####     8~###', this.mFromCenterPct);
    this.mToBall.mScale.SetCurveLinked('b+0,1,0.003333,1,####   d####      =~###', this.mFromCenterPct);
    this.mBoard.mAlpha.SetCurveRefLinked('Hyperspace_cs_11_10_11__11_45_36_674', this.mFromCenterPct);
    this.mBallAlpha.SetCurveRefLinked('Hyperspace_cs_11_10_11__12_06_32_324', this.mFromCenterPct);
    this.mPrevBkgAlpha.SetCurveRefLinked('Hyperspace_cs_11_10_11__12_08_47_105', this.mFromCenterPct);
    this.mPrevBkgImage = this.mBoard.mBackground.mImage;
    this.mBoard.HyperspaceEvent(Game.Hyperspace.HyperspaceEvent.Start);
}
Game.HyperspaceFallback.prototype = {
    mBoard : null,
    mFromBall : null,
    mToBall : null,
    mFromCenterPct : null,
    mToCenterPct : null,
    mBallAlpha : null,
    mPrevBkgAlpha : null,
    mPrevBkgImage : null,
    GetPieceAlpha : function Game_HyperspaceFallback$GetPieceAlpha() {
        return this.mBoard.mAlpha.get_v();
    },
    Update : function Game_HyperspaceFallback$Update() {
        Game.Hyperspace.prototype.Update.apply(this);
        if(this.mUpdateCnt == 2) {
            this.mBoard.HyperspaceEvent(Game.Hyperspace.HyperspaceEvent.NextBkg);
        }
        if(this.mUpdateCnt == 100) {
            Game.BejApp.mBejApp.PlaySound(Game.Resources['SOUND_NEXTLEVEL']);
        }
        if(this.mUpdateCnt == 240) {
        }
        if(!this.mFromCenterPct.IncInVal()) {
            this.mBoard.HyperspaceEvent(Game.Hyperspace.HyperspaceEvent.Finish);
        }
        if(this.mUpdateCnt == 180) {
            this.mBoard.mSideXOff.SetConstant(0);
            this.mBoard.RandomizeBoard();
            this.mBoard.HyperspaceEvent(Game.Hyperspace.HyperspaceEvent.OldLevelClear);
        }
        if(this.mUpdateCnt == 250) {
            this.mBoard.RandomizeBoard();
        }
        this.mFromBall.Update();
        this.mToBall.Update();
    },
    Draw : function Game_HyperspaceFallback$Draw(g) {
        Game.Hyperspace.prototype.Draw.apply(this, [g]);
        var _t23 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.mPrevBkgAlpha.get_v()));
        try {
            if(this.mPrevBkgImage.mHeight == this.mHeight) {
                g.DrawImage(this.mPrevBkgImage, (((1920 - this.mPrevBkgImage.mWidth) / 2) | 0), 0);
            }

            else {
                var aScaleFactor = this.mHeight / this.mPrevBkgImage.mHeight;
                var _t24 = g.PushScale(aScaleFactor, aScaleFactor, 160, 0);
                try {
                    g.DrawImage(this.mPrevBkgImage, (1920 - this.mPrevBkgImage.mWidth * aScaleFactor) / 2.0, 0.0);
                } finally {
                    _t24.Dispose();
                }
            }
        } finally {
            _t23.Dispose();
        }
        var aPositions = Array.Create(2, 2, new GameFramework.geom.TPoint(250, 600), new GameFramework.geom.TPoint(960, 600));
        var aBalls = Array.Create(2, 2, this.mFromBall, this.mToBall);
        var aCenterPct = Array.Create(2, 2, this.mFromCenterPct.get_v(), this.mToCenterPct.get_v());
        for(var i = 1; i < 2; i++) {
            var aPos = new GameFramework.geom.TPoint(this.mWidth / 2, this.mHeight / 2);
            var _t25 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.mBallAlpha.get_v()));
            try {
                var _t26 = g.PushTranslate(aPos.x, aPos.y);
                try {
                    aBalls[i].mOffset = aPos.subtract(new GameFramework.geom.TPoint(aPos.x, aPos.y));
                    aBalls[i].Draw(g);
                } finally {
                    _t26.Dispose();
                }
            } finally {
                _t25.Dispose();
            }
        }
    }
}
Game.HyperspaceFallback.staticInit = function Game_HyperspaceFallback$staticInit() {
}

JS_AddInitFunc(function() {
    Game.HyperspaceFallback.registerClass('Game.HyperspaceFallback', Game.Hyperspace);
});
JS_AddStaticInitFunc(function() {
    Game.HyperspaceFallback.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\Hyperspace.cs
//LineMap:2=17 7=21 26=19 28=19 31=37 34=41 37=45 38=49 41=53 42=55 43=59 46=65 47=69 48=71 50=74 59=81 70=83 72=83 75=88 78=94 81=98 82=102 85=108 86=112 87=114 96=118 101=120 117=125 120=151 122=139 123=153 128=202 131=206 135=211 139=216 140=218 144=223 157=127 159=127 
//LineMap:164=130 167=132 169=132 172=172 180=182 185=192 193=226 200=235 208=245 216=255 223=264 231=274 239=284 246=293 260=304 263=312 265=311 266=311 267=311 268=311 269=313 287=354 297=372 301=374 303=374 306=375 308=375 311=376 317=368 322=356 325=358 335=379 338=485 
//LineMap:340=426 343=432 344=436 345=443 347=446 348=448 350=451 351=453 352=463 354=488 355=498 356=500 358=505 359=509 360=513 368=528 370=533 373=468 376=472 379=476 382=480 411=384 413=384 416=385 418=385 421=386 423=386 426=541 429=545 430=554 433=558 434=558 435=561 
//LineMap:437=562 440=564 441=564 442=567 444=568 450=582 451=582 452=585 454=586 460=591 461=591 462=594 464=595 470=600 471=600 472=603 474=604 480=609 481=609 482=612 484=613 490=618 491=618 492=621 494=622 500=627 501=627 502=630 504=631 510=636 511=636 512=639 514=640 
//LineMap:520=645 521=645 522=648 524=649 530=654 532=659 537=667 549=686 551=691 552=693 553=693 554=696 556=697 560=700 561=700 562=703 564=704 568=707 569=707 570=710 572=711 578=716 579=716 580=719 582=720 588=725 589=725 590=728 592=729 595=733 596=735 600=738 601=738 
//LineMap:602=741 604=742 612=748 614=752 620=757 621=757 622=760 624=761 629=765 630=765 631=768 633=769 637=772 638=772 639=775 641=776 645=779 647=782 653=787 654=789 658=794 660=795 663=797 667=833 673=840 675=847 676=847 677=850 679=851 680=855 681=857 689=866 693=871 
//LineMap:703=880 704=880 705=883 707=890 709=893 712=895 713=895 714=898 716=899 718=902 728=911 729=911 730=914 732=915 733=917 734=921 735=925 736=927 739=934 740=941 741=946 745=960 746=960 747=963 749=964 753=967 754=967 755=970 757=971 758=973 759=981 765=986 766=986 
//LineMap:767=989 769=990 771=993 775=1000 778=1016 779=1016 780=1019 782=1024 787=1030 794=1036 798=1041 801=1043 802=1043 803=1046 805=1047 809=1050 810=1050 811=1053 813=1054 818=1060 822=1065 825=1067 826=1067 827=1070 832=1074 833=1074 834=1077 836=1080 837=1082 
//LineMap:841=1087 847=1095 848=1095 849=1097 852=1101 854=1102 863=1113 864=1115 865=1117 866=1117 867=1119 869=1122 871=1123 872=1125 875=1127 877=1134 878=1136 880=1139 881=1141 884=1145 891=1151 892=1154 894=1155 899=1161 900=1161 901=1164 903=1167 904=1169 910=1174 
//LineMap:911=1174 912=1177 914=1180 917=1182 923=1191 926=1201 927=1201 928=1203 930=1206 932=1207 935=1209 941=1219 942=1221 945=1225 946=1229 949=1235 950=1239 951=1241 952=1245 960=1257 970=1272 972=1275 973=1277 979=1284 985=1293 987=1297 989=1302 990=1313 993=1325 
//LineMap:995=1328 998=1332 1000=1335 1001=1337 1004=1344 1005=1346 1011=1353 1014=1359 1018=1364 1021=1368 1022=1372 1025=1378 1026=1390 1030=1395 1031=1399 1032=1401 1034=1406 1035=1408 1039=1418 1042=1422 1044=1427 1045=1431 1052=1437 1054=1442 1058=1450 1061=1454 
//LineMap:1064=1463 1067=1467 1069=1472 1070=1476 1075=1482 1077=1504 1084=1512 1091=1518 1092=1520 1093=1522 1095=1523 1098=1523 1099=1527 1101=1528 1105=1534 1113=1541 1114=1543 1115=1545 1117=1546 1124=1552 1125=1552 1126=1554 1127=1556 1129=1557 1132=1559 1138=1566 
//LineMap:1143=1569 1145=1573 1152=1582 1155=1583 1163=1611 1166=1615 1167=1615 1168=1617 1170=1620 1172=1621 1175=1623 1176=1623 1177=1626 1179=1627 1182=1629 1188=1639 1192=1646 1193=1646 1194=1648 1196=1651 1198=1652 1201=1654 1202=1654 1203=1657 1205=1658 1208=1660 
//LineMap:1210=1670 1211=1672 1215=1675 1217=1678 1219=1687 1220=1695 1221=1701 1222=1705 1224=1711 1225=1713 1227=1718 1229=1721 1231=1724 1232=1740 1235=1741 1248=1752 1254=1763 1258=1773 1259=1775 1265=1786 1266=1791 1268=1796 1269=1798 1271=1803 1273=1806 1275=1809 
//LineMap:1276=1816 1279=1817 1290=1820 1293=1827 1297=1898 1301=2007 1307=2014 1309=2017 1313=2022 1315=2027 1318=2029 1321=2030 1334=2034 1336=2038 1338=2038 1345=2050 1353=2063 1357=2065 1361=2067 1362=2071 1369=2148 1371=2157 1372=2159 1374=2164 1376=2167 1377=2169 
//LineMap:1379=2180 1380=2183 1384=2195 1386=2198 1389=2204 1392=2214 1393=2216 1394=2218 1395=2226 1396=2228 1397=2230 1398=2232 1400=2232 1407=2240 1411=2245 1413=2248 1415=2251 1417=2254 1420=2258 1421=2260 1426=2266 1427=2270 1429=2273 1430=2275 1431=2277 1438=2283 
//LineMap:1440=2291 1441=2296 1444=2297 1452=2306 1454=2311 1455=2314 1457=2317 1459=2321 1460=2324 1461=2332 1463=2335 1465=2338 1469=2343 1472=2347 1475=2351 1478=2355 1485=2363 1487=2366 1492=2369 1499=2372 1509=2381 1512=2383 1526=2390 1529=2394 1535=2401 1545=2410 
//LineMap:1548=2412 1562=2419 1564=2422 1576=2430 1584=2442 1588=2447 1590=2450 1592=2455 1596=2460 1597=2462 1600=2466 1601=2474 1609=2483 1611=2486 1614=2487 1620=2489 1622=2496 1625=2500 1627=2503 1633=2510 1639=2515 1652=2521 1664=2529 1672=2536 1673=2538 1675=2541 
//LineMap:1677=2542 1680=2542 1681=2546 1683=2547 1689=2552 1698=466 1699=2085 1700=2132 1701=2144 1708=388 1711=392 1722=406 1723=410 1727=2564 1730=2581 1732=2569 1737=2582 1738=2584 1739=2586 1742=2590 1744=2593 1746=2596 1748=2599 1751=2604 1752=2606 1765=2575 1770=2610 
//LineMap:1773=2614 1777=2619 1779=2638 1782=2644 1786=2649 1792=2657 1794=2660 1798=2665 1801=2669 1804=2671 1811=2677 1815=2680 1827=2685 1830=2689 1832=2694 1833=2696 1836=2698 1839=2700 
//Start:IconButton
/**
 * @constructor
 */
Game.IconButton = function Game_IconButton() {
    Game.IconButton.initializeBase(this);
}
Game.IconButton.prototype = {
    mImage : null,
    mImageCelEnabled : 0,
    mImageCelDisabled : 0,
    mEnabled : true,
    Draw : function Game_IconButton$Draw(g) {
        g.DrawImageCel(this.mImage, 0, 0, this.mEnabled ? this.mImageCelEnabled : this.mImageCelDisabled);
    }
}
Game.IconButton.staticInit = function Game_IconButton$staticInit() {
}

JS_AddInitFunc(function() {
    Game.IconButton.registerClass('Game.IconButton', GameFramework.widgets.ClassicWidget);
});
JS_AddStaticInitFunc(function() {
    Game.IconButton.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\IconButton.cs
//LineMap:2=11 14=16 
//Start:LoadingScreen
/**
 * @constructor
 */
Game.LoadingScreen = function Game_LoadingScreen(theApp) {
    Game.LoadingScreen.initializeBase(this);
    this.mApp = theApp;
}
Game.LoadingScreen.prototype = {
    mApp : null,
    mHasFont : false,
    mFirstDraw : true,
    mEffect : null,
    Draw : function Game_LoadingScreen$Draw(g) {
        g.PushColor(0xff000080);
        g.FillRect(-160, 0, 1920, 1200);
        g.PopColor();
        if(this.mEffect != null) {
            var _t1 = g.PushTranslate(800, 600);
            try {
                this.mEffect.Draw(g);
            } finally {
                _t1.Dispose();
            }
            return;
        }
        if(this.mHasFont) {
            g.SetFont(Game.Resources['FONT_DEFAULT']);
            var aString = 'Loading';
            if((Game.BejApp.mBejApp.mConnecting) && (Game.BejApp.mBejApp.mGroupsLoading == 1)) {
                aString = 'Connecting';
            }
            for(var i = 0; i < (((((this.mUpdateCnt / 80) | 0)) | 0)) % 4; i++) {
                aString += '.';
            }
            g.DrawString(aString, 800 - g.StringWidth('Loading') / 2, 600);
            g.DrawStringEx('(' + GameFramework.BaseApp.mApp.mResourceStreamerList.length + ' resources left)', 800, 650, 0, 0);
            g.DrawStringEx(GameFramework.Utils.ToString(GameFramework.BaseApp.mApp.mCurFPS), 1585, 1185, 0, 1);
        }
    },
    Update : function Game_LoadingScreen$Update() {
        GameFramework.widgets.ClassicWidget.prototype.Update.apply(this);
    }
}
Game.LoadingScreen.staticInit = function Game_LoadingScreen$staticInit() {
}

JS_AddInitFunc(function() {
    Game.LoadingScreen.registerClass('Game.LoadingScreen', GameFramework.widgets.ClassicWidget);
});
JS_AddStaticInitFunc(function() {
    Game.LoadingScreen.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\LoadingScreen.cs
//LineMap:1=3 2=5 5=20 8=21 13=15 17=26 22=42 27=45 33=46 35=61 44=71 45=73 49=112 
//Start:MainMenu
/**
 * @constructor
 */
Game.PartnerLogo = function Game_PartnerLogo() {
    this.mImage = null;
    this.mTime = 0;
    this.mOrgTime = 0;
    this.mAlpha = 0;
}
Game.PartnerLogo.prototype = {
    mImage : null,
    mTime : 0,
    mOrgTime : 0,
    mAlpha : 0
}
Game.PartnerLogo.staticInit = function Game_PartnerLogo$staticInit() {
}

JS_AddInitFunc(function() {
    Game.PartnerLogo.registerClass('Game.PartnerLogo', null);
});
JS_AddStaticInitFunc(function() {
    Game.PartnerLogo.staticInit();
});
/**
 * @constructor
 */
Game.CurvedAlphaButton = function Game_CurvedAlphaButton() {
    this.mAlphaCv = GameFramework.CurvedVal.CreateAsConstant(1.0);
    Game.CurvedAlphaButton.initializeBase(this);
}
Game.CurvedAlphaButton.prototype = {
    mAlphaCv : null,
    Update : function Game_CurvedAlphaButton$Update() {
        this.mAlpha = this.mAlphaCv.get_v();
        GameFramework.widgets.ButtonWidget.prototype.Update.apply(this);
    }
}
Game.CurvedAlphaButton.staticInit = function Game_CurvedAlphaButton$staticInit() {
}

JS_AddInitFunc(function() {
    Game.CurvedAlphaButton.registerClass('Game.CurvedAlphaButton', GameFramework.widgets.ButtonWidget);
});
JS_AddStaticInitFunc(function() {
    Game.CurvedAlphaButton.staticInit();
});
/**
 * @constructor
 */
Game.FrameButton = function Game_FrameButton() {
    Game.FrameButton.initializeBase(this);
}
Game.FrameButton.prototype = {

    Draw : function Game_FrameButton$Draw(g) {
        GameFramework.widgets.ButtonWidget.prototype.Draw.apply(this, [g]);
        g.DrawImage(Game.Resources['IMAGE_BOARD_HDSD_BUTTON_FRAME'].get_OffsetImage(), -160.0 - this.mX, 0.0 - this.mY);
    }
}
Game.FrameButton.staticInit = function Game_FrameButton$staticInit() {
}

JS_AddInitFunc(function() {
    Game.FrameButton.registerClass('Game.FrameButton', GameFramework.widgets.ButtonWidget);
});
JS_AddStaticInitFunc(function() {
    Game.FrameButton.staticInit();
});
/**
 * @constructor
 */
Game.TextButton = function Game_TextButton(theBtnText, theId) {
    this.mScale$2 = new GameFramework.CurvedVal();
    Game.TextButton.initializeBase(this, [theId]);
    this.mFont = Game.Resources['FONT_MENU_BTN'];
    this.mScale$2.SetConstant(1.0);
    this.mText = theBtnText;
    this.refreshExtents();
}
Game.TextButton.prototype = {
    mText : null,
    mBackPaddingX : 30.0,
    mBackPaddingY : 20.0,
    mScale$2 : null,
    mBackColor : 0,
    SetFont : function Game_TextButton$SetFont(theFont) {
        this.mFont = theFont;
        this.refreshExtents();
    },
    refreshExtents : function Game_TextButton$refreshExtents() {
        this.mWidth = this.mFont.StringWidth(this.mText) + this.mBackPaddingX;
        this.mHeight = this.mFont.GetHeight() + this.mBackPaddingY;
    },
    get_BackPaddingX : function Game_TextButton$get_BackPaddingX() {
        return this.mBackPaddingX;
    },
    set_BackPaddingX : function Game_TextButton$set_BackPaddingX(value) {
        this.mBackPaddingX = value;
        this.refreshExtents();
    },
    get_BackPaddingY : function Game_TextButton$get_BackPaddingY() {
        return this.mBackPaddingY;
    },
    set_BackPaddingY : function Game_TextButton$set_BackPaddingY(value) {
        this.mBackPaddingY = value;
        this.refreshExtents();
    },
    Draw : function Game_TextButton$Draw(g) {
        Game.Bej3Button.prototype.Draw.apply(this, [g]);
        if(this.mBackColor != 0) {
            var _t1 = g.PushColor(this.mBackColor);
            try {
                g.FillRect(0, 0, this.mWidth, this.mHeight);
            } finally {
                _t1.Dispose();
            }
        }
        var aScale = this.mScale$2.get_v();
        if(aScale != 1.0) {
            g.PushScale(aScale, aScale, this.mWidth / 2, this.mHeight / 2);
        }
        g.SetFont(this.mFont);
        this.mFont.PushLayerColor('OUTLINE', 0xffffff);
        this.mFont.PushLayerColor('MAIN', 0xff9c3762);
        this.mFont.PushLayerColor('GLOW', 0xffffff);
        g.DrawString(this.mText, this.mBackPaddingX / 2.0, -this.mBackPaddingY / 2.0 + this.mHeight - this.mFont.GetPhysDescent());
        this.mFont.PopLayerColor('GLOW');
        this.mFont.PopLayerColor('OUTLINE');
        this.mFont.PopLayerColor('MAIN');
        if(aScale != 1.0) {
            g.PopMatrix();
        }
    },
    WantsMouseEvent : function Game_TextButton$WantsMouseEvent(x, y) {
        return Game.Bej3Button.prototype.WantsMouseEvent.apply(this, [x, y]);
    }
}
Game.TextButton.staticInit = function Game_TextButton$staticInit() {
}

JS_AddInitFunc(function() {
    Game.TextButton.registerClass('Game.TextButton', Game.Bej3Button);
});
JS_AddStaticInitFunc(function() {
    Game.TextButton.staticInit();
});
/**
 * @constructor
 */
Game.MainMenu = function Game_MainMenu() {
    this.mSelectedMode = Game.MainMenu.EMode._NONE;
    this.mPartnerLogos = [];
    this.mCamera = new GameFramework.gfx.PerspectiveCamera();
    this.mButtonCamera = new GameFramework.gfx.PerspectiveCamera();
    this.mRotation = new GameFramework.CurvedVal();
    this.mButtonRotationAdd = new GameFramework.CurvedVal();
    this.mForeBlackAlpha = new GameFramework.CurvedVal();
    this.mBkgBlackAlpha = new GameFramework.CurvedVal();
    this.mBWPct = new GameFramework.CurvedVal();
    this.mLogoAlpha = new GameFramework.CurvedVal();
    this.mLoaderAlpha = new GameFramework.CurvedVal();
    this.mGeomGlowAlpha = new GameFramework.CurvedVal();
    this.mCrystalAppearAlpha = new GameFramework.CurvedVal();
    this.mTitleAlpha = new GameFramework.CurvedVal();
    this.mOfflineUIAlpha = new GameFramework.CurvedVal();
    this.mTipTextAlpha = new GameFramework.CurvedVal();
    this.mBtns = [];
    this.mSDButtonTextAlpha = GameFramework.CurvedVal.CreateAsConstant(0.0);
    this.mHDButtonTextAlpha = GameFramework.CurvedVal.CreateAsConstant(0.0);
    this.Draw_txtAlpha = new GameFramework.CurvedVal('b;0,1,0.01,5,####  ,####K~###      ^~###m####');
    Game.MainMenu.initializeBase(this);
    Game.BejApp.mBejApp.mProfile.LoadProfile();
    this.mNeedsInit = true;
    this.mBkgBlackAlpha.SetConstant(0.0);
    this.mForeBlackAlpha.SetCurve('b;0,1,0.00125,1,~### Q~###        O####');
    this.mBWPct.SetConstant(1.0);
    this.mLogoAlpha.SetCurve('b;0,1,0.005,1,####         ~~###');
    this.mLoaderAlpha.SetCurve('b;0,1,0.005,1,####         ~~###');
    this.mTipTextAlpha.SetCurve('b;0,1,0.002,1,#### O####    R~###   }~###');
    this.mGeomGlowAlpha.SetConstant(1.0);
    this.mCrystalAppearAlpha.SetConstant(0.0);
    this.mTitleAlpha.SetConstant(0);
    this.mOfflineUIAlpha.SetConstant(0);
    this.CheckNeedsInit();
}
Game.MainMenu.prototype = {
    mSelectedMode : null,
    mNeedsInit : true,
    mPartnerLogos : null,
    mPartnerBlackAlpha : 0,
    mCamera : null,
    mButtonCamera : null,
    mRotation : null,
    mButtonRotationAdd : null,
    mForeBlackAlpha : null,
    mBkgBlackAlpha : null,
    mBWPct : null,
    mLogoAlpha : null,
    mLoaderAlpha : null,
    mGeomGlowAlpha : null,
    mCrystalAppearAlpha : null,
    mTitleAlpha : null,
    mOfflineUIAlpha : null,
    mTipTextAlpha : null,
    mHighestVirtFPS : 0,
    mBtns : null,
    mBackground : null,
    mPlayBackground : null,
    mLeftButton : null,
    mRightButton : null,
    mRecordsButton : null,
    mSDButtonTextAlpha : null,
    mSDButton : null,
    mHDButtonTextAlpha : null,
    mHDButton : null,
    mMenuButton : null,
    mUserNameFont : null,
    mDispLoadPct : 0,
    mLoaded : null,
    mFinishedLoadSequence : null,
    mSwitchedMusic : null,
    mDrawMainMenu : true,
    mHasLoaderResources : true,
    mHighestResCount : 1,
    Draw_txtAlpha : null,

    // invoked when Init group resource is loaded
    InitLoadingComplete : function Game_MainMenu$InitLoadingComplete() {
        // add standard resolution button
        var aButton = new GameFramework.widgets.ButtonWidget();
        aButton.mButtonImage = Game.Resources['IMAGE_BOARD_SD'];
        aButton.mX = aButton.mButtonImage.mOffsetX - 160;
        aButton.mY = aButton.mButtonImage.mOffsetY;
        aButton.mWidth = aButton.mButtonImage.mWidth;
        aButton.mHeight = aButton.mButtonImage.mHeight;
        if(Game.BejApp.mBejApp.mArtRes == 768) {
            aButton.mNormalCel = 0;
            aButton.mOverImage = aButton.mButtonImage;
            aButton.mOverCel = 1;
            aButton.mDownImage = aButton.mButtonImage;
            aButton.mDownCel = 1;
        } else {
            aButton.mNormalCel = 2;
            aButton.mDisabled = true;
        }
        aButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.SDClicked));
        this.AddWidget(aButton);
        this.mSDButton = aButton;

        // add high resolution button
        aButton = new Game.FrameButton();
        aButton.mButtonImage = Game.Resources['IMAGE_BOARD_HD'];
        aButton.mX = aButton.mButtonImage.mOffsetX - 160;
        aButton.mY = aButton.mButtonImage.mOffsetY;
        aButton.mWidth = aButton.mButtonImage.mWidth;
        aButton.mHeight = aButton.mButtonImage.mHeight;
        if(Game.BejApp.mBejApp.mArtRes == 480) {
            aButton.mNormalCel = 0;
            aButton.mOverImage = aButton.mButtonImage;
            aButton.mOverCel = 1;
            aButton.mDownImage = aButton.mButtonImage;
            aButton.mDownCel = 1;
        } else {
            aButton.mNormalCel = 2;
            aButton.mDisabled = true;
        }
        aButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.HDClicked));
        this.AddWidget(aButton);
        this.mHDButton = aButton;
    },

    HandleMenuClicked : function Game_MainMenu$HandleMenuClicked(e) {
        var aDialog = new Game.OptionsDialog(false);
        Game.BejApp.mBejApp.mDialogMgr.AddDialog(aDialog);
    },
    SDConfirmed : function Game_MainMenu$SDConfirmed(e) {
        Game.BejApp.mBejApp.ChangeArtRes(480);
    },
    SDClicked : function Game_MainMenu$SDClicked(e) {
        if(this.mLoaded) {
            var aDialog = Game.BejApp.mBejApp.DoModalDialog('SWITCH RESOLUTION', 'Are you sure you want to switch to Standard Definition?\n\nThis will reload the game.', null, GameFramework.widgets.Dialog.BUTTONS_YES_NO);
            aDialog.mYesButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.SDConfirmed));
            aDialog.mNoButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(Game.BejApp.mBejApp, Game.BejApp.mBejApp.ButtonCloseDialog));
        }

        else {
            this.SDConfirmed(e);
        }
    },
    HDConfirmed : function Game_MainMenu$HDConfirmed(e) {
        Game.BejApp.mBejApp.ChangeArtRes(768);
    },
    HDClicked : function Game_MainMenu$HDClicked(e) {
        if(this.mLoaded) {
            var aDialog = Game.BejApp.mBejApp.DoModalDialog('SWITCH RESOLUTION', 'Are you sure you want to switch to High Definition?\n\nThis will reload the game.', null, GameFramework.widgets.Dialog.BUTTONS_YES_NO);
            aDialog.mYesButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.HDConfirmed));
            aDialog.mNoButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(Game.BejApp.mBejApp, Game.BejApp.mBejApp.ButtonCloseDialog));
        }

        else {
            this.HDConfirmed(e);
        }
    },
    Reset : function Game_MainMenu$Reset() {
    },
    CheckNeedsInit : function Game_MainMenu$CheckNeedsInit() {
        if(!this.mNeedsInit) {
            return false;
        } else if(!Game.BejApp.mBejApp.mLoadingThreadComplete) {
            return true;
        }
        this.mNeedsInit = false;
        this.mRotation.SetConstant(0);
        this.mLeftButton = new Game.CrystalBall('CLASSIC', (Game.MainMenu.EId.ClassicBtn | 0));
        this.mBtns[(Game.MainMenu.EId.ClassicBtn | 0)] = this.mLeftButton;
        this.AddWidget(this.mLeftButton);
        this.mRightButton = new Game.CrystalBall('SPEED', (Game.MainMenu.EId.SpeedBtn | 0));
        this.mBtns[(Game.MainMenu.EId.SpeedBtn | 0)] = this.mRightButton;
        this.AddWidget(this.mRightButton);
        this.mRecordsButton = new Game.CrystalBall('RECORDS', (Game.MainMenu.EId.RecordsBtn | 0));
        this.mBtns[(Game.MainMenu.EId.RecordsBtn | 0)] = this.mRecordsButton;
        this.AddWidget(this.mRecordsButton);
        for(var i = 0; i < this.mBtns.length; ++i) {
            this.mBtns[i].AddEventListener(GameFramework.widgets.WidgetEvent.MOUSE_DOWN, ss.Delegate.create(this, this.ButtonDepress));
            this.mBtns[i].AddEventListener(GameFramework.widgets.WidgetEvent.MOUSE_ENTER, ss.Delegate.create(this, this.ButtonMouseEnter));
        }
        this.mUserNameFont = null;
        this.mDrawMainMenu = true;
        this.mLeftButton.mVisible = false;
        this.mRightButton.mVisible = false;
        this.mRecordsButton.mVisible = false;
        this.mLoaded = false;
        this.mSwitchedMusic = false;
        this.mFinishedLoadSequence = false;
        this.SetupBackground();
        return false;
    },
    AddMainMenuBtn : function Game_MainMenu$AddMainMenuBtn() {
        var aButton = new Game.CurvedAlphaButton();
        aButton.mAlphaCv.SetCurveRef('MainMenu_cs_11_21_11__15_34_43_243');
        aButton.mButtonImage = Game.Resources['IMAGE_BOARD_MENUBTN'];
        aButton.mX = aButton.mButtonImage.mOffsetX - 160;
        aButton.mY = aButton.mButtonImage.mOffsetY;
        aButton.mWidth = aButton.mButtonImage.mWidth;
        aButton.mHeight = aButton.mButtonImage.mHeight;
        aButton.mFont = Game.Resources['FONT_FLAREGOTHICBOLD42'];
        aButton.mLabel = 'MENU';
        Game.BejApp.mBejApp.AddButtonSounds(aButton);
        aButton.mLabelYOfs = -10;
        aButton.mNormalCel = 0;
        aButton.mOverImage = aButton.mButtonImage;
        aButton.mOverCel = 1;
        aButton.mDownImage = aButton.mButtonImage;
        aButton.mDownCel = 1;
        aButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.HandleMenuClicked));
        this.AddWidget(aButton);
        this.mMenuButton = aButton;
    },
    SetupBackground : function Game_MainMenu$SetupBackground() {
    },
    Update : function Game_MainMenu$Update() {
        if(!Game.BejApp.mBejApp.mInitLoadingComplete) {
            GameFramework.widgets.ClassicWidget.prototype.Update.apply(this);
            return;
        }
        if((this.mSDButton != null) && (this.mSDButton.mIsOver) & (!this.mSDButton.mDisabled)) {
            if(this.mSDButtonTextAlpha.GetOutFinalVal() != 1.0) {
                this.mSDButtonTextAlpha.Intercept('MainMenu_cs_11_29_11__14_35_51_418');
            }
        } else {
            if(this.mSDButtonTextAlpha.GetOutFinalVal() != 0.0) {
                this.mSDButtonTextAlpha.Intercept('MainMenu_cs_11_29_11__14_37_36_539');
            }
        }
        if((this.mHDButton != null) && (this.mHDButton.mIsOver) & (!this.mHDButton.mDisabled)) {
            if(this.mHDButtonTextAlpha.GetOutFinalVal() != 1.0) {
                this.mHDButtonTextAlpha.Intercept('MainMenu_cs_11_29_11__14_35_51_418');
            }
        } else {
            if(this.mHDButtonTextAlpha.GetOutFinalVal() != 0.0) {
                this.mHDButtonTextAlpha.Intercept('MainMenu_cs_11_29_11__14_37_36_539');
            }
        }
        this.CheckNeedsInit();
        this.mVisible = ((Game.BejApp.mBejApp.mBoard == null) || (!Game.BejApp.mBejApp.mBoard.mVisible) || ((Game.BejApp.mBejApp.mBoard.mAlpha.GetOutVal() < 1.0) && (Game.BejApp.mBejApp.mBoard.mHyperspace == null)));
        if((!this.IsTransitioning()) && (this.mVisible) && (Game.BejApp.mBejApp.mBoard != null)) {
            Game.BejApp.mBejApp.mBoard.RemoveSelf();
            Game.BejApp.mBejApp.mBoard.Dispose();
            Game.BejApp.mBejApp.mBoard = null;
        }
        this.mDrawMainMenu = this.mVisible;
        if(this.mLoaded) {
            this.mLeftButton.mVisible = this.mDrawMainMenu;
            this.mRightButton.mVisible = this.mDrawMainMenu;
            this.mRecordsButton.mVisible = this.mDrawMainMenu;
        }
        GameFramework.widgets.ClassicWidget.prototype.Update.apply(this);
        if(!this.mDrawMainMenu) {
            return;
        }
        if(this.mPartnerLogos.length > 0) {
            this.mPartnerBlackAlpha = 1.0;
            var pl = this.mPartnerLogos[0];
            if((pl.mAlpha < 255) && (pl.mTime == pl.mOrgTime)) {
                pl.mAlpha += 5;
                if(pl.mAlpha >= 255) {
                    pl.mAlpha = 255;
                }
            } else if(--pl.mTime <= 0) {
                pl.mAlpha -= 5;
                if(pl.mAlpha <= 0) {
                    this.mPartnerLogos.removeAt(0);
                }
            }
            return;
        }

        else {
            this.mPartnerBlackAlpha = Math.max(0.0, this.mPartnerBlackAlpha - 0.05);
        }
        if((this.mLoaded) && (this.mRotation.GetOutVal() == 0) && (!this.mFinishedLoadSequence)) {
            this.AddMainMenuBtn();
            this.mFinishedLoadSequence = true;
            {
                if(Game.BejApp.mBejApp.mProfile.mProfileName.length == 0) {
                    Game.BejApp.mBejApp.PlayVoice(Game.Resources['SOUND_VOICE_WELCOMETOBEJEWELED']);
                }

                else {
                    Game.BejApp.mBejApp.PlayVoice(Game.Resources['SOUND_VOICE_WELCOMEBACK']);
                }
            }
        }
        if((this.mLoaded) && (this.mRotation.GetOutVal() == 0) && (Game.BejApp.mBejApp.mProfile.mProfileName.length == 0)) {
        }
        if(this.mLeftButton != null && this.mLeftButton.mFullPct.GetOutVal() == 1.0) {
            this.mLeftButton.mScale.SetConstant(0.17);
            this.mLeftButton.mFullPct.SetConstant(0.0);
            this.mVisible = false;
            return;
        }
        if(this.mRightButton != null && this.mRightButton.mFullPct.GetOutVal() == 1.0) {
            this.mRightButton.mFullPct.SetConstant(0.0);
            this.mRightButton.mScale.SetConstant(0.17);
            this.mVisible = false;
            return;
        }
        if(this.mRecordsButton != null) {
            this.mRecordsButton.Move(this.mWidth / 2 - this.mRecordsButton.mWidth / 2, this.mHeight / 2 + 250);
        }
        if(Game.BejApp.mBejApp.mProfile.mProfileName.length == 0) {
            if((!this.mOfflineUIAlpha.IsDoingCurve()) && (this.mOfflineUIAlpha.GetOutVal() > 0)) {
                this.mOfflineUIAlpha.SetCurveMult('b;0,1,0.025,1,~###         ~####');
            }
        }

        else {
            if((!this.mOfflineUIAlpha.IsDoingCurve()) && (this.mOfflineUIAlpha.GetOutVal() == 0) && (this.mRotation.GetOutVal() == 0) && (!this.mRotation.IsDoingCurve())) {
                this.mOfflineUIAlpha.SetCurve('b;0,1,0.025,1,####         ~~###');
            }
        }
        this.mHighestResCount = ((Math.max(GameFramework.BaseApp.mApp.GetResourceStreamerLoadingCount(), this.mHighestResCount)) | 0);
        var aLoadPct = (this.mHighestResCount - GameFramework.BaseApp.mApp.GetResourceStreamerLoadingCount()) / this.mHighestResCount;
        if(Game.BejApp.mBejApp.mLoadingThreadComplete) {
            aLoadPct = 1.0;
        }
        this.mDispLoadPct += Math.min(Math.max(0, aLoadPct - this.mDispLoadPct), Math.max(0.02, (aLoadPct - this.mDispLoadPct) * 0.02));
        if((!this.mNeedsInit) && (!this.mLoaded) && (this.mDispLoadPct >= 0.995) && (Game.BejApp.mBejApp.mLoadingThreadComplete)) {
            Game.BejApp.mBejApp.AddButtonSounds(this.mSDButton);
            Game.BejApp.mBejApp.AddButtonSounds(this.mHDButton);
            this.mTipTextAlpha.SetCurveMult('b;0,1,0.005,1,~###   R~###      N####');
            this.mBWPct.SetCurve('b;0,1,0.0025,1,~###b~###         ?####');
            this.mLogoAlpha.SetCurve('b;0,1,0.006667,1,~###         ~####');
            this.mButtonRotationAdd.SetCurveMult('b;0,1,0.00303,1,~###         ~####');
            this.mGeomGlowAlpha.SetCurve('b;0,1,0.005,1,~###         ~####');
            this.mLoaderAlpha.SetCurve('b;0,1,0.01,1,~###         ~####');
            this.mCrystalAppearAlpha.SetCurve('b;0,1,0.006667,1,####         ~~###');
            this.mTitleAlpha.SetCurve('b;0,1,0.001429,1,#########  3~###       n~###');
            if(Game.BejApp.mBejApp.mProfile.mProfileName.length > 0) {
                this.mOfflineUIAlpha.SetCurve('b;0,1,0.001429,1,####       s#### Q~###Z~###');
            }
            this.mLeftButton.mScale.SetCurve('b;0,0.335,0.006667,1,####   P####      PP###');
            this.mRightButton.mScale.SetCurve('b;0,0.335,0.006667,1,####   P####      PP###');
            this.mRecordsButton.mScale.SetCurve('b;0,0.1,0.006667,1,####   P####      P~###');
            this.mLeftButton.mVisible = true;
            this.mRightButton.mVisible = true;
            this.mRecordsButton.mVisible = true;
            if(!this.mSwitchedMusic) {
                this.mSwitchedMusic = true;
            }
            this.mLoaded = true;
            this.ResizeButtons();
        }
        if(((aLoadPct >= 0.2))) {
            this.mBkgBlackAlpha.SetCurve('b;0,1,0.005,1,####         ~~###');
        }
        if(this.mRotation.HasBeenTriggered()) {
            this.ResizeButtons();
        }
        if(this.mRotation.IsInitialized()) {
            var aStarsHeight = this.mHasLoaderResources ? 1500 : 0;
        }
        if(!this.mLoaded) {
            return;
        }
        var anAspectRatio = Game.BejApp.mBejApp.mWidth / Game.BejApp.mBejApp.mHeight;
        var aLensAngle = 38.5 * anAspectRatio;
        this.mCamera.Init(aLensAngle, anAspectRatio, 0.1, 1000.0);
        this.mCamera.LookAt$2(new GameFramework.geom.Vector3(0, 0, (0.25)), new GameFramework.geom.Vector3(0, 10.0, (2.35)), new GameFramework.geom.Vector3(0, 0, 1));
        this.mButtonCamera.Init(aLensAngle, anAspectRatio, 0.1, 1000.0);
        this.mButtonCamera.LookAt$2(new GameFramework.geom.Vector3(0, 0, (0.25)), new GameFramework.geom.Vector3(0, 10.0, (2.35)), new GameFramework.geom.Vector3(0, 0, 1));
        var aTransCoords = new GameFramework.geom.Coords3();
        aTransCoords.Translate(0, -0.4, 0);
        this.mCamera.SetCoords(this.mCamera.GetCoords().Leave(aTransCoords));
        this.mButtonCamera.SetCoords(this.mButtonCamera.GetCoords().Leave(aTransCoords));
        var aRotCoords = new GameFramework.geom.Coords3();
        aRotCoords.RotateRadZ((this.mRotation.GetOutVal() * -0.78));
        this.mCamera.SetCoords(this.mCamera.GetCoords().Leave(aRotCoords));
        aRotCoords.RotateRadZ(this.mButtonRotationAdd.GetOutVal());
        this.mButtonCamera.SetCoords(this.mButtonCamera.GetCoords().Leave(aRotCoords));
        var aScreenPt = this.mButtonCamera.WorldToScreen(new GameFramework.geom.Vector3(0, 2.0, 0.7));
        var aW = 180;
        var aH = 180;
        var aPtAct = new GameFramework.geom.TPoint(aScreenPt.x * 1600, aScreenPt.y * 1200);
        var aPtCenter = new GameFramework.geom.TPoint(this.mWidth / 2, this.mHeight / 2);
        var aPt = new GameFramework.geom.TPoint(aPtCenter.x * this.mLeftButton.mFullPct.GetOutVal() + aPtAct.x * (1.0 - this.mLeftButton.mFullPct.GetOutVal()), aPtCenter.y * this.mLeftButton.mFullPct.GetOutVal() + aPtAct.y * (1.0 - this.mLeftButton.mFullPct.GetOutVal()));
        this.mRecordsButton.mOffset.x = 0;
        this.mRecordsButton.mOffset.y = 0;
        this.mRecordsButton.Resize((aPtCenter.x | 0) - ((aW / 2) | 0), (aPtCenter.y | 0) - ((aH / 2) | 0) + 350, aW, aH);
        this.mRecordsButton.mZ = aScreenPt.z;
        this.mLeftButton.mOffset.x = aPt.x - (aPt.x | 0);
        this.mLeftButton.mOffset.y = aPt.y - (aPt.y | 0);
        this.mLeftButton.Resize((aPt.x | 0) - ((aW / 2) | 0), (aPt.y | 0) - ((aH / 2) | 0), aW, aH);
        this.mLeftButton.mZ = aScreenPt.z;
        aW = 120;
        aH = 120;
        aScreenPt = this.mButtonCamera.WorldToScreen(new GameFramework.geom.Vector3(-0.602, 1.93, 0.54));
        aScreenPt.x = 0.5 * this.mLeftButton.mFullPct.GetOutVal() + aScreenPt.x * (1.0 - this.mLeftButton.mFullPct.GetOutVal());
        aScreenPt.y = 0.5 * this.mLeftButton.mFullPct.GetOutVal() + aScreenPt.y * (1.0 - this.mLeftButton.mFullPct.GetOutVal());
        aPt = new GameFramework.geom.TPoint(aScreenPt.x * 1600, aScreenPt.y * 1200);
        this.mLeftButton.Resize((aPt.x | 0) - ((aW / 2) | 0), (aPt.y | 0) - ((aH / 2) | 0), aW, aH);
        this.mLeftButton.mZ = aScreenPt.z;
        this.mLeftButton.mMouseVisible = !this.mRotation.IsDoingCurve();
        if(this.mRotation.GetOutVal() < 0) {
            this.mLeftButton.mTextAlpha = this.mTitleAlpha.GetOutVal();
        }
        aScreenPt = this.mButtonCamera.WorldToScreen(new GameFramework.geom.Vector3(0.602, 1.93, 0.54));
        aScreenPt.x = 0.5 * this.mRightButton.mFullPct.GetOutVal() + aScreenPt.x * (1.0 - this.mRightButton.mFullPct.GetOutVal());
        aScreenPt.y = 0.5 * this.mRightButton.mFullPct.GetOutVal() + aScreenPt.y * (1.0 - this.mRightButton.mFullPct.GetOutVal());
        aPt = new GameFramework.geom.TPoint(aScreenPt.x * 1600, aScreenPt.y * 1200);
        this.mRightButton.Resize((aPt.x | 0) - ((aW / 2) | 0), (aPt.y | 0) - ((aH / 2) | 0), aW, aH);
        this.mRightButton.mZ = aScreenPt.z;
        this.mRightButton.mMouseVisible = (!this.mRotation.IsDoingCurve());
        if(this.mRotation.GetOutVal() > 0) {
            this.mRightButton.mTextAlpha = this.mTitleAlpha.GetOutVal();
        }
    },
    Draw : function Game_MainMenu$Draw(g) {
        if(!this.mDrawMainMenu) {
            return;
        }
        if((this.mPartnerBlackAlpha > 0) && (this.mTitleAlpha.get_v() < 1.0)) {
            var _t2 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(0, 0, 0, ((255.0 * this.mPartnerBlackAlpha) | 0)));
            try {
                g.FillRect(0, 0, this.mWidth, this.mHeight);
            } finally {
                _t2.Dispose();
            }
        }
        if(!Game.BejApp.mBejApp.mInitLoadingComplete) {
            var _t3 = g.PushColor(0xff000000);
            try {
                g.FillRect(0, 0, this.mWidth, this.mHeight);
            } finally {
                _t3.Dispose();
            }
            if(this.mUpdateCnt > 200) {
                for(var i = 0; i < 12; i++) {
                    var anOffset = i + (((this.mUpdateCnt / 6) | 0));
                    var anAngle = (anOffset / 12.0) * Math.PI * 2.0;
                    var aX = g.GetSnappedX(this.mWidth / 2 + Math.cos(anAngle) * 80);
                    var aY = g.GetSnappedY(this.mHeight / 2 + Math.sin(anAngle) * 80);
                    var _t4 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(Math.max(0.2, (i / 11.0))));
                    try {
                        g.FillRect(aX, aY, 6, 6);
                    } finally {
                        _t4.Dispose();
                    }
                }
            }
            return;
        }
        if(this.mPartnerLogos.length > 0) {
            var pl = this.mPartnerLogos[0];
            var _t5 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, pl.mAlpha));
            try {
                g.DrawImage(pl.mImage, 160, 0);
            } finally {
                _t5.Dispose();
            }
            return;
        }
        var aBackAlpha = Math.min(1.0, 2.3 - this.mDispLoadPct * this.mBkgBlackAlpha.GetOutVal() * 2.0);
        var aColor = Math.max(0.0, Math.min(1.0, this.mDispLoadPct * this.mBkgBlackAlpha.GetOutVal() * 3.0));
        aBackAlpha -= aColor * 0.4;
        if(this.mTitleAlpha.get_v() < 1.0) {
            var _t6 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(0, 0, 0, ((255 * aBackAlpha) | 0)));
            try {
                g.FillRect(GameFramework.BaseApp.mApp.mX, GameFramework.BaseApp.mApp.mY, GameFramework.BaseApp.mApp.mDrawWidth, GameFramework.BaseApp.mApp.mDrawHeight);
            } finally {
                _t6.Dispose();
            }
        }
        var aGeomGlowAlpha = Math.min(1.0, 1.9 - this.mDispLoadPct * 2.1);
        if(Game.BejApp.mBejApp.get_Is3D()) {
        }

        else {
        }
        if(this.mTitleAlpha.GetOutVal() > 0.0 && this.mLoaded) {
            var _t7 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * this.mTitleAlpha.GetOutVal()) | 0)));
            try {
                g.DrawImage(Game.Resources['IMAGE_TITLE'], GameFramework.BaseApp.mApp.mX, 0);
            } finally {
                _t7.Dispose();
            }
        }
        if(this.mLogoAlpha != null) {
            var _t8 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.mLogoAlpha.GetOutVal()));
            try {
                g.DrawImage(Game.Resources['IMAGE_LOADER_POPCAP'], this.mWidth / 2 - ((Game.Resources['IMAGE_LOADER_POPCAP'].mWidth / 2) | 0), 300);
            } finally {
                _t8.Dispose();
            }
        }
        g.SetFont(Game.Resources['FONT_LOADER_TIP']);
        g.mFont.PushLayerColor('GLOW', GameFramework.gfx.Color.RGBAToInt(64, 0, 32, 128));
        g.mFont.PushLayerColor('OUTLINE', 0);
        {
            var anAlpha = (((0.5 * Math.sin(this.mUpdateCnt * 0.03) * 0.5) * 0.5 + 0.75) * this.mLoaderAlpha.GetOutVal());
            if(anAlpha > 0) {
                var _t9 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255 * anAlpha) | 0)));
                try {
                    var aString = 'Loading';
                    if((Game.BejApp.mBejApp.mConnecting) && (Game.BejApp.mBejApp.mGroupsLoading == 1)) {
                        aString = 'Connecting';
                    }
                    for(var i_2 = 0; i_2 < (((((this.mUpdateCnt / 80) | 0)) | 0)) % 4; i_2++) {
                        aString += '.';
                    }
                    g.DrawString(aString, 800 - g.StringWidth('Loading..') / 2, 850);
                    g.DrawStringEx(((this.mDispLoadPct * 100) | 0) + '%', 800, 900, 0, 0);
                } finally {
                    _t9.Dispose();
                }
            }
        }
        g.mFont.PopLayerColor('OUTLINE');
        g.mFont.PopLayerColor('GLOW');
        if(Game.BejApp.mBejApp.get_Is3D() && (this.mLoaderAlpha.GetOutVal() > 0.0)) {
            var aVertices = Array.Create2D((Game.MainMenu.NUM_LOADERBAR_POINTS - 1) * 2, 3, null);
            var aCurPct = 0;
            var anAlpha_2 = (((0.5 * Math.sin(this.mUpdateCnt * 0.03) * 0.5) * 0.5 + 0.75) * this.mLoaderAlpha.GetOutVal());
            var aTriColor = GameFramework.gfx.Color.FAlphaToInt(anAlpha_2);
            var aTriIdx = 0;
            var aPrevVtx1 = null;
            var aPrevVtx2 = null;
            for(var aLoaderBarPt = 0; aLoaderBarPt < Game.MainMenu.NUM_LOADERBAR_POINTS; aLoaderBarPt++) {
                var aThisAdd = (1.0 / (Game.MainMenu.NUM_LOADERBAR_POINTS - 1)) * this.mDispLoadPct;
                if((aLoaderBarPt == 0) || (aLoaderBarPt == Game.MainMenu.NUM_LOADERBAR_POINTS - 2)) {
                    aThisAdd = (1.0 / (Game.MainMenu.NUM_LOADERBAR_POINTS - 1));
                }
                aThisAdd *= 1.022;
                var anAng = -3.141593 / 2 + aCurPct * 3.141593 * 2;
                aCurPct += aThisAdd;
                var aU;
                if(aLoaderBarPt == 0) {
                    aU = 0;
                } else if(aLoaderBarPt == Game.MainMenu.NUM_LOADERBAR_POINTS - 1) {
                    aU = 1;
                } else {
                    aU = 0.5;
                }
                {
                    var aDist1 = (180);
                    var aDist2 = (180 + 60);
                    var aVtx1 = new GameFramework.gfx.TriVertex(this.mWidth / 2 + Math.cos(anAng) * aDist1, 300 + ((Game.Resources['IMAGE_LOADER_POPCAP'].mHeight / 2) | 0) + Math.sin(anAng) * aDist1, aU, 0, aTriColor);
                    var aVtx2 = new GameFramework.gfx.TriVertex(this.mWidth / 2 + Math.cos(anAng) * aDist2, 300 + ((Game.Resources['IMAGE_LOADER_POPCAP'].mHeight / 2) | 0) + Math.sin(anAng) * aDist2, aU, 1, aTriColor);
                    if(aLoaderBarPt != 0) {
                        aVertices[aVertices.mIdxMult0 * (aTriIdx) + 0] = aPrevVtx1;
                        aVertices[aVertices.mIdxMult0 * (aTriIdx) + 1] = aPrevVtx2;
                        aVertices[aVertices.mIdxMult0 * (aTriIdx) + 2] = aVtx1;
                        aTriIdx++;
                        aVertices[aVertices.mIdxMult0 * (aTriIdx) + 0] = aPrevVtx2;
                        aVertices[aVertices.mIdxMult0 * (aTriIdx) + 1] = aVtx1;
                        aVertices[aVertices.mIdxMult0 * (aTriIdx) + 2] = aVtx2;
                        aTriIdx++;
                    }
                    aPrevVtx1 = aVtx1;
                    aPrevVtx2 = aVtx2;
                }
            }
            g.DrawTrianglesTex(Game.Resources['IMAGE_LOADER_WHITEDOT'], aVertices);
        }
        if((Game.BejApp.mBejApp.mTips.length != 0) && (Game.BejApp.mBejApp.mTipIdx > 0)) {
            var _t10 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * this.mTipTextAlpha.GetOutVal() * Math.max(0.0, Math.min(1.0, this.mDispLoadPct * 2.0 - 0.15))) | 0)));
            try {
                g.SetFont(Game.Resources['FONT_LOADER_TIP']);
                g.mFont.PushLayerColor('GLOW', GameFramework.gfx.Color.RGBAToInt(64, 0, 32, 128));
                g.mFont.PushLayerColor('OUTLINE', 0);
                g.DrawStringCentered(Game.BejApp.mBejApp.mTips[(Game.BejApp.mBejApp.mTipIdx - 1) % Game.BejApp.mBejApp.mTips.length], this.mWidth / 2, 1165);
                g.mFont.PopLayerColor('OUTLINE');
                g.mFont.PopLayerColor('GLOW');
            } finally {
                _t10.Dispose();
            }
        }
        if(this.mLoaded) {
            if(this.mVisible) {
            }
        }
        if(this.mSDButtonTextAlpha.get_v() > 0.0) {
            var _t11 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.mSDButtonTextAlpha.get_v()));
            try {
                g.DrawStringEx('Switch to\nStandard Definition', 1416, 1030, 0, 0);
            } finally {
                _t11.Dispose();
            }
        }
        if(this.mHDButtonTextAlpha.get_v() > 0.0) {
            var _t12 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.mHDButtonTextAlpha.get_v()));
            try {
                g.DrawStringEx('Switch to\nHigh Definition', 1416, 1030, 0, 0);
            } finally {
                _t12.Dispose();
            }
        }
    },
    StopHoverText : function Game_MainMenu$StopHoverText() {
    },
    PlayLeaveAnim : function Game_MainMenu$PlayLeaveAnim() {
        this.StopHoverText();
        var selectedModeBtn = this.GetSelectedModeBtn();
        selectedModeBtn.mFullPct.SetCurve('b;0,1,0.006667,1,~###         ~####');
        selectedModeBtn.mScale.SetCurve('b;0.17,0.88,0.006667,1,~###         ~#Q(j');
        this.mAppState.SetFocus(this);
    },
    IsTransitioning : function Game_MainMenu$IsTransitioning() {
        return (this.mLeftButton != null && this.mLeftButton.mScale.IsDoingCurve()) || (this.mRightButton != null && this.mRightButton.mScale.IsDoingCurve());
    },
    ButtonMouseEnter : function Game_MainMenu$ButtonMouseEnter(e) {
        if(!this.mLoaded || !this.mVisible) {
            return;
        }
        Game.BejApp.mBejApp.PlaySound(Game.Resources['SOUND_BUTTON_MOUSEOVER']);
    },
    ButtonDepress : function Game_MainMenu$ButtonDepress(e) {
        if(!this.mLoaded || !this.mVisible) {
            return;
        }
        var i = 0;
        while(i < (Game.MainMenu.EId._COUNT | 0)) {
            if(this.mBtns[i] == e.target) {
                break;
            }
            ++i;
        }
        if(i >= (Game.MainMenu.EId._COUNT | 0)) {
            return;
        }
        if(this.mLeftButton.mScale.IsDoingCurve() || this.mRightButton.mScale.IsDoingCurve() || Game.BejApp.mBejApp.GetDialog(Game.DM.EDialog.RECORDS) != null) {
            return;
        }
        switch(i) {
            case (Game.MainMenu.EId.ClassicBtn | 0):
            {
                this.mSelectedMode = Game.MainMenu.EMode.Classic;
                Game.BejApp.mBejApp.mProfile.SetTutorialCleared((Game.DM.ETutorial.PLAY_CLASSIC_FIRST | 0));
                Game.BejApp.mBejApp.DoNewClassicGame();
                this.DoBtnAnimation(this.mLeftButton);
                break;
            }
            case (Game.MainMenu.EId.SpeedBtn | 0):
            {
                if(Game.BejApp.mBejApp.mProfile != null && !Game.BejApp.mBejApp.mProfile.HasClearedTutorial((Game.DM.ETutorial.PLAY_CLASSIC_FIRST | 0))) {
                    var aDialog = Game.BejApp.mBejApp.DoModalDialog('SPEED MODE', 'New to Bejeweled?\nTry Classic Mode first.\n\nPlay Speed Mode?', '', GameFramework.widgets.Dialog.BUTTONS_YES_NO, Game.DM.EDialog.PLAY_SPEED_CONFIRM);
                    aDialog.AddEventListener(GameFramework.widgets.DialogEvent.CLOSED, ss.Delegate.create(this, this.handlePlayClassicFirstCheckDlgClosed));
                }

                else {
                    this.DoSpeedBtnPress();
                }
                break;
            }
            case (Game.MainMenu.EId.RecordsBtn | 0):
            {
                var dlg = new Game.RecordsDialog();
                Game.BejApp.mBejApp.PlaySound(Game.Resources['SOUND_MENUSPIN']);
                Game.BejApp.mBejApp.mDialogMgr.AddDialog(dlg);
                break;
            }
            default:
            {
                break;
            }
        }
    },
    handlePlayClassicFirstCheckDlgClosed : function Game_MainMenu$handlePlayClassicFirstCheckDlgClosed(theE) {
        Game.BejApp.mBejApp.mProfile.SetTutorialCleared((Game.DM.ETutorial.PLAY_CLASSIC_FIRST | 0));
        if((theE).WasYesPressed()) {
            this.DoSpeedBtnPress();
        }
    },
    DoSpeedBtnPress : function Game_MainMenu$DoSpeedBtnPress() {
        var anActivateBtn = this.mRightButton;
        this.mSelectedMode = Game.MainMenu.EMode.Speed;
        Game.BejApp.mBejApp.DoNewSpeedGame();
        this.DoBtnAnimation(anActivateBtn);
    },
    DoBtnAnimation : function Game_MainMenu$DoBtnAnimation(theActivateBtn) {
        if(theActivateBtn != null) {
            var aBoard = Game.BejApp.mBejApp.mBoard;
            Game.BejApp.mBejApp.PlaySound(Game.Resources['SOUND_CLICKFLYIN']);
            theActivateBtn.mFullPct.SetCurve('b;0,1,0.01,1,####         ~~###');
            theActivateBtn.mScale.SetCurve('b;0.17,0.88,0.01,1,####         ~~Q(j');
            var aParent = theActivateBtn.mParent;
            if(aParent != null) {
                aParent.RemoveWidget(theActivateBtn);
                aParent.AddWidget(theActivateBtn);
            }
            if(aBoard != null) {
                if(GameFramework.BaseApp.mApp.get_Is3D()) {
                    aBoard.mAlpha.SetCurve('b;0,1,0.01,1,####  Z####       F~###');
                    aBoard.mScale.SetCurve('b;1,5,0.01,1,~pF[         ~####');
                    theActivateBtn.mImage = aBoard.mBackground.GetBackgroundImage$3(true, false);
                    theActivateBtn.mImageSrcRect = new GameFramework.TIntRect(0, 0, 0, 0);
                } else {
                    aBoard.mAlpha.SetCurve('b;0,1,0.012,1,#########         ~~###');
                    aBoard.mBackground.mImageOverlayAlpha.SetCurve('b;0.001,1,0.012,1,####   B####      _~###');
                }
            } else {
                theActivateBtn.mImage = Game.Resources['IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_FLATTENEDPAM'];
            }
        }
    },
    GetSelectedModeBtn : function Game_MainMenu$GetSelectedModeBtn() {
        if(this.mSelectedMode == Game.MainMenu.EMode.Classic) {
            return this.mLeftButton;
        } else if(this.mSelectedMode == Game.MainMenu.EMode.Speed) {
            return this.mRightButton;
        }
        return null;
    },
    UpdateBackgroundImageForActiveBtn : function Game_MainMenu$UpdateBackgroundImageForActiveBtn(theRes) {
        var aBtn = this.GetSelectedModeBtn();
        if(aBtn != null) {
            aBtn.mImage = theRes;
        }
    },
    ResizeButtons : function Game_MainMenu$ResizeButtons() {
        if(!this.mLoaded) {
            return;
        }
        if(this.mRotation.GetOutVal() == 0) {
        } else if(this.mLeftButton.mDisabled && this.mRotation.GetOutVal() == -1) {
            this.mLeftButton.mDisabled = false;
        } else if(this.mRightButton.mDisabled && this.mRotation.GetOutVal() == 1) {
            this.mRightButton.mDisabled = false;
        }
    }
}
Game.MainMenu.staticInit = function Game_MainMenu$staticInit() {
    Game.MainMenu.NUM_LOADERBAR_POINTS = 50;
}

JS_AddInitFunc(function() {
    Game.MainMenu.registerClass('Game.MainMenu', GameFramework.widgets.ClassicWidget);
});
JS_AddStaticInitFunc(function() {
    Game.MainMenu.staticInit();
});
Game.MainMenu.EId = {};
Game.MainMenu.EId.staticInit = function Game_MainMenu_EId$staticInit() {
    Game.MainMenu.EId.ClassicBtn = 0;
    Game.MainMenu.EId.SpeedBtn = 1;
    Game.MainMenu.EId.RecordsBtn = 2;
    Game.MainMenu.EId._COUNT = 3;
}
JS_AddInitFunc(function() {
    Game.MainMenu.EId.staticInit();
});
Game.MainMenu.EMode = {};
Game.MainMenu.EMode.staticInit = function Game_MainMenu_EMode$staticInit() {
    Game.MainMenu.EMode._NONE = -1;
    Game.MainMenu.EMode.Classic = 0;
    Game.MainMenu.EMode.Speed = 1;
    Game.MainMenu.EMode._COUNT = 2;
}
JS_AddInitFunc(function() {
    Game.MainMenu.EMode.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\MainMenu.cs
//LineMap:2=3 5=20 7=21 25=28 30=30 37=32 49=39 59=41 71=48 74=58 76=54 77=57 78=59 86=51 89=55 91=65 108=80 110=80 111=80 115=83 120=86 122=86 123=86 127=89 130=93 135=97 142=101 145=105 153=114 168=124 171=205 173=148 174=151 175=155 179=160 189=171 190=181 191=183 
//LineMap:192=867 194=206 195=208 196=210 206=221 211=150 228=170 245=200 250=224 252=227 269=243 275=251 292=267 350=328 356=332 358=337 360=340 361=363 362=365 365=369 368=373 370=376 371=378 376=385 377=388 378=390 381=394 383=399 384=401 385=403 388=434 390=437 411=459 
//LineMap:415=497 422=505 430=512 433=516 441=523 444=528 445=530 446=532 452=539 453=550 459=560 460=562 462=565 465=569 472=574 474=578 477=585 485=592 487=595 491=602 498=608 501=647 504=662 511=670 518=678 522=684 532=693 537=699 541=706 546=712 549=716 556=726 562=733 
//LineMap:566=742 567=767 569=770 571=774 573=779 575=782 579=788 581=792 587=799 596=809 597=811 599=814 602=820 606=826 610=832 612=836 615=840 617=843 619=846 621=849 628=857 632=868 638=875 643=878 650=881 655=884 661=886 667=893 669=896 672=897 680=901 682=904 688=909 
//LineMap:694=911 696=914 699=918 704=921 711=924 712=928 716=964 719=969 724=973 731=1008 736=1012 743=1016 746=1026 753=1035 759=1042 767=1049 769=1054 772=1060 773=1062 775=1065 776=1067 778=1070 784=1077 786=1080 789=1084 792=1089 795=1093 797=1096 803=1103 808=1109 
//LineMap:812=1119 814=1122 819=1126 831=1135 833=1140 837=1148 842=1152 849=1156 854=1160 863=1165 867=1170 876=1182 881=1189 885=1194 892=1202 897=1208 899=1211 901=1214 903=1218 905=1221 906=1221 907=1224 909=1225 916=1229 917=1232 919=1233 921=1236 922=1239 927=1243 
//LineMap:932=1245 933=1249 935=1250 941=1253 943=1257 948=1261 969=1284 971=1288 977=1296 979=1299 989=1308 996=1314 1005=1324 1006=1326 1020=1341 1023=1342 1025=1352 1027=1352 1029=1357 1035=126 1040=128 1043=130 1046=136 1052=141 1055=145 
//Start:Messager
/**
 * @constructor
 */
Game.MessagerMsg = function Game_MessagerMsg() {
}
Game.MessagerMsg.prototype = {
    Text : null,
    LifeLeft : 0,
    TextColor : 0
}
Game.MessagerMsg.staticInit = function Game_MessagerMsg$staticInit() {
}

JS_AddInitFunc(function() {
    Game.MessagerMsg.registerClass('Game.MessagerMsg', null);
});
JS_AddStaticInitFunc(function() {
    Game.MessagerMsg.staticInit();
});
/**
 * @constructor
 */
Game.Messager = function Game_Messager() {
    this.mMessages = [];
    this.mFont = null;
    this.mDefaultLife = 1.0;
    this.mJustification = Game.Messager.EJustification.eJustification_Left;
}
Game.Messager.prototype = {
    Draw_fadeAt : 0.5,
    mJustification : null,
    mDefaultLife : 0,
    mFont : null,
    mMessages : null,
    mDefaultColor : 0,
    Init : function Game_Messager$Init(i_font, i_defaultColor, i_defaultLife) {
        if(i_defaultColor === undefined) {
            i_defaultColor = ~0;
        }
        if(i_defaultLife === undefined) {
            i_defaultLife = 2.5;
        }
        this.mFont = i_font;
        this.mDefaultColor = i_defaultColor;
        this.mDefaultLife = i_defaultLife;
    },
    GetMessageCount : function Game_Messager$GetMessageCount() {
        return this.mMessages.length;
    },
    AddMessageColor : function Game_Messager$AddMessageColor(i_msg, i_color, i_life) {
        if(i_life === undefined) {
            i_life = -1.0;
        }
        this.AddMessageColorLife(i_msg, i_color, i_life);
    },
    AddMessage : function Game_Messager$AddMessage(i_msg, i_life) {
        if(i_life === undefined) {
            i_life = -1.0;
        }
        this.AddMessageColorLife(i_msg, this.mDefaultColor, i_life);
    },
    AddMessageColorLife : function Game_Messager$AddMessageColorLife(i_msg, i_color, i_life) {
        var newMsg = new Game.MessagerMsg();
        newMsg.LifeLeft = i_life < 0.0 ? this.mDefaultLife : i_life;
        newMsg.TextColor = i_color;
        newMsg.Text = i_msg;
        this.mMessages.push(newMsg);
    },
    Update : function Game_Messager$Update() {
        for(var idx = this.mMessages.length - 1; idx >= 0; --idx) {
            this.mMessages[idx].LifeLeft -= 0.01;
            if(this.mMessages[idx].LifeLeft <= 0.0) {
                this.mMessages.removeAt(idx);
            }
        }
    },
    Draw : function Game_Messager$Draw(g, theX, theY) {
        if(theX === undefined) {
            theX = 0;
        }
        if(theY === undefined) {
            theY = 0;
        }
        if(this.mFont == null) {
            return;
        }
        var yPos = theY;
        var xPos = theX;
        g.SetFont(this.mFont);
        for(var idx = (this.mMessages.length | 0) - 1; idx >= 0; --idx) {
            var msg = this.mMessages[idx];
            yPos -= ((Math.max(20, (g.mFont.GetHeight() | 0))) | 0);
            if(this.mJustification == Game.Messager.EJustification.eJustification_Right) {
                xPos = 0 - (g.mFont.StringWidth(msg.Text) | 0);
            }
            var c1;
            var c2;
            if(msg.LifeLeft < this.Draw_fadeAt) {
                c1 = GameFramework.gfx.Color.RGBAToInt(0, 0, 0, ((msg.LifeLeft / this.Draw_fadeAt * 255.0) | 0));
                c2 = GameFramework.gfx.Color.UInt_AToInt(msg.TextColor & 0xffffff, ((msg.LifeLeft / this.Draw_fadeAt * 255.0) | 0));
            }

            else {
                c1 = GameFramework.gfx.Color.BLACK_RGB;
                c2 = msg.TextColor;
            }
            var _t1 = g.PushColor(c1);
            try {
                g.DrawString(msg.Text, xPos + 1, yPos + 1);
            } finally {
                _t1.Dispose();
            }
            var _t2 = g.PushColor(c2);
            try {
                g.DrawString(msg.Text, xPos, yPos);
            } finally {
                _t2.Dispose();
            }
        }
    },
    GetJustification : function Game_Messager$GetJustification() {
        return this.mJustification;
    },
    SetJustification : function Game_Messager$SetJustification(i_val) {
        this.mJustification = i_val;
    }
}
Game.Messager.staticInit = function Game_Messager$staticInit() {
}

JS_AddInitFunc(function() {
    Game.Messager.registerClass('Game.Messager', null);
});
JS_AddStaticInitFunc(function() {
    Game.Messager.staticInit();
});
Game.Messager.EJustification = {};
Game.Messager.EJustification.staticInit = function Game_Messager_EJustification$staticInit() {
    Game.Messager.EJustification.eJustification_Left = 0;
    Game.Messager.EJustification.eJustification_Right = 1;
}
JS_AddInitFunc(function() {
    Game.Messager.EJustification.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\Messager.cs
//LineMap:2=3 20=19 23=28 25=130 26=29 32=76 39=34 41=34 42=34 43=36 55=46 56=48 61=51 62=53 79=71 84=77 86=77 87=77 88=79 90=82 93=86 96=90 97=92 99=95 101=98 109=105 112=109 115=110 121=112 124=113 133=117 149=21 152=23 
//Start:Metrics
/**
 * @constructor
 */
Game.Metrics = function Game_Metrics() {
    this.mPendingSubmits = [];
    this.mMetricsProb = {};
}
Game.Metrics.prototype = {
    mSamplingProbRoll : 0,
    mMetricsVersion : 1,
    mIsAdmin : false,
    mPendingSubmits : null,
    mGotThrottlingData : false,
    mRequestedThrottlingData : false,
    mMetricsURL : null,
    mMetricsProb : null,
    Init : function Game_Metrics$Init() {
        var aSamplingProbStr = GameFramework.BaseApp.mApp.GetLocalData('Global', 'SamplingProbRoll');
        if(aSamplingProbStr != null) {
            this.mSamplingProbRoll = GameFramework.Utils.ToFloat(aSamplingProbStr);
        }
    },
    SetSamplingProbRoll : function Game_Metrics$SetSamplingProbRoll(theSamplingProbRoll) {
        this.mSamplingProbRoll = theSamplingProbRoll;
        GameFramework.BaseApp.mApp.SetLocalData('Global', 'SamplingProbRoll', String.format('{0}', this.mSamplingProbRoll));
    },
    SubmitReport : function Game_Metrics$SubmitReport(theMetricsType, theMetricsData, force, theAlternateURL) {
        if(force === undefined) {
            force = false;
        }
        if(theAlternateURL === undefined) {
            theAlternateURL = null;
        }
        var aSamplingProb = 1.0;
        if((!force) && (this.mMetricsProb.hasOwnProperty(theMetricsType))) {
            aSamplingProb = this.mMetricsProb[theMetricsType];
        }
        var aStats = [new GameFramework.misc.KeyVal('MetricsType', theMetricsType), new GameFramework.misc.KeyVal('MetricsVersion', 'v1.0'), new GameFramework.misc.KeyVal('SamplingProb', aSamplingProb)];
        if(Type.tryCast(theMetricsData, Array)) {

            {
                var $srcArray1 = theMetricsData;
                for(var $enum1 = 0; $enum1 < $srcArray1.length; $enum1++) {
                    var aKeyVal = $srcArray1[$enum1];
                    aStats.push(aKeyVal);
                }
            }
        }
        if(Type.tryCast(theMetricsData, GameFramework.TVector)) {

            {
                var $srcArray2 = theMetricsData;
                for(var $enum2 = 0; $enum2 < $srcArray2.length; $enum2++) {
                    var aKeyVal_2 = $srcArray2[$enum2];
                    aStats.push(aKeyVal_2);
                }
            }
        }
        if(force) {
            this.Update();
            this.SendMetrics(aStats, (theAlternateURL != null) ? theAlternateURL : this.mMetricsURL);
            GameFramework.BaseApp.mApp.UpdateConnectedRequests();
        }

        else {
            this.mPendingSubmits.push(aStats);
        }
    },
    SetThrottlingURL : function Game_Metrics$SetThrottlingURL(theThrottlingURL) {
        if(GameFramework.BaseApp.mApp.mHTTPService == null) {
            GameFramework.BaseApp.mApp.CreateHTTPService();
        }
        var aConnectedRequest = GameFramework.BaseApp.mApp.mHTTPService.Get(theThrottlingURL);
        aConnectedRequest.AddEventListener(GameFramework.events.Event.COMPLETE, ss.Delegate.create(this, this.GotThrottlingData));
        this.mRequestedThrottlingData = true;
    },
    GotThrottlingData : function Game_Metrics$GotThrottlingData(e) {
        var aConnectedRequest = e.target;
        var aResult = aConnectedRequest.mResult;
        try {
            var aDictionary = {};
            GameFramework.BaseApp.mApp.DecodeJSON(aResult, aDictionary);

            {
                for(aStatsGroup in aDictionary) {
                    var aGroupData = aDictionary[aStatsGroup];
                    var aSamplingProb = GameFramework.Utils.ToFloat(aGroupData['value']);
                    if((this.mIsAdmin) && (aGroupData.hasOwnProperty('admin'))) {
                        aSamplingProb = (aGroupData['admin']) ? 1.0 : 0.0;
                    }
                    this.mMetricsProb[aStatsGroup] = aSamplingProb;
                    this.mGotThrottlingData = true;
                }
            }
        } catch(_ex4) {
        }
    },
    SetMetricsURL : function Game_Metrics$SetMetricsURL(theMetricsURL) {
        this.mMetricsURL = theMetricsURL;
        this.Update();
    },
    SendMetrics : function Game_Metrics$SendMetrics(theDict, theMetricsURL) {
        if(this.mMetricsURL != null) {
            if(GameFramework.BaseApp.mApp.mHTTPService == null) {
                GameFramework.BaseApp.mApp.CreateHTTPService();
            }
            var aJSONString = GameFramework.BaseApp.mApp.EncodeJSON(theDict);
            GameFramework.BaseApp.mApp.mHTTPService.Post(theMetricsURL, aJSONString);
        }
    },
    Update : function Game_Metrics$Update() {
        if((this.mGotThrottlingData) || (!this.mRequestedThrottlingData)) {
            while(this.mPendingSubmits.length > 0) {
                var aMetricsDict = this.mPendingSubmits[0];
                var aSamplingProb = 1.0;
                if(this.mMetricsProb.hasOwnProperty(aMetricsDict[0].mValue)) {
                    aSamplingProb = this.mMetricsProb[aMetricsDict[0].mValue];
                }
                if((aMetricsDict.length > 2) && (aMetricsDict[2].mKey == 'SamplingProb')) {
                    aMetricsDict[2].mValue = aSamplingProb;
                }
                if(this.mSamplingProbRoll < aSamplingProb) {
                    this.SendMetrics(aMetricsDict, this.mMetricsURL);
                }
                this.mPendingSubmits.removeAt(0);
            }
        }
    }
}
Game.Metrics.staticInit = function Game_Metrics$staticInit() {
}

JS_AddInitFunc(function() {
    Game.Metrics.registerClass('Game.Metrics', null);
});
JS_AddStaticInitFunc(function() {
    Game.Metrics.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\Metrics.cs
//LineMap:2=12 5=24 7=17 8=21 12=14 21=28 36=41 37=41 38=43 39=45 41=48 42=53 46=55 50=56 54=59 58=61 62=62 66=65 74=72 90=89 93=91 95=94 97=94 100=98 101=100 103=103 136=138 141=144 
//Start:MTRand
/**
 * @constructor
 */
Game.MTRand = function Game_MTRand() {
    this.mt = Array.Create(Game.MTRand.gMtRandN, null);
    this.NextNoAssert_mag01 = Array.Create(2, null, 0x0, Game.MTRand.MATRIX_A);
    this.SRand(4357);
}
Game.MTRand.SetRandAllowed = function Game_MTRand$SetRandAllowed(allowed) {
    if(allowed) {
        if(Game.MTRand.gRandAllowed > 0) {
            Game.MTRand.gRandAllowed--;
        } else {
        }
    }

    else {
        Game.MTRand.gRandAllowed++;
    }
}
Game.MTRand.prototype = {
    mt : null,
    mti : 0,
    NextNoAssert_mag01 : null,
    SRandStr : function Game_MTRand$SRandStr(theSerialData) {
        if(theSerialData.length == Game.MTRand.gMtRandN * 4 + 4) {
        }

        else {
            this.SRand(4357);
        }
    },
    SRand : function Game_MTRand$SRand(seed) {
        if(seed == 0) {
            seed = 4357;
        }
        //JS            
        this.mt[0] = seed & 0xffffffff;
        for(this.mti = 1; this.mti < Game.MTRand.gMtRandN; this.mti++) {
            var s = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);
            this.mt[this.mti] = ((((1812433253 * ((s & 0xffff0000) >>> 16)) << 16) + 1812433253 * (s & 0x0000ffff) + this.mti) & 0xFFFFFFFF) >>> 0;
        }
        return;
        //-JS
        this.mt[0] = seed & 0xffffffff;
        for(this.mti = 1; this.mti < Game.MTRand.gMtRandN; this.mti++) {
            this.mt[this.mti] = (1812433253 * (this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30)) + (this.mti | 0));
            this.mt[this.mti] &= 0xffffffff;
        }
    },
    NextNoAssert : function Game_MTRand$NextNoAssert() {
        var y;
        if(this.mti >= Game.MTRand.gMtRandN) {
            var kk;
            for(kk = 0; kk < Game.MTRand.gMtRandN - Game.MTRand.MTRAND_M; kk++) {
                y = (this.mt[kk] & Game.MTRand.UPPER_MASK) | (this.mt[kk + 1] & Game.MTRand.LOWER_MASK);
                this.mt[kk] = this.mt[kk + Game.MTRand.MTRAND_M] ^ (y >>> 1) ^ this.NextNoAssert_mag01[y & 0x1];
            }
            for(; kk < Game.MTRand.gMtRandN - 1; kk++) {
                y = (this.mt[kk] & Game.MTRand.UPPER_MASK) | (this.mt[kk + 1] & Game.MTRand.LOWER_MASK);
                this.mt[kk] = this.mt[kk + (Game.MTRand.MTRAND_M - Game.MTRand.gMtRandN)] ^ (y >>> 1) ^ this.NextNoAssert_mag01[y & 0x1];
            }
            y = (this.mt[Game.MTRand.gMtRandN - 1] & Game.MTRand.UPPER_MASK) | (this.mt[0] & Game.MTRand.LOWER_MASK);
            this.mt[Game.MTRand.gMtRandN - 1] = this.mt[Game.MTRand.MTRAND_M - 1] ^ (y >>> 1) ^ this.NextNoAssert_mag01[y & 0x1];
            this.mti = 0;
        }
        y = this.mt[this.mti++];
        y ^= (y >>> 11);
        y ^= (y << 7) & Game.MTRand.TEMPERING_MASK_B;
        y ^= (y << 15) & Game.MTRand.TEMPERING_MASK_C;
        y ^= (y >>> 18);
        y &= 0x7fffffff;
        return y;
    },
    Next : function Game_MTRand$Next() {
        JS_Assert(Game.MTRand.gRandAllowed == 0);
        return this.NextNoAssert();
    },
    NextInt : function Game_MTRand$NextInt() {
        JS_Assert(Game.MTRand.gRandAllowed == 0);
        return (this.NextNoAssert() | 0);
    },
    NextNoAssertRange : function Game_MTRand$NextNoAssertRange(range) {
        return this.NextNoAssert() % range;
    },
    NextRange : function Game_MTRand$NextRange(range) {
        JS_Assert(Game.MTRand.gRandAllowed == 0);
        return this.NextNoAssertRange(range);
    },
    NextNoAssertRangeF : function Game_MTRand$NextNoAssertRangeF(range) {
        return (this.NextNoAssert() / 0x7fffffff * range);
    },
    NextF : function Game_MTRand$NextF(range) {
        JS_Assert(Game.MTRand.gRandAllowed == 0);
        return this.NextNoAssertRangeF(range);
    },
    Serialize : function Game_MTRand$Serialize() {
        var aString = '';
        return aString;
    }
}
Game.MTRand.staticInit = function Game_MTRand$staticInit() {
    Game.MTRand.gMtRandN = 624;
    Game.MTRand.MTRAND_M = 397;
    Game.MTRand.MATRIX_A = 0x9908b0df;
    Game.MTRand.UPPER_MASK = 0x80000000;
    Game.MTRand.LOWER_MASK = 0x7fffffff;
    Game.MTRand.TEMPERING_MASK_B = 0x9d2c5680;
    Game.MTRand.TEMPERING_MASK_C = 0xefc60000;
    Game.MTRand.gRandAllowed = 0;
}

JS_AddInitFunc(function() {
    Game.MTRand.registerClass('Game.MTRand', null);
});
JS_AddStaticInitFunc(function() {
    Game.MTRand.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\MTRand.cs
//LineMap:2=3 5=60 7=55 8=57 9=61 11=202 17=209 31=64 38=76 41=78 57=100 61=108 65=113 68=120 71=124 83=137 85=140 90=146 91=152 94=154 102=163 111=171 117=176 122=180 131=199 136=45 143=53 
//Start:OptionsDialog
/**
 * @constructor
 */
Game.OptionsDialog = function Game_OptionsDialog(theIsInGame) {
    Game.OptionsDialog.initializeBase(this, [Game.Resources['IMAGE_DIALOG_HEADERLESS_BKG'], Game.Resources['IMAGE_DIALOG_BUTTON'], Game.DM.EDialog.OPTIONS, true, '', '', '', GameFramework.widgets.Dialog.BUTTONS_FOOTER]);
    this.mWantAllowBackgroundOption = (!Game.BejApp.mBejApp.mIsSlow && Game.BejApp.mBejApp.get_Is3D()) || !Game.BejApp.mBejApp.mProfile.mAnimateBackground;
    this.mIsInGame = theIsInGame;
    var height = this.mIsInGame ? 740 : 850;
    if(!this.mWantAllowBackgroundOption) {
        height -= 94;
    }
    this.mContentInsets = new GameFramework.Insets(128, 20, 128, 88);
    this.Resize(350, this.mIsInGame ? 250 : 180, 900, height);
    Game.BejApp.mBejApp.mBaseWidgetAppState.SetFocus(this);
    this.mYesButton.mLabel = 'OK';
    this.mYesButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.HandleYesClicked));
    this.mResetButton = this.CreateButton(Game.Resources['IMAGE_DIALOG_BUTTON']);
    this.mResetButton.mLabel = '  RESET';
    this.mResetButton.mScale = 0.7;
    this.mResetButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.HandleResetBtnClicked));
    this.mIsModal = true;
    this.mHelpButton = this.CreateButton(Game.Resources['IMAGE_DIALOG_BUTTON']);
    this.mHelpButton.mLabel = 'HELP';
    if(!this.mIsInGame) {
        this.mHelpButton.mLabel = ' ' + this.mHelpButton.mLabel;
    }
    this.mHelpButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.HandleMenuBtnClicked));
    if(this.mIsInGame) {
        this.mBackToMainButton = this.CreateButton(Game.Resources['IMAGE_DIALOG_BUTTON']);
        this.mBackToMainButton.mLabel = 'MAIN MENU';
        this.mBackToMainButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.HandleMenuBtnClicked));
        this.mResumeButton = this.CreateButton(Game.Resources['IMAGE_DIALOG_BUTTON']);
        this.mResumeButton.mLabel = 'RESUME PLAY';
        this.mResumeButton.AddEventListener(GameFramework.widgets.WidgetEvent.CLICKED, ss.Delegate.create(this, this.HandleMenuBtnClicked));
    }
    this.mMusicSlider = new Game.Slider(Game.Resources['IMAGE_DIALOG_SLIDERBAR'], Game.Resources['IMAGE_DIALOG_SLIDERHANDLE']);
    this.mMusicSlider.AddEventListener(GameFramework.widgets.WidgetEvent.SLIDER_CHANGED, ss.Delegate.create(this, this.HandleSliderChanged));
    this.AddWidget(this.mMusicSlider);
    this.mFXSlider = new Game.Slider(Game.Resources['IMAGE_DIALOG_SLIDERBAR'], Game.Resources['IMAGE_DIALOG_SLIDERHANDLE']);
    this.mFXSlider.AddEventListener(GameFramework.widgets.WidgetEvent.SLIDER_CHANGED, ss.Delegate.create(this, this.HandleSliderChanged));
    this.mFXSlider.AddEventListener(GameFramework.widgets.WidgetEvent.MOUSE_UP, ss.Delegate.create(this, this.HandleSliderMouseUp));
    this.AddWidget(this.mFXSlider);
    if(this.mWantAllowBackgroundOption) {
        this.mAnimateBackgroundCheckbox = new Game.Checkbox(Game.Resources['IMAGE_DIALOG_CHECKBOX_BLANK'], Game.Resources['IMAGE_DIALOG_CHECKBOX_CHECKED']);
        this.AddWidget(this.mAnimateBackgroundCheckbox);
    }
    this.mTutorialsEnabled = new Game.Checkbox(Game.Resources['IMAGE_DIALOG_CHECKBOX_BLANK'], Game.Resources['IMAGE_DIALOG_CHECKBOX_CHECKED']);
    this.AddWidget(this.mTutorialsEnabled);
    this.UpdateValues();
    this.mFlushPriority = 100;
    this.mAllowDrag = false;
    this.mYesButton.mX -= 20;
    this.mYesButton.mWidth += 40;
}
Game.OptionsDialog.prototype = {
    mMusicSlider : null,
    mFXSlider : null,
    mAnimateBackgroundCheckbox : null,
    mTutorialsEnabled : null,
    mResetButton : null,
    mIsInGame : null,
    mInsets : null,
    mFieldSeperation : 0,
    mWantAllowBackgroundOption : null,
    mResumeButton : null,
    mBackToMainButton : null,
    mHelpButton : null,
    HandleMenuBtnClicked : function Game_OptionsDialog$HandleMenuBtnClicked(theE) {
        if(theE.target == this.mHelpButton) {
            //JS
            window['ShowHelp']();
            //-JS
        } else if(theE.target == this.mBackToMainButton) {
            var aDialog = Game.BejApp.mBejApp.DoModalDialog('MAIN MENU', 'Abandon the current game and go to main menu?', '', GameFramework.widgets.Dialog.BUTTONS_YES_NO, Game.DM.EDialog.MAIN_MENU_CONFIRM);
            var aWidth = 850;
            aDialog.Resize(this.mX + this.mWidth / 2 - ((aWidth / 2) | 0), 350, aWidth, aDialog.GetPreferredHeight(aWidth));
            aDialog.AddEventListener(GameFramework.widgets.DialogEvent.CLOSED, ss.Delegate.create(this, this.handleMenuDialogClosed));
        } else if(theE.target == this.mResumeButton) {
            this.mResult = (Game.OptionsDialog.EResult.ResumePlay | 0);
            this.Save();
            this.Kill();
        }
    },
    Kill : function Game_OptionsDialog$Kill() {
        Game.Bej3Dialog.prototype.Kill.apply(this);
        if(Game.BejApp.mBejApp.mBoard != null) {
            Game.BejApp.mBejApp.mBaseWidgetAppState.SetFocus(Game.BejApp.mBejApp.mBoard);
        }
    },
    handleMenuDialogClosed : function Game_OptionsDialog$handleMenuDialogClosed(theE) {
        if((theE).WasYesPressed()) {
            this.mResult = (Game.OptionsDialog.EResult.BackToMain | 0);
            this.Save();
            this.Kill();
        }
    },
    HandleSliderMouseUp : function Game_OptionsDialog$HandleSliderMouseUp(theE) {
        if(theE.target == this.mFXSlider) {
            Game.BejApp.mBejApp.SetSoundVolume(this.mFXSlider.mVal);
            Game.BejApp.mBejApp.PlaySound(Game.Resources['SOUND_COMBO_2']);
        }
    },
    HandleSliderChanged : function Game_OptionsDialog$HandleSliderChanged(theE) {
        if(theE.target == this.mFXSlider) {
            Game.BejApp.mBejApp.SetSoundVolume(this.mFXSlider.mVal);
        } else if(theE.target == this.mMusicSlider) {
            Game.BejApp.mBejApp.SetMusicVolume(this.mMusicSlider.mVal);
        }
    },
    HandleResetBtnClicked : function Game_OptionsDialog$HandleResetBtnClicked(theE) {
        var aDialog;
        if(!this.mIsInGame) {
            aDialog = Game.BejApp.mBejApp.DoModalDialog('RESET TUTORIALS', 'This will reset all hints\nand tutorials.\nContinue?', '', GameFramework.widgets.Dialog.BUTTONS_YES_NO, Game.DM.EDialog.MAIN_MENU_CONFIRM);
        } else {
            aDialog = Game.BejApp.mBejApp.DoModalDialog('SHOW TUTORIAL?', 'This will end your current game and start the tutorial. Continue?', '', GameFramework.widgets.Dialog.BUTTONS_YES_NO, Game.DM.EDialog.MAIN_MENU_CONFIRM);
        }
        var aWidth = 850;
        aDialog.Resize(this.mX + this.mWidth / 2 - ((aWidth / 2) | 0), 350, aWidth, aDialog.GetPreferredHeight(aWidth));
        aDialog.AddEventListener(GameFramework.widgets.DialogEvent.CLOSED, ss.Delegate.create(this, this.handleResetConfirmationDialogClosed));
    },
    Save : function Game_OptionsDialog$Save() {
        this.ApplyValues();
        Game.BejApp.mBejApp.mProfile.WriteProfile();
    },
    HandleYesClicked : function Game_OptionsDialog$HandleYesClicked(theE) {
        this.Save();
    },
    handleResetConfirmationDialogClosed : function Game_OptionsDialog$handleResetConfirmationDialogClosed(theE) {
        if((theE).WasYesPressed()) {
            Game.BejApp.mBejApp.mProfile.mTutorialFlags = Game.BejApp.mBejApp.mProfile.mTutorialFlags & (1 << (Game.DM.ETutorial.PLAY_CLASSIC_FIRST | 0));
            Game.BejApp.mBejApp.mProfile.mTutorialEnabled = true;
            this.mTutorialsEnabled.mChecked = true;
            this.mResult = (Game.OptionsDialog.EResult.LaunchTutorial | 0);
            this.Save();
            if(this.mIsInGame) {
                this.Kill();
            }
        }
    },
    UpdateValues : function Game_OptionsDialog$UpdateValues() {
        var p = Game.BejApp.mBejApp.mProfile;
        this.mMusicSlider.SetValue(p.mMusicVolume);
        this.mFXSlider.SetValue(p.mSfxVolume);
        if(this.mAnimateBackgroundCheckbox != null) {
            this.mAnimateBackgroundCheckbox.mChecked = p.mAnimateBackground;
        }
        this.mTutorialsEnabled.mChecked = p.mTutorialEnabled;
    },
    ApplyValues : function Game_OptionsDialog$ApplyValues() {
        var p = Game.BejApp.mBejApp.mProfile;
        if(this.mAnimateBackgroundCheckbox != null) {
            p.mAnimateBackground = this.mAnimateBackgroundCheckbox.mChecked;
        }
        p.mTutorialEnabled = this.mTutorialsEnabled.mChecked;
        p.mSfxVolume = this.mFXSlider.mVal;
        p.mMusicVolume = this.mMusicSlider.mVal;
    },
    UpdatePositions : function Game_OptionsDialog$UpdatePositions() {
        if(this.mIsInGame) {
            this.mInsets = new GameFramework.Insets(120.0, 175.0, this.mWidth - 120.0, this.mHeight - 200.0);
            this.mYesButton.mVisible = false;
        }

        else {
            this.mInsets = new GameFramework.Insets(120.0, 300.0, this.mWidth - 120.0, this.mHeight - 200.0);
        }
        this.mFieldSeperation = 80.0;
        var w = 510.0;
        var x = this.mInsets.mRight - w;
        var y = this.mInsets.mTop - 40.0;
        var bg = GameFramework.BaseApp.mApp.mGraphics;
        this.mFXSlider.Resize(bg.GetSnappedX(x), bg.GetSnappedY(y), w, Game.Resources['IMAGE_DIALOG_SLIDERHANDLE'].mHeight);
        this.mMusicSlider.Resize(bg.GetSnappedX(x), bg.GetSnappedY(y + this.mFieldSeperation), w, Game.Resources['IMAGE_DIALOG_SLIDERHANDLE'].mHeight);
        this.mTutorialsEnabled.Resize(bg.GetSnappedX(this.mInsets.mRight - this.mTutorialsEnabled.mWidth), bg.GetSnappedY(y + this.mFieldSeperation * 2 + 1), Game.Resources['IMAGE_DIALOG_CHECKBOX_CHECKED'].mWidth, Game.Resources['IMAGE_DIALOG_CHECKBOX_CHECKED'].mHeight);
        this.mResetButton.Move(bg.GetSnappedX(this.mInsets.mRight - this.mResetButton.mWidth - this.mTutorialsEnabled.mWidth + 14), bg.GetSnappedY(y + this.mFieldSeperation * 2 - 16));
        if(this.mAnimateBackgroundCheckbox != null) {
            this.mAnimateBackgroundCheckbox.Resize(bg.GetSnappedX(this.mInsets.mRight - this.mAnimateBackgroundCheckbox.mWidth), bg.GetSnappedY(y + this.mFieldSeperation * 3 + 1), Game.Resources['IMAGE_DIALOG_CHECKBOX_CHECKED'].mWidth, Game.Resources['IMAGE_DIALOG_CHECKBOX_CHECKED'].mHeight);
        }
        y = this.mInsets.mBottom;
        if(this.mResumeButton != null) {
            this.mResumeButton.Resize(this.mYesButton.mX, y, this.mYesButton.mWidth, this.mYesButton.mHeight);
            y -= this.mYesButton.mHeight;
        }
        if(this.mBackToMainButton != null) {
            this.mBackToMainButton.Resize(this.mYesButton.mX, y, this.mYesButton.mWidth / 2 - 5, this.mYesButton.mHeight);
        }
        if(this.mHelpButton != null) {
            if(this.mIsInGame) {
                this.mHelpButton.Resize(this.mYesButton.mX + this.mYesButton.mWidth - this.mHelpButton.mWidth, y, this.mYesButton.mWidth / 2 - 5, this.mYesButton.mHeight);
            } else {
                this.mHelpButton.Resize(this.mYesButton.mX + this.mYesButton.mWidth - this.mHelpButton.mWidth, y - 50, this.mYesButton.mWidth, this.mYesButton.mHeight);
            }
        }
    },
    Draw : function Game_OptionsDialog$Draw(g) {
        Game.Bej3Dialog.prototype.Draw.apply(this, [g]);
        this.UpdatePositions();
        var _t1 = g.PushTranslate(this.mInsets.mLeft, this.mInsets.mTop);
        try {
            g.SetFont(Game.Resources['FONT_DIALOG_TEXT']);
            var _t2 = g.PushColor(0xff000000);
            try {
                g.DrawString('Sound', 0.0, 0.0);
                g.DrawString('Music', 0.0, this.mFieldSeperation);
                g.DrawString('Tutorials', 0.0, this.mFieldSeperation * 2);
                if(this.mWantAllowBackgroundOption) {
                    g.DrawString('Animate Backdrops', 0.0, this.mFieldSeperation * 3);
                }
            } finally {
                _t2.Dispose();
            }
        } finally {
            _t1.Dispose();
        }
        if(!this.mIsInGame) {
            var stampX = this.mWidth / 2.0 - 2;
            var stampY = 142.0;
            var _t3 = g.PushScale(0.65, 0.65, stampX, stampY);
            try {
                g.DrawImage(Game.Resources['IMAGE_GAMEOVER_STAMP'].get_CenteredImage(), stampX, stampY);
            } finally {
                _t3.Dispose();
            }
            g.SetFont(Game.Resources['FONT_GAMEOVER_DIALOG_HUGE']);
            g.GetFont().PushLayerColor('MAIN', 0xff884818);
            g.DrawStringCentered('Options', this.mWidth / 2, 152);
            g.GetFont().PopLayerColor('MAIN');
        }
    },
    MouseDown : function Game_OptionsDialog$MouseDown(x, y) {
        Game.Bej3Dialog.prototype.MouseDown.apply(this, [x, y]);
    }
}
Game.OptionsDialog.staticInit = function Game_OptionsDialog$staticInit() {
}

JS_AddInitFunc(function() {
    Game.OptionsDialog.registerClass('Game.OptionsDialog', Game.Bej3Dialog);
});
JS_AddStaticInitFunc(function() {
    Game.OptionsDialog.staticInit();
});
Game.OptionsDialog.EResult = {};
Game.OptionsDialog.EResult.staticInit = function Game_OptionsDialog_EResult$staticInit() {
    Game.OptionsDialog.EResult.BackToMain = 0;
    Game.OptionsDialog.EResult.ResumePlay = 1;
    Game.OptionsDialog.EResult.LaunchTutorial = 2;
}
JS_AddInitFunc(function() {
    Game.OptionsDialog.EResult.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\OptionsDialog.cs
//LineMap:2=3 5=38 7=37 8=39 9=41 13=46 14=48 15=50 16=52 18=55 22=60 23=62 27=67 28=69 33=75 37=81 40=86 44=91 49=97 51=100 52=105 54=108 72=114 80=117 82=124 87=127 89=131 98=141 127=168 129=172 140=185 160=206 163=210 165=213 175=224 177=227 183=234 185=237 199=250 
//LineMap:200=252 201=254 204=258 209=264 211=267 212=269 217=275 219=278 231=291 232=293 235=295 236=298 239=300 242=304 254=309 261=315 267=318 285=14 288=16 
//Start:Piece
/**
 * @constructor
 */
Game.Piece = function Game_Piece(theBoard) {
    this.mScale = new GameFramework.CurvedVal();
    this.mAlpha = new GameFramework.CurvedVal();
    this.mSelectorAlpha = new GameFramework.CurvedVal();
    this.mDestPct = new GameFramework.CurvedVal();
    this.mHintAlpha = new GameFramework.CurvedVal();
    this.mHintArrowPos = new GameFramework.CurvedVal();
    this.mHintFlashScale = new GameFramework.CurvedVal();
    this.mHintFlashAlpha = new GameFramework.CurvedVal();
    this.mHintScale = new GameFramework.CurvedVal();
    this.mOverlayCurve = new GameFramework.CurvedVal();
    this.mOverlayBulge = new GameFramework.CurvedVal();
    this.mAnimCurve = new GameFramework.CurvedVal();
    this.mBoundEffects = [];
    this.mBoard = theBoard;
    this.Init(this.mBoard.mNextPieceId++);
}
Game.Piece.GetFlagBit = function Game_Piece$GetFlagBit(theFlag) {
    return (1 << (theFlag | 0));
}
Game.Piece.GetRadiusPoint = function Game_Piece$GetRadiusPoint(theFrame, theColorIdx, theRadius) {
    var anIdx = theFrame * 7 * 256 + theColorIdx * 256 + theRadius;
    if(anIdx < 12544) {
        return Game.BejApp.mBejApp.mGemOutlines.GEM_OUTLINE_RADIUS_POINTS[anIdx];
    } else {
        return Game.BejApp.mBejApp.mGemOutlines.GEM_OUTLINE_RADIUS_POINTS2[anIdx - 12544];
    }
}
Game.Piece.GetAngleRadiusColorFrame = function Game_Piece$GetAngleRadiusColorFrame(theAngle, theColor, theFrame) {
    while(theAngle >= 3.141593 * 2.0) {
        theAngle -= 3.141593 * 2.0;
    }
    while(theAngle < 0.0) {
        theAngle += 3.141593 * 2.0;
    }
    var aNum = 256.0 * theAngle / (3.141593 * 2.0);
    var anIdx = (aNum | 0);
    var aColorIdx = (theColor | 0);
    if(anIdx < 0) {
        return Game.Piece.GetRadiusPoint(theFrame, aColorIdx, 0);
    } else if(anIdx >= 255) {
        return Game.Piece.GetRadiusPoint(theFrame, aColorIdx, 255);
    } else {
        var aPct = aNum - anIdx;
        return Game.Piece.GetRadiusPoint(theFrame, aColorIdx, anIdx) * (1.0 - aPct) + Game.Piece.GetRadiusPoint(theFrame, aColorIdx, anIdx + 1) * aPct;
    }
}
Game.Piece.prototype = {
    mBoard : null,
    mId : 0,
    mCol : 0,
    mRow : 0,
    mX : 0,
    mY : 0,
    mCreatedTick : 0,
    mFallVelocity : 0,
    mScale : null,
    mAlpha : null,
    mSelectorAlpha : null,
    mRotPct : 0,
    mIsElectrocuting : null,
    mElectrocutePercent : 0,
    mDestructing : null,
    mIsExploding : null,
    mCanMatch : null,
    mCanSwap : null,
    mCanScramble : null,
    mTallied : null,
    mCanDestroy : null,
    mIsBulging : null,
    mImmunityCount : 0,
    mMoveCreditId : 0,
    mLastMoveCreditId : 0,
    mMatchId : 0,
    mIsPieceStill : false,
    mWillPieceBeStill : true,
    mDestPct : null,
    mDestCol : 0,
    mDestRow : 0,
    mChangedTick : 0,
    mSwapTick : 0,
    mLastActiveTick : 0,
    mLastColor : null,
    mColor : null,
    mDestColor : null,
    mFlags : 0,
    mDisallowFlags : 0,
    mExplodeDelay : 0,
    mExplodeSourceId : 0,
    mExplodeSourceFlags : 0,
    mSelected : null,
    mHidePct : 0,
    mCounter : 0,
    mCounterDelay : 0,
    mTimer : 0,
    mTimerThreshold : 0,
    mShakeOfsX : 0,
    mShakeOfsY : 0,
    mShakeTime : 0,
    mShakeScale : 0,
    mShakeAngle : 0,
    mSpinFrame : 0,
    mSpinSpeed : 0,
    mDestSpinSpeed : 0,
    mSpinSpeedHoldTime : 0,
    mHintAlpha : null,
    mHintArrowPos : null,
    mHintFlashScale : null,
    mHintFlashAlpha : null,
    mHintScale : null,
    mOverlayCurve : null,
    mOverlayBulge : null,
    mAnimCurve : null,
    mFlyVX : 0,
    mFlyVY : 0,
    mFlyAY : 0,
    mBoundEffects : null,
    Dispose : function Game_Piece$Dispose() {
        this.ClearBoundEffects();
        this.mBoard.RemoveFromPieceMap(this.mId);
    },
    Init : function Game_Piece$Init(theId) {
        this.mCreatedTick = 0;
        this.mFlags = 0;
        this.mDisallowFlags = 0;
        this.mColor = Game.DM.EGemColor.WHITE;
        this.mLastColor = Game.DM.EGemColor.WHITE;
        this.mDestColor = Game.DM.EGemColor.WHITE;
        this.mExplodeDelay = 0;
        this.mExplodeSourceId = -1;
        this.mExplodeSourceFlags = 0;
        this.mLastActiveTick = 0;
        this.mChangedTick = 0;
        this.mSwapTick = -1;
        this.mIsElectrocuting = false;
        this.mElectrocutePercent = 0;
        this.mDestructing = false;
        this.mIsExploding = false;
        this.mCanMatch = true;
        this.mCanSwap = true;
        this.mCanScramble = true;
        this.mTallied = false;
        this.mCanDestroy = true;
        this.mIsBulging = false;
        this.mImmunityCount = 0;
        this.mMoveCreditId = -1;
        this.mLastMoveCreditId = -1;
        this.mMatchId = -1;
        this.mX = 0;
        this.mY = 0;
        this.mCol = 0;
        this.mRow = 0;
        this.mFallVelocity = 0;
        this.mDestCol = 0;
        this.mDestRow = 0;
        this.mAlpha.SetConstant(1.0);
        this.mRotPct = 0;
        this.mSelected = false;
        this.mHidePct = 0;
        this.mScale.SetConstant(1.0);
        this.mCounter = 0;
        this.mCounterDelay = 0;
        this.mTimer = 0;
        this.mTimerThreshold = 100;
        this.mShakeOfsX = 0;
        this.mShakeOfsY = 0;
        this.mShakeScale = 0;
        this.mShakeAngle = 0;
        this.mShakeTime = 0;
        this.mSpinFrame = 0;
        this.mSpinSpeed = 0;
        this.mDestSpinSpeed = 0;
        this.mSpinSpeedHoldTime = 0;
        this.mFlyVX = 0;
        this.mFlyVY = 0;
        this.mFlyAY = 0;
        this.mId = theId;
        this.mBoard.AddToPieceMap(this.mId, this);
    },
    IsShrinking : function Game_Piece$IsShrinking() {
        return this.mScale.mRamp == GameFramework.CurvedVal.RAMP_CURVEDATA;
    },
    IsButton : function Game_Piece$IsButton() {
        return this.IsFlagSet(Game.Piece.EFlag.DETONATOR) || this.IsFlagSet(Game.Piece.EFlag.SCRAMBLE);
    },
    BindEffect : function Game_Piece$BindEffect(theEffect) {
        theEffect.mPieceIdRel = this.mId;
        theEffect.mRefCount++;
        this.mBoundEffects.push(theEffect);
    },
    ClearBoundEffects : function Game_Piece$ClearBoundEffects() {
        for(var i = 0; i < this.mBoundEffects.length; ++i) {
            this.mBoundEffects[i].mPieceIdRel = 0;
            this.mBoundEffects[i].mRefCount--;
        }
        this.mBoundEffects.clear();
    },
    ClearHyperspaceEffects : function Game_Piece$ClearHyperspaceEffects() {
        for(var i = 0; i < this.mBoundEffects.length; ++i) {
            if((this.mBoundEffects[i].mFlags & (Game.Effect.EFlag.HYPERSPACE_ONLY | 0)) != 0) {
                this.mBoundEffects[i].mPieceIdRel = 0;
                this.mBoundEffects[i].mRefCount--;
                this.mBoundEffects.removeAt(i);
                i--;
            }
        }
        this.mBoundEffects.clear();
    },
    CancelMatch : function Game_Piece$CancelMatch() {
        this.mScale.SetConstant(1.0);
    },
    CX : function Game_Piece$CX() {
        return this.GetScreenX() + ((Game.Board.GEM_WIDTH / 2) | 0);
    },
    CY : function Game_Piece$CY() {
        return this.GetScreenY() + ((Game.Board.GEM_HEIGHT / 2) | 0);
    },
    GetScreenX : function Game_Piece$GetScreenX() {
        return this.mX + this.mBoard.GetBoardX();
    },
    GetScreenY : function Game_Piece$GetScreenY() {
        return this.mY + this.mBoard.GetBoardY();
    },
    FindRowFromY : function Game_Piece$FindRowFromY() {
        return this.mBoard.GetRowAt((this.mY | 0));
    },
    FindColFromX : function Game_Piece$FindColFromX() {
        return this.mBoard.GetColAt((this.mX | 0));
    },
    SetFlag : function Game_Piece$SetFlag(theFlag) {
        return this.SetFlagTo(theFlag, true);
    },
    SetFlagTo : function Game_Piece$SetFlagTo(theFlag, theValue) {
        var aBit = Game.Piece.GetFlagBit(theFlag);
        if(theValue && ((aBit & this.mDisallowFlags) != 0)) {
            return false;
        }
        if(theValue) {
            this.mFlags = this.mFlags | aBit;
        } else {
            this.mFlags = this.mFlags & ~aBit;
        }
        return true;
    },
    CanSetFlag : function Game_Piece$CanSetFlag(theFlag) {
        return (Game.Piece.GetFlagBit(theFlag) & this.mDisallowFlags) == 0;
    },
    ClearFlag : function Game_Piece$ClearFlag(theFlag) {
        this.SetFlagTo(theFlag, false);
    },
    ClearFlags : function Game_Piece$ClearFlags() {
        this.mFlags = 0;
    },
    SetDisallowFlag : function Game_Piece$SetDisallowFlag(theFlag) {
        this.SetDisallowFlagTo(theFlag, true);
    },
    SetDisallowFlagTo : function Game_Piece$SetDisallowFlagTo(theFlag, theValue) {
        var aBit = Game.Piece.GetFlagBit(theFlag);
        if(theValue) {
            this.mDisallowFlags = this.mDisallowFlags | aBit;
        } else {
            this.mDisallowFlags = this.mDisallowFlags & ~aBit;
        }
        this.mFlags &= ~this.mDisallowFlags;
    },
    ClearDisallowFlag : function Game_Piece$ClearDisallowFlag(theFlag) {
        this.SetDisallowFlagTo(theFlag, false);
    },
    ClearDisallowFlags : function Game_Piece$ClearDisallowFlags() {
        this.mDisallowFlags = 0;
    },
    GetAngleRadius : function Game_Piece$GetAngleRadius(theAngle) {
        var aFrame = ((Math.min(19, 20 * this.mRotPct)) | 0);
        return Game.Piece.GetAngleRadiusColorFrame(theAngle, this.mColor, aFrame);
    },
    Update : function Game_Piece$Update() {
        this.mOverlayBulge.IncInVal();
        this.mOverlayCurve.IncInVal();
        if(this.mShakeScale > 0) {
            this.mShakeAngle = 3.141593 * GameFramework.Utils.GetRandFloat();
            this.mShakeOfsX = Math.cos(this.mShakeAngle) * this.mShakeScale * Game.Board.GEM_WIDTH / 20.0;
            this.mShakeOfsY = Math.sin(this.mShakeAngle) * this.mShakeScale * Game.Board.GEM_HEIGHT / 20.0;
        }

        else {
            this.mShakeOfsX = 0.0;
            this.mShakeOfsY = 0.0;
        }
        if(this.mElectrocutePercent > 0.0) {
        }
        if(this.IsFlagSet(Game.Piece.EFlag.FLAME)) {
            for(var i = 0; i < 4; i++) {
                var anEffect;
                if((Game.BejApp.mBejApp.mFXScale != 1.0) && (GameFramework.Utils.GetRandFloatU() > 0.4 + Game.BejApp.mBejApp.mFXScale * 0.6)) {
                    continue;
                }
                var isFlame = (Game.Util.Rand() % 5) != 0;
                if((!isFlame) && ((!GameFramework.BaseApp.mApp.get_Is3D()) || (Game.BejApp.mBejApp.mIsSlow))) {
                    continue;
                }
                var aManager;
                if(isFlame) {
                    aManager = (Game.Util.Rand() % 32 == 0) ? this.mBoard.mPostFXManager : this.mBoard.mPreFXManager;
                    anEffect = aManager.AllocEffect(Game.Effect.EFxType.EMBER_FADEINOUT);
                    {
                        anEffect.mAngle = 0.0;
                        anEffect.mDAngle = 0.0;
                        anEffect.mAlpha = 0.0;
                        anEffect.mDAlpha = (0.0075 + 0.0015 * GameFramework.Utils.GetRandFloat()) * 1.67;
                        anEffect.mScale = 0.12 + 0.035 * GameFramework.Utils.GetRandFloat();
                        anEffect.mDScale = (0.01 + 0.005 * GameFramework.Utils.GetRandFloat()) * 1.67;
                        anEffect.mDY = (-0.12 + -0.05 * GameFramework.Utils.GetRandFloat()) * 1.67;
                    }
                    var doRedFlame = ((this.mBoard.mWantsReddishFlamegems) && ((Game.Util.Rand() % 4 <= 0) && (aManager == this.mBoard.mPreFXManager)));
                    if((this.mColor == Game.DM.EGemColor.YELLOW) || (doRedFlame)) {
                        anEffect.mColor = GameFramework.gfx.Color.RGBToInt(255, 128, 128);
                        if(doRedFlame) {
                            anEffect.mType = Game.Effect.EFxType.EMBER_FADEINOUT_BOTTOM;
                        }
                    }

                    else {
                        anEffect.mColor = GameFramework.gfx.Color.RGBToInt(255, 255, 255);
                    }
                }

                else {
                    aManager = (Game.Util.Rand() % 2 == 0) ? this.mBoard.mPostFXManager : this.mBoard.mPreFXManager;
                    anEffect = aManager.AllocEffect(Game.Effect.EFxType.EMBER);
                    anEffect.mAlpha = 1.0;
                    anEffect.mScale = 2.0;
                    anEffect.mDScale = (-0.01) * 1.67;
                    anEffect.mFrame = 0;
                    anEffect.mImage = Game.Resources['IMAGE_SPARKLET'];
                    anEffect.mDY = (-0.4 + GameFramework.Utils.GetRandFloat() * 0.15) * 1.67;
                    anEffect.mColor = GameFramework.gfx.Color.RGBToInt(128, Game.Util.Rand() % 32 + 48, Game.Util.Rand() % 24 + 24);
                    var doRedFlame_2 = ((this.mBoard.mWantsReddishFlamegems) && ((Game.Util.Rand() % 3 <= 0) && (aManager == this.mBoard.mPreFXManager)));
                    if((this.mColor == Game.DM.EGemColor.YELLOW) || (doRedFlame_2)) {
                        anEffect.mColor = GameFramework.gfx.Color.RGBToInt(255, 0, 0);
                        if(doRedFlame_2) {
                            anEffect.mType = Game.Effect.EFxType.EMBER_BOTTOM;
                        }
                    } else if(this.mColor == Game.DM.EGemColor.RED) {
                        anEffect.mColor = GameFramework.gfx.Color.RGBToInt(240, 128, 64);
                    }
                }
                var anAngle = 3.141593 + Math.abs(GameFramework.Utils.GetRandFloat() * 3.141593 * 2);
                var aRadius = (this.GetAngleRadius(anAngle));
                var aCos1 = Math.cos(anAngle);
                var aSin1 = Math.sin(anAngle);
                if((isFlame) && (aSin1 > 0.0) && (Game.Util.Rand() % 2) != 0) {
                    var anAngDelta;
                    if(aCos1 < 0) {
                        anAngDelta = 0.001;
                    } else {
                        anAngDelta = -0.001;
                    }
                    var aCos2 = (Math.cos(anAngle + anAngDelta) + Math.cos(anAngle + anAngDelta * 2)) / 2;
                    var aSin2 = (Math.sin(anAngle + anAngDelta) + Math.sin(anAngle + anAngDelta * 2)) / 2;
                    var aTanAng = Math.atan2(aSin2 - aSin1, aCos2 - aCos1);
                    var aSpeed = 0.12 + 0.05 * GameFramework.Utils.GetRandFloat();
                    var aNewDX = Math.cos(aTanAng) * aSpeed;
                    var aNewDY = Math.sin(aTanAng) * aSpeed;
                    anEffect.mDX = ((anEffect.mDX + aNewDX) / 2) * 1.67;
                    anEffect.mDY = ((anEffect.mDY + aNewDY) / 2) * 1.67;
                }
                var aScreenXPhys = this.GetScreenX();
                if(aManager == this.mBoard.mPostFXManager) {
                    aScreenXPhys += this.mBoard.mSideXOff.GetOutVal();
                }
                if((Game.BejApp.mBejApp.mIsSlow) || (!Game.BejApp.mBejApp.get_Is3D())) {
                    aRadius *= 0.8;
                    anEffect.mScale *= 2.0;
                    anEffect.mDScale *= 2.0;
                }
                anEffect.mX = aScreenXPhys + ((Game.Board.GEM_WIDTH / 2) | 0) + Math.cos(anAngle) * aRadius;
                anEffect.mY = this.GetScreenY() + ((Game.Board.GEM_HEIGHT / 2) | 0) + Math.sin(anAngle) * aRadius + 2.0;
                if(Game.Util.Rand() % 6 != 0) {
                    anEffect.mX -= aScreenXPhys;
                    anEffect.mY -= this.GetScreenY();
                    anEffect.mPieceIdRel = this.mId;
                }
                aManager.AddEffect(anEffect);
                if(Game.BejApp.mBejApp.mIsSlow) {
                    break;
                }
            }
            if(((Game.BejApp.mBejApp.mUpdateCnt + this.mId) % 24 == 0) || (Game.Util.Rand() % 64 == 0)) {
                var anEffect_2 = this.mBoard.mPostFXManager.AllocEffect(Game.Effect.EFxType.LIGHT);
                anEffect_2.mFlags = (Game.Effect.EFlag.ALPHA_FADEINOUT | 0);
                anEffect_2.mX = this.CX() + GameFramework.Utils.GetRandFloat() * 30.0;
                anEffect_2.mY = this.CY() + GameFramework.Utils.GetRandFloat() * 30.0 + 0.0;
                anEffect_2.mZ = 0.08;
                anEffect_2.mValue[0] = 6000.0;
                anEffect_2.mValue[1] = -4000.0;
                anEffect_2.mValue[2] = 0.5;
                anEffect_2.mAlpha = 0.0;
                anEffect_2.mDAlpha = 0.07;
                anEffect_2.mScale = 0.75;
                anEffect_2.mColor = Game.Util.HSLToRGB(((Game.Util.Rand() % 255) | 0), 255, 128);
                if(Game.Util.Rand() % 2 != 0) {
                    anEffect_2.mPieceId = this.mId;
                }
                this.mBoard.mPostFXManager.AddEffect(anEffect_2);
            }
        }
        if(this.IsFlagSet(Game.Piece.EFlag.HYPERCUBE)) {
            if(((Game.BejApp.mBejApp.mUpdateCnt + this.mId) % 24 == 0) || (Game.Util.Rand() % 64 == 0)) {
                var anEffect_3 = this.mBoard.mPostFXManager.AllocEffect(Game.Effect.EFxType.LIGHT);
                anEffect_3.mFlags = (Game.Effect.EFlag.ALPHA_FADEINOUT | 0);
                anEffect_3.mX = this.CX() + GameFramework.Utils.GetRandFloat() * 30.0;
                anEffect_3.mY = this.CY() + GameFramework.Utils.GetRandFloat() * 30.0 + 0.0;
                anEffect_3.mZ = 0.08;
                anEffect_3.mValue[0] = 6000.0;
                anEffect_3.mValue[1] = -4000.0;
                anEffect_3.mValue[2] = 1.0;
                anEffect_3.mAlpha = 0.0;
                anEffect_3.mDAlpha = 0.07;
                anEffect_3.mScale = 1.0;
                anEffect_3.mColor = Game.Util.HSLToRGB(((Game.Util.Rand() % 255) | 0), 255, 128);
                if(Game.Util.Rand() % 2 != 0) {
                    anEffect_3.mPieceId = this.mId;
                }
                this.mBoard.mPostFXManager.AddEffect(anEffect_3);
            }
        }
        for(var i_2 = 0; i_2 < (this.mBoundEffects.length | 0);) {
            var anEffect_4 = this.mBoundEffects[i_2];
            if(anEffect_4.mDeleteMe) {
                anEffect_4.mRefCount--;
                this.mBoundEffects.removeAt(i_2);
            }

            else {
                ++i_2;
            }
        }
    },
    IsFlagSet : function Game_Piece$IsFlagSet(theFlag) {
        var aBit = (1 << (theFlag | 0));
        return (this.mFlags & aBit) != 0;
    }
}
Game.Piece.staticInit = function Game_Piece$staticInit() {
}

JS_AddInitFunc(function() {
    Game.Piece.registerClass('Game.Piece', null, GameFramework.IExplicitDisposable);
});
JS_AddStaticInitFunc(function() {
    Game.Piece.staticInit();
});
Game.Piece.EFlag = {};
Game.Piece.EFlag.staticInit = function Game_Piece_EFlag$staticInit() {
    Game.Piece.EFlag.FLAME = 0;
    Game.Piece.EFlag.HYPERCUBE = 1;
    Game.Piece.EFlag.LASER = 2;
    Game.Piece.EFlag.RESERVED = 3;
    Game.Piece.EFlag.POINT_MULTIPLIER = 4;
    Game.Piece.EFlag.BOMB = 5;
    Game.Piece.EFlag.REALTIME_BOMB = 6;
    Game.Piece.EFlag.DOOM = 7;
    Game.Piece.EFlag.COUNTER = 8;
    Game.Piece.EFlag.COIN = 9;
    Game.Piece.EFlag.DETONATOR = 10;
    Game.Piece.EFlag.SCRAMBLE = 11;
    Game.Piece.EFlag.MYSTERY = 12;
    Game.Piece.EFlag.SKULL = 13;
    Game.Piece.EFlag.INFERNO_SWAP = 14;
    Game.Piece.EFlag.DIG = 15;
    Game.Piece.EFlag.BLAST_GEM = 16;
    Game.Piece.EFlag.TIME_BONUS = 17;
}
JS_AddInitFunc(function() {
    Game.Piece.EFlag.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\Piece.cs
//LineMap:1=5 2=7 5=126 7=49 10=70 11=106 16=114 18=117 19=123 20=127 23=141 27=290 41=305 42=308 46=313 47=315 49=316 81=67 125=135 131=146 159=175 168=185 171=189 175=194 180=200 184=207 187=213 191=216 196=220 201=224 215=239 230=255 243=267 253=276 258=282 263=286 
//LineMap:268=325 276=334 278=337 282=342 285=344 290=348 295=352 300=356 308=365 312=370 325=382 331=387 335=392 338=396 344=401 347=405 350=423 352=427 355=431 357=434 358=436 360=439 365=445 374=455 375=457 377=460 378=462 384=467 390=472 399=482 400=484 403=488 406=489 
//LineMap:408=493 411=498 413=504 415=507 417=510 422=516 424=519 425=521 428=525 431=530 432=532 434=535 440=542 442=545 448=552 449=554 452=558 471=578 492=648 503=658 508=662 520=17 523=19 538=35 
//Start:PointsManager
/**
 * @constructor
 */
Game.Points = function Game_Points(theApp, theFont, theString, theX, theY, theLife, theJustification, theColor, theAnim) {
    this.mImage = Array.Create(Game.Points.MAX_LAYERS, null);
    this.mSubColor = GameFramework.gfx.Color.WHITE.Clone();
    this.mColorCycle = Array.Create(Game.Points.MAX_LAYERS, null);
    this.mLimitY = true;
    this.mDelay = 0;
    this.mColorCycling = false;
    this.mRotation = 0.0;
    this.mApp = theApp;
    this.mFont = theFont;
    this.mTimer = theLife;
    this.mColor = theColor;
    this.mWobbleSin = 0.0;
    this.mDoBounce = false;
    this.mWantCachedImage = false;
    this.mCachedImage = null;
    for(var i = 0; i < Game.Points.MAX_LAYERS; i++) {
        this.mImage[i] = null;
        this.mColorCycle[i] = new Game.ColorCycle();
    }
    if(theAnim < 3) {
        for(var i_2 = 0; i_2 < Game.Points.MAX_LAYERS; i_2++) {
            this.mColorCycle[i_2].mCyclePos = Math.abs(GameFramework.Utils.GetRandFloat());
            this.mColorCycle[i_2].mCycleColors.clear();
            this.mColorCycle[i_2].mColor = 0;
        }
    }
    for(var i_3 = 0; i_3 < Game.Points.MAX_LAYERS; i_3++) {
        this.mColorCycle[i_3].SetSpeed(1.8);
    }
    var aLightColor = GameFramework.gfx.Color.CreateFromInt(this.mColor);
    aLightColor.mRed = ((Math.min(255, ((aLightColor.mRed * 1.5) | 0))) | 0);
    aLightColor.mGreen = ((Math.min(255, ((aLightColor.mGreen * 1.5) | 0))) | 0);
    aLightColor.mBlue = ((Math.min(255, ((aLightColor.mBlue * 1.5) | 0))) | 0);
    var aDarkColor = GameFramework.gfx.Color.CreateFromInt(this.mColor);
    aDarkColor.mRed = ((Math.min(255, ((aDarkColor.mRed * 0.5) | 0))) | 0);
    aDarkColor.mGreen = ((Math.min(255, ((aDarkColor.mGreen * 0.5) | 0))) | 0);
    aDarkColor.mBlue = ((Math.min(255, ((aDarkColor.mBlue * 0.5) | 0))) | 0);
    switch(theAnim) {
        case 0:
        {
            this.mColorCycle[0].mCycleColors.push(aDarkColor.ToInt());
            this.mColorCycle[0].mCycleColors.push(aDarkColor.ToInt());
            break;
        }
        case 1:
        {
            this.mColorCycle[0].mCycleColors.push(aDarkColor.ToInt());
            this.mColorCycle[0].mCycleColors.push(aLightColor.ToInt());
            break;
        }
        case 2:
        {
            this.mColorCycle[0].mCycleColors.push(aDarkColor.ToInt());
            this.mColorCycle[0].mCycleColors.push(aLightColor.ToInt());
            this.mColorCycle[0].SetPosition(0.25);
            this.mColorCycle[2].mCycleColors.push(aDarkColor.ToInt());
            this.mColorCycle[2].mCycleColors.push(aLightColor.ToInt());
            this.mColorCycle[2].SetPosition(0.75);
            break;
        }
        case 3:
        default:
        {
            this.mColorCycle[0].SetPosition(0.25);
            this.mColorCycle[2].SetPosition(0.5);
            break;
        }
    }
    this.mString = theString;
    this.RestartWobble();
    var aScaleFactor = 1.0;
    var aTotalWidth = (this.mFont.StringWidth(this.mString) | 0);
    var aNewX = theX;
    if(theJustification == 0) {
        aNewX -= (((aTotalWidth / aScaleFactor) / 2) | 0);
    } else if(theJustification == 1) {
        aNewX -= ((aTotalWidth / aScaleFactor) | 0);
    }
    var aNewY = theY - (this.mFont.GetAscent() | 0);
    this.mHue = 0;
    if((aNewX + this.mWidth) > GameFramework.BaseApp.mApp.mWidth) {
        aNewX = GameFramework.BaseApp.mApp.mWidth - this.mWidth;
    }
    this.mX = theX;
    this.mY = theY;
    this.mScale = 0.0;
    this.mScaleAdd = 0.0;
    this.mDY = 1.2;
    this.mUpdateCnt = 0;
    this.mSubStringShowTick = -1;
    this.mSubFont = null;
    this.mId = -1;
    this.mMoveCreditId = -1;
    this.mState = Game.Points.EState.RISING;
    this.mAlpha = 1.0;
    this.mLayerCount = 3;
    this.mDrawn = false;
    this.mDeleteMe = false;
}
Game.Points.prototype = {
    mX : 0,
    mY : 0,
    mDY : 0,
    mLimitY : null,
    mState : null,
    mScalePoints : 0,
    mCorrectedPoints : 0,
    mWidth : 0,
    mHeight : 0,
    mApp : null,
    mTimer : 0,
    mString : null,
    mFont : null,
    mHue : 0,
    mImage : null,
    mSubString : null,
    mSubStringShowTick : 0,
    mSubFont : null,
    mSubColor : null,
    mLayerCount : 0,
    mDelay : 0,
    mScale : 0,
    mDestScale : 0,
    mScaleAdd : 0,
    mScaleDampening : 0,
    mScaleDifMult : 0,
    mColorCycle : null,
    mColorCycling : null,
    mUpdateCnt : 0,
    mColor : GameFramework.gfx.Color.WHITE_RGB,
    mWobbleSin : 0,
    mWobbleScale : 0,
    mDoBounce : null,
    mAlpha : 0,
    mWantCachedImage : null,
    mCachedImage : null,
    mRotation : 0,
    mId : 0,
    mMoveCreditId : 0,
    mValue : 0,
    mDrawn : null,
    mDeleteMe : null,
    Dispose : function Game_Points$Dispose() {
    },
    Update : function Game_Points$Update() {
        this.mUpdateCnt++;
        var aDrawWidth = (this.mFont.StringWidth(this.mString) | 0);
        if(this.mX + (((aDrawWidth / 2) | 0)) * 1.5 > 1920) {
            this.mX = 1920 - (((aDrawWidth / 2) | 0)) * 1.5;
        }
        if(this.mDelay > 0) {
            --this.mDelay;
            return;
        }
        this.mWobbleSin += (0.03 * 3.141593 * 2) * 1.67;
        if(this.mWobbleSin > 3.141593 * 2) {
            this.mWobbleSin -= 3.141593 * 2;
        }
        this.mWobbleScale -= (0.005) * 1.67;
        if(this.mWobbleScale < 0.0) {
            this.mWobbleScale = 0.0;
        }
        for(var i = 0; i < 3; i++) {
            this.mColorCycle[i].Update();
        }
        var aDif = this.mDestScale - this.mScale;
        if(this.mState == Game.Points.EState.RISING) {
            this.mScaleAdd += aDif * this.mScaleDifMult;
            this.mScaleAdd *= this.mScaleDampening;
            this.mScale += this.mScaleAdd;
            if((this.mScale < this.mDestScale) && (!this.mDoBounce)) {
                this.mScale = this.mDestScale;
            }
        } else if(this.mState == Game.Points.EState.VERT_SHIFTING) {
        } else {
            this.mAlpha -= 0.05 * 1.67;
            this.mScale -= 0.03 * 1.67;
            if(this.mScale <= 0 || this.mAlpha <= 0) {
                this.mDeleteMe = true;
            }
        }
        var aDYScale = Math.pow(Math.min(this.mY / 50.0, 1.0), 0.015);
        this.mDY *= aDYScale;
        this.mY -= this.mDY * 1.67;
        if(this.mLimitY) {
            this.mY = Math.max(75, this.mY);
        }
        this.mTimer -= 0.01 * 1.67;
        if(this.mTimer <= 0.0) {
            if(this.mState == Game.Points.EState.RISING) {
                this.StartFading();
            }
        }
    },
    Draw : function Game_Points$Draw(g) {
        if(this.mDelay > 0) {
            return;
        }
        var aScale = this.mScale + (Math.sin(this.mWobbleSin)) * this.mWobbleScale;
        if(!this.mDoBounce) {
            aScale = this.mScale;
        }
        if(this.mWantCachedImage) {
            this.UpdateCachedImage();
        }
        if(this.mWantCachedImage && this.mCachedImage != null) {
            var t = new GameFramework.geom.Matrix();
            t.identity();
            t.scale(aScale, aScale);
            t.rotate(this.mRotation);
            t.translate(this.mX, this.mY);
            Game.Util.DrawImageMatrix(g, this.mCachedImage, t);
        }

        else {
            if(this.mRotation != 0) {
                var aTrans = new GameFramework.geom.Matrix();
                aTrans.rotate(this.mRotation);
            }
            this.SetupForDraw(g);
            var aDrawWidth = this.mFont.StringWidth(this.mString);
            var aDrawHeight = this.mFont.GetAscent();
            g.PushScale(aScale, aScale, this.mX, this.mY);
            g.DrawString(this.mString, this.mX - aDrawWidth / 2, this.mY + aDrawHeight * 0.2);
            g.PopMatrix();
            this.FinishDraw(g);
        }
        if(this.mSubStringShowTick >= 0 && this.mSubStringShowTick <= this.mUpdateCnt && this.mSubString != '' && this.mSubFont != null) {
            var aDrawWidth_2 = (this.mFont.StringWidth(this.mString) | 0);
            var aDrawHeight_2 = (this.mFont.GetAscent() | 0);
            var aSubDrawWidth = (this.mSubFont.StringWidth(this.mSubString) | 0);
            var aSubDrawHeight = (this.mSubFont.GetAscent() | 0);
            g.SetFont(this.mSubFont);
            var locY = (this.mY | 0) + -80;
            var transInPct = (this.mUpdateCnt - this.mSubStringShowTick) / 20.0;
            var scale = aScale;
            if(transInPct < 1.0) {
                aScale = (1.0 + 0.5 * (1.0 - transInPct));
            }
        }
        this.mDrawn = true;
    },
    RestartWobble : function Game_Points$RestartWobble() {
        this.mWobbleScale = 0.3;
    },
    StartFading : function Game_Points$StartFading() {
        this.mState = Game.Points.EState.FADING;
    },
    SetupForDraw : function Game_Points$SetupForDraw(g) {
        g.SetFont(this.mFont);
        var aLayerNames = Array.Create(3, "", 'GLOW', 'MAIN', 'OUTLINE');
        if(this.mFont == Game.Resources['FONT_FLOATERS']) {
            for(var i = 0; i < aLayerNames.length; i++) {
                var aLayerColor = 0xffffffff;
                if(i == this.mLayerCount - 1) {
                    if(this.mColorCycling) {
                        aLayerColor = this.mColorCycle[this.mLayerCount - 1].GetColor();
                    } else {
                        aLayerColor = this.mColor;
                    }
                }

                else {
                    aLayerColor = this.mColorCycle[i].GetColor();
                }
                aLayerColor = GameFramework.gfx.Color.UInt_FAToInt(aLayerColor, this.mAlpha * ((aLayerColor >>> 24) / 255.0));
                this.mFont.PushLayerColor(aLayerNames[i], aLayerColor);
            }
        }
    },
    FinishDraw : function Game_Points$FinishDraw(g) {
        var aLayerNames = Array.Create(3, "", 'GLOW', 'MAIN', 'OUTLINE');
        if(this.mFont == Game.Resources['FONT_FLOATERS']) {
            for(var i = 0; i < aLayerNames.length; i++) {
                this.mFont.PopLayerColor(aLayerNames[i]);
            }
        }
    },
    UpdateCachedImage : function Game_Points$UpdateCachedImage() {
    }
}
Game.Points.staticInit = function Game_Points$staticInit() {
    Game.Points.MAX_LAYERS = 5;
}

JS_AddInitFunc(function() {
    Game.Points.registerClass('Game.Points', null);
});
JS_AddStaticInitFunc(function() {
    Game.Points.staticInit();
});
Game.Points.EState = {};
Game.Points.EState.staticInit = function Game_Points_EState$staticInit() {
    Game.Points.EState.RISING = 0;
    Game.Points.EState.FADING = 1;
    Game.Points.EState.VERT_SHIFTING = 2;
}
JS_AddInitFunc(function() {
    Game.Points.EState.staticInit();
});
/**
 * @constructor
 */
Game.PointsManager = function Game_PointsManager() {
    this.mPointsList = [];
    this.Add_gCycleColors = Array.Create(6, 6, new GameFramework.gfx.Color(255, 0, 0, 255), new GameFramework.gfx.Color(255, 255, 0, 255), new GameFramework.gfx.Color(0, 255, 0, 255), new GameFramework.gfx.Color(0, 255, 255, 255), new GameFramework.gfx.Color(0, 0, 255, 255), new GameFramework.gfx.Color(255, 0, 255, 255));
    Game.PointsManager.initializeBase(this);
    this.mMouseVisible = false;
    this.mOverlayLevel = 1;
}
Game.PointsManager.prototype = {
    mPointsList : null,
    mOverlayLevel : 0,
    Add_gCycleColors : null,
    Update : function Game_PointsManager$Update() {
        for(var i = 0; i < this.mPointsList.length;) {
            var aPoints = this.mPointsList[i];
            if(aPoints.mState == Game.Points.EState.VERT_SHIFTING) {
            }
            aPoints.Update();
            if(aPoints.mDeleteMe) {
                this.mPointsList.removeAt(i);
            }

            else {
                ++i;
            }
        }
    },
    Add : function Game_PointsManager$Add(theX, theY, thePoints, theColor, theId, usePointMultiplier, theMoveCreditId, theForceAdd) {
        if(thePoints <= 0 && !theForceAdd) {
            return null;
        }
        var aMultiplier = Game.BejApp.mBejApp.mBoard.mPointMultiplier * Game.BejApp.mBejApp.mBoard.GetModePointMultiplier();
        if(!usePointMultiplier) {
            aMultiplier = 1.0;
        }
        var aNewPoints = null;
        var anOrigPoints = thePoints;
        var i;
        thePoints = ((thePoints * aMultiplier) | 0);
        if(theX >= 0 && theY >= 0) {
            var aLowScore = 50;
            var aHighScore = 1000;
            var aLowScale = 0.6;
            var aHighScale = 1.0;
            var aLife = 1.0;
            var theDispPoints = thePoints;
            var aScalePoints = anOrigPoints;
            var aCorrectedPoints = ((aScalePoints * Math.pow(Game.BejApp.mBejApp.mBoard.mPointMultiplier, 0.45)) | 0);
            if(theId != -1) {
                for(i = 0; i < this.mPointsList.length; i++) {
                    var aPoints = this.mPointsList[i];
                    if(aPoints.mId == theId) {
                        aPoints.mState = Game.Points.EState.RISING;
                        aPoints.mAlpha = 1.0;
                        aPoints.mValue += thePoints;
                        aPoints.mDestScale = Math.min(aHighScale, aPoints.mDestScale + 0.05);
                        aPoints.mTimer = aLife;
                        aNewPoints = aPoints;
                        theDispPoints = aPoints.mValue;
                        aCorrectedPoints += aPoints.mCorrectedPoints;
                        aScalePoints += aPoints.mScalePoints;
                        break;
                    }
                }
            }
            var aString = GameFramework.Utils.ToString(theDispPoints);
            var aScoreDiff = aHighScore - aLowScore;
            var aScaleDiff = aHighScale - aLowScale;
            var aRatio = Math.max(0.0, Math.min(1.0, (aScalePoints - aLowScore) / aHighScore));
            var aCorrectedRatio = Math.max(0.0, Math.min(1.0, (aCorrectedPoints - aLowScore) / aHighScore));
            var aScale = aLowScale + Math.min(1.0, aRatio * 2.0) * aScaleDiff;
            theY = ((Math.max(theY, 120)) | 0);
            if(aNewPoints == null && Game.Resources['FONT_FLOATERS'] != null) {
                var aMode = -1;
                aNewPoints = new Game.Points(Game.BejApp.mBejApp, Game.Resources['FONT_FLOATERS'], aString, theX, theY, aLife, 0, theColor, aMode);
                aNewPoints.mMoveCreditId = theMoveCreditId;
                aNewPoints.mId = theId;
                aNewPoints.mDestScale = aScale;
                aNewPoints.mScaleDifMult = 0.15;
                aNewPoints.mScaleDampening = 0.46 + (aScalePoints * 0.0015);
                if(aNewPoints.mScaleDampening > 0.962) {
                    aNewPoints.mScaleDampening = 0.962;
                }
                aNewPoints.mValue = thePoints;
                this.mPointsList.push(aNewPoints);
            } else if(aNewPoints != null) {
                aNewPoints.mString = aString;
                aNewPoints.RestartWobble();
                if(!aNewPoints.mDrawn) {
                    aNewPoints.mX = (theX + aNewPoints.mX) / 2;
                    aNewPoints.mY = (theY + aNewPoints.mY) / 2;
                }
            }
            aNewPoints.mColor = theColor;
            aNewPoints.mColorCycle[0].mCycleColors.clear();
            aNewPoints.mColorCycle[1].mCycleColors.clear();
            for(i = 0; i < 6; i++) {
                for(var aLayer = 0; aLayer < 3; aLayer++) {
                    var aLightness = 0;
                    var anAlpha = 0;
                    var aColorPct = 0;
                    var anInnerRatio = 0;
                    if(aLayer == 0) {
                        aColorPct = Math.min(1.0, Math.max(0.0, (aCorrectedRatio - 0.3) * 2.0));
                        anInnerRatio = Math.max(0.0, aCorrectedRatio - 0.5);
                        aLightness = (i % 2 == 0) ? 0.5 : (0.5 + anInnerRatio * 1.0);
                        anAlpha = 1.0;
                    } else if(aLayer == 1) {
                        aColorPct = Math.min(1.0, Math.max(0.0, (aCorrectedRatio - 0.3) * 2.0));
                        anInnerRatio = Math.max(0.0, aCorrectedRatio - 0.1);
                        aLightness = (i % 2 == 0) ? 0.5 : (0.5 + anInnerRatio * 1.0);
                        anAlpha = Math.max(0, (aCorrectedRatio - 0.5) * 3.0);
                    } else if(aLayer == 2) {
                        aColorPct = Math.min(1.0, Math.max(0.0, (aCorrectedRatio - 1.0) * 1.0));
                        aLightness = 1.0;
                        anAlpha = 0.7;
                    }
                    var aColor = GameFramework.gfx.Color.CreateFromInt(theColor);
                    aNewPoints.mColorCycle[aLayer].mCycleColors.push(GameFramework.gfx.Color.RGBAToInt((((this.Add_gCycleColors[i].mRed * aColorPct) + Math.min(255, aColor.mRed * aLightness * (1.0 - aColorPct))) | 0), (((this.Add_gCycleColors[i].mGreen * aColorPct) + Math.min(255, aColor.mGreen * aLightness * (1.0 - aColorPct))) | 0), (((this.Add_gCycleColors[i].mBlue * aColorPct) + Math.min(255, aColor.mBlue * aLightness * (1.0 - aColorPct))) | 0), ((anAlpha * 255) | 0)));
                }
            }
            aNewPoints.mColorCycle[0].SetPosition(0.25);
            aNewPoints.mColorCycle[1].SetPosition(0.75);
            aNewPoints.mColorCycling = true;
            aNewPoints.mCorrectedPoints = aCorrectedPoints;
            aNewPoints.mScalePoints = aScalePoints;
            aNewPoints.mWobbleScale = aRatio * 0.7;
            aNewPoints.mColor = 0xffffff | ((((255.0 * Math.min(1.0, 0.75 + aCorrectedRatio * 0.0)) | 0)) << 24);
            aNewPoints.mTimer = 0.6 + aRatio * 1.6;
            if(aNewPoints != null) {
                aNewPoints.mScale = aNewPoints.mDestScale * 0.1;
            }
        }
        return aNewPoints;
    },
    Find : function Game_PointsManager$Find(theId) {
        for(var i = 0; i < this.mPointsList.length; i++) {
            var aPoints = this.mPointsList[i];
            if(aPoints.mId == theId) {
                return aPoints;
            }
        }
        return null;
    },
    DrawOverlay : function Game_PointsManager$DrawOverlay(g) {

        {
            var $srcArray1 = this.mPointsList;
            for(var $enum1 = 0; $enum1 < $srcArray1.length; $enum1++) {
                var aPoints = $srcArray1[$enum1];
                aPoints.Draw(g);
            }
        }
    }
}
Game.PointsManager.staticInit = function Game_PointsManager$staticInit() {
}

JS_AddInitFunc(function() {
    Game.PointsManager.registerClass('Game.PointsManager', GameFramework.widgets.ClassicWidget);
});
JS_AddStaticInitFunc(function() {
    Game.PointsManager.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\PointsManager.cs
//LineMap:1=2 2=4 5=77 7=41 8=46 9=55 10=78 14=83 16=86 22=93 27=100 36=110 38=113 42=118 46=123 47=123 49=126 53=128 55=131 59=133 61=136 69=142 70=144 78=155 79=158 80=160 81=162 82=164 84=167 85=169 87=172 89=175 91=178 93=181 94=183 95=185 97=188 99=191 101=194 102=196 
//LineMap:103=198 136=58 150=200 154=211 157=215 160=219 165=225 171=232 173=235 174=237 178=242 182=244 185=256 187=257 192=263 194=266 197=270 205=277 209=282 212=286 214=289 221=297 226=301 229=305 231=310 234=314 237=318 239=332 246=340 247=342 252=359 265=371 267=375 
//LineMap:268=403 269=406 274=412 278=417 280=418 285=422 286=425 292=440 295=445 302=454 308=23 313=16 316=18 321=476 324=482 326=478 327=517 329=483 338=490 343=496 346=506 347=508 353=513 357=518 361=523 362=525 364=528 367=532 368=534 376=543 378=546 398=568 399=570 
//LineMap:401=573 403=576 404=578 405=580 409=585 412=589 416=594 417=596 419=596 421=600 429=609 432=613 440=622 447=627 449=631 454=634 456=638 460=645 464=654 466=657 472=664 475=668 478=670 486=679 489=688 491=695 493=695 497=698 
//Start:Profile
/**
 * @constructor
 */
Game.Profile = function Game_Profile() {
    this.mStats = Array.Create((Game.DM.EStat._COUNT | 0), 0);
    this.mGameStats = Array.Create((Game.DM.EStat._COUNT | 0), 0);
    this.ClearProfile();
    this.mProfileName = 'Player';
}
Game.Profile.prototype = {
    mProfileName : null,
    mFlags : 0,
    mNeedMoveProfileFiles : null,
    mIsNew : null,
    mStats : null,
    mLastQuestPage : 0,
    mLastQuestBlink : null,
    mGameStats : null,
    mOfflineRank : 0,
    mOfflineRankPoints : 0,
    mOnlineRank : 0,
    mOnlineRankPoints : 0,
    mOfflineGames : 0,
    mOnlineGames : 0,
    mTutorialFlags : 0,
    mTutorialEnabled : null,
    mSfxVolume : 0,
    mMusicVolume : 0,
    mAnimateBackground : null,
    mTipIdx : 0,
    ClearProfile : function Game_Profile$ClearProfile() {
        this.mProfileName = '';
        this.mIsNew = true;
        this.mOfflineRank = 0;
        this.mOfflineRankPoints = 0;
        this.mOnlineRank = 0;
        this.mOnlineRankPoints = 0;
        this.mOfflineGames = 0;
        this.mOnlineGames = 0;
        this.mFlags = 0;
        this.mLastQuestPage = 0;
        this.mAnimateBackground = GameFramework.BaseApp.mApp.get_Is3D();
        this.mLastQuestBlink = false;
        this.mSfxVolume = 0.5;
        this.mMusicVolume = 0.5;
        var i;
        for(i = 0; i < (Game.DM.EStat._COUNT | 0); i++) {
            this.mStats[i] = 0;
        }
        for(i = 0; i < (Game.DM.EStat._COUNT | 0); i++) {
            this.mGameStats[i] = 0;
        }
        this.mTutorialFlags = 0;
        this.mTutorialEnabled = true;
        this.mTipIdx = 0;
        this.mNeedMoveProfileFiles = false;
    },
    WriteProfile : function Game_Profile$WriteProfile() {
        GameFramework.Utils.Trace('WriteProfile()');
        var aSaveData = {};
        aSaveData['_VERSION'] = Game.Profile.VERSION;
        aSaveData['OfflineRank'] = this.mOfflineRank;
        aSaveData['OfflineRankPoints'] = this.mOfflineRankPoints;
        aSaveData['TutorialEnabled'] = this.mTutorialEnabled;
        aSaveData['TutorialFlags'] = (this.mTutorialFlags | 0);
        aSaveData['AnimateBackground'] = this.mAnimateBackground;
        aSaveData['MusicVolume'] = this.mMusicVolume;
        aSaveData['SfxVolume'] = this.mSfxVolume;
        var statArr = [];

        {
            var $srcArray1 = this.mStats;
            for(var $enum1 = 0; $enum1 < $srcArray1.length; $enum1++) {
                var aStat = $srcArray1[$enum1];
                statArr.push(aStat);
            }
        }
        aSaveData['Stats'] = statArr;
        GameFramework.BaseApp.mApp.SetLocalData(GameFramework.BaseApp.mApp.mProdName, 'Profile', GameFramework.BaseApp.mApp.EncodeJSON(aSaveData));
    },
    LoadProfile : function Game_Profile$LoadProfile() {
        var version = 0;
        GameFramework.Utils.Trace('LoadProfile()');
        try {
            var aData = GameFramework.BaseApp.mApp.GetLocalData(GameFramework.BaseApp.mApp.mProdName, 'Profile');
            if(aData != null) {
                var aSaveData = {};
                GameFramework.BaseApp.mApp.DecodeJSON(aData, aSaveData);
                if(aSaveData.hasOwnProperty('_VERSION')) {
                    version = (aSaveData['_VERSION'] | 0);
                }
                if(aSaveData.hasOwnProperty('OfflineRank')) {
                    this.mOfflineRank = (aSaveData['OfflineRank'] | 0);
                }
                if(aSaveData.hasOwnProperty('OfflineRankPoints')) {
                    this.mOfflineRankPoints = (aSaveData['OfflineRankPoints'] | 0);
                }
                if(aSaveData.hasOwnProperty('TutorialEnabled')) {
                    this.mTutorialEnabled = aSaveData['TutorialEnabled'];
                }
                if(aSaveData.hasOwnProperty('TutorialFlags')) {
                    this.mTutorialFlags = (((aSaveData['TutorialFlags'] | 0)) | 0);
                }
                if(aSaveData.hasOwnProperty('AnimateBackground')) {
                    this.mAnimateBackground = aSaveData['AnimateBackground'];
                }
                if(aSaveData.hasOwnProperty('MusicVolume')) {
                    this.mMusicVolume = aSaveData['MusicVolume'];
                }
                if(aSaveData.hasOwnProperty('SfxVolume')) {
                    this.mSfxVolume = aSaveData['SfxVolume'];
                }
                if(aSaveData.hasOwnProperty('Stats')) {
                    var statArr = aSaveData['Stats'];
                    var i = 0;
                    for(i = 0; i < (Game.DM.EStat._COUNT | 0); i++) {
                        this.mStats[i] = 0;
                    }
                    i = 0;

                    {
                        var $enum2 = ss.IEnumerator.getEnumerator(statArr);
                        while($enum2.moveNext()) {
                            var aStat = $enum2.get_current();
                            this.mStats[i++] = aStat;
                        }
                    }
                }
            }
        } catch(theE) {
            GameFramework.Utils.Trace('!!! Profile Read Error: ' + theE.get_Message());
        }
    },
    HasClearedTutorial : function Game_Profile$HasClearedTutorial(theTutorial) {
        return !this.mTutorialEnabled || (this.mTutorialFlags & (1 << theTutorial)) != 0;
    },
    AsBitField : function Game_Profile$AsBitField(theVal) {
        var s = '';
        for(var i = 31; i >= 0; --i) {
            s += ((theVal & (1 << i)) != 0) ? '1' : '0';
        }
        return s;
    },
    SetTutorialCleared : function Game_Profile$SetTutorialCleared(theTutorial, isCleared) {
        if(isCleared === undefined) {
            isCleared = true;
        }
        if(isCleared) {
            this.mTutorialFlags |= 1 << theTutorial;
        } else {
            this.mTutorialFlags &= ~(1 << theTutorial);
        }
    },
    GetRankPointsK : function Game_Profile$GetRankPointsK(theRank) {
        var aRankCutoff = 0;
        for(var aRankIdx = 0; aRankIdx < theRank; aRankIdx++) {
            var aThisRankPoints = 150;
            if(aRankIdx > 0) {
                aThisRankPoints += (aRankIdx | 0) * 100;
            }
            aRankCutoff += aThisRankPoints;
        }
        return aRankCutoff;
    },
    GetRankAtPointsK : function Game_Profile$GetRankAtPointsK(thePointsK) {
        var aNewRank = 0;
        var aRankCutoff = 0;
        var aThisRankPoints = 0;
        var aPointsLeft = thePointsK;
        for(; ;) {
            var aThisOtherRankPoints = 150;
            if(aNewRank > 0) {
                aThisOtherRankPoints += aNewRank * 100;
            }
            aRankCutoff += aThisOtherRankPoints;
            if(thePointsK < aRankCutoff) {
                break;
            }
            aPointsLeft -= aThisOtherRankPoints;
            aNewRank++;
        }
        if(aThisRankPoints != 0) {
            return aNewRank + (aPointsLeft / aThisRankPoints);
        } else {
            return aNewRank;
        }
    }
}
Game.Profile.staticInit = function Game_Profile$staticInit() {
    Game.Profile.VERSION = 1;
}

JS_AddInitFunc(function() {
    Game.Profile.registerClass('Game.Profile', null);
});
JS_AddStaticInitFunc(function() {
    Game.Profile.staticInit();
});
Game.Profile.PROF_FLAG_HELPSEEN = {};
Game.Profile.PROF_FLAG_HELPSEEN.staticInit = function Game_Profile_PROF_FLAG_HELPSEEN$staticInit() {
    Game.Profile.PROF_FLAG_HELPSEEN.POKER = 0;
    Game.Profile.PROF_FLAG_HELPSEEN.BUTTERFLY = 1;
    Game.Profile.PROF_FLAG_HELPSEEN.ICESTORM = 2;
    Game.Profile.PROF_FLAG_HELPSEEN.GOLDRUSH = 3;
}
JS_AddInitFunc(function() {
    Game.Profile.PROF_FLAG_HELPSEEN.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\Profile.cs
//LineMap:1=25 2=27 5=400 7=63 8=68 9=401 10=403 35=89 51=106 54=110 56=113 62=120 74=133 77=134 81=135 84=136 85=138 95=147 102=155 118=172 124=179 127=180 131=182 138=190 142=755 159=770 160=775 166=784 174=793 185=805 190=811 196=818 204=39 209=41 212=43 
//Start:Program
GameDll = Type.registerNamespace('GameDll');
/**
 * @constructor
 */
GameDll.Program = function GameDll_Program() {
}
GameDll.Program.Main = function GameDll_Program$Main() {
}
GameDll.Program.prototype = {

}
GameDll.Program.staticInit = function GameDll_Program$staticInit() {
    GameDll.Program.mBejApp = null;
}

JS_AddInitFunc(function() {
    GameDll.Program.registerClass('GameDll.Program', null);
});
JS_AddStaticInitFunc(function() {
    GameDll.Program.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\Program.cs
//LineMap:2=8 9=21 
//Start:RankBarWidget
/**
 * @constructor
 */
Game.RankBarWidget = function Game_RankBarWidget(theWidth, theBoard, theRankUpDialog, drawText) {
    this.mRankupGlow = new GameFramework.CurvedVal();
    Game.RankBarWidget.initializeBase(this);
    this.mBoard = theBoard;
    this.mRankUpDialog = theRankUpDialog;
    this.mDrawText = drawText;
    this.mPrevFocus = null;
    this.mDispRank = Game.BejApp.mBejApp.mProfile.mOfflineRank;
    var aPrevRankPoints = Game.BejApp.mBejApp.mProfile.mOfflineRankPoints;
    this.mRankDelay = 0;
    if(this.mBoard != null) {
        var app = Game.BejApp.mBejApp;
        app.mProfile.mOfflineRankPoints += ((this.mBoard.mGameStats[(Game.DM.EStat.POINTS | 0)] / this.mBoard.GetRankPointMultiplier() / 1000) | 0);
        app.mProfile.mOfflineRank = (app.mProfile.GetRankAtPointsK(app.mProfile.mOfflineRankPoints) | 0);
    }
    this.mDispRankPointsOffset = (aPrevRankPoints - Game.BejApp.mBejApp.mProfile.mOfflineRankPoints);
    this.Resize(0, 0, theWidth, 142);
}
Game.RankBarWidget.prototype = {
    mRankupGlow : null,
    mDispRankPointsOffset : 0,
    mDispRank : 0,
    mRankDelay : 0,
    mDrawText : null,
    mBoard : null,
    mRankUpDialog : null,
    mPrevFocus : null,
    Update : function Game_RankBarWidget$Update() {
        GameFramework.widgets.ClassicWidget.prototype.Update.apply(this);
        var app = Game.BejApp.mBejApp;
        if(app.GetDialog(Game.DM.EDialog.UNLOCK) != null) {
            return;
        }
        if(this.mBoard == null) {
            return;
        }
        this.mRankupGlow.IncInVal();
        if(this.mRankDelay > 0) {
            --this.mRankDelay;
        } else if((this.mDispRankPointsOffset < 0) && (this.mUpdateCnt >= 90)) {
            if(this.mUpdateCnt % 12 == 0) {
                app.PlaySound(Game.Resources['SOUND_RANK_COUNTUP']);
            }
            this.mDispRankPointsOffset = Math.min(0.0, this.mDispRankPointsOffset + (-this.mDispRankPointsOffset) / 100.0 + 0.1);
            var aNewRank = (app.mProfile.GetRankAtPointsK((this.mDispRankPointsOffset | 0) + Game.BejApp.mBejApp.mProfile.mOfflineRankPoints) | 0);
            if(aNewRank > this.mDispRank) {
                app.PlaySound(Game.Resources['SOUND_RANKUP']);
                this.mDispRank = aNewRank;
                this.mDispRankPointsOffset = 0;
                this.mRankDelay = 84;
                this.mRankupGlow.SetCurve('b+0,1,0.004167,1,#### 9~### (#### 5g### .#### 3W### ;#### BJ### X####');
                if(this.mRankUpDialog != null) {
                    this.mRankUpDialog.DoRankUp();
                }
            }
        }
    },
    Draw : function Game_RankBarWidget$Draw(g) {
        var app = Game.BejApp.mBejApp;
        if(this.mBoard == null && !app.mMainMenu.mDrawMainMenu) {
            return;
        }
        g.SetFont(Game.Resources['FONT_GAMEOVER_DIALOG']);
        g.GetFont().PushLayerColor('MAIN', 0xffffffff);
        g.GetFont().PushLayerColor('OUTLINE', 0xff000000);
        g.GetFont().PushLayerColor('GLOW', 0);
        var aRank = this.GetRank();
        var aRankPoints = this.GetRankPoints();
        var aY = 95;
        var aNextRankPoints = this.GetNextRankPoints();
        var aBaseRankPoints = app.mProfile.GetRankPointsK((aRank | 0));
        if(this.mRankDelay > 0) {
            aBaseRankPoints = app.mProfile.GetRankPointsK((aRank | 0) - 1);
        }
        var aNextRankPct = Math.min(((aRankPoints - aBaseRankPoints) + this.mDispRankPointsOffset) / (aNextRankPoints - aBaseRankPoints), 1.0);
        g.DrawImage(Game.Resources['IMAGE_RECORDS_RANK_PLATE'].get_OffsetImage(), 0, 0);
        var aShowPct = aNextRankPct;
        if(aShowPct != 0.0) {
            var anImageInst = Game.Resources['IMAGE_RECORDS_RANK_FILL'].CreateImageInstRect(0, 0, ((Game.Resources['IMAGE_RECORDS_RANK_FILL'].mPhysCelWidth * aShowPct) | 0), Game.Resources['IMAGE_RECORDS_RANK_FILL'].mPhysCelHeight);
            g.DrawImage(anImageInst, Game.Resources['IMAGE_RECORDS_RANK_FILL'].mOffsetX, Game.Resources['IMAGE_RECORDS_RANK_FILL'].mOffsetY);
        }
        if((this.mRankupGlow != null) && (this.mRankupGlow.get_v() != 0)) {
            Game.Resources['IMAGE_RECORDS_RANK_GLOW'].mAdditive = true;
            var _t1 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.mRankupGlow.get_v()));
            try {
                g.DrawImage(Game.Resources['IMAGE_RECORDS_RANK_GLOW'].get_OffsetImage(), 0, 0);
            } finally {
                _t1.Dispose();
            }
        }
        if(this.mDrawText) {
            g.DrawStringEx(String.format('Rank: {0:d}', aRank + 1), 170, aY, -1, -1);
            if(this.mBoard != null) {
                g.DrawStringEx(app.mRankNames[((Math.min((aRank | 0), (app.mRankNames.length | 0) - 1)) | 0)], this.mWidth / 2 + 40, aY, -1, 0);
                g.DrawStringEx(String.format('{0}k to go', GameFramework.Utils.CommaSeperate((this.GetRankPointsRemaining() | 0))), this.mWidth - 40, aY, -1, 1);
            }

            else {
                g.DrawStringEx(this.GetRankName(aRank), this.mWidth - 40, aY, -1, 1);
            }
        }
        g.GetFont().PopLayerColor('MAIN');
        g.GetFont().PopLayerColor('OUTLINE');
        g.GetFont().PopLayerColor('GLOW');
    },
    GetRank : function Game_RankBarWidget$GetRank() {
        if(this.mBoard != null) {
            return (this.mDispRank | 0);
        } else {
            return (Game.BejApp.mBejApp.mProfile.mOfflineRank | 0);
        }
    },
    GetRankPoints : function Game_RankBarWidget$GetRankPoints() {
        return Game.BejApp.mBejApp.mProfile.mOfflineRankPoints;
    },
    GetNextRankPoints : function Game_RankBarWidget$GetNextRankPoints() {
        if(this.mRankDelay > 0) {
            return Game.BejApp.mBejApp.mProfile.GetRankPointsK((this.GetRank() | 0));
        } else {
            return Game.BejApp.mBejApp.mProfile.GetRankPointsK((this.GetRank() | 0) + 1);
        }
    },
    GetRankName : function Game_RankBarWidget$GetRankName(aRank) {
        return Game.BejApp.mBejApp.mRankNames[((Math.min((aRank | 0), (Game.BejApp.mBejApp.mRankNames.length | 0) - 1)) | 0)];
    },
    GetRankPointsRemaining : function Game_RankBarWidget$GetRankPointsRemaining() {
        return ((Math.max(0, (((((this.GetNextRankPoints() - this.GetRankPoints() - this.mDispRankPointsOffset) * this.mBoard.GetRankPointMultiplier())) | 0)))) | 0);
    },
    MouseEnter : function Game_RankBarWidget$MouseEnter() {
        GameFramework.widgets.ClassicWidget.prototype.MouseEnter.apply(this);
        if(Game.BejApp.mBejApp.mDebugKeysEnabled) {
            this.mPrevFocus = Game.BejApp.mBejApp.mBaseWidgetAppState.mFocusWidget;
            Game.BejApp.mBejApp.mBaseWidgetAppState.SetFocus(this);
        }
    },
    MouseLeave : function Game_RankBarWidget$MouseLeave() {
        GameFramework.widgets.ClassicWidget.prototype.MouseLeave.apply(this);
        if(Game.BejApp.mBejApp.mDebugKeysEnabled) {
            if(this.mPrevFocus != null) {
                Game.BejApp.mBejApp.mBaseWidgetAppState.SetFocus(this.mPrevFocus);
            }
        }
    },
    KeyChar : function Game_RankBarWidget$KeyChar(theChar) {
        if(Game.BejApp.mBejApp.mDebugKeysEnabled) {
            switch(theChar) {
                case 61:
                case 43:

                {
                    Game.BejApp.mBejApp.mProfile.mOfflineRank++;
                    Game.BejApp.mBejApp.mProfile.mOfflineRankPoints = (Game.BejApp.mBejApp.mProfile.GetRankPointsK((Game.BejApp.mBejApp.mProfile.mOfflineRank | 0)) | 0) + 50;
                    this.mDispRankPointsOffset = -100.0;
                    break;
                }

                case 45:

                {
                    if(Game.BejApp.mBejApp.mProfile.mOfflineRank > 0) {
                        Game.BejApp.mBejApp.mProfile.mOfflineRank--;
                        Game.BejApp.mBejApp.mProfile.mOfflineRankPoints = (Game.BejApp.mBejApp.mProfile.GetRankPointsK((Game.BejApp.mBejApp.mProfile.mOfflineRank | 0)) | 0);
                        if(this.mDispRank > Game.BejApp.mBejApp.mProfile.mOfflineRank) {
                            this.mDispRank = Game.BejApp.mBejApp.mProfile.mOfflineRank;
                        }
                        this.mDispRankPointsOffset = 0;
                    }
                    break;
                }

            }
            ;
        }
        GameFramework.widgets.ClassicWidget.prototype.KeyChar.apply(this, [theChar]);
    }
}
Game.RankBarWidget.staticInit = function Game_RankBarWidget$staticInit() {
}

JS_AddInitFunc(function() {
    Game.RankBarWidget.registerClass('Game.RankBarWidget', GameFramework.widgets.ClassicWidget);
});
JS_AddStaticInitFunc(function() {
    Game.RankBarWidget.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\RankBarWidget.cs
//LineMap:2=3 5=33 7=19 9=34 12=38 13=41 16=47 19=52 22=61 23=63 36=72 39=76 44=82 45=84 48=88 50=91 51=93 65=108 70=114 74=119 76=122 77=124 79=127 81=130 83=133 84=136 85=145 88=150 91=154 97=158 104=162 107=166 115=173 118=177 123=181 131=188 133=193 136=195 144=202 
//LineMap:149=206 157=215 159=218 164=222 167=227 174=233 176=236 179=238 180=240 181=242 183=243 189=246 190=250 192=251 196=256 198=261 204=265 206=269 
//Start:RankUpDialog
/**
 * @constructor
 */
Game.RankUpDialog = function Game_RankUpDialog(theBoard) {
    this.mRankUpAnimPct = new GameFramework.CurvedVal();
    Game.RankUpDialog.initializeBase(this, [null, Game.Resources['IMAGE_DIALOG_BUTTON'], Game.DM.EDialog.RANK_AWARD, true, 'RANK UP', '', '', GameFramework.widgets.Dialog.BUTTONS_FOOTER]);
    this.mBoard = theBoard;
    this.mContentInsets.mTop = 17;
    this.mRankBarWidget = null;
    this.mYesButton.mLabel = 'OK';
    this.mYesButton.mWidth = 200;
    this.mYesButton.mX = (this.mWidth - 200) / 2;
    this.mYesButton.mY += 10;
    this.mYesButton = null;
    this.mRankBarWidget = new Game.RankBarWidget(1000, this.mBoard, this, false);
    this.mRankBarWidget.Move((this.mWidth - 1000) / 2, 225);
    this.AddWidget(this.mRankBarWidget);
}
Game.RankUpDialog.prototype = {
    mBoard : null,
    mRankBarWidget : null,
    mRankUpAnimPct : null,
    Draw : function Game_RankUpDialog$Draw(g) {
        Game.Bej3Dialog.prototype.Draw.apply(this, [g]);
        var _t1 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * this.mBoard.GetBoardAlpha()) | 0)));
        try {
            var aRank = this.mRankBarWidget.GetRank();
            var aX = ((this.mWidth / 2.0) | 0);
            var aY = 150;
            g.SetFont(Game.Resources['FONT_DIALOG_SMALL_TEXT']);
            var _t2 = g.PushColor(GameFramework.gfx.Color.RGBToInt(80, 40, 20));
            try {
                g.DrawStringCentered('You have been promoted to:', aX, aY);
                aY += 270;
                g.DrawStringCentered('Your next rank will be earned in:', aX, aY);
                aY += 55;
            } finally {
                _t2.Dispose();
            }
            if((this.mRankBarWidget.GetRankPointsRemaining() | 0) > 0) {
                g.SetFont(Game.Resources['FONT_GAMEOVER_DIALOG']);
                Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('GLOW', GameFramework.gfx.Color.RGBAToInt(192, 96, 48, 80));
                Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('OUTLINE', GameFramework.gfx.Color.RGBToInt(64, 32, 16));
                g.DrawStringCentered(GameFramework.Utils.CommaSeperate((this.mRankBarWidget.GetRankPointsRemaining() | 0)) + ',000 Points', aX, aY);
                Game.Resources['FONT_GAMEOVER_DIALOG'].PopLayerColor('GLOW');
                Game.Resources['FONT_GAMEOVER_DIALOG'].PopLayerColor('OUTLINE');
            }
            aY -= 260;
            var aTextScale = new GameFramework.CurvedVal();
            aTextScale.SetCurveLinked('b+1,1.5,0,1,####   P~###      P####', this.mRankUpAnimPct);
            var aGlowScale = new GameFramework.CurvedVal();
            aGlowScale.SetCurveLinked('b#1,2,0,1,#         ~~', this.mRankUpAnimPct);
            var aGlowAlpha = new GameFramework.CurvedVal();
            aGlowAlpha.SetCurveLinked('b+0,1,0,1,####     $~###    }####', this.mRankUpAnimPct);
            g.SetFont(Game.Resources['FONT_RANKUP_NAME']);
            var _t3 = g.PushScale(aTextScale.GetOutVal(), aTextScale.GetOutVal(), aX, aY - 20.0);
            try {
                g.mFont.PushLayerColor('GLOW', GameFramework.gfx.Color.RGBToInt(192, 96, 48));
                g.mFont.PushLayerColor('OUTLINE', GameFramework.gfx.Color.RGBToInt(80, 40, 20));
                g.DrawStringCentered(this.mRankBarWidget.GetRankName(aRank), aX, aY);
                g.mFont.PopLayerColor('GLOW');
                g.mFont.PopLayerColor('OUTLINE');
            } finally {
                _t3.Dispose();
            }
            var _t4 = g.PushScale(aGlowScale.GetOutVal(), aGlowScale.GetOutVal(), aX, aY - 20.0);
            try {
                var _t5 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * aGlowAlpha.GetOutVal()) | 0)));
                try {
                    g.DrawStringCentered(this.mRankBarWidget.GetRankName(aRank), aX, aY);
                } finally {
                    _t5.Dispose();
                }
            } finally {
                _t4.Dispose();
            }
        } finally {
            _t1.Dispose();
        }
    },
    Update : function Game_RankUpDialog$Update() {
        Game.Bej3Dialog.prototype.Update.apply(this);
        if((Game.BejApp.mBejApp.mAutoPlay != Game.DM.EAutoplay.None) && (!this.mScale.IsDoingCurve()) && (this.mScale.GetOutVal() == 1.0) && (this.mUpdateCnt >= 300)) {
            var aWidgetEvent = new GameFramework.widgets.WidgetEvent(GameFramework.widgets.WidgetEvent.CLICKED);
            aWidgetEvent.mX = this.mYesButton.mX;
            aWidgetEvent.mY = this.mYesButton.mY;
            this.mYesButton.DispatchEvent(aWidgetEvent);
        }
    },
    ButtonDepress : function Game_RankUpDialog$ButtonDepress(theEvent) {
        Game.Bej3Dialog.prototype.ButtonDepress.apply(this, [theEvent]);
        this.Kill();
    },
    DoRankUp : function Game_RankUpDialog$DoRankUp() {
        this.mRankUpAnimPct.SetCurve('b30,1,0.028571,1,#         ~~');
    }
}
Game.RankUpDialog.staticInit = function Game_RankUpDialog$staticInit() {
}

JS_AddInitFunc(function() {
    Game.RankUpDialog.registerClass('Game.RankUpDialog', Game.Bej3Dialog);
});
JS_AddStaticInitFunc(function() {
    Game.RankUpDialog.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\RankUpDialog.cs
//LineMap:2=3 5=16 7=13 8=15 9=17 11=20 12=24 17=32 27=46 30=50 33=52 34=54 36=57 40=60 43=64 49=67 58=79 59=81 61=84 63=87 65=90 66=92 69=94 79=101 82=105 85=107 103=112 106=117 115=127 118=131 
//Start:RecordsDialog
/**
 * @constructor
 */
Game.RecordsDialog = function Game_RecordsDialog(theFromEndLevelDialog) {
    if(theFromEndLevelDialog === undefined) {
        theFromEndLevelDialog = false;
    }
    this.mSpeedHighScores = [];
    this.mClassicHighScores = [];
    Game.RecordsDialog.initializeBase(this, [Game.Resources['IMAGE_DIALOG_HEADERLESS_BKG'], Game.Resources['IMAGE_DIALOG_BUTTON'], Game.DM.EDialog.RECORDS, true, '', '', '', GameFramework.widgets.Dialog.BUTTONS_FOOTER]);
    this.mFromEndLevelDialog = theFromEndLevelDialog;
    this.mRankBar = new Game.RankBarWidget(1195, null, null, true);
    this.mRankBar.Move(200, 240);
    this.AddWidget(this.mRankBar);
    Game.BejApp.mBejApp.mBaseWidgetAppState.SetFocus(this.mRankBar);
    this.CollectHighScores('Lightning', this.mSpeedHighScores);
    this.CollectHighScores('Classic', this.mClassicHighScores);
    this.mYesButton.mLabel = 'OK';
}
Game.RecordsDialog.prototype = {
    mRankBar : null,
    mFromEndLevelDialog : null,
    mSpeedHighScores : null,
    mClassicHighScores : null,
    Update : function Game_RecordsDialog$Update() {
        Game.Bej3Dialog.prototype.Update.apply(this);
        var w = 1400;
        var h = this.mFromEndLevelDialog ? 930 : 1050;
        this.mRankBar.Move(((w / 2) | 0) - this.mRankBar.mWidth / 2, ((h / 2) | 0));
        this.Resize(((Game.BejApp.mBejApp.mWidth / 2) | 0) - ((w / 2) | 0), ((Game.BejApp.mBejApp.mHeight / 2) | 0) - ((h / 2) | 0), w, h);
    },
    Draw : function Game_RecordsDialog$Draw(g) {
        Game.Bej3Dialog.prototype.Draw.apply(this, [g]);
        var stampX = this.mWidth / 2.0 - 2;
        var stampY = 142.0;
        var _t1 = g.PushScale(0.65, 0.65, stampX, stampY);
        try {
            g.DrawImage(Game.Resources['IMAGE_GAMEOVER_STAMP'].get_CenteredImage(), stampX, stampY);
        } finally {
            _t1.Dispose();
        }
        g.SetFont(Game.Resources['FONT_GAMEOVER_DIALOG_HUGE']);
        g.GetFont().PushLayerColor('MAIN', 0xff884818);
        g.DrawStringCentered('Records', this.mWidth / 2, 152);
        g.GetFont().PopLayerColor('MAIN');
        var _t2 = g.PushTranslate(0.0, -10.0);
        try {
            this.DrawStats(g);
        } finally {
            _t2.Dispose();
        }
        this.DrawTopScores(g);
    },
    DrawStats : function Game_RecordsDialog$DrawStats(g) {
        g.SetFont(Game.Resources['FONT_GAMEOVER_DIALOG']);
        g.mFont.PushLayerColor('OUTLINE', GameFramework.gfx.Color.RGBToInt(64, 24, 8));
        g.mFont.PushLayerColor('GLOW', GameFramework.gfx.Color.RGBAToInt(0, 0, 0, 0));
        var aColorStr = 'N/A';
        var aFavIdx = -1;
        var aFavNum = 0;
        for(var i = 0; i < 7; i++) {
            if(Game.BejApp.mBejApp.mProfile.mStats[(Game.DM.EStat.RED_CLEARED | 0) + i] > aFavNum) {
                aFavNum = Game.BejApp.mBejApp.mProfile.mStats[(Game.DM.EStat.RED_CLEARED | 0) + i];
                aFavIdx = i;
            }
        }
        if(aFavIdx > -1) {
            aColorStr = Game.RecordsDialog.mColorStrs[aFavIdx];
        }
        var aTime = ((Game.BejApp.mBejApp.mProfile.mStats[(Game.DM.EStat.SECONDS_PLAYED | 0)] / 10) | 0);
        var aTimeStr;
        if(aTime < 60) {
            aTimeStr = String.format('{0} second', aTime);
            if(aTime != 1) {
                aTimeStr += String.fromCharCode(115);
            }
        } else if(aTime < 3600) {
            aTime = ((aTime) / 60) | 0;
            aTimeStr = String.format('{0} minute', aTime);
            if(aTime != 1) {
                aTimeStr += String.fromCharCode(115);
            }
        } else {
            aTimeStr = String.format('{0:0.0} hours', aTime / 3600);
        }
        var statFields = Array.Create(4, "", 'All-Time Best Move:', 'Total Time Played:', 'Gems Matched:', 'Favorite Gem Color:');
        var statFieldResults = Array.Create(4, "", GameFramework.Utils.CommaSeperate(Game.BejApp.mBejApp.mProfile.mStats[(Game.DM.EStat.BIGGESTMOVE | 0)]) + ' pts', aTimeStr, GameFramework.Utils.CommaSeperate(Game.BejApp.mBejApp.mProfile.mStats[(Game.DM.EStat.GEMS_CLEARED | 0)]), aColorStr);
        if(this.mFromEndLevelDialog) {
            g.PushTranslate(0, -120);
        }
        if(!this.mFromEndLevelDialog) {
            g.DrawImageBox(Game.Resources['IMAGE_GAMEOVER_LIGHT_BOX'], 110, 610, 1175, 300, 0);
        } else {
            g.DrawImageBox(Game.Resources['IMAGE_GAMEOVER_LIGHT_BOX'], 110, 650, 1175, 260, 0);
        }
        var _t3 = g.PushColor(0xffddccaa);
        try {
            g.DrawImageBox(Game.Resources['IMAGE_GAMEOVER_LIGHT_BOX'], 125, 670, 1145, 225, 0);
        } finally {
            _t3.Dispose();
        }
        var x = 205;
        var y = 730;
        var _t4 = g.PushColor(0xfffec968);
        try {
            for(var i_2 = 0; i_2 < statFields.length; ++i_2) {
                g.DrawString(statFields[i_2], x, y);
                var wantColorize = statFieldResults[i_2] == aColorStr && aFavIdx >= 0;
                if(wantColorize) {
                    g.SetColor(Game.RecordsDialog.mColorInts[aFavIdx]);
                }
                g.DrawStringEx(statFieldResults[i_2], x + 984, y, 0, 1);
                if(wantColorize) {
                    g.UndoSetColor();
                }
                y += 46;
            }
        } finally {
            _t4.Dispose();
        }
        if(this.mFromEndLevelDialog) {
            g.PopMatrix();
        }
        g.mFont.PopLayerColor('OUTLINE');
        g.mFont.PopLayerColor('GLOW');
    },
    DrawTopScores : function Game_RecordsDialog$DrawTopScores(g) {
        var _t5 = g.PushTranslate(98, 240);
        try {
            this.DrawHighScores(g, 'CLASSIC', this.mClassicHighScores);
        } finally {
            _t5.Dispose();
        }
        var _t6 = g.PushTranslate(this.mWidth - 600 - 102, 240);
        try {
            this.DrawHighScores(g, 'SPEED', this.mSpeedHighScores);
        } finally {
            _t6.Dispose();
        }
    },
    CollectHighScores : function Game_RecordsDialog$CollectHighScores(theName, theScores) {
        var table = Game.BejApp.mBejApp.mHighScoreMgr.GetOrCreateTable(theName);
        for(var i = 0; i < table.mHighScores.length; ++i) {
            theScores.push(table.mHighScores[i]);
        }
    },
    DrawHighScores : function Game_RecordsDialog$DrawHighScores(g, theHeader, theScores) {
        g.SetFont(this.mHeaderFont);
        g.GetFont().PushLayerColor('MAIN', 0xffffffff);
        g.GetFont().PushLayerColor('OUTLINE', 0xff000000);
        g.GetFont().PushLayerColor('GLOW', 0x0);
        g.DrawStringCentered(theHeader, 300, -10);
        g.GetFont().PopLayerColor('MAIN');
        g.GetFont().PopLayerColor('OUTLINE');
        g.GetFont().PopLayerColor('GLOW');
        g.SetFont(Game.Resources['FONT_GAMEOVER_DIALOG']);
        g.DrawImageBox(Game.Resources['IMAGE_GAMEOVER_LIGHT_BOX'], 0.0, 0.0, 600.0, 280.0, 0);
        var xOff = 30;
        var yOff = 70;
        for(var i = 0; i < (Math.min(5, theScores.length) | 0); ++i) {
            var clr = ~0;
            if((theScores[i].mIsNew) || (i == -1)) {
                Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('MAIN', 0xfffdf7b0);
                Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('OUTLINE', 0xff404000);
                Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('GLOW', GameFramework.gfx.Color.RGBAToInt(255, 255, 0, 215 + ((40.0 * Math.sin(this.mUpdateCnt * 0.07)) | 0)));
            }

            else {
                Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('MAIN', 0xfffdf7b0);
                Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('OUTLINE', 0xff404000);
                Game.Resources['FONT_GAMEOVER_DIALOG'].PushLayerColor('GLOW', 0);
            }
            var _t7 = g.PushColor(clr);
            try {
                if(theScores[i].mName != null) {
                    var aScore = Game.GlobalMembersEndLevelDialog.Unkern(GameFramework.Utils.CommaSeperate(theScores[i].mScore));
                    g.DrawStringEx(String.format('{0:d}.', i + 1), xOff + 0, yOff + 45 * i, 1, -1);
                    g.DrawStringEx(Game.GfxUtil.GetEllipsisString(g, theScores[i].mName, 455 - (g.StringWidth(aScore) | 0)), xOff + 50, yOff + 45 * i, -1, -1);
                    g.DrawStringEx(aScore, xOff + 540, yOff + 45 * i, -1, 1);
                } else if(i == 0) {
                    g.DrawStringEx('No scores posted', 300, 120, -1, 0);
                }
                Game.Resources['FONT_GAMEOVER_DIALOG'].PopLayerColor('MAIN');
                Game.Resources['FONT_GAMEOVER_DIALOG'].PopLayerColor('OUTLINE');
                Game.Resources['FONT_GAMEOVER_DIALOG'].PopLayerColor('GLOW');
            } finally {
                _t7.Dispose();
            }
        }
    },
    ButtonDepress : function Game_RecordsDialog$ButtonDepress(theEvent) {
        Game.Bej3Dialog.prototype.ButtonDepress.apply(this, [theEvent]);
        this.Kill();
    }
}
Game.RecordsDialog.staticInit = function Game_RecordsDialog$staticInit() {
    Game.RecordsDialog.mColorStrs = Array.Create(7, 7, 'Red', 'White', 'Green', 'Yellow', 'Purple', 'Orange', 'Blue');
    Game.RecordsDialog.mColorInts = Array.Create(7, 7, 0xffff0000, 0xffffffff, 0xff00ff00, 0xffffff00, 0xffff00ff, 0xffff9900, 0xff0099ff);
}

JS_AddInitFunc(function() {
    Game.RecordsDialog.registerClass('Game.RecordsDialog', Game.Bej3Dialog);
});
JS_AddStaticInitFunc(function() {
    Game.RecordsDialog.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\RecordsDialog.cs
//LineMap:2=3 5=21 7=19 8=14 10=20 11=22 16=28 18=31 27=34 33=41 36=45 39=49 44=53 50=56 51=59 52=62 54=77 57=79 63=82 71=91 72=93 74=96 82=105 84=113 85=115 86=117 92=121 94=125 99=131 101=132 103=138 104=146 105=154 107=157 111=162 114=164 120=167 125=171 128=175 129=177 
//LineMap:131=180 132=182 134=185 141=193 143=196 152=204 158=207 161=209 169=213 172=218 176=230 178=235 186=245 187=247 188=249 195=257 206=269 209=271 216=276 218=280 220=283 231=290 239=16 
//Start:Resources
/**
 * @constructor
 */
Game.Resources = function Game_Resources() {
}
Game.Resources.prototype = {

}
Game.Resources.staticInit = function Game_Resources$staticInit() {
    Game.Resources.IMAGE_GEMLIGHTING_ID = 'IMAGE_GEMLIGHTING';
    Game.Resources.IMAGE_SPARKLE_ID = 'IMAGE_SPARKLE';
    Game.Resources.IMAGE_PARTICLES_BOARD_FLAME_EMBERS_0_BASIC_BLUR_ID = 'IMAGE_PARTICLES_BOARD_FLAME_EMBERS_0_BASIC_BLUR';
    Game.Resources.IMAGE_PARTICLES_COUNTDOWNBAR_0_SMALL_BLUR_STAR_ID = 'IMAGE_PARTICLES_COUNTDOWNBAR_0_SMALL_BLUR_STAR';
    Game.Resources.IMAGE_PARTICLES_COUNTDOWNBAR_1_BASIC_BLUR_ID = 'IMAGE_PARTICLES_COUNTDOWNBAR_1_BASIC_BLUR';
    Game.Resources.IMAGE_PARTICLES_DISCOBALL_0_DISCO_GLOW_ID = 'IMAGE_PARTICLES_DISCOBALL_0_DISCO_GLOW';
    Game.Resources.IMAGE_PARTICLES_DISCOBALL_1_DISCO_GLOW_ID = 'IMAGE_PARTICLES_DISCOBALL_1_DISCO_GLOW';
    Game.Resources.IMAGE_PARTICLES_DISCOBALL_2_BLURRED_SHARP_STAR_ID = 'IMAGE_PARTICLES_DISCOBALL_2_BLURRED_SHARP_STAR';
    Game.Resources.IMAGE_PARTICLES_FIRE_TRAIL_0_BASIC_BLUR_ID = 'IMAGE_PARTICLES_FIRE_TRAIL_0_BASIC_BLUR';
    Game.Resources.IMAGE_PARTICLES_FIREGEM_HYPERSPACE_0_BASIC_BLUR_ID = 'IMAGE_PARTICLES_FIREGEM_HYPERSPACE_0_BASIC_BLUR';
    Game.Resources.IMAGE_PARTICLES_GEM_LANDING_FX_0_CERCLEM_ID = 'IMAGE_PARTICLES_GEM_LANDING_FX_0_CERCLEM';
    Game.Resources.IMAGE_PARTICLES_GEM_LANDING_FX_1_BLURRED_SHARP_STAR_ID = 'IMAGE_PARTICLES_GEM_LANDING_FX_1_BLURRED_SHARP_STAR';
    Game.Resources.IMAGE_PARTICLES_HINTFLASH_0_CERCLEM_ID = 'IMAGE_PARTICLES_HINTFLASH_0_CERCLEM';
    Game.Resources.IMAGE_PARTICLES_HYPERCUBE_0_BASIC_BLUR_ID = 'IMAGE_PARTICLES_HYPERCUBE_0_BASIC_BLUR';
    Game.Resources.IMAGE_PARTICLES_LIGHTNING_POWERED_BOTTOM_0_LIGHTNINGPARTICLE_ID = 'IMAGE_PARTICLES_LIGHTNING_POWERED_BOTTOM_0_LIGHTNINGPARTICLE';
    Game.Resources.IMAGE_PARTICLES_LIGHTNING_POWERED_LEFTRIGHT_0_LIGHTNINGPARTICLE_ID = 'IMAGE_PARTICLES_LIGHTNING_POWERED_LEFTRIGHT_0_LIGHTNINGPARTICLE';
    Game.Resources.IMAGE_PARTICLES_LIGHTNING_POWERED_LEFTRIGHT_1_LIGHTNINGPARTICLE_ID = 'IMAGE_PARTICLES_LIGHTNING_POWERED_LEFTRIGHT_1_LIGHTNINGPARTICLE';
    Game.Resources.IMAGE_PARTICLES_LIGHTNING_POWERED_MEGASHARD_0_LIGHTNINGPARTICLE_ID = 'IMAGE_PARTICLES_LIGHTNING_POWERED_MEGASHARD_0_LIGHTNINGPARTICLE';
    Game.Resources.IMAGE_PARTICLES_LIGHTNING_POWERED_MEGASHARD_1_LIGHTNINGPARTICLE_ID = 'IMAGE_PARTICLES_LIGHTNING_POWERED_MEGASHARD_1_LIGHTNINGPARTICLE';
    Game.Resources.IMAGE_PARTICLES_LIGHTNING_STEAMPULSE_0_BASIC_BLUR_ID = 'IMAGE_PARTICLES_LIGHTNING_STEAMPULSE_0_BASIC_BLUR';
    Game.Resources.IMAGE_PARTICLES_MAINMENU3_0_BLURRED_SPLOTCH_ID = 'IMAGE_PARTICLES_MAINMENU3_0_BLURRED_SPLOTCH';
    Game.Resources.IMAGE_PARTICLES_MULTIPLIER_0_RAY_ID = 'IMAGE_PARTICLES_MULTIPLIER_0_RAY';
    Game.Resources.IMAGE_PARTICLES_QUEST_DIG_COLLECT_GOLD_0_SMALL_BLUR_STAR_ID = 'IMAGE_PARTICLES_QUEST_DIG_COLLECT_GOLD_0_SMALL_BLUR_STAR';
    Game.Resources.IMAGE_PARTICLES_QUEST_DIG_COLLECT_GOLD_1_BASIC_BLUR_ID = 'IMAGE_PARTICLES_QUEST_DIG_COLLECT_GOLD_1_BASIC_BLUR';
    Game.Resources.IMAGE_PARTICLES_SPEEDBOARD_FLAME_0_FLAME1_ID = 'IMAGE_PARTICLES_SPEEDBOARD_FLAME_0_FLAME1';
    Game.Resources.IMAGE_PARTICLES_SPEEDTEXT_FLAME_0_TRUEFLAME5X_ID = 'IMAGE_PARTICLES_SPEEDTEXT_FLAME_0_TRUEFLAME5X';
    Game.Resources.IMAGE_PARTICLES_STARGEM_0_SMALL_BLUR_STAR_ID = 'IMAGE_PARTICLES_STARGEM_0_SMALL_BLUR_STAR';
    Game.Resources.IMAGE_PARTICLES_STARGEM_1_CORONAGLOW_ID = 'IMAGE_PARTICLES_STARGEM_1_CORONAGLOW';
    Game.Resources.IMAGE_PARTICLES_STARGEM_2_STAR_GLOW_ID = 'IMAGE_PARTICLES_STARGEM_2_STAR_GLOW';
    Game.Resources.IMAGE_LIGHTNING_ID = 'IMAGE_LIGHTNING';
    Game.Resources.IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME1_ID = 'IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME1';
    Game.Resources.IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME2_ID = 'IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME2';
    Game.Resources.IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME3_ID = 'IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME3';
    Game.Resources.IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME4_ID = 'IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME4';
    Game.Resources.IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME5_ID = 'IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME5';
    Game.Resources.IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME6_ID = 'IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME6';
    Game.Resources.IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME7_ID = 'IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME7';
    Game.Resources.IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME8_ID = 'IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME8';
    Game.Resources.IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME9_ID = 'IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME9';
    Game.Resources.IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME10_ID = 'IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME10';
    Game.Resources.IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME11_ID = 'IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME11';
    Game.Resources.IMAGE_FLAMEGEMCREATION_FLAMEGEM_BLUR_ID = 'IMAGE_FLAMEGEMCREATION_FLAMEGEM_BLUR';
    Game.Resources.IMAGE_FLAMEGEMCREATION_FLAMEGEM_FLASH_1_ID = 'IMAGE_FLAMEGEMCREATION_FLAMEGEM_FLASH_1';
    Game.Resources.IMAGE_FLAMEGEMCREATION_FLAMEGEM_FLASH_2_ID = 'IMAGE_FLAMEGEMCREATION_FLAMEGEM_FLASH_2';
    Game.Resources.IMAGE_FLAMEGEMCREATION_FLAMEGEM_LARGE_RING_ID = 'IMAGE_FLAMEGEMCREATION_FLAMEGEM_LARGE_RING';
    Game.Resources.IMAGE_FLAMEGEMCREATION_FLAMEGEM_RING_OF_FLAME_ID = 'IMAGE_FLAMEGEMCREATION_FLAMEGEM_RING_OF_FLAME';
    Game.Resources.IMAGE_FIREPARTICLE_ID = 'IMAGE_FIREPARTICLE';
    Game.Resources.IMAGE_SPARKLET_ID = 'IMAGE_SPARKLET';
    Game.Resources.IMAGE_GEM_FRUIT_SPARK_ID = 'IMAGE_GEM_FRUIT_SPARK';
    Game.Resources.IMAGE_ELECTROTEX_ID = 'IMAGE_ELECTROTEX';
    Game.Resources.IMAGE_ELECTROTEX_CENTER_ID = 'IMAGE_ELECTROTEX_CENTER';
    Game.Resources.IMAGE_HYPERFLARELINE_ID = 'IMAGE_HYPERFLARELINE';
    Game.Resources.IMAGE_HYPERFLARERING_ID = 'IMAGE_HYPERFLARERING';
    Game.Resources.IMAGE_GEMOUTLINES_ID = 'IMAGE_GEMOUTLINES';
    Game.Resources.ATLASIMAGE_ATLAS_ADDITIVE_480_00_ID = 'ATLASIMAGE_ATLAS_ADDITIVE_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_ADDITIVE_480_01_ID = 'ATLASIMAGE_ATLAS_ADDITIVE_480_01';
    Game.Resources.ATLASIMAGE_RT_ATLAS_ADDITIVE_480_00_ID = 'ATLASIMAGE_RT_ATLAS_ADDITIVE_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_ADDITIVE_768_00_ID = 'ATLASIMAGE_ATLAS_ADDITIVE_768_00';
    Game.Resources.ATLASIMAGE_ATLAS_ADDITIVE_768_01_ID = 'ATLASIMAGE_ATLAS_ADDITIVE_768_01';
    Game.Resources.ATLASIMAGE_RT_ATLAS_ADDITIVE_768_00_ID = 'ATLASIMAGE_RT_ATLAS_ADDITIVE_768_00';
    Game.Resources.IMAGE_BACKGROUNDS_BLOWING_SNOW04_0_SNOWBLOW_ID = 'IMAGE_BACKGROUNDS_BLOWING_SNOW04_0_SNOWBLOW';
    Game.Resources.IMAGE_BACKGROUNDS_BLOWING_SNOW04_1_DOTS_ID = 'IMAGE_BACKGROUNDS_BLOWING_SNOW04_1_DOTS';
    Game.Resources.IMAGE_BACKGROUNDS_LANTERNPLANT01_0_BASIC_BLUR_ID = 'IMAGE_BACKGROUNDS_LANTERNPLANT01_0_BASIC_BLUR';
    Game.Resources.IMAGE_BACKGROUNDS_LANTERNPLANT01_1_SQUARE_STAR_ID = 'IMAGE_BACKGROUNDS_LANTERNPLANT01_1_SQUARE_STAR';
    Game.Resources.IMAGE_BACKGROUNDS_WATER_FALL_CLIFF01_0_WATERPART01_ID = 'IMAGE_BACKGROUNDS_WATER_FALL_CLIFF01_0_WATERPART01';
    Game.Resources.IMAGE_BACKGROUNDS_WATER_FALL_CLIFF02_0_FLAME320004C7_ID = 'IMAGE_BACKGROUNDS_WATER_FALL_CLIFF02_0_FLAME320004C7';
    Game.Resources.ATLASIMAGE_ATLAS_BACKGROUNDS_480_00_ID = 'ATLASIMAGE_ATLAS_BACKGROUNDS_480_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_BACKGROUNDS_480_00_ID = 'ATLASIMAGE_RT_ATLAS_BACKGROUNDS_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_BACKGROUNDS_768_00_ID = 'ATLASIMAGE_ATLAS_BACKGROUNDS_768_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_BACKGROUNDS_768_00_ID = 'ATLASIMAGE_RT_ATLAS_BACKGROUNDS_768_00';
    Game.Resources.IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_FLATTENEDPAM_ID = 'IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_FLATTENEDPAM';
    Game.Resources.IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_1920X1200_ID = 'IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_1920X1200';
    Game.Resources.IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_ID = 'IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50';
    Game.Resources.IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_2_ID = 'IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_2';
    Game.Resources.IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_3_ID = 'IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_3';
    Game.Resources.IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_4_ID = 'IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_4';
    Game.Resources.IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_5_ID = 'IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_5';
    Game.Resources.IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_6_ID = 'IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_6';
    Game.Resources.IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_7_ID = 'IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_7';
    Game.Resources.IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_8_ID = 'IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_8';
    Game.Resources.IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_9_ID = 'IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_9';
    Game.Resources.IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_10_ID = 'IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_10';
    Game.Resources.IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_11_ID = 'IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_11';
    Game.Resources.IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_12_ID = 'IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_12';
    Game.Resources.IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_13_ID = 'IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_13';
    Game.Resources.IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_14_ID = 'IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_14';
    Game.Resources.IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_15_ID = 'IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_15';
    Game.Resources.IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_965X935_ID = 'IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_965X935';
    Game.Resources.POPANIM_BACKGROUNDS_CANYON_WALL_CASTLE_ID = 'POPANIM_BACKGROUNDS_CANYON_WALL_CASTLE';
    Game.Resources.ATLASIMAGE_ATLAS_BG_CANYONWALLCASTLE_480_00_ID = 'ATLASIMAGE_ATLAS_BG_CANYONWALLCASTLE_480_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_BG_CANYONWALLCASTLE_480_00_ID = 'ATLASIMAGE_RT_ATLAS_BG_CANYONWALLCASTLE_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_BG_CANYONWALLCASTLE_768_00_ID = 'ATLASIMAGE_ATLAS_BG_CANYONWALLCASTLE_768_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_BG_CANYONWALLCASTLE_768_00_ID = 'ATLASIMAGE_RT_ATLAS_BG_CANYONWALLCASTLE_768_00';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLATTENEDPAM_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLATTENEDPAM';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_1920X1200_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_1920X1200';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_1127X272_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_1127X272';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_1254X573_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_1254X573';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_16X63_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_16X63';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_1920X1186_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_1920X1186';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_214X81_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_214X81';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_439X551_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_439X551';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_2_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_2';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_3_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_3';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_4_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_4';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_5_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_5';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_6_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_6';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_7_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_7';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_8_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_8';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_9_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_9';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_10_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_10';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_11_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_11';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_12_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_12';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_13_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_13';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_14_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_14';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_15_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_15';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_576X369_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_576X369';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_619X198_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_619X198';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_629X243_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_629X243';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_724X147_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_724X147';
    Game.Resources.IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_724X147_2_ID = 'IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_724X147_2';
    Game.Resources.POPANIM_BACKGROUNDS_FLOATING_ROCK_CITY_ID = 'POPANIM_BACKGROUNDS_FLOATING_ROCK_CITY';
    Game.Resources.ATLASIMAGE_ATLAS_BG_FLOATINGROCKCITY_480_00_ID = 'ATLASIMAGE_ATLAS_BG_FLOATINGROCKCITY_480_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_BG_FLOATINGROCKCITY_480_00_ID = 'ATLASIMAGE_RT_ATLAS_BG_FLOATINGROCKCITY_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_BG_FLOATINGROCKCITY_768_00_ID = 'ATLASIMAGE_ATLAS_BG_FLOATINGROCKCITY_768_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_BG_FLOATINGROCKCITY_768_00_ID = 'ATLASIMAGE_RT_ATLAS_BG_FLOATINGROCKCITY_768_00';
    Game.Resources.IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_FLATTENEDPAM_ID = 'IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_FLATTENEDPAM';
    Game.Resources.IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_1920X1200_ID = 'IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_1920X1200';
    Game.Resources.IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_11X10_ID = 'IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_11X10';
    Game.Resources.IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_11X19_ID = 'IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_11X19';
    Game.Resources.IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_12X11_ID = 'IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_12X11';
    Game.Resources.IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_13X14_ID = 'IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_13X14';
    Game.Resources.IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_14X14_ID = 'IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_14X14';
    Game.Resources.IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_15X13_ID = 'IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_15X13';
    Game.Resources.IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_16X10_ID = 'IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_16X10';
    Game.Resources.IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_22X13_ID = 'IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_22X13';
    Game.Resources.IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_23X8_ID = 'IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_23X8';
    Game.Resources.IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_25X10_ID = 'IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_25X10';
    Game.Resources.IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_62X884_ID = 'IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_62X884';
    Game.Resources.IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_6X19_ID = 'IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_6X19';
    Game.Resources.IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_779X876_ID = 'IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_779X876';
    Game.Resources.POPANIM_BACKGROUNDS_HORSE_FOREST_TREE_ID = 'POPANIM_BACKGROUNDS_HORSE_FOREST_TREE';
    Game.Resources.ATLASIMAGE_ATLAS_BG_HORSEFORESTTREE_480_00_ID = 'ATLASIMAGE_ATLAS_BG_HORSEFORESTTREE_480_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_BG_HORSEFORESTTREE_480_00_ID = 'ATLASIMAGE_RT_ATLAS_BG_HORSEFORESTTREE_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_BG_HORSEFORESTTREE_768_00_ID = 'ATLASIMAGE_ATLAS_BG_HORSEFORESTTREE_768_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_BG_HORSEFORESTTREE_768_00_ID = 'ATLASIMAGE_RT_ATLAS_BG_HORSEFORESTTREE_768_00';
    Game.Resources.IMAGE_BACKGROUNDS_LANTERN_PLANTS_WORLD_FLATTENEDPAM_ID = 'IMAGE_BACKGROUNDS_LANTERN_PLANTS_WORLD_FLATTENEDPAM';
    Game.Resources.IMAGE_BACKGROUNDS_LANTERN_PLANTS_WORLD_LANTERN_PLANTS_WORLD_1920X1200_ID = 'IMAGE_BACKGROUNDS_LANTERN_PLANTS_WORLD_LANTERN_PLANTS_WORLD_1920X1200';
    Game.Resources.POPANIM_BACKGROUNDS_LANTERN_PLANTS_WORLD_ID = 'POPANIM_BACKGROUNDS_LANTERN_PLANTS_WORLD';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_FLATTENEDPAM_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_FLATTENEDPAM';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_1920X1200_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_1920X1200';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_11X19_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_11X19';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_12X11_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_12X11';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_13X14_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_13X14';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_14X14_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_14X14';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_15X13_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_15X13';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_16X10_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_16X10';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_179X67_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_179X67';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_22X13_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_22X13';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_23X8_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_23X8';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_25X10_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_25X10';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_279X293_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_279X293';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_303X68_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_303X68';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_558X504_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_558X504';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_617X180_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_617X180';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_650X300_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_650X300';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_663X239_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_663X239';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_693X281_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_693X281';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_694X323_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_694X323';
    Game.Resources.IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_6X19_ID = 'IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_6X19';
    Game.Resources.IMAGE_BACKGROUNDS_WATERFALL10_0_WHITEPHOOP_RIGHT2_ID = 'IMAGE_BACKGROUNDS_WATERFALL10_0_WHITEPHOOP_RIGHT2';
    Game.Resources.IMAGE_BACKGROUNDS_WATERFALL10_1_WATERPART_ID = 'IMAGE_BACKGROUNDS_WATERFALL10_1_WATERPART';
    Game.Resources.POPANIM_BACKGROUNDS_LION_TOWER_CASCADE_ID = 'POPANIM_BACKGROUNDS_LION_TOWER_CASCADE';
    Game.Resources.ATLASIMAGE_ATLAS_BG_LIONTOWERCASCADE_480_00_ID = 'ATLASIMAGE_ATLAS_BG_LIONTOWERCASCADE_480_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_BG_LIONTOWERCASCADE_480_00_ID = 'ATLASIMAGE_RT_ATLAS_BG_LIONTOWERCASCADE_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_BG_LIONTOWERCASCADE_768_00_ID = 'ATLASIMAGE_ATLAS_BG_LIONTOWERCASCADE_768_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_BG_LIONTOWERCASCADE_768_00_ID = 'ATLASIMAGE_RT_ATLAS_BG_LIONTOWERCASCADE_768_00';
    Game.Resources.IMAGE_BACKGROUNDS_POINTY_ICE_PATH_FLATTENEDPAM_ID = 'IMAGE_BACKGROUNDS_POINTY_ICE_PATH_FLATTENEDPAM';
    Game.Resources.IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_1920X1200_ID = 'IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_1920X1200';
    Game.Resources.IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_133X135_ID = 'IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_133X135';
    Game.Resources.IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_135X118_ID = 'IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_135X118';
    Game.Resources.IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_16X63_ID = 'IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_16X63';
    Game.Resources.IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_192X94_ID = 'IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_192X94';
    Game.Resources.IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_578X432_ID = 'IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_578X432';
    Game.Resources.IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_840X355_ID = 'IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_840X355';
    Game.Resources.POPANIM_BACKGROUNDS_POINTY_ICE_PATH_ID = 'POPANIM_BACKGROUNDS_POINTY_ICE_PATH';
    Game.Resources.ATLASIMAGE_ATLAS_BG_POINTYICEPATH_480_00_ID = 'ATLASIMAGE_ATLAS_BG_POINTYICEPATH_480_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_BG_POINTYICEPATH_480_00_ID = 'ATLASIMAGE_RT_ATLAS_BG_POINTYICEPATH_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_BG_POINTYICEPATH_768_00_ID = 'ATLASIMAGE_ATLAS_BG_POINTYICEPATH_768_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_BG_POINTYICEPATH_768_00_ID = 'ATLASIMAGE_RT_ATLAS_BG_POINTYICEPATH_768_00';
    Game.Resources.IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_FLATTENEDPAM_ID = 'IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_FLATTENEDPAM';
    Game.Resources.IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_SNOWY_CLIFFS_CASTLE_1920X1200_ID = 'IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_SNOWY_CLIFFS_CASTLE_1920X1200';
    Game.Resources.IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_SNOWY_CLIFFS_CASTLE_86X82_ID = 'IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_SNOWY_CLIFFS_CASTLE_86X82';
    Game.Resources.IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_SNOWY_CLIFFS_CASTLE_86X82_2_ID = 'IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_SNOWY_CLIFFS_CASTLE_86X82_2';
    Game.Resources.IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_SNOWY_CLIFFS_CASTLE_86X82_3_ID = 'IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_SNOWY_CLIFFS_CASTLE_86X82_3';
    Game.Resources.IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_SNOWY_CLIFFS_CASTLE_86X82_4_ID = 'IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_SNOWY_CLIFFS_CASTLE_86X82_4';
    Game.Resources.POPANIM_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_ID = 'POPANIM_BACKGROUNDS_SNOWY_CLIFFS_CASTLE';
    Game.Resources.ATLASIMAGE_ATLAS_BG_SNOWYCLIFFSCASTLE_480_00_ID = 'ATLASIMAGE_ATLAS_BG_SNOWYCLIFFSCASTLE_480_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_BG_SNOWYCLIFFSCASTLE_480_00_ID = 'ATLASIMAGE_RT_ATLAS_BG_SNOWYCLIFFSCASTLE_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_BG_SNOWYCLIFFSCASTLE_768_00_ID = 'ATLASIMAGE_ATLAS_BG_SNOWYCLIFFSCASTLE_768_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_BG_SNOWYCLIFFSCASTLE_768_00_ID = 'ATLASIMAGE_RT_ATLAS_BG_SNOWYCLIFFSCASTLE_768_00';
    Game.Resources.IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_FLATTENEDPAM_ID = 'IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_FLATTENEDPAM';
    Game.Resources.IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_1920X1200_ID = 'IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_1920X1200';
    Game.Resources.IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_11X19_ID = 'IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_11X19';
    Game.Resources.IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_12X11_ID = 'IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_12X11';
    Game.Resources.IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_13X14_ID = 'IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_13X14';
    Game.Resources.IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_14X14_ID = 'IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_14X14';
    Game.Resources.IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_15X13_ID = 'IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_15X13';
    Game.Resources.IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_16X10_ID = 'IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_16X10';
    Game.Resources.IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_22X13_ID = 'IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_22X13';
    Game.Resources.IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_23X8_ID = 'IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_23X8';
    Game.Resources.IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_25X10_ID = 'IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_25X10';
    Game.Resources.IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_449X521_ID = 'IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_449X521';
    Game.Resources.IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_497X955_ID = 'IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_497X955';
    Game.Resources.IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_676X834_ID = 'IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_676X834';
    Game.Resources.IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_6X19_ID = 'IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_6X19';
    Game.Resources.POPANIM_BACKGROUNDS_WATER_FALL_CLIFF_ID = 'POPANIM_BACKGROUNDS_WATER_FALL_CLIFF';
    Game.Resources.ATLASIMAGE_ATLAS_BG_WATERFALLCLIFF_480_00_ID = 'ATLASIMAGE_ATLAS_BG_WATERFALLCLIFF_480_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_BG_WATERFALLCLIFF_480_00_ID = 'ATLASIMAGE_RT_ATLAS_BG_WATERFALLCLIFF_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_BG_WATERFALLCLIFF_768_00_ID = 'ATLASIMAGE_ATLAS_BG_WATERFALLCLIFF_768_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_BG_WATERFALLCLIFF_768_00_ID = 'ATLASIMAGE_RT_ATLAS_BG_WATERFALLCLIFF_768_00';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUI_ENERGIZE_PULSERING_ID = 'IMAGE_ANIMS_LIGHTNINGUI_ENERGIZE_PULSERING';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUI_LEFT_DEAD_ID = 'IMAGE_ANIMS_LIGHTNINGUI_LEFT_DEAD';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUI_LEFT_GOLD_ID = 'IMAGE_ANIMS_LIGHTNINGUI_LEFT_GOLD';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUI_LEFT_PURPLE_ID = 'IMAGE_ANIMS_LIGHTNINGUI_LEFT_PURPLE';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUI_MULTI_GOLD_ID = 'IMAGE_ANIMS_LIGHTNINGUI_MULTI_GOLD';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUI_MULTI_PULSERING_ID = 'IMAGE_ANIMS_LIGHTNINGUI_MULTI_PULSERING';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUI_RIGHT_DEAD_ID = 'IMAGE_ANIMS_LIGHTNINGUI_RIGHT_DEAD';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUI_RIGHT_GOLD_ID = 'IMAGE_ANIMS_LIGHTNINGUI_RIGHT_GOLD';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUI_RIGHT_PURPLE_ID = 'IMAGE_ANIMS_LIGHTNINGUI_RIGHT_PURPLE';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUI_RUNE_GOLDL_ID = 'IMAGE_ANIMS_LIGHTNINGUI_RUNE_GOLDL';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUI_RUNE_GOLDM1_ID = 'IMAGE_ANIMS_LIGHTNINGUI_RUNE_GOLDM1';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUI_RUNE_GOLDM2_ID = 'IMAGE_ANIMS_LIGHTNINGUI_RUNE_GOLDM2';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUI_RUNE_GOLDR_ID = 'IMAGE_ANIMS_LIGHTNINGUI_RUNE_GOLDR';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUI_UITOP_ID = 'IMAGE_ANIMS_LIGHTNINGUI_UITOP';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUI_UITOP_DAMAGE_ID = 'IMAGE_ANIMS_LIGHTNINGUI_UITOP_DAMAGE';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUIBOTTOM_BOTTOM_DEAD_ID = 'IMAGE_ANIMS_LIGHTNINGUIBOTTOM_BOTTOM_DEAD';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUIBOTTOM_BOTTOM_GOLD_ID = 'IMAGE_ANIMS_LIGHTNINGUIBOTTOM_BOTTOM_GOLD';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUIBOTTOM_BOTTOM_PURPLE_ID = 'IMAGE_ANIMS_LIGHTNINGUIBOTTOM_BOTTOM_PURPLE';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUIBOTTOM_ENERGIZE_PULSERING_ID = 'IMAGE_ANIMS_LIGHTNINGUIBOTTOM_ENERGIZE_PULSERING';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUIBOTTOM_LEFT_DEAD_ID = 'IMAGE_ANIMS_LIGHTNINGUIBOTTOM_LEFT_DEAD';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUIBOTTOM_LEFT_GOLD_ID = 'IMAGE_ANIMS_LIGHTNINGUIBOTTOM_LEFT_GOLD';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUIBOTTOM_LEFT_PURPLE_ID = 'IMAGE_ANIMS_LIGHTNINGUIBOTTOM_LEFT_PURPLE';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUIBOTTOM_MULTI_GOLD_ID = 'IMAGE_ANIMS_LIGHTNINGUIBOTTOM_MULTI_GOLD';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUIBOTTOM_MULTI_PULSERING_ID = 'IMAGE_ANIMS_LIGHTNINGUIBOTTOM_MULTI_PULSERING';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RIGHT_DEAD_ID = 'IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RIGHT_DEAD';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RIGHT_GOLD_ID = 'IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RIGHT_GOLD';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RIGHT_PURPLE_ID = 'IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RIGHT_PURPLE';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RUNE_GOLDL_ID = 'IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RUNE_GOLDL';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RUNE_GOLDM1_ID = 'IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RUNE_GOLDM1';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RUNE_GOLDM2_ID = 'IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RUNE_GOLDM2';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RUNE_GOLDR_ID = 'IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RUNE_GOLDR';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUIBOTTOM_UIBOTTOM_ID = 'IMAGE_ANIMS_LIGHTNINGUIBOTTOM_UIBOTTOM';
    Game.Resources.IMAGE_ANIMS_LIGHTNINGUIBOTTOM_UITOP_ID = 'IMAGE_ANIMS_LIGHTNINGUIBOTTOM_UITOP';
    Game.Resources.IMAGE_ANIMS_GEM_MEGA_MEGA_CUFF_ID = 'IMAGE_ANIMS_GEM_MEGA_MEGA_CUFF';
    Game.Resources.IMAGE_ANIMS_GEM_MEGA_MEGA_CUFFDEAD_ID = 'IMAGE_ANIMS_GEM_MEGA_MEGA_CUFFDEAD';
    Game.Resources.IMAGE_ANIMS_GEM_MEGA_MEGA_CUFFGLOW_ID = 'IMAGE_ANIMS_GEM_MEGA_MEGA_CUFFGLOW';
    Game.Resources.IMAGE_ANIMS_GEM_MEGA_MEGA_DEAD_ID = 'IMAGE_ANIMS_GEM_MEGA_MEGA_DEAD';
    Game.Resources.IMAGE_ANIMS_GEM_MEGA_MEGA_GOLD_ID = 'IMAGE_ANIMS_GEM_MEGA_MEGA_GOLD';
    Game.Resources.IMAGE_ANIMS_GEM_MEGA_MEGA_PURPLE_ID = 'IMAGE_ANIMS_GEM_MEGA_MEGA_PURPLE';
    Game.Resources.IMAGE_ANIMS_GEM_MEGA_MULTI_PULSERING_ID = 'IMAGE_ANIMS_GEM_MEGA_MULTI_PULSERING';
    Game.Resources.IMAGE_ANIMS_GEM_MEGA_SHATTER_MEGA_0_SHARD_ID = 'IMAGE_ANIMS_GEM_MEGA_SHATTER_MEGA_0_SHARD';
    Game.Resources.IMAGE_ANIMS_GEM_MEGA_SHATTER_MEGA_1_BASIC_BLUR_ID = 'IMAGE_ANIMS_GEM_MEGA_SHATTER_MEGA_1_BASIC_BLUR';
    Game.Resources.IMAGE_BOARD_BOTTOM_FRAME_ID = 'IMAGE_BOARD_BOTTOM_FRAME';
    Game.Resources.IMAGE_BOARD_BOTTOM_FRAME_BACK_ID = 'IMAGE_BOARD_BOTTOM_FRAME_BACK';
    Game.Resources.IMAGE_BOARD_BOTTOM_FRAME_GLOW_ID = 'IMAGE_BOARD_BOTTOM_FRAME_GLOW';
    Game.Resources.IMAGE_BOARD_BOTTOM_WIDGET_CLASSIC_ID = 'IMAGE_BOARD_BOTTOM_WIDGET_CLASSIC';
    Game.Resources.IMAGE_BOARD_BOTTOM_WIDGET_LIGHTNING_ID = 'IMAGE_BOARD_BOTTOM_WIDGET_LIGHTNING';
    Game.Resources.IMAGE_BOARD_HIGHLIGHT_ARROW_ID = 'IMAGE_BOARD_HIGHLIGHT_ARROW';
    Game.Resources.IMAGE_BOARD_HIGHLIGHT_CIRCLE_ID = 'IMAGE_BOARD_HIGHLIGHT_CIRCLE';
    Game.Resources.IMAGE_BOARD_HIGHLIGHT_FULL_ID = 'IMAGE_BOARD_HIGHLIGHT_FULL';
    Game.Resources.IMAGE_BOARD_HINT_BUTTON_CLASSIC_ID = 'IMAGE_BOARD_HINT_BUTTON_CLASSIC';
    Game.Resources.IMAGE_BOARD_HINT_BUTTON_LIGHTNING_ID = 'IMAGE_BOARD_HINT_BUTTON_LIGHTNING';
    Game.Resources.IMAGE_BOARD_MARKER_CHECKERBOARD_ID = 'IMAGE_BOARD_MARKER_CHECKERBOARD';
    Game.Resources.IMAGE_BOARD_MARKER_CHECKERBOARD_CLASSIC_ID = 'IMAGE_BOARD_MARKER_CHECKERBOARD_CLASSIC';
    Game.Resources.IMAGE_BOARD_MENU_BUTTON_CLASSIC_ID = 'IMAGE_BOARD_MENU_BUTTON_CLASSIC';
    Game.Resources.IMAGE_BOARD_MENU_BUTTON_LIGHTNING_ID = 'IMAGE_BOARD_MENU_BUTTON_LIGHTNING';
    Game.Resources.IMAGE_BOARD_MENUBTN_ID = 'IMAGE_BOARD_MENUBTN';
    Game.Resources.IMAGE_BOARD_RESET_BUTTON_LIGHTNING_ID = 'IMAGE_BOARD_RESET_BUTTON_LIGHTNING';
    Game.Resources.IMAGE_BOARD_THIN_BOTTOM_FRAME_ID = 'IMAGE_BOARD_THIN_BOTTOM_FRAME';
    Game.Resources.IMAGE_BOARD_THIN_BOTTOM_FRAME_GLOW_ID = 'IMAGE_BOARD_THIN_BOTTOM_FRAME_GLOW';
    Game.Resources.IMAGE_BOARD_TICK_ID = 'IMAGE_BOARD_TICK';
    Game.Resources.IMAGE_BOARD_TICK_GLOW_ID = 'IMAGE_BOARD_TICK_GLOW';
    Game.Resources.IMAGE_BOARD_TIMER_ID = 'IMAGE_BOARD_TIMER';
    Game.Resources.IMAGE_BOARD_TIMER_GOLD_ID = 'IMAGE_BOARD_TIMER_GOLD';
    Game.Resources.IMAGE_BOARD_TIMER_RED_ID = 'IMAGE_BOARD_TIMER_RED';
    Game.Resources.IMAGE_BOARD_TOP_BACK_ID = 'IMAGE_BOARD_TOP_BACK';
    Game.Resources.IMAGE_BOARD_TOP_FRAME_ID = 'IMAGE_BOARD_TOP_FRAME';
    Game.Resources.IMAGE_BOARD_TOP_FRAME_GLOW_ID = 'IMAGE_BOARD_TOP_FRAME_GLOW';
    Game.Resources.IMAGE_BOARD_TOP_WIDGET_ID = 'IMAGE_BOARD_TOP_WIDGET';
    Game.Resources.IMAGE_BARFILL_ID = 'IMAGE_BARFILL';
    Game.Resources.IMAGE_BARFILLRED_ID = 'IMAGE_BARFILLRED';
    Game.Resources.IMAGE_LIGHTNING_BOTTOM_RED_LIGHTNING_ID = 'IMAGE_LIGHTNING_BOTTOM_RED_LIGHTNING';
    Game.Resources.IMAGE_LIGHTNING_CENTER_ID = 'IMAGE_LIGHTNING_CENTER';
    Game.Resources.IMAGE_LIGHTNING_MEGASHARD_RED_LIGHTNING_ID = 'IMAGE_LIGHTNING_MEGASHARD_RED_LIGHTNING';
    Game.Resources.IMAGE_LIGHTNING_MULTI_PULSE_RING_LIGHTNING_ID = 'IMAGE_LIGHTNING_MULTI_PULSE_RING_LIGHTNING';
    Game.Resources.IMAGE_LIGHTNING_TEX_ID = 'IMAGE_LIGHTNING_TEX';
    Game.Resources.IMAGE_LIGHTNING_TIMER_DEAD_LIGHTNING_ID = 'IMAGE_LIGHTNING_TIMER_DEAD_LIGHTNING';
    Game.Resources.IMAGE_LIGHTNING_TIMER_GOLD_LIGHTNING_ID = 'IMAGE_LIGHTNING_TIMER_GOLD_LIGHTNING';
    Game.Resources.IMAGE_LIGHTNING_TIMER_LIGHTNING_ID = 'IMAGE_LIGHTNING_TIMER_LIGHTNING';
    Game.Resources.IMAGE_LIGHTNING_TIMER_RED_LIGHTNING_ID = 'IMAGE_LIGHTNING_TIMER_RED_LIGHTNING';
    Game.Resources.IMAGE_LIGHTNING_TOP_BACK_LIGHTNING_ID = 'IMAGE_LIGHTNING_TOP_BACK_LIGHTNING';
    Game.Resources.IMAGE_LIGHTNING_TOP_RED_LIGHTNING_ID = 'IMAGE_LIGHTNING_TOP_RED_LIGHTNING';
    Game.Resources.ATLASIMAGE_ATLAS_BOARD_480_00_ID = 'ATLASIMAGE_ATLAS_BOARD_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_BOARD_480_01_ID = 'ATLASIMAGE_ATLAS_BOARD_480_01';
    Game.Resources.ATLASIMAGE_RT_ATLAS_BOARD_480_00_ID = 'ATLASIMAGE_RT_ATLAS_BOARD_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_BOARD_768_00_ID = 'ATLASIMAGE_ATLAS_BOARD_768_00';
    Game.Resources.ATLASIMAGE_ATLAS_BOARD_768_01_ID = 'ATLASIMAGE_ATLAS_BOARD_768_01';
    Game.Resources.ATLASIMAGE_RT_ATLAS_BOARD_768_00_ID = 'ATLASIMAGE_RT_ATLAS_BOARD_768_00';
    Game.Resources.IMAGE_DIALOG_HELP_GLOW_ID = 'IMAGE_DIALOG_HELP_GLOW';
    Game.Resources.IMAGE_DIALOG_LISTBOX_ID = 'IMAGE_DIALOG_LISTBOX';
    Game.Resources.IMAGE_DIALOG_BUTTON_ID = 'IMAGE_DIALOG_BUTTON';
    Game.Resources.IMAGE_DIALOG_BACKGROUND_ID = 'IMAGE_DIALOG_BACKGROUND';
    Game.Resources.IMAGE_DIALOG_BLACK_BOX_ID = 'IMAGE_DIALOG_BLACK_BOX';
    Game.Resources.IMAGE_DIALOG_BLUE_GEM_ID = 'IMAGE_DIALOG_BLUE_GEM';
    Game.Resources.IMAGE_DIALOG_BUTTON_DISABLED_ID = 'IMAGE_DIALOG_BUTTON_DISABLED';
    Game.Resources.IMAGE_DIALOG_CHECKBOX_BLANK_ID = 'IMAGE_DIALOG_CHECKBOX_BLANK';
    Game.Resources.IMAGE_DIALOG_CHECKBOX_CHECKED_ID = 'IMAGE_DIALOG_CHECKBOX_CHECKED';
    Game.Resources.IMAGE_DIALOG_EDITBOX_ID = 'IMAGE_DIALOG_EDITBOX';
    Game.Resources.IMAGE_DIALOG_GOLD_COIN_ID = 'IMAGE_DIALOG_GOLD_COIN';
    Game.Resources.IMAGE_DIALOG_HEADERLESS_BKG_ID = 'IMAGE_DIALOG_HEADERLESS_BKG';
    Game.Resources.IMAGE_DIALOG_LISTSELECT_ID = 'IMAGE_DIALOG_LISTSELECT';
    Game.Resources.IMAGE_DIALOG_OPTIONS_DECOR_ID = 'IMAGE_DIALOG_OPTIONS_DECOR';
    Game.Resources.IMAGE_DIALOG_PLAQUE_ID = 'IMAGE_DIALOG_PLAQUE';
    Game.Resources.IMAGE_DIALOG_SILVER_COIN_ID = 'IMAGE_DIALOG_SILVER_COIN';
    Game.Resources.IMAGE_DIALOG_SLIDERBAR_ID = 'IMAGE_DIALOG_SLIDERBAR';
    Game.Resources.IMAGE_DIALOG_SLIDERBAR_VERTICAL_ID = 'IMAGE_DIALOG_SLIDERBAR_VERTICAL';
    Game.Resources.IMAGE_DIALOG_SLIDERHANDLE_ID = 'IMAGE_DIALOG_SLIDERHANDLE';
    Game.Resources.IMAGE_DIALOG_SMALL_BUTTON_ID = 'IMAGE_DIALOG_SMALL_BUTTON';
    Game.Resources.IMAGE_DIALOG_TAB_ID = 'IMAGE_DIALOG_TAB';
    Game.Resources.IMAGE_GAMEOVER_BAR__PINK_ID = 'IMAGE_GAMEOVER_BAR__PINK';
    Game.Resources.IMAGE_GAMEOVER_BAR_ORANGE_ID = 'IMAGE_GAMEOVER_BAR_ORANGE';
    Game.Resources.IMAGE_GAMEOVER_BAR_YELLOW_ID = 'IMAGE_GAMEOVER_BAR_YELLOW';
    Game.Resources.IMAGE_GAMEOVER_BOX_ORANGE_ID = 'IMAGE_GAMEOVER_BOX_ORANGE';
    Game.Resources.IMAGE_GAMEOVER_BOX_PINK_ID = 'IMAGE_GAMEOVER_BOX_PINK';
    Game.Resources.IMAGE_GAMEOVER_BOX_YELLOW_ID = 'IMAGE_GAMEOVER_BOX_YELLOW';
    Game.Resources.IMAGE_GAMEOVER_DARKER_BOX_ID = 'IMAGE_GAMEOVER_DARKER_BOX';
    Game.Resources.IMAGE_GAMEOVER_DARKEST_BOX_ID = 'IMAGE_GAMEOVER_DARKEST_BOX';
    Game.Resources.IMAGE_GAMEOVER_DIALOG_ID = 'IMAGE_GAMEOVER_DIALOG';
    Game.Resources.IMAGE_GAMEOVER_HORIZONTAL_BAR_ID = 'IMAGE_GAMEOVER_HORIZONTAL_BAR';
    Game.Resources.IMAGE_GAMEOVER_HORIZONTAL_BAR_OVERLAY_ID = 'IMAGE_GAMEOVER_HORIZONTAL_BAR_OVERLAY';
    Game.Resources.IMAGE_GAMEOVER_ICON_FLAME_ID = 'IMAGE_GAMEOVER_ICON_FLAME';
    Game.Resources.IMAGE_GAMEOVER_ICON_FLAME_LRG_ID = 'IMAGE_GAMEOVER_ICON_FLAME_LRG';
    Game.Resources.IMAGE_GAMEOVER_ICON_HYPERCUBE_ID = 'IMAGE_GAMEOVER_ICON_HYPERCUBE';
    Game.Resources.IMAGE_GAMEOVER_ICON_HYPERCUBE_LRG_ID = 'IMAGE_GAMEOVER_ICON_HYPERCUBE_LRG';
    Game.Resources.IMAGE_GAMEOVER_ICON_LIGHTNING_ID = 'IMAGE_GAMEOVER_ICON_LIGHTNING';
    Game.Resources.IMAGE_GAMEOVER_ICON_STAR_ID = 'IMAGE_GAMEOVER_ICON_STAR';
    Game.Resources.IMAGE_GAMEOVER_ICON_STAR_LRG_ID = 'IMAGE_GAMEOVER_ICON_STAR_LRG';
    Game.Resources.IMAGE_GAMEOVER_LIGHT_BOX_ID = 'IMAGE_GAMEOVER_LIGHT_BOX';
    Game.Resources.IMAGE_GAMEOVER_LINE_SINGLE_ID = 'IMAGE_GAMEOVER_LINE_SINGLE';
    Game.Resources.IMAGE_GAMEOVER_LINES_ID = 'IMAGE_GAMEOVER_LINES';
    Game.Resources.IMAGE_GAMEOVER_SECTION_GRAPH_ID = 'IMAGE_GAMEOVER_SECTION_GRAPH';
    Game.Resources.IMAGE_GAMEOVER_SECTION_LABEL_ID = 'IMAGE_GAMEOVER_SECTION_LABEL';
    Game.Resources.IMAGE_GAMEOVER_SECTION_SMALL_ID = 'IMAGE_GAMEOVER_SECTION_SMALL';
    Game.Resources.IMAGE_GAMEOVER_STAMP_ID = 'IMAGE_GAMEOVER_STAMP';
    Game.Resources.ATLASIMAGE_ATLAS_DIALOG_480_00_ID = 'ATLASIMAGE_ATLAS_DIALOG_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_DIALOG_480_01_ID = 'ATLASIMAGE_ATLAS_DIALOG_480_01';
    Game.Resources.ATLASIMAGE_RT_ATLAS_DIALOG_480_00_ID = 'ATLASIMAGE_RT_ATLAS_DIALOG_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_DIALOG_768_00_ID = 'ATLASIMAGE_ATLAS_DIALOG_768_00';
    Game.Resources.ATLASIMAGE_ATLAS_DIALOG_768_01_ID = 'ATLASIMAGE_ATLAS_DIALOG_768_01';
    Game.Resources.ATLASIMAGE_RT_ATLAS_DIALOG_768_00_ID = 'ATLASIMAGE_RT_ATLAS_DIALOG_768_00';
    Game.Resources.FONT_HUMANST521BT40_ID = 'FONT_HUMANST521BT40';
    Game.Resources.FONT_MULTIPLIER_ID = 'FONT_MULTIPLIER';
    Game.Resources.FONT_PLAYBUTTONS_ID = 'FONT_PLAYBUTTONS';
    Game.Resources.FONT_SPEED_TEXT_ID = 'FONT_SPEED_TEXT';
    Game.Resources.FONT_FLOATERS_ID = 'FONT_FLOATERS';
    Game.Resources.FONT_SCORE_ID = 'FONT_SCORE';
    Game.Resources.FONT_SCORE_LARGE_ID = 'FONT_SCORE_LARGE';
    Game.Resources.FONT_LEVEL_ID = 'FONT_LEVEL';
    Game.Resources.FONT_POPUP_TEXT_ID = 'FONT_POPUP_TEXT';
    Game.Resources.FONT_POPUP_COUNT_ID = 'FONT_POPUP_COUNT';
    Game.Resources.FONT_RANKUP_NAME_ID = 'FONT_RANKUP_NAME';
    Game.Resources.FONT_MENU_BTN_ID = 'FONT_MENU_BTN';
    Game.Resources.FONT_HUGE_ID = 'FONT_HUGE';
    Game.Resources.FONT_DIALOG_HEADER_ID = 'FONT_DIALOG_HEADER';
    Game.Resources.FONT_GAMEOVER_DIALOG_ID = 'FONT_GAMEOVER_DIALOG';
    Game.Resources.FONT_GAMEOVER_DIALOG_SMALL_ID = 'FONT_GAMEOVER_DIALOG_SMALL';
    Game.Resources.FONT_GAMEOVER_DIALOG_MED_ID = 'FONT_GAMEOVER_DIALOG_MED';
    Game.Resources.FONT_GAMEOVER_DIALOG_HUGE_ID = 'FONT_GAMEOVER_DIALOG_HUGE';
    Game.Resources.FONT_DIALOG_TEXT_ID = 'FONT_DIALOG_TEXT';
    Game.Resources.FONT_DISABLE_HINTS_ID = 'FONT_DISABLE_HINTS';
    Game.Resources.FONT_DIALOG_SMALL_TEXT_ID = 'FONT_DIALOG_SMALL_TEXT';
    Game.Resources.FONT_DIALOG_BUTTONS_ID = 'FONT_DIALOG_BUTTONS';
    Game.Resources.FONT_RECORDS_DIALOG_BUTTONS_ID = 'FONT_RECORDS_DIALOG_BUTTONS';
    Game.Resources.FONT_SPEED_SCORE_ID = 'FONT_SPEED_SCORE';
    Game.Resources.FONT_TIMER_LARGE_ID = 'FONT_TIMER_LARGE';
    Game.Resources.FONT_TIMER_SMALL_ID = 'FONT_TIMER_SMALL';
    Game.Resources.FONT_RECORDS_NAME_ID = 'FONT_RECORDS_NAME';
    Game.Resources.FONT_RECORDS_SCORE_ID = 'FONT_RECORDS_SCORE';
    Game.Resources.FONT_RECORDS_DATE_ID = 'FONT_RECORDS_DATE';
    Game.Resources.FONT_RECORDS_COLUMN_HEADER_ID = 'FONT_RECORDS_COLUMN_HEADER';
    Game.Resources.FONT_ENDLEVEL_TEXT_BIG_ID = 'FONT_ENDLEVEL_TEXT_BIG';
    Game.Resources.FONT_ENDLEVEL_TEXT_ID = 'FONT_ENDLEVEL_TEXT';
    Game.Resources.FONT_FLAREGOTHICBOLD20_DISABLEHINTS_ID = 'FONT_FLAREGOTHICBOLD20_DISABLEHINTS';
    Game.Resources.FONT_FLAREGOTHICBOLD42_ID = 'FONT_FLAREGOTHICBOLD42';
    Game.Resources.FONT_FLAREGOTHIC25_ID = 'FONT_FLAREGOTHIC25';
    Game.Resources.FONT_FLAREGOTHIC16_ID = 'FONT_FLAREGOTHIC16';
    Game.Resources.FONT_KOZUKAMINPROH120_ID = 'FONT_KOZUKAMINPROH120';
    Game.Resources.FONT_FLAREGOTHICBOLD80SCORE_ID = 'FONT_FLAREGOTHICBOLD80SCORE';
    Game.Resources.FONT_FLAREGOTHICBOLDBUTTON66_ID = 'FONT_FLAREGOTHICBOLDBUTTON66';
    Game.Resources.FONT_KOZUKAGOTHPROB_ID = 'FONT_KOZUKAGOTHPROB';
    Game.Resources.FONT_KOZGOPROHEAVY30_ID = 'FONT_KOZGOPROHEAVY30';
    Game.Resources.FONT_FLAREGOTHIC17_ID = 'FONT_FLAREGOTHIC17';
    Game.Resources.FONT_FLAREGOTHIC14_ID = 'FONT_FLAREGOTHIC14';
    Game.Resources.FONT_FLAREGOTHICBOLD100_ID = 'FONT_FLAREGOTHICBOLD100';
    Game.Resources.FONT_FLAREBOLD120SIDEBAR_ID = 'FONT_FLAREBOLD120SIDEBAR';
    Game.Resources.FONT_FLAREGOTHIC19ZEN_ID = 'FONT_FLAREGOTHIC19ZEN';
    Game.Resources.FONT_FLAREGOTHIC32_ID = 'FONT_FLAREGOTHIC32';
    Game.Resources.FONT_FLAREGOTHIC55_ID = 'FONT_FLAREGOTHIC55';
    Game.Resources.FONT_FLAREGOTHICBOLD20_ID = 'FONT_FLAREGOTHICBOLD20';
    Game.Resources.FONT_HUMANST19_ID = 'FONT_HUMANST19';
    Game.Resources.FONT_HUMANST28_ID = 'FONT_HUMANST28';
    Game.Resources.FONT_QUINCYCAPS25_ID = 'FONT_QUINCYCAPS25';
    Game.Resources.ATLASIMAGE_ATLAS_FONTS_480_00_ID = 'ATLASIMAGE_ATLAS_FONTS_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_FONTS_480_01_ID = 'ATLASIMAGE_ATLAS_FONTS_480_01';
    Game.Resources.ATLASIMAGE_RT_ATLAS_FONTS_480_00_ID = 'ATLASIMAGE_RT_ATLAS_FONTS_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_FONTS_768_00_ID = 'ATLASIMAGE_ATLAS_FONTS_768_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_FONTS_768_00_ID = 'ATLASIMAGE_RT_ATLAS_FONTS_768_00';
    Game.Resources.FONT_SPEED_SCORE_ORANGE_ID = 'FONT_SPEED_SCORE_ORANGE';
    Game.Resources.FONT_TOOLTIP_ID = 'FONT_TOOLTIP';
    Game.Resources.FONT_TOOLTIP_BOLD_ID = 'FONT_TOOLTIP_BOLD';
    Game.Resources.FONT_TOOLTIP_BIG_ID = 'FONT_TOOLTIP_BIG';
    Game.Resources.FONT_FLAREGOTHICBOLD42_ORANGE_ID = 'FONT_FLAREGOTHICBOLD42_ORANGE';
    Game.Resources.FONT_FLAREGOTHICBOLD42_BLACK_ID = 'FONT_FLAREGOTHICBOLD42_BLACK';
    Game.Resources.FONT_FLAREGOTHIC25_BLACK_ID = 'FONT_FLAREGOTHIC25_BLACK';
    Game.Resources.ATLASIMAGE_ATLAS_FONTS_IGNORED_480_00_ID = 'ATLASIMAGE_ATLAS_FONTS_IGNORED_480_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_FONTS_IGNORED_480_00_ID = 'ATLASIMAGE_RT_ATLAS_FONTS_IGNORED_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_FONTS_IGNORED_768_00_ID = 'ATLASIMAGE_ATLAS_FONTS_IGNORED_768_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_FONTS_IGNORED_768_00_ID = 'ATLASIMAGE_RT_ATLAS_FONTS_IGNORED_768_00';
    Game.Resources.IMAGE_GEMS_RED_ID = 'IMAGE_GEMS_RED';
    Game.Resources.IMAGE_GEMS_WHITE_ID = 'IMAGE_GEMS_WHITE';
    Game.Resources.IMAGE_GEMS_GREEN_ID = 'IMAGE_GEMS_GREEN';
    Game.Resources.IMAGE_GEMS_YELLOW_ID = 'IMAGE_GEMS_YELLOW';
    Game.Resources.IMAGE_GEMS_PURPLE_ID = 'IMAGE_GEMS_PURPLE';
    Game.Resources.IMAGE_GEMS_ORANGE_ID = 'IMAGE_GEMS_ORANGE';
    Game.Resources.IMAGE_GEMS_BLUE_ID = 'IMAGE_GEMS_BLUE';
    Game.Resources.IMAGE_GEMSSHADOW_RED_ID = 'IMAGE_GEMSSHADOW_RED';
    Game.Resources.IMAGE_GEMSSHADOW_WHITE_ID = 'IMAGE_GEMSSHADOW_WHITE';
    Game.Resources.IMAGE_GEMSSHADOW_GREEN_ID = 'IMAGE_GEMSSHADOW_GREEN';
    Game.Resources.IMAGE_GEMSSHADOW_YELLOW_ID = 'IMAGE_GEMSSHADOW_YELLOW';
    Game.Resources.IMAGE_GEMSSHADOW_PURPLE_ID = 'IMAGE_GEMSSHADOW_PURPLE';
    Game.Resources.IMAGE_GEMSSHADOW_ORANGE_ID = 'IMAGE_GEMSSHADOW_ORANGE';
    Game.Resources.IMAGE_GEMSSHADOW_BLUE_ID = 'IMAGE_GEMSSHADOW_BLUE';
    Game.Resources.IMAGE_LIGHTNING_GEMNUMS_RED_ID = 'IMAGE_LIGHTNING_GEMNUMS_RED';
    Game.Resources.IMAGE_LIGHTNING_GEMNUMS_WHITE_ID = 'IMAGE_LIGHTNING_GEMNUMS_WHITE';
    Game.Resources.IMAGE_LIGHTNING_GEMNUMS_GREEN_ID = 'IMAGE_LIGHTNING_GEMNUMS_GREEN';
    Game.Resources.IMAGE_LIGHTNING_GEMNUMS_YELLOW_ID = 'IMAGE_LIGHTNING_GEMNUMS_YELLOW';
    Game.Resources.IMAGE_LIGHTNING_GEMNUMS_PURPLE_ID = 'IMAGE_LIGHTNING_GEMNUMS_PURPLE';
    Game.Resources.IMAGE_LIGHTNING_GEMNUMS_ORANGE_ID = 'IMAGE_LIGHTNING_GEMNUMS_ORANGE';
    Game.Resources.IMAGE_LIGHTNING_GEMNUMS_BLUE_ID = 'IMAGE_LIGHTNING_GEMNUMS_BLUE';
    Game.Resources.IMAGE_LIGHTNING_GEMNUMS_CLEAR_ID = 'IMAGE_LIGHTNING_GEMNUMS_CLEAR';
    Game.Resources.IMAGE_SMOKE_ID = 'IMAGE_SMOKE';
    Game.Resources.IMAGE_DRIP_ID = 'IMAGE_DRIP';
    Game.Resources.IMAGE_FX_STEAM_ID = 'IMAGE_FX_STEAM';
    Game.Resources.IMAGE_FLAMEGEMEXPLODE_FLAMEEXPLODETEST_LAYER_1_ID = 'IMAGE_FLAMEGEMEXPLODE_FLAMEEXPLODETEST_LAYER_1';
    Game.Resources.IMAGE_GEMS_SHADOWED_ID = 'IMAGE_GEMS_SHADOWED';
    Game.Resources.IMAGE_HINTARROW_ID = 'IMAGE_HINTARROW';
    Game.Resources.IMAGE_SELECTOR_ID = 'IMAGE_SELECTOR';
    Game.Resources.IMAGE_SM_SHARDS_ID = 'IMAGE_SM_SHARDS';
    Game.Resources.IMAGE_SM_SHARDS_OUTLINE_ID = 'IMAGE_SM_SHARDS_OUTLINE';
    Game.Resources.POPANIM_FLAMEGEMCREATION_ID = 'POPANIM_FLAMEGEMCREATION';
    Game.Resources.ATLASIMAGE_ATLAS_GAMEPLAY_480_00_ID = 'ATLASIMAGE_ATLAS_GAMEPLAY_480_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_GAMEPLAY_480_00_ID = 'ATLASIMAGE_RT_ATLAS_GAMEPLAY_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_GAMEPLAY_768_00_ID = 'ATLASIMAGE_ATLAS_GAMEPLAY_768_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_GAMEPLAY_768_00_ID = 'ATLASIMAGE_RT_ATLAS_GAMEPLAY_768_00';
    Game.Resources.FONT_DEFAULT_ID = 'FONT_DEFAULT';
    Game.Resources.FONT_FLAREGOTHIC28_ID = 'FONT_FLAREGOTHIC28';
    Game.Resources.FONT_LOADER_TIP_ID = 'FONT_LOADER_TIP';
    Game.Resources.RESFILE_PROPERTIES_BADGES_ID = 'RESFILE_PROPERTIES_BADGES';
    Game.Resources.RESFILE_PROPERTIES_DEFAULTQUEST_ID = 'RESFILE_PROPERTIES_DEFAULTQUEST';
    Game.Resources.RESFILE_PROPERTIES_MUSIC_ID = 'RESFILE_PROPERTIES_MUSIC';
    Game.Resources.RESFILE_PROPERTIES_QUEST_ID = 'RESFILE_PROPERTIES_QUEST';
    Game.Resources.RESFILE_PROPERTIES_RANKS_ID = 'RESFILE_PROPERTIES_RANKS';
    Game.Resources.RESFILE_PROPERTIES_SECRET_ID = 'RESFILE_PROPERTIES_SECRET';
    Game.Resources.RESFILE_PROPERTIES_SPEED_ID = 'RESFILE_PROPERTIES_SPEED';
    Game.Resources.RESFILE_PROPERTIES_TIPS_ID = 'RESFILE_PROPERTIES_TIPS';
    Game.Resources.IMAGE_BOARD_SD_ID = 'IMAGE_BOARD_SD';
    Game.Resources.IMAGE_BOARD_HD_ID = 'IMAGE_BOARD_HD';
    Game.Resources.IMAGE_BOARD_HDSD_BUTTON_FRAME_ID = 'IMAGE_BOARD_HDSD_BUTTON_FRAME';
    Game.Resources.IMAGE_LOADER_WHITEDOT_ID = 'IMAGE_LOADER_WHITEDOT';
    Game.Resources.IMAGE_LOADER_POPCAP_ID = 'IMAGE_LOADER_POPCAP';
    Game.Resources.EFFECT_BOARD_3D_ID = 'EFFECT_BOARD_3D';
    Game.Resources.EFFECT_GEM_3D_ID = 'EFFECT_GEM_3D';
    Game.Resources.EFFECT_TUBE_3D_ID = 'EFFECT_TUBE_3D';
    Game.Resources.EFFECT_TUBECAP_3D_ID = 'EFFECT_TUBECAP_3D';
    Game.Resources.ATLASIMAGE_ATLAS_INIT_480_00_ID = 'ATLASIMAGE_ATLAS_INIT_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_INIT_480_01_ID = 'ATLASIMAGE_ATLAS_INIT_480_01';
    Game.Resources.ATLASIMAGE_RT_ATLAS_INIT_480_00_ID = 'ATLASIMAGE_RT_ATLAS_INIT_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_INIT_768_00_ID = 'ATLASIMAGE_ATLAS_INIT_768_00';
    Game.Resources.ATLASIMAGE_ATLAS_INIT_768_01_ID = 'ATLASIMAGE_ATLAS_INIT_768_01';
    Game.Resources.ATLASIMAGE_RT_ATLAS_INIT_768_00_ID = 'ATLASIMAGE_RT_ATLAS_INIT_768_00';
    Game.Resources.FONT_FLAREGOTHIC8_ID = 'FONT_FLAREGOTHIC8';
    Game.Resources.FONT_FLAREGOTHICBOLD10_ID = 'FONT_FLAREGOTHICBOLD10';
    Game.Resources.FONT_HUMANST9_ID = 'FONT_HUMANST9';
    Game.Resources.RESFILE_3D_GEMBLUE_ID = 'RESFILE_3D_GEMBLUE';
    Game.Resources.RESFILE_3D_GEMGREEN_ID = 'RESFILE_3D_GEMGREEN';
    Game.Resources.RESFILE_3D_GEMORANGE_ID = 'RESFILE_3D_GEMORANGE';
    Game.Resources.RESFILE_3D_GEMPURPLE_ID = 'RESFILE_3D_GEMPURPLE';
    Game.Resources.RESFILE_3D_GEMRED_ID = 'RESFILE_3D_GEMRED';
    Game.Resources.RESFILE_3D_GEMWHITE_ID = 'RESFILE_3D_GEMWHITE';
    Game.Resources.RESFILE_3D_GEMYELLOW_ID = 'RESFILE_3D_GEMYELLOW';
    Game.Resources.RESFILE_3D_HYPERSPACE_MAIN_0_ID = 'RESFILE_3D_HYPERSPACE_MAIN_0';
    Game.Resources.RESFILE_3D_WARPTUBE_ID = 'RESFILE_3D_WARPTUBE';
    Game.Resources.RESFILE_3D_WARPTUBE_CAP_ID = 'RESFILE_3D_WARPTUBE_CAP';
    Game.Resources.RESFILE_AFFIRMATIONS_GENERAL_ID = 'RESFILE_AFFIRMATIONS_GENERAL';
    Game.Resources.RESFILE_AFFIRMATIONS_POSITIVE_THINKING_ID = 'RESFILE_AFFIRMATIONS_POSITIVE_THINKING';
    Game.Resources.RESFILE_AFFIRMATIONS_PROSPERITY_ID = 'RESFILE_AFFIRMATIONS_PROSPERITY';
    Game.Resources.RESFILE_AFFIRMATIONS_QUIT_BAD_HABITS_ID = 'RESFILE_AFFIRMATIONS_QUIT_BAD_HABITS';
    Game.Resources.RESFILE_AFFIRMATIONS_SELF_CONFIDENCE_ID = 'RESFILE_AFFIRMATIONS_SELF_CONFIDENCE';
    Game.Resources.RESFILE_AFFIRMATIONS_WEIGHT_LOSS_ID = 'RESFILE_AFFIRMATIONS_WEIGHT_LOSS';
    Game.Resources.IMAGE_HYPERSPACE_INITIAL_ID = 'IMAGE_HYPERSPACE_INITIAL';
    Game.Resources.IMAGE_HYPERSPACE_ID = 'IMAGE_HYPERSPACE';
    Game.Resources.IMAGE_WARP_LINES_01_ID = 'IMAGE_WARP_LINES_01';
    Game.Resources.IMAGE_COMPLEMENT_GOOD_ID = 'IMAGE_COMPLEMENT_GOOD';
    Game.Resources.IMAGE_COMPLEMENT_EXCELLENT_ID = 'IMAGE_COMPLEMENT_EXCELLENT';
    Game.Resources.IMAGE_COMPLEMENT_AWESOME_ID = 'IMAGE_COMPLEMENT_AWESOME';
    Game.Resources.IMAGE_COMPLEMENT_SPECTACULAR_ID = 'IMAGE_COMPLEMENT_SPECTACULAR';
    Game.Resources.IMAGE_COMPLEMENT_EXTRAORDINARY_ID = 'IMAGE_COMPLEMENT_EXTRAORDINARY';
    Game.Resources.IMAGE_COMPLEMENT_UNBELIEVABLE_ID = 'IMAGE_COMPLEMENT_UNBELIEVABLE';
    Game.Resources.IMAGE_COMPLEMENT_BLAZINGSPEED_ID = 'IMAGE_COMPLEMENT_BLAZINGSPEED';
    Game.Resources.IMAGE_VERTICAL_STREAK_ID = 'IMAGE_VERTICAL_STREAK';
    Game.Resources.IMAGE_HYPERCUBE_COLORGLOW_ID = 'IMAGE_HYPERCUBE_COLORGLOW';
    Game.Resources.IMAGE_HYPERCUBE_FRAME_ID = 'IMAGE_HYPERCUBE_FRAME';
    Game.Resources.IMAGE_TRANSPARENT_HOLE_ID = 'IMAGE_TRANSPARENT_HOLE';
    Game.Resources.IMAGE_GRITTYBLURRY_ID = 'IMAGE_GRITTYBLURRY';
    Game.Resources.IMAGE_ANIMS_BOARDSHATTER_BOTTOM_ID = 'IMAGE_ANIMS_BOARDSHATTER_BOTTOM';
    Game.Resources.IMAGE_ANIMS_BOARDSHATTER_GRID_ID = 'IMAGE_ANIMS_BOARDSHATTER_GRID';
    Game.Resources.IMAGE_ANIMS_BOARDSHATTER_TOP_ID = 'IMAGE_ANIMS_BOARDSHATTER_TOP';
    Game.Resources.IMAGE_DANGERBORDERLEFT_ID = 'IMAGE_DANGERBORDERLEFT';
    Game.Resources.IMAGE_DANGERBORDERUP_ID = 'IMAGE_DANGERBORDERUP';
    Game.Resources.IMAGE_GRIDPAINT_BLANK_ID = 'IMAGE_GRIDPAINT_BLANK';
    Game.Resources.IMAGE_GRIDPAINT_FILLED_ID = 'IMAGE_GRIDPAINT_FILLED';
    Game.Resources.IMAGE_MULTIPLIER_LARGE_BACK_ID = 'IMAGE_MULTIPLIER_LARGE_BACK';
    Game.Resources.IMAGE_MULTIPLIER_LARGE_FRONT_ID = 'IMAGE_MULTIPLIER_LARGE_FRONT';
    Game.Resources.IMAGE_RECORDS_RANK_FILL_ID = 'IMAGE_RECORDS_RANK_FILL';
    Game.Resources.IMAGE_RECORDS_RANK_GLOW_ID = 'IMAGE_RECORDS_RANK_GLOW';
    Game.Resources.IMAGE_RECORDS_RANK_PLATE_ID = 'IMAGE_RECORDS_RANK_PLATE';
    Game.Resources.IMAGE_SOLID_BLACK_ID = 'IMAGE_SOLID_BLACK';
    Game.Resources.IMAGE_SPARKLE_FAT_ID = 'IMAGE_SPARKLE_FAT';
    Game.Resources.IMAGE_SPARKLET_BIG_ID = 'IMAGE_SPARKLET_BIG';
    Game.Resources.IMAGE_SPARKLET_FAT_ID = 'IMAGE_SPARKLET_FAT';
    Game.Resources.IMAGE_TOOLTIP_ID = 'IMAGE_TOOLTIP';
    Game.Resources.IMAGE_TOOLTIP_ARROW_ID = 'IMAGE_TOOLTIP_ARROW';
    Game.Resources.PIEFFECT_ANIMS_GEM_MEGA_SHATTER_MEGA_ID = 'PIEFFECT_ANIMS_GEM_MEGA_SHATTER_MEGA';
    Game.Resources.PIEFFECT_BACKGROUNDS_BLOWING_SNOW04_ID = 'PIEFFECT_BACKGROUNDS_BLOWING_SNOW04';
    Game.Resources.PIEFFECT_BACKGROUNDS_LANTERNPLANT01_ID = 'PIEFFECT_BACKGROUNDS_LANTERNPLANT01';
    Game.Resources.PIEFFECT_BACKGROUNDS_WATER_FALL_CLIFF01_ID = 'PIEFFECT_BACKGROUNDS_WATER_FALL_CLIFF01';
    Game.Resources.PIEFFECT_BACKGROUNDS_WATER_FALL_CLIFF02_ID = 'PIEFFECT_BACKGROUNDS_WATER_FALL_CLIFF02';
    Game.Resources.PIEFFECT_BACKGROUNDS_WATERFALL10_ID = 'PIEFFECT_BACKGROUNDS_WATERFALL10';
    Game.Resources.PIEFFECT_BOARD_FLAME_EMBERS_ID = 'PIEFFECT_BOARD_FLAME_EMBERS';
    Game.Resources.PIEFFECT_COUNTDOWNBAR_ID = 'PIEFFECT_COUNTDOWNBAR';
    Game.Resources.PIEFFECT_CRYSTALBALL_ID = 'PIEFFECT_CRYSTALBALL';
    Game.Resources.PIEFFECT_CRYSTALRAYS_ID = 'PIEFFECT_CRYSTALRAYS';
    Game.Resources.PIEFFECT_DISCOBALL_ID = 'PIEFFECT_DISCOBALL';
    Game.Resources.PIEFFECT_FIRE_TRAIL_ID = 'PIEFFECT_FIRE_TRAIL';
    Game.Resources.PIEFFECT_FIREGEM_HYPERSPACE_ID = 'PIEFFECT_FIREGEM_HYPERSPACE';
    Game.Resources.PIEFFECT_GEM_LANDING_FX_ID = 'PIEFFECT_GEM_LANDING_FX';
    Game.Resources.PIEFFECT_HINTFLASH_ID = 'PIEFFECT_HINTFLASH';
    Game.Resources.PIEFFECT_HYPERCUBE_ID = 'PIEFFECT_HYPERCUBE';
    Game.Resources.PIEFFECT_LIGHTNING_POWERED_BOTTOM_ID = 'PIEFFECT_LIGHTNING_POWERED_BOTTOM';
    Game.Resources.PIEFFECT_LIGHTNING_POWERED_LEFTRIGHT_ID = 'PIEFFECT_LIGHTNING_POWERED_LEFTRIGHT';
    Game.Resources.PIEFFECT_LIGHTNING_POWERED_MEGASHARD_ID = 'PIEFFECT_LIGHTNING_POWERED_MEGASHARD';
    Game.Resources.PIEFFECT_LIGHTNING_STEAMPULSE_ID = 'PIEFFECT_LIGHTNING_STEAMPULSE';
    Game.Resources.PIEFFECT_MAINMENU3_ID = 'PIEFFECT_MAINMENU3';
    Game.Resources.PIEFFECT_MULTIPLIER_ID = 'PIEFFECT_MULTIPLIER';
    Game.Resources.PIEFFECT_QUEST_DIG_COLLECT_GOLD_ID = 'PIEFFECT_QUEST_DIG_COLLECT_GOLD';
    Game.Resources.PIEFFECT_SPEEDBOARD_FLAME_ID = 'PIEFFECT_SPEEDBOARD_FLAME';
    Game.Resources.PIEFFECT_SPEEDTEXT_FLAME_ID = 'PIEFFECT_SPEEDTEXT_FLAME';
    Game.Resources.PIEFFECT_STARGEM_ID = 'PIEFFECT_STARGEM';
    Game.Resources.POPANIM_ANIMS_LIGHTNINGUI_ID = 'POPANIM_ANIMS_LIGHTNINGUI';
    Game.Resources.POPANIM_ANIMS_LIGHTNINGUIBOTTOM_ID = 'POPANIM_ANIMS_LIGHTNINGUIBOTTOM';
    Game.Resources.POPANIM_ANIMS_BOARDSHATTER_ID = 'POPANIM_ANIMS_BOARDSHATTER';
    Game.Resources.POPANIM_ANIMS_GEM_MEGA_ID = 'POPANIM_ANIMS_GEM_MEGA';
    Game.Resources.POPANIM_FLAMEGEMEXPLODE_ID = 'POPANIM_FLAMEGEMEXPLODE';
    Game.Resources.SOUND_BUTTON_MOUSEOVER_ID = 'SOUND_BUTTON_MOUSEOVER';
    Game.Resources.SOUND_BUTTON_MOUSELEAVE_ID = 'SOUND_BUTTON_MOUSELEAVE';
    Game.Resources.SOUND_BACKTOMAIN_ID = 'SOUND_BACKTOMAIN';
    Game.Resources.SOUND_BADMOVE_ID = 'SOUND_BADMOVE';
    Game.Resources.SOUND_BOMB_EXPLODE_ID = 'SOUND_BOMB_EXPLODE';
    Game.Resources.SOUND_BUTTON_PRESS_ID = 'SOUND_BUTTON_PRESS';
    Game.Resources.SOUND_BUTTON_RELEASE_ID = 'SOUND_BUTTON_RELEASE';
    Game.Resources.SOUND_CLICKFLYIN_ID = 'SOUND_CLICKFLYIN';
    Game.Resources.SOUND_COMBO_1_ID = 'SOUND_COMBO_1';
    Game.Resources.SOUND_COMBO_2_ID = 'SOUND_COMBO_2';
    Game.Resources.SOUND_COMBO_3_ID = 'SOUND_COMBO_3';
    Game.Resources.SOUND_COMBO_4_ID = 'SOUND_COMBO_4';
    Game.Resources.SOUND_COMBO_5_ID = 'SOUND_COMBO_5';
    Game.Resources.SOUND_COMBO_6_ID = 'SOUND_COMBO_6';
    Game.Resources.SOUND_COMBO_7_ID = 'SOUND_COMBO_7';
    Game.Resources.SOUND_COUNTDOWN_WARNING_ID = 'SOUND_COUNTDOWN_WARNING';
    Game.Resources.SOUND_DOUBLESET_ID = 'SOUND_DOUBLESET';
    Game.Resources.SOUND_ELECTRO_EXPLODE_ID = 'SOUND_ELECTRO_EXPLODE';
    Game.Resources.SOUND_ELECTRO_PATH_ID = 'SOUND_ELECTRO_PATH';
    Game.Resources.SOUND_ELECTRO_PATH2_ID = 'SOUND_ELECTRO_PATH2';
    Game.Resources.SOUND_FLAMEBONUS_ID = 'SOUND_FLAMEBONUS';
    Game.Resources.SOUND_FLAMESPEED1_ID = 'SOUND_FLAMESPEED1';
    Game.Resources.SOUND_GEM_COUNTDOWN_DESTROYED_ID = 'SOUND_GEM_COUNTDOWN_DESTROYED';
    Game.Resources.SOUND_GEM_HIT_ID = 'SOUND_GEM_HIT';
    Game.Resources.SOUND_GEM_SHATTERS_ID = 'SOUND_GEM_SHATTERS';
    Game.Resources.SOUND_HYPERCUBE_CREATE_ID = 'SOUND_HYPERCUBE_CREATE';
    Game.Resources.SOUND_HYPERSPACE_ID = 'SOUND_HYPERSPACE';
    Game.Resources.SOUND_HYPERSPACE_GEM_LAND_1_ID = 'SOUND_HYPERSPACE_GEM_LAND_1';
    Game.Resources.SOUND_HYPERSPACE_GEM_LAND_2_ID = 'SOUND_HYPERSPACE_GEM_LAND_2';
    Game.Resources.SOUND_HYPERSPACE_GEM_LAND_3_ID = 'SOUND_HYPERSPACE_GEM_LAND_3';
    Game.Resources.SOUND_HYPERSPACE_GEM_LAND_4_ID = 'SOUND_HYPERSPACE_GEM_LAND_4';
    Game.Resources.SOUND_HYPERSPACE_GEM_LAND_5_ID = 'SOUND_HYPERSPACE_GEM_LAND_5';
    Game.Resources.SOUND_HYPERSPACE_GEM_LAND_6_ID = 'SOUND_HYPERSPACE_GEM_LAND_6';
    Game.Resources.SOUND_HYPERSPACE_GEM_LAND_7_ID = 'SOUND_HYPERSPACE_GEM_LAND_7';
    Game.Resources.SOUND_HYPERSPACE_SHATTER_1_ID = 'SOUND_HYPERSPACE_SHATTER_1';
    Game.Resources.SOUND_HYPERSPACE_SHATTER_2_ID = 'SOUND_HYPERSPACE_SHATTER_2';
    Game.Resources.SOUND_LASERGEM_CREATED_ID = 'SOUND_LASERGEM_CREATED';
    Game.Resources.SOUND_MENUSPIN_ID = 'SOUND_MENUSPIN';
    Game.Resources.SOUND_NEXTLEVEL_ID = 'SOUND_NEXTLEVEL';
    Game.Resources.SOUND_POWERGEM_CREATED_ID = 'SOUND_POWERGEM_CREATED';
    Game.Resources.SOUND_PREBLAST_ID = 'SOUND_PREBLAST';
    Game.Resources.SOUND_QUEST_GET_ID = 'SOUND_QUEST_GET';
    Game.Resources.SOUND_RANK_COUNTUP_ID = 'SOUND_RANK_COUNTUP';
    Game.Resources.SOUND_RANKUP_ID = 'SOUND_RANKUP';
    Game.Resources.SOUND_SELECT_ID = 'SOUND_SELECT';
    Game.Resources.SOUND_SMALL_EXPLODE_ID = 'SOUND_SMALL_EXPLODE';
    Game.Resources.SOUND_SPEEDBOARD_BACKGROUND_CHANGE_ID = 'SOUND_SPEEDBOARD_BACKGROUND_CHANGE';
    Game.Resources.SOUND_SPEEDBOARD_FLAMELOOP_ID = 'SOUND_SPEEDBOARD_FLAMELOOP';
    Game.Resources.SOUND_SPEEDBOARD_LIGHTNING_ENERGIZE_ID = 'SOUND_SPEEDBOARD_LIGHTNING_ENERGIZE';
    Game.Resources.SOUND_SPEEDBOARD_LIGHTNING_TUBE_FILL_5_ID = 'SOUND_SPEEDBOARD_LIGHTNING_TUBE_FILL_5';
    Game.Resources.SOUND_SPEEDBOARD_LIGHTNING_TUBE_FILL_10_ID = 'SOUND_SPEEDBOARD_LIGHTNING_TUBE_FILL_10';
    Game.Resources.SOUND_SPEEDBOARD_MULTIPLIER_UP2_1_ID = 'SOUND_SPEEDBOARD_MULTIPLIER_UP2_1';
    Game.Resources.SOUND_SPEEDBOARD_MULTIPLIER_UP2_2_ID = 'SOUND_SPEEDBOARD_MULTIPLIER_UP2_2';
    Game.Resources.SOUND_SPEEDBOARD_MULTIPLIER_UP2_3_ID = 'SOUND_SPEEDBOARD_MULTIPLIER_UP2_3';
    Game.Resources.SOUND_SPEEDBOARD_MULTIPLIER_UP2_4_ID = 'SOUND_SPEEDBOARD_MULTIPLIER_UP2_4';
    Game.Resources.SOUND_SPEEDBOARD_TIMEBONUS_5_ID = 'SOUND_SPEEDBOARD_TIMEBONUS_5';
    Game.Resources.SOUND_SPEEDBOARD_TIMEBONUS_10_ID = 'SOUND_SPEEDBOARD_TIMEBONUS_10';
    Game.Resources.SOUND_SPEEDBOARD_TIMEBONUS_APPEARS_5_ID = 'SOUND_SPEEDBOARD_TIMEBONUS_APPEARS_5';
    Game.Resources.SOUND_SPEEDBOARD_TIMEBONUS_APPEARS_10_ID = 'SOUND_SPEEDBOARD_TIMEBONUS_APPEARS_10';
    Game.Resources.SOUND_SPEEDMATCH1_ID = 'SOUND_SPEEDMATCH1';
    Game.Resources.SOUND_SPEEDMATCH2_ID = 'SOUND_SPEEDMATCH2';
    Game.Resources.SOUND_SPEEDMATCH3_ID = 'SOUND_SPEEDMATCH3';
    Game.Resources.SOUND_SPEEDMATCH4_ID = 'SOUND_SPEEDMATCH4';
    Game.Resources.SOUND_SPEEDMATCH5_ID = 'SOUND_SPEEDMATCH5';
    Game.Resources.SOUND_SPEEDMATCH6_ID = 'SOUND_SPEEDMATCH6';
    Game.Resources.SOUND_SPEEDMATCH7_ID = 'SOUND_SPEEDMATCH7';
    Game.Resources.SOUND_SPEEDMATCH8_ID = 'SOUND_SPEEDMATCH8';
    Game.Resources.SOUND_SPEEDMATCH9_ID = 'SOUND_SPEEDMATCH9';
    Game.Resources.SOUND_START_ROTATE_ID = 'SOUND_START_ROTATE';
    Game.Resources.SOUND_TICK_ID = 'SOUND_TICK';
    Game.Resources.SOUND_TOOLTIP_ID = 'SOUND_TOOLTIP';
    Game.Resources.SOUND_VOICE_AWESOME_ID = 'SOUND_VOICE_AWESOME';
    Game.Resources.SOUND_VOICE_BLAZINGSPEED_ID = 'SOUND_VOICE_BLAZINGSPEED';
    Game.Resources.SOUND_VOICE_EXCELLENT_ID = 'SOUND_VOICE_EXCELLENT';
    Game.Resources.SOUND_VOICE_EXTRAORDINARY_ID = 'SOUND_VOICE_EXTRAORDINARY';
    Game.Resources.SOUND_VOICE_GAMEOVER_ID = 'SOUND_VOICE_GAMEOVER';
    Game.Resources.SOUND_VOICE_GETREADY_ID = 'SOUND_VOICE_GETREADY';
    Game.Resources.SOUND_VOICE_GO_ID = 'SOUND_VOICE_GO';
    Game.Resources.SOUND_VOICE_GOOD_ID = 'SOUND_VOICE_GOOD';
    Game.Resources.SOUND_VOICE_LEVELCOMPLETE_ID = 'SOUND_VOICE_LEVELCOMPLETE';
    Game.Resources.SOUND_VOICE_NOMOREMOVES_ID = 'SOUND_VOICE_NOMOREMOVES';
    Game.Resources.SOUND_VOICE_SPECTACULAR_ID = 'SOUND_VOICE_SPECTACULAR';
    Game.Resources.SOUND_VOICE_THIRTYSECONDS_ID = 'SOUND_VOICE_THIRTYSECONDS';
    Game.Resources.SOUND_VOICE_TIMEUP_ID = 'SOUND_VOICE_TIMEUP';
    Game.Resources.SOUND_VOICE_UNBELIEVABLE_ID = 'SOUND_VOICE_UNBELIEVABLE';
    Game.Resources.SOUND_VOICE_WELCOMEBACK_ID = 'SOUND_VOICE_WELCOMEBACK';
    Game.Resources.SOUND_VOICE_WELCOMETOBEJEWELED_ID = 'SOUND_VOICE_WELCOMETOBEJEWELED';
    Game.Resources.ATLASIMAGE_ATLAS_LOADINGTHREAD_480_00_ID = 'ATLASIMAGE_ATLAS_LOADINGTHREAD_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_LOADINGTHREAD_480_01_ID = 'ATLASIMAGE_ATLAS_LOADINGTHREAD_480_01';
    Game.Resources.ATLASIMAGE_ATLAS_LOADINGTHREAD_480_02_ID = 'ATLASIMAGE_ATLAS_LOADINGTHREAD_480_02';
    Game.Resources.ATLASIMAGE_ATLAS_LOADINGTHREAD_480_03_ID = 'ATLASIMAGE_ATLAS_LOADINGTHREAD_480_03';
    Game.Resources.ATLASIMAGE_RT_ATLAS_LOADINGTHREAD_480_00_ID = 'ATLASIMAGE_RT_ATLAS_LOADINGTHREAD_480_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_LOADINGTHREAD_480_01_ID = 'ATLASIMAGE_RT_ATLAS_LOADINGTHREAD_480_01';
    Game.Resources.ATLASIMAGE_ATLAS_LOADINGTHREAD_768_00_ID = 'ATLASIMAGE_ATLAS_LOADINGTHREAD_768_00';
    Game.Resources.ATLASIMAGE_ATLAS_LOADINGTHREAD_768_01_ID = 'ATLASIMAGE_ATLAS_LOADINGTHREAD_768_01';
    Game.Resources.ATLASIMAGE_ATLAS_LOADINGTHREAD_768_02_ID = 'ATLASIMAGE_ATLAS_LOADINGTHREAD_768_02';
    Game.Resources.ATLASIMAGE_RT_ATLAS_LOADINGTHREAD_768_00_ID = 'ATLASIMAGE_RT_ATLAS_LOADINGTHREAD_768_00';
    Game.Resources.ATLASIMAGE_ATLAS_LOADINGTHREAD_COMMON_00_ID = 'ATLASIMAGE_ATLAS_LOADINGTHREAD_COMMON_00';
    Game.Resources.ATLASIMAGE_RT_ATLAS_LOADINGTHREAD_COMMON_00_ID = 'ATLASIMAGE_RT_ATLAS_LOADINGTHREAD_COMMON_00';
    Game.Resources.IMAGE_CRYSTALBALL_ID = 'IMAGE_CRYSTALBALL';
    Game.Resources.IMAGE_CRYSTALBALL_SHADOW_ID = 'IMAGE_CRYSTALBALL_SHADOW';
    Game.Resources.IMAGE_CRYSTALBALL_GLOW_ID = 'IMAGE_CRYSTALBALL_GLOW';
    Game.Resources.IMAGE_TITLE_ID = 'IMAGE_TITLE';
    Game.Resources.IMAGE_PARTICLES_CRYSTALBALL_0_BASIC_BLUR_ID = 'IMAGE_PARTICLES_CRYSTALBALL_0_BASIC_BLUR';
    Game.Resources.IMAGE_PARTICLES_CRYSTALRAYS_0_RAY_ID = 'IMAGE_PARTICLES_CRYSTALRAYS_0_RAY';
    Game.Resources.ATLASIMAGE_ATLAS_MAINMENU_480_00_ID = 'ATLASIMAGE_ATLAS_MAINMENU_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_MAINMENU_480_01_ID = 'ATLASIMAGE_ATLAS_MAINMENU_480_01';
    Game.Resources.ATLASIMAGE_RT_ATLAS_MAINMENU_480_00_ID = 'ATLASIMAGE_RT_ATLAS_MAINMENU_480_00';
    Game.Resources.ATLASIMAGE_ATLAS_MAINMENU_768_00_ID = 'ATLASIMAGE_ATLAS_MAINMENU_768_00';
    Game.Resources.ATLASIMAGE_ATLAS_MAINMENU_768_01_ID = 'ATLASIMAGE_ATLAS_MAINMENU_768_01';
    Game.Resources.ATLASIMAGE_RT_ATLAS_MAINMENU_768_00_ID = 'ATLASIMAGE_RT_ATLAS_MAINMENU_768_00';
    Game.Resources.SOUND_MUSIC_CLASSIC_ID = 'SOUND_MUSIC_CLASSIC';
    Game.Resources.SOUND_MUSIC_MENU_ID = 'SOUND_MUSIC_MENU';
    Game.Resources.SOUND_MUSIC_SPEED_ID = 'SOUND_MUSIC_SPEED';
    Game.Resources.SOUND_MUSIC_SPEED_END_ID = 'SOUND_MUSIC_SPEED_END';
    Game.Resources.IMAGE_TEX_BLUE_GEM_ID = 'IMAGE_TEX_BLUE_GEM';
    Game.Resources.IMAGE_TEX_GREEN_GE_ID = 'IMAGE_TEX_GREEN_GE';
    Game.Resources.IMAGE_TEX_ORANGE_G_ID = 'IMAGE_TEX_ORANGE_G';
    Game.Resources.IMAGE_TEX_PURPLE_G_ID = 'IMAGE_TEX_PURPLE_G';
    Game.Resources.IMAGE_TEX_RED_GEM_ID = 'IMAGE_TEX_RED_GEM';
    Game.Resources.IMAGE_TEX_TUBECAP_ID = 'IMAGE_TEX_TUBECAP';
    Game.Resources.IMAGE_TEX_WARP_LIN_ID = 'IMAGE_TEX_WARP_LIN';
    Game.Resources.IMAGE_TEX_WHITE_GE_ID = 'IMAGE_TEX_WHITE_GE';
    Game.Resources.IMAGE_TEX_YELLOW_G_ID = 'IMAGE_TEX_YELLOW_G';
    Game.Resources['IMAGE_GEMLIGHTING'] = null;
    Game.Resources['IMAGE_SPARKLE'] = null;
    Game.Resources['IMAGE_PARTICLES_BOARD_FLAME_EMBERS_0_BASIC_BLUR'] = null;
    Game.Resources['IMAGE_PARTICLES_COUNTDOWNBAR_0_SMALL_BLUR_STAR'] = null;
    Game.Resources['IMAGE_PARTICLES_COUNTDOWNBAR_1_BASIC_BLUR'] = null;
    Game.Resources['IMAGE_PARTICLES_DISCOBALL_0_DISCO_GLOW'] = null;
    Game.Resources['IMAGE_PARTICLES_DISCOBALL_1_DISCO_GLOW'] = null;
    Game.Resources['IMAGE_PARTICLES_DISCOBALL_2_BLURRED_SHARP_STAR'] = null;
    Game.Resources['IMAGE_PARTICLES_FIRE_TRAIL_0_BASIC_BLUR'] = null;
    Game.Resources['IMAGE_PARTICLES_FIREGEM_HYPERSPACE_0_BASIC_BLUR'] = null;
    Game.Resources['IMAGE_PARTICLES_GEM_LANDING_FX_0_CERCLEM'] = null;
    Game.Resources['IMAGE_PARTICLES_GEM_LANDING_FX_1_BLURRED_SHARP_STAR'] = null;
    Game.Resources['IMAGE_PARTICLES_HINTFLASH_0_CERCLEM'] = null;
    Game.Resources['IMAGE_PARTICLES_HYPERCUBE_0_BASIC_BLUR'] = null;
    Game.Resources['IMAGE_PARTICLES_LIGHTNING_POWERED_BOTTOM_0_LIGHTNINGPARTICLE'] = null;
    Game.Resources['IMAGE_PARTICLES_LIGHTNING_POWERED_LEFTRIGHT_0_LIGHTNINGPARTICLE'] = null;
    Game.Resources['IMAGE_PARTICLES_LIGHTNING_POWERED_LEFTRIGHT_1_LIGHTNINGPARTICLE'] = null;
    Game.Resources['IMAGE_PARTICLES_LIGHTNING_POWERED_MEGASHARD_0_LIGHTNINGPARTICLE'] = null;
    Game.Resources['IMAGE_PARTICLES_LIGHTNING_POWERED_MEGASHARD_1_LIGHTNINGPARTICLE'] = null;
    Game.Resources['IMAGE_PARTICLES_LIGHTNING_STEAMPULSE_0_BASIC_BLUR'] = null;
    Game.Resources['IMAGE_PARTICLES_MAINMENU3_0_BLURRED_SPLOTCH'] = null;
    Game.Resources['IMAGE_PARTICLES_MULTIPLIER_0_RAY'] = null;
    Game.Resources['IMAGE_PARTICLES_QUEST_DIG_COLLECT_GOLD_0_SMALL_BLUR_STAR'] = null;
    Game.Resources['IMAGE_PARTICLES_QUEST_DIG_COLLECT_GOLD_1_BASIC_BLUR'] = null;
    Game.Resources['IMAGE_PARTICLES_SPEEDBOARD_FLAME_0_FLAME1'] = null;
    Game.Resources['IMAGE_PARTICLES_SPEEDTEXT_FLAME_0_TRUEFLAME5X'] = null;
    Game.Resources['IMAGE_PARTICLES_STARGEM_0_SMALL_BLUR_STAR'] = null;
    Game.Resources['IMAGE_PARTICLES_STARGEM_1_CORONAGLOW'] = null;
    Game.Resources['IMAGE_PARTICLES_STARGEM_2_STAR_GLOW'] = null;
    Game.Resources['IMAGE_LIGHTNING'] = null;
    Game.Resources['IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME1'] = null;
    Game.Resources['IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME2'] = null;
    Game.Resources['IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME3'] = null;
    Game.Resources['IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME4'] = null;
    Game.Resources['IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME5'] = null;
    Game.Resources['IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME6'] = null;
    Game.Resources['IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME7'] = null;
    Game.Resources['IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME8'] = null;
    Game.Resources['IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME9'] = null;
    Game.Resources['IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME10'] = null;
    Game.Resources['IMAGE_FLAMEGEMCREATION_ANIMATED_FLAME_CELLS02SM_FLAME11'] = null;
    Game.Resources['IMAGE_FLAMEGEMCREATION_FLAMEGEM_BLUR'] = null;
    Game.Resources['IMAGE_FLAMEGEMCREATION_FLAMEGEM_FLASH_1'] = null;
    Game.Resources['IMAGE_FLAMEGEMCREATION_FLAMEGEM_FLASH_2'] = null;
    Game.Resources['IMAGE_FLAMEGEMCREATION_FLAMEGEM_LARGE_RING'] = null;
    Game.Resources['IMAGE_FLAMEGEMCREATION_FLAMEGEM_RING_OF_FLAME'] = null;
    Game.Resources['IMAGE_FIREPARTICLE'] = null;
    Game.Resources['IMAGE_SPARKLET'] = null;
    Game.Resources['IMAGE_GEM_FRUIT_SPARK'] = null;
    Game.Resources['IMAGE_ELECTROTEX'] = null;
    Game.Resources['IMAGE_ELECTROTEX_CENTER'] = null;
    Game.Resources['IMAGE_HYPERFLARELINE'] = null;
    Game.Resources['IMAGE_HYPERFLARERING'] = null;
    Game.Resources['IMAGE_GEMOUTLINES'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_ADDITIVE_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_ADDITIVE_480_01'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_ADDITIVE_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_ADDITIVE_768_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_ADDITIVE_768_01'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_ADDITIVE_768_00'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_BLOWING_SNOW04_0_SNOWBLOW'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_BLOWING_SNOW04_1_DOTS'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LANTERNPLANT01_0_BASIC_BLUR'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LANTERNPLANT01_1_SQUARE_STAR'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATER_FALL_CLIFF01_0_WATERPART01'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATER_FALL_CLIFF02_0_FLAME320004C7'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BACKGROUNDS_480_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_BACKGROUNDS_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BACKGROUNDS_768_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_BACKGROUNDS_768_00'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_FLATTENEDPAM'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_1920X1200'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_2'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_3'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_4'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_5'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_6'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_7'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_8'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_9'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_10'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_11'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_12'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_13'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_14'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_50X50_15'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_CANYON_WALL_CASTLE_CANYON_WALL_CASTLE_965X935'] = null;
    Game.Resources['POPANIM_BACKGROUNDS_CANYON_WALL_CASTLE'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BG_CANYONWALLCASTLE_480_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_BG_CANYONWALLCASTLE_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BG_CANYONWALLCASTLE_768_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_BG_CANYONWALLCASTLE_768_00'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLATTENEDPAM'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_1920X1200'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_1127X272'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_1254X573'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_16X63'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_1920X1186'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_214X81'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_439X551'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_2'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_3'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_4'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_5'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_6'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_7'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_8'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_9'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_10'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_11'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_12'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_13'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_14'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_50X17_15'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_576X369'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_619X198'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_629X243'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_724X147'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_FLOATING_ROCK_CITY_FLOATING_ROCK_CITY_724X147_2'] = null;
    Game.Resources['POPANIM_BACKGROUNDS_FLOATING_ROCK_CITY'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BG_FLOATINGROCKCITY_480_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_BG_FLOATINGROCKCITY_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BG_FLOATINGROCKCITY_768_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_BG_FLOATINGROCKCITY_768_00'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_FLATTENEDPAM'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_1920X1200'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_11X10'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_11X19'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_12X11'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_13X14'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_14X14'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_15X13'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_16X10'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_22X13'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_23X8'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_25X10'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_62X884'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_6X19'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_HORSE_FOREST_TREE_HORSE_FOREST_TREE_779X876'] = null;
    Game.Resources['POPANIM_BACKGROUNDS_HORSE_FOREST_TREE'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BG_HORSEFORESTTREE_480_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_BG_HORSEFORESTTREE_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BG_HORSEFORESTTREE_768_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_BG_HORSEFORESTTREE_768_00'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LANTERN_PLANTS_WORLD_FLATTENEDPAM'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LANTERN_PLANTS_WORLD_LANTERN_PLANTS_WORLD_1920X1200'] = null;
    Game.Resources['POPANIM_BACKGROUNDS_LANTERN_PLANTS_WORLD'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_FLATTENEDPAM'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_1920X1200'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_11X19'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_12X11'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_13X14'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_14X14'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_15X13'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_16X10'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_179X67'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_22X13'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_23X8'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_25X10'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_279X293'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_303X68'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_558X504'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_617X180'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_650X300'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_663X239'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_693X281'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_694X323'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_LION_TOWER_CASCADE_LION_TOWER_CASCADE_6X19'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATERFALL10_0_WHITEPHOOP_RIGHT2'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATERFALL10_1_WATERPART'] = null;
    Game.Resources['POPANIM_BACKGROUNDS_LION_TOWER_CASCADE'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BG_LIONTOWERCASCADE_480_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_BG_LIONTOWERCASCADE_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BG_LIONTOWERCASCADE_768_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_BG_LIONTOWERCASCADE_768_00'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_POINTY_ICE_PATH_FLATTENEDPAM'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_1920X1200'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_133X135'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_135X118'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_16X63'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_192X94'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_578X432'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_POINTY_ICE_PATH_POINTY_ICE_PATH_840X355'] = null;
    Game.Resources['POPANIM_BACKGROUNDS_POINTY_ICE_PATH'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BG_POINTYICEPATH_480_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_BG_POINTYICEPATH_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BG_POINTYICEPATH_768_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_BG_POINTYICEPATH_768_00'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_FLATTENEDPAM'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_SNOWY_CLIFFS_CASTLE_1920X1200'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_SNOWY_CLIFFS_CASTLE_86X82'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_SNOWY_CLIFFS_CASTLE_86X82_2'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_SNOWY_CLIFFS_CASTLE_86X82_3'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_SNOWY_CLIFFS_CASTLE_SNOWY_CLIFFS_CASTLE_86X82_4'] = null;
    Game.Resources['POPANIM_BACKGROUNDS_SNOWY_CLIFFS_CASTLE'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BG_SNOWYCLIFFSCASTLE_480_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_BG_SNOWYCLIFFSCASTLE_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BG_SNOWYCLIFFSCASTLE_768_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_BG_SNOWYCLIFFSCASTLE_768_00'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_FLATTENEDPAM'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_1920X1200'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_11X19'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_12X11'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_13X14'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_14X14'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_15X13'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_16X10'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_22X13'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_23X8'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_25X10'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_449X521'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_497X955'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_676X834'] = null;
    Game.Resources['IMAGE_BACKGROUNDS_WATER_FALL_CLIFF_WATER_FALL_CLIFF_6X19'] = null;
    Game.Resources['POPANIM_BACKGROUNDS_WATER_FALL_CLIFF'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BG_WATERFALLCLIFF_480_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_BG_WATERFALLCLIFF_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BG_WATERFALLCLIFF_768_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_BG_WATERFALLCLIFF_768_00'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUI_ENERGIZE_PULSERING'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUI_LEFT_DEAD'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUI_LEFT_GOLD'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUI_LEFT_PURPLE'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUI_MULTI_GOLD'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUI_MULTI_PULSERING'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUI_RIGHT_DEAD'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUI_RIGHT_GOLD'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUI_RIGHT_PURPLE'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUI_RUNE_GOLDL'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUI_RUNE_GOLDM1'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUI_RUNE_GOLDM2'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUI_RUNE_GOLDR'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUI_UITOP'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUI_UITOP_DAMAGE'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUIBOTTOM_BOTTOM_DEAD'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUIBOTTOM_BOTTOM_GOLD'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUIBOTTOM_BOTTOM_PURPLE'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUIBOTTOM_ENERGIZE_PULSERING'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUIBOTTOM_LEFT_DEAD'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUIBOTTOM_LEFT_GOLD'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUIBOTTOM_LEFT_PURPLE'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUIBOTTOM_MULTI_GOLD'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUIBOTTOM_MULTI_PULSERING'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RIGHT_DEAD'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RIGHT_GOLD'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RIGHT_PURPLE'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RUNE_GOLDL'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RUNE_GOLDM1'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RUNE_GOLDM2'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUIBOTTOM_RUNE_GOLDR'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUIBOTTOM_UIBOTTOM'] = null;
    Game.Resources['IMAGE_ANIMS_LIGHTNINGUIBOTTOM_UITOP'] = null;
    Game.Resources['IMAGE_ANIMS_GEM_MEGA_MEGA_CUFF'] = null;
    Game.Resources['IMAGE_ANIMS_GEM_MEGA_MEGA_CUFFDEAD'] = null;
    Game.Resources['IMAGE_ANIMS_GEM_MEGA_MEGA_CUFFGLOW'] = null;
    Game.Resources['IMAGE_ANIMS_GEM_MEGA_MEGA_DEAD'] = null;
    Game.Resources['IMAGE_ANIMS_GEM_MEGA_MEGA_GOLD'] = null;
    Game.Resources['IMAGE_ANIMS_GEM_MEGA_MEGA_PURPLE'] = null;
    Game.Resources['IMAGE_ANIMS_GEM_MEGA_MULTI_PULSERING'] = null;
    Game.Resources['IMAGE_ANIMS_GEM_MEGA_SHATTER_MEGA_0_SHARD'] = null;
    Game.Resources['IMAGE_ANIMS_GEM_MEGA_SHATTER_MEGA_1_BASIC_BLUR'] = null;
    Game.Resources['IMAGE_BOARD_BOTTOM_FRAME'] = null;
    Game.Resources['IMAGE_BOARD_BOTTOM_FRAME_BACK'] = null;
    Game.Resources['IMAGE_BOARD_BOTTOM_FRAME_GLOW'] = null;
    Game.Resources['IMAGE_BOARD_BOTTOM_WIDGET_CLASSIC'] = null;
    Game.Resources['IMAGE_BOARD_BOTTOM_WIDGET_LIGHTNING'] = null;
    Game.Resources['IMAGE_BOARD_HIGHLIGHT_ARROW'] = null;
    Game.Resources['IMAGE_BOARD_HIGHLIGHT_CIRCLE'] = null;
    Game.Resources['IMAGE_BOARD_HIGHLIGHT_FULL'] = null;
    Game.Resources['IMAGE_BOARD_HINT_BUTTON_CLASSIC'] = null;
    Game.Resources['IMAGE_BOARD_HINT_BUTTON_LIGHTNING'] = null;
    Game.Resources['IMAGE_BOARD_MARKER_CHECKERBOARD'] = null;
    Game.Resources['IMAGE_BOARD_MARKER_CHECKERBOARD_CLASSIC'] = null;
    Game.Resources['IMAGE_BOARD_MENU_BUTTON_CLASSIC'] = null;
    Game.Resources['IMAGE_BOARD_MENU_BUTTON_LIGHTNING'] = null;
    Game.Resources['IMAGE_BOARD_MENUBTN'] = null;
    Game.Resources['IMAGE_BOARD_RESET_BUTTON_LIGHTNING'] = null;
    Game.Resources['IMAGE_BOARD_THIN_BOTTOM_FRAME'] = null;
    Game.Resources['IMAGE_BOARD_THIN_BOTTOM_FRAME_GLOW'] = null;
    Game.Resources['IMAGE_BOARD_TICK'] = null;
    Game.Resources['IMAGE_BOARD_TICK_GLOW'] = null;
    Game.Resources['IMAGE_BOARD_TIMER'] = null;
    Game.Resources['IMAGE_BOARD_TIMER_GOLD'] = null;
    Game.Resources['IMAGE_BOARD_TIMER_RED'] = null;
    Game.Resources['IMAGE_BOARD_TOP_BACK'] = null;
    Game.Resources['IMAGE_BOARD_TOP_FRAME'] = null;
    Game.Resources['IMAGE_BOARD_TOP_FRAME_GLOW'] = null;
    Game.Resources['IMAGE_BOARD_TOP_WIDGET'] = null;
    Game.Resources['IMAGE_BARFILL'] = null;
    Game.Resources['IMAGE_BARFILLRED'] = null;
    Game.Resources['IMAGE_LIGHTNING_BOTTOM_RED_LIGHTNING'] = null;
    Game.Resources['IMAGE_LIGHTNING_CENTER'] = null;
    Game.Resources['IMAGE_LIGHTNING_MEGASHARD_RED_LIGHTNING'] = null;
    Game.Resources['IMAGE_LIGHTNING_MULTI_PULSE_RING_LIGHTNING'] = null;
    Game.Resources['IMAGE_LIGHTNING_TEX'] = null;
    Game.Resources['IMAGE_LIGHTNING_TIMER_DEAD_LIGHTNING'] = null;
    Game.Resources['IMAGE_LIGHTNING_TIMER_GOLD_LIGHTNING'] = null;
    Game.Resources['IMAGE_LIGHTNING_TIMER_LIGHTNING'] = null;
    Game.Resources['IMAGE_LIGHTNING_TIMER_RED_LIGHTNING'] = null;
    Game.Resources['IMAGE_LIGHTNING_TOP_BACK_LIGHTNING'] = null;
    Game.Resources['IMAGE_LIGHTNING_TOP_RED_LIGHTNING'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BOARD_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BOARD_480_01'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_BOARD_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BOARD_768_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_BOARD_768_01'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_BOARD_768_00'] = null;
    Game.Resources['IMAGE_DIALOG_HELP_GLOW'] = null;
    Game.Resources['IMAGE_DIALOG_LISTBOX'] = null;
    Game.Resources['IMAGE_DIALOG_BUTTON'] = null;
    Game.Resources['IMAGE_DIALOG_BACKGROUND'] = null;
    Game.Resources['IMAGE_DIALOG_BLACK_BOX'] = null;
    Game.Resources['IMAGE_DIALOG_BLUE_GEM'] = null;
    Game.Resources['IMAGE_DIALOG_BUTTON_DISABLED'] = null;
    Game.Resources['IMAGE_DIALOG_CHECKBOX_BLANK'] = null;
    Game.Resources['IMAGE_DIALOG_CHECKBOX_CHECKED'] = null;
    Game.Resources['IMAGE_DIALOG_EDITBOX'] = null;
    Game.Resources['IMAGE_DIALOG_GOLD_COIN'] = null;
    Game.Resources['IMAGE_DIALOG_HEADERLESS_BKG'] = null;
    Game.Resources['IMAGE_DIALOG_LISTSELECT'] = null;
    Game.Resources['IMAGE_DIALOG_OPTIONS_DECOR'] = null;
    Game.Resources['IMAGE_DIALOG_PLAQUE'] = null;
    Game.Resources['IMAGE_DIALOG_SILVER_COIN'] = null;
    Game.Resources['IMAGE_DIALOG_SLIDERBAR'] = null;
    Game.Resources['IMAGE_DIALOG_SLIDERBAR_VERTICAL'] = null;
    Game.Resources['IMAGE_DIALOG_SLIDERHANDLE'] = null;
    Game.Resources['IMAGE_DIALOG_SMALL_BUTTON'] = null;
    Game.Resources['IMAGE_DIALOG_TAB'] = null;
    Game.Resources['IMAGE_GAMEOVER_BAR__PINK'] = null;
    Game.Resources['IMAGE_GAMEOVER_BAR_ORANGE'] = null;
    Game.Resources['IMAGE_GAMEOVER_BAR_YELLOW'] = null;
    Game.Resources['IMAGE_GAMEOVER_BOX_ORANGE'] = null;
    Game.Resources['IMAGE_GAMEOVER_BOX_PINK'] = null;
    Game.Resources['IMAGE_GAMEOVER_BOX_YELLOW'] = null;
    Game.Resources['IMAGE_GAMEOVER_DARKER_BOX'] = null;
    Game.Resources['IMAGE_GAMEOVER_DARKEST_BOX'] = null;
    Game.Resources['IMAGE_GAMEOVER_DIALOG'] = null;
    Game.Resources['IMAGE_GAMEOVER_HORIZONTAL_BAR'] = null;
    Game.Resources['IMAGE_GAMEOVER_HORIZONTAL_BAR_OVERLAY'] = null;
    Game.Resources['IMAGE_GAMEOVER_ICON_FLAME'] = null;
    Game.Resources['IMAGE_GAMEOVER_ICON_FLAME_LRG'] = null;
    Game.Resources['IMAGE_GAMEOVER_ICON_HYPERCUBE'] = null;
    Game.Resources['IMAGE_GAMEOVER_ICON_HYPERCUBE_LRG'] = null;
    Game.Resources['IMAGE_GAMEOVER_ICON_LIGHTNING'] = null;
    Game.Resources['IMAGE_GAMEOVER_ICON_STAR'] = null;
    Game.Resources['IMAGE_GAMEOVER_ICON_STAR_LRG'] = null;
    Game.Resources['IMAGE_GAMEOVER_LIGHT_BOX'] = null;
    Game.Resources['IMAGE_GAMEOVER_LINE_SINGLE'] = null;
    Game.Resources['IMAGE_GAMEOVER_LINES'] = null;
    Game.Resources['IMAGE_GAMEOVER_SECTION_GRAPH'] = null;
    Game.Resources['IMAGE_GAMEOVER_SECTION_LABEL'] = null;
    Game.Resources['IMAGE_GAMEOVER_SECTION_SMALL'] = null;
    Game.Resources['IMAGE_GAMEOVER_STAMP'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_DIALOG_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_DIALOG_480_01'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_DIALOG_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_DIALOG_768_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_DIALOG_768_01'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_DIALOG_768_00'] = null;
    Game.Resources['FONT_HUMANST521BT40'] = null;
    Game.Resources['FONT_MULTIPLIER'] = null;
    Game.Resources['FONT_PLAYBUTTONS'] = null;
    Game.Resources['FONT_SPEED_TEXT'] = null;
    Game.Resources['FONT_FLOATERS'] = null;
    Game.Resources['FONT_SCORE'] = null;
    Game.Resources['FONT_SCORE_LARGE'] = null;
    Game.Resources['FONT_LEVEL'] = null;
    Game.Resources['FONT_POPUP_TEXT'] = null;
    Game.Resources['FONT_POPUP_COUNT'] = null;
    Game.Resources['FONT_RANKUP_NAME'] = null;
    Game.Resources['FONT_MENU_BTN'] = null;
    Game.Resources['FONT_HUGE'] = null;
    Game.Resources['FONT_DIALOG_HEADER'] = null;
    Game.Resources['FONT_GAMEOVER_DIALOG'] = null;
    Game.Resources['FONT_GAMEOVER_DIALOG_SMALL'] = null;
    Game.Resources['FONT_GAMEOVER_DIALOG_MED'] = null;
    Game.Resources['FONT_GAMEOVER_DIALOG_HUGE'] = null;
    Game.Resources['FONT_DIALOG_TEXT'] = null;
    Game.Resources['FONT_DISABLE_HINTS'] = null;
    Game.Resources['FONT_DIALOG_SMALL_TEXT'] = null;
    Game.Resources['FONT_DIALOG_BUTTONS'] = null;
    Game.Resources['FONT_RECORDS_DIALOG_BUTTONS'] = null;
    Game.Resources['FONT_SPEED_SCORE'] = null;
    Game.Resources['FONT_TIMER_LARGE'] = null;
    Game.Resources['FONT_TIMER_SMALL'] = null;
    Game.Resources['FONT_RECORDS_NAME'] = null;
    Game.Resources['FONT_RECORDS_SCORE'] = null;
    Game.Resources['FONT_RECORDS_DATE'] = null;
    Game.Resources['FONT_RECORDS_COLUMN_HEADER'] = null;
    Game.Resources['FONT_ENDLEVEL_TEXT_BIG'] = null;
    Game.Resources['FONT_ENDLEVEL_TEXT'] = null;
    Game.Resources['FONT_FLAREGOTHICBOLD20_DISABLEHINTS'] = null;
    Game.Resources['FONT_FLAREGOTHICBOLD42'] = null;
    Game.Resources['FONT_FLAREGOTHIC25'] = null;
    Game.Resources['FONT_FLAREGOTHIC16'] = null;
    Game.Resources['FONT_KOZUKAMINPROH120'] = null;
    Game.Resources['FONT_FLAREGOTHICBOLD80SCORE'] = null;
    Game.Resources['FONT_FLAREGOTHICBOLDBUTTON66'] = null;
    Game.Resources['FONT_KOZUKAGOTHPROB'] = null;
    Game.Resources['FONT_KOZGOPROHEAVY30'] = null;
    Game.Resources['FONT_FLAREGOTHIC17'] = null;
    Game.Resources['FONT_FLAREGOTHIC14'] = null;
    Game.Resources['FONT_FLAREGOTHICBOLD100'] = null;
    Game.Resources['FONT_FLAREBOLD120SIDEBAR'] = null;
    Game.Resources['FONT_FLAREGOTHIC19ZEN'] = null;
    Game.Resources['FONT_FLAREGOTHIC32'] = null;
    Game.Resources['FONT_FLAREGOTHIC55'] = null;
    Game.Resources['FONT_FLAREGOTHICBOLD20'] = null;
    Game.Resources['FONT_HUMANST19'] = null;
    Game.Resources['FONT_HUMANST28'] = null;
    Game.Resources['FONT_QUINCYCAPS25'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_FONTS_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_FONTS_480_01'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_FONTS_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_FONTS_768_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_FONTS_768_00'] = null;
    Game.Resources['FONT_SPEED_SCORE_ORANGE'] = null;
    Game.Resources['FONT_TOOLTIP'] = null;
    Game.Resources['FONT_TOOLTIP_BOLD'] = null;
    Game.Resources['FONT_TOOLTIP_BIG'] = null;
    Game.Resources['FONT_FLAREGOTHICBOLD42_ORANGE'] = null;
    Game.Resources['FONT_FLAREGOTHICBOLD42_BLACK'] = null;
    Game.Resources['FONT_FLAREGOTHIC25_BLACK'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_FONTS_IGNORED_480_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_FONTS_IGNORED_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_FONTS_IGNORED_768_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_FONTS_IGNORED_768_00'] = null;
    Game.Resources['IMAGE_GEMS_RED'] = null;
    Game.Resources['IMAGE_GEMS_WHITE'] = null;
    Game.Resources['IMAGE_GEMS_GREEN'] = null;
    Game.Resources['IMAGE_GEMS_YELLOW'] = null;
    Game.Resources['IMAGE_GEMS_PURPLE'] = null;
    Game.Resources['IMAGE_GEMS_ORANGE'] = null;
    Game.Resources['IMAGE_GEMS_BLUE'] = null;
    Game.Resources['IMAGE_GEMSSHADOW_RED'] = null;
    Game.Resources['IMAGE_GEMSSHADOW_WHITE'] = null;
    Game.Resources['IMAGE_GEMSSHADOW_GREEN'] = null;
    Game.Resources['IMAGE_GEMSSHADOW_YELLOW'] = null;
    Game.Resources['IMAGE_GEMSSHADOW_PURPLE'] = null;
    Game.Resources['IMAGE_GEMSSHADOW_ORANGE'] = null;
    Game.Resources['IMAGE_GEMSSHADOW_BLUE'] = null;
    Game.Resources['IMAGE_LIGHTNING_GEMNUMS_RED'] = null;
    Game.Resources['IMAGE_LIGHTNING_GEMNUMS_WHITE'] = null;
    Game.Resources['IMAGE_LIGHTNING_GEMNUMS_GREEN'] = null;
    Game.Resources['IMAGE_LIGHTNING_GEMNUMS_YELLOW'] = null;
    Game.Resources['IMAGE_LIGHTNING_GEMNUMS_PURPLE'] = null;
    Game.Resources['IMAGE_LIGHTNING_GEMNUMS_ORANGE'] = null;
    Game.Resources['IMAGE_LIGHTNING_GEMNUMS_BLUE'] = null;
    Game.Resources['IMAGE_LIGHTNING_GEMNUMS_CLEAR'] = null;
    Game.Resources['IMAGE_SMOKE'] = null;
    Game.Resources['IMAGE_DRIP'] = null;
    Game.Resources['IMAGE_FX_STEAM'] = null;
    Game.Resources['IMAGE_FLAMEGEMEXPLODE_FLAMEEXPLODETEST_LAYER_1'] = null;
    Game.Resources['IMAGE_GEMS_SHADOWED'] = null;
    Game.Resources['IMAGE_HINTARROW'] = null;
    Game.Resources['IMAGE_SELECTOR'] = null;
    Game.Resources['IMAGE_SM_SHARDS'] = null;
    Game.Resources['IMAGE_SM_SHARDS_OUTLINE'] = null;
    Game.Resources['POPANIM_FLAMEGEMCREATION'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_GAMEPLAY_480_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_GAMEPLAY_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_GAMEPLAY_768_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_GAMEPLAY_768_00'] = null;
    Game.Resources['FONT_DEFAULT'] = null;
    Game.Resources['FONT_FLAREGOTHIC28'] = null;
    Game.Resources['FONT_LOADER_TIP'] = null;
    Game.Resources['IMAGE_BOARD_SD'] = null;
    Game.Resources['IMAGE_BOARD_HD'] = null;
    Game.Resources['IMAGE_BOARD_HDSD_BUTTON_FRAME'] = null;
    Game.Resources['IMAGE_LOADER_WHITEDOT'] = null;
    Game.Resources['IMAGE_LOADER_POPCAP'] = null;
    Game.Resources['EFFECT_BOARD_3D'] = null;
    Game.Resources['EFFECT_GEM_3D'] = null;
    Game.Resources['EFFECT_TUBE_3D'] = null;
    Game.Resources['EFFECT_TUBECAP_3D'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_INIT_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_INIT_480_01'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_INIT_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_INIT_768_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_INIT_768_01'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_INIT_768_00'] = null;
    Game.Resources['FONT_FLAREGOTHIC8'] = null;
    Game.Resources['FONT_FLAREGOTHICBOLD10'] = null;
    Game.Resources['FONT_HUMANST9'] = null;
    Game.Resources['IMAGE_HYPERSPACE_INITIAL'] = null;
    Game.Resources['IMAGE_HYPERSPACE'] = null;
    Game.Resources['IMAGE_WARP_LINES_01'] = null;
    Game.Resources['IMAGE_COMPLEMENT_GOOD'] = null;
    Game.Resources['IMAGE_COMPLEMENT_EXCELLENT'] = null;
    Game.Resources['IMAGE_COMPLEMENT_AWESOME'] = null;
    Game.Resources['IMAGE_COMPLEMENT_SPECTACULAR'] = null;
    Game.Resources['IMAGE_COMPLEMENT_EXTRAORDINARY'] = null;
    Game.Resources['IMAGE_COMPLEMENT_UNBELIEVABLE'] = null;
    Game.Resources['IMAGE_COMPLEMENT_BLAZINGSPEED'] = null;
    Game.Resources['IMAGE_VERTICAL_STREAK'] = null;
    Game.Resources['IMAGE_HYPERCUBE_COLORGLOW'] = null;
    Game.Resources['IMAGE_HYPERCUBE_FRAME'] = null;
    Game.Resources['IMAGE_TRANSPARENT_HOLE'] = null;
    Game.Resources['IMAGE_GRITTYBLURRY'] = null;
    Game.Resources['IMAGE_ANIMS_BOARDSHATTER_BOTTOM'] = null;
    Game.Resources['IMAGE_ANIMS_BOARDSHATTER_GRID'] = null;
    Game.Resources['IMAGE_ANIMS_BOARDSHATTER_TOP'] = null;
    Game.Resources['IMAGE_DANGERBORDERLEFT'] = null;
    Game.Resources['IMAGE_DANGERBORDERUP'] = null;
    Game.Resources['IMAGE_GRIDPAINT_BLANK'] = null;
    Game.Resources['IMAGE_GRIDPAINT_FILLED'] = null;
    Game.Resources['IMAGE_MULTIPLIER_LARGE_BACK'] = null;
    Game.Resources['IMAGE_MULTIPLIER_LARGE_FRONT'] = null;
    Game.Resources['IMAGE_RECORDS_RANK_FILL'] = null;
    Game.Resources['IMAGE_RECORDS_RANK_GLOW'] = null;
    Game.Resources['IMAGE_RECORDS_RANK_PLATE'] = null;
    Game.Resources['IMAGE_SOLID_BLACK'] = null;
    Game.Resources['IMAGE_SPARKLE_FAT'] = null;
    Game.Resources['IMAGE_SPARKLET_BIG'] = null;
    Game.Resources['IMAGE_SPARKLET_FAT'] = null;
    Game.Resources['IMAGE_TOOLTIP'] = null;
    Game.Resources['IMAGE_TOOLTIP_ARROW'] = null;
    Game.Resources['PIEFFECT_ANIMS_GEM_MEGA_SHATTER_MEGA'] = null;
    Game.Resources['PIEFFECT_BACKGROUNDS_BLOWING_SNOW04'] = null;
    Game.Resources['PIEFFECT_BACKGROUNDS_LANTERNPLANT01'] = null;
    Game.Resources['PIEFFECT_BACKGROUNDS_WATER_FALL_CLIFF01'] = null;
    Game.Resources['PIEFFECT_BACKGROUNDS_WATER_FALL_CLIFF02'] = null;
    Game.Resources['PIEFFECT_BACKGROUNDS_WATERFALL10'] = null;
    Game.Resources['PIEFFECT_BOARD_FLAME_EMBERS'] = null;
    Game.Resources['PIEFFECT_COUNTDOWNBAR'] = null;
    Game.Resources['PIEFFECT_CRYSTALBALL'] = null;
    Game.Resources['PIEFFECT_CRYSTALRAYS'] = null;
    Game.Resources['PIEFFECT_DISCOBALL'] = null;
    Game.Resources['PIEFFECT_FIRE_TRAIL'] = null;
    Game.Resources['PIEFFECT_FIREGEM_HYPERSPACE'] = null;
    Game.Resources['PIEFFECT_GEM_LANDING_FX'] = null;
    Game.Resources['PIEFFECT_HINTFLASH'] = null;
    Game.Resources['PIEFFECT_HYPERCUBE'] = null;
    Game.Resources['PIEFFECT_LIGHTNING_POWERED_BOTTOM'] = null;
    Game.Resources['PIEFFECT_LIGHTNING_POWERED_LEFTRIGHT'] = null;
    Game.Resources['PIEFFECT_LIGHTNING_POWERED_MEGASHARD'] = null;
    Game.Resources['PIEFFECT_LIGHTNING_STEAMPULSE'] = null;
    Game.Resources['PIEFFECT_MAINMENU3'] = null;
    Game.Resources['PIEFFECT_MULTIPLIER'] = null;
    Game.Resources['PIEFFECT_QUEST_DIG_COLLECT_GOLD'] = null;
    Game.Resources['PIEFFECT_SPEEDBOARD_FLAME'] = null;
    Game.Resources['PIEFFECT_SPEEDTEXT_FLAME'] = null;
    Game.Resources['PIEFFECT_STARGEM'] = null;
    Game.Resources['POPANIM_ANIMS_LIGHTNINGUI'] = null;
    Game.Resources['POPANIM_ANIMS_LIGHTNINGUIBOTTOM'] = null;
    Game.Resources['POPANIM_ANIMS_BOARDSHATTER'] = null;
    Game.Resources['POPANIM_ANIMS_GEM_MEGA'] = null;
    Game.Resources['POPANIM_FLAMEGEMEXPLODE'] = null;
    Game.Resources['SOUND_BUTTON_MOUSEOVER'] = null;
    Game.Resources['SOUND_BUTTON_MOUSELEAVE'] = null;
    Game.Resources['SOUND_BACKTOMAIN'] = null;
    Game.Resources['SOUND_BADMOVE'] = null;
    Game.Resources['SOUND_BOMB_EXPLODE'] = null;
    Game.Resources['SOUND_BUTTON_PRESS'] = null;
    Game.Resources['SOUND_BUTTON_RELEASE'] = null;
    Game.Resources['SOUND_CLICKFLYIN'] = null;
    Game.Resources['SOUND_COMBO_1'] = null;
    Game.Resources['SOUND_COMBO_2'] = null;
    Game.Resources['SOUND_COMBO_3'] = null;
    Game.Resources['SOUND_COMBO_4'] = null;
    Game.Resources['SOUND_COMBO_5'] = null;
    Game.Resources['SOUND_COMBO_6'] = null;
    Game.Resources['SOUND_COMBO_7'] = null;
    Game.Resources['SOUND_COUNTDOWN_WARNING'] = null;
    Game.Resources['SOUND_DOUBLESET'] = null;
    Game.Resources['SOUND_ELECTRO_EXPLODE'] = null;
    Game.Resources['SOUND_ELECTRO_PATH'] = null;
    Game.Resources['SOUND_ELECTRO_PATH2'] = null;
    Game.Resources['SOUND_FLAMEBONUS'] = null;
    Game.Resources['SOUND_FLAMESPEED1'] = null;
    Game.Resources['SOUND_GEM_COUNTDOWN_DESTROYED'] = null;
    Game.Resources['SOUND_GEM_HIT'] = null;
    Game.Resources['SOUND_GEM_SHATTERS'] = null;
    Game.Resources['SOUND_HYPERCUBE_CREATE'] = null;
    Game.Resources['SOUND_HYPERSPACE'] = null;
    Game.Resources['SOUND_HYPERSPACE_GEM_LAND_1'] = null;
    Game.Resources['SOUND_HYPERSPACE_GEM_LAND_2'] = null;
    Game.Resources['SOUND_HYPERSPACE_GEM_LAND_3'] = null;
    Game.Resources['SOUND_HYPERSPACE_GEM_LAND_4'] = null;
    Game.Resources['SOUND_HYPERSPACE_GEM_LAND_5'] = null;
    Game.Resources['SOUND_HYPERSPACE_GEM_LAND_6'] = null;
    Game.Resources['SOUND_HYPERSPACE_GEM_LAND_7'] = null;
    Game.Resources['SOUND_HYPERSPACE_SHATTER_1'] = null;
    Game.Resources['SOUND_HYPERSPACE_SHATTER_2'] = null;
    Game.Resources['SOUND_LASERGEM_CREATED'] = null;
    Game.Resources['SOUND_MENUSPIN'] = null;
    Game.Resources['SOUND_NEXTLEVEL'] = null;
    Game.Resources['SOUND_POWERGEM_CREATED'] = null;
    Game.Resources['SOUND_PREBLAST'] = null;
    Game.Resources['SOUND_QUEST_GET'] = null;
    Game.Resources['SOUND_RANK_COUNTUP'] = null;
    Game.Resources['SOUND_RANKUP'] = null;
    Game.Resources['SOUND_SELECT'] = null;
    Game.Resources['SOUND_SMALL_EXPLODE'] = null;
    Game.Resources['SOUND_SPEEDBOARD_BACKGROUND_CHANGE'] = null;
    Game.Resources['SOUND_SPEEDBOARD_FLAMELOOP'] = null;
    Game.Resources['SOUND_SPEEDBOARD_LIGHTNING_ENERGIZE'] = null;
    Game.Resources['SOUND_SPEEDBOARD_LIGHTNING_TUBE_FILL_5'] = null;
    Game.Resources['SOUND_SPEEDBOARD_LIGHTNING_TUBE_FILL_10'] = null;
    Game.Resources['SOUND_SPEEDBOARD_MULTIPLIER_UP2_1'] = null;
    Game.Resources['SOUND_SPEEDBOARD_MULTIPLIER_UP2_2'] = null;
    Game.Resources['SOUND_SPEEDBOARD_MULTIPLIER_UP2_3'] = null;
    Game.Resources['SOUND_SPEEDBOARD_MULTIPLIER_UP2_4'] = null;
    Game.Resources['SOUND_SPEEDBOARD_TIMEBONUS_5'] = null;
    Game.Resources['SOUND_SPEEDBOARD_TIMEBONUS_10'] = null;
    Game.Resources['SOUND_SPEEDBOARD_TIMEBONUS_APPEARS_5'] = null;
    Game.Resources['SOUND_SPEEDBOARD_TIMEBONUS_APPEARS_10'] = null;
    Game.Resources['SOUND_SPEEDMATCH1'] = null;
    Game.Resources['SOUND_SPEEDMATCH2'] = null;
    Game.Resources['SOUND_SPEEDMATCH3'] = null;
    Game.Resources['SOUND_SPEEDMATCH4'] = null;
    Game.Resources['SOUND_SPEEDMATCH5'] = null;
    Game.Resources['SOUND_SPEEDMATCH6'] = null;
    Game.Resources['SOUND_SPEEDMATCH7'] = null;
    Game.Resources['SOUND_SPEEDMATCH8'] = null;
    Game.Resources['SOUND_SPEEDMATCH9'] = null;
    Game.Resources['SOUND_START_ROTATE'] = null;
    Game.Resources['SOUND_TICK'] = null;
    Game.Resources['SOUND_TOOLTIP'] = null;
    Game.Resources['SOUND_VOICE_AWESOME'] = null;
    Game.Resources['SOUND_VOICE_BLAZINGSPEED'] = null;
    Game.Resources['SOUND_VOICE_EXCELLENT'] = null;
    Game.Resources['SOUND_VOICE_EXTRAORDINARY'] = null;
    Game.Resources['SOUND_VOICE_GAMEOVER'] = null;
    Game.Resources['SOUND_VOICE_GETREADY'] = null;
    Game.Resources['SOUND_VOICE_GO'] = null;
    Game.Resources['SOUND_VOICE_GOOD'] = null;
    Game.Resources['SOUND_VOICE_LEVELCOMPLETE'] = null;
    Game.Resources['SOUND_VOICE_NOMOREMOVES'] = null;
    Game.Resources['SOUND_VOICE_SPECTACULAR'] = null;
    Game.Resources['SOUND_VOICE_THIRTYSECONDS'] = null;
    Game.Resources['SOUND_VOICE_TIMEUP'] = null;
    Game.Resources['SOUND_VOICE_UNBELIEVABLE'] = null;
    Game.Resources['SOUND_VOICE_WELCOMEBACK'] = null;
    Game.Resources['SOUND_VOICE_WELCOMETOBEJEWELED'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_LOADINGTHREAD_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_LOADINGTHREAD_480_01'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_LOADINGTHREAD_480_02'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_LOADINGTHREAD_480_03'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_LOADINGTHREAD_480_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_LOADINGTHREAD_480_01'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_LOADINGTHREAD_768_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_LOADINGTHREAD_768_01'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_LOADINGTHREAD_768_02'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_LOADINGTHREAD_768_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_LOADINGTHREAD_COMMON_00'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_LOADINGTHREAD_COMMON_00'] = null;
    Game.Resources['IMAGE_CRYSTALBALL'] = null;
    Game.Resources['IMAGE_CRYSTALBALL_SHADOW'] = null;
    Game.Resources['IMAGE_CRYSTALBALL_GLOW'] = null;
    Game.Resources['IMAGE_TITLE'] = null;
    Game.Resources['IMAGE_PARTICLES_CRYSTALBALL_0_BASIC_BLUR'] = null;
    Game.Resources['IMAGE_PARTICLES_CRYSTALRAYS_0_RAY'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_MAINMENU_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_MAINMENU_480_01'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_MAINMENU_480_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_MAINMENU_768_00'] = null;
    Game.Resources['ATLASIMAGE_ATLAS_MAINMENU_768_01'] = null;
    Game.Resources['ATLASIMAGE_RT_ATLAS_MAINMENU_768_00'] = null;
    Game.Resources['SOUND_MUSIC_CLASSIC'] = null;
    Game.Resources['SOUND_MUSIC_MENU'] = null;
    Game.Resources['SOUND_MUSIC_SPEED'] = null;
    Game.Resources['SOUND_MUSIC_SPEED_END'] = null;
    Game.Resources['IMAGE_TEX_BLUE_GEM'] = null;
    Game.Resources['IMAGE_TEX_GREEN_GE'] = null;
    Game.Resources['IMAGE_TEX_ORANGE_G'] = null;
    Game.Resources['IMAGE_TEX_PURPLE_G'] = null;
    Game.Resources['IMAGE_TEX_RED_GEM'] = null;
    Game.Resources['IMAGE_TEX_TUBECAP'] = null;
    Game.Resources['IMAGE_TEX_WARP_LIN'] = null;
    Game.Resources['IMAGE_TEX_WHITE_GE'] = null;
    Game.Resources['IMAGE_TEX_YELLOW_G'] = null;
}

JS_AddInitFunc(function() {
    Game.Resources.registerClass('Game.Resources', null, GameFramework.resources.IResources);
});
JS_AddStaticInitFunc(function() {
    Game.Resources.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\Resources.cs
//LineMap:2=3 14=9 
//Start:SpeedBoard
/**
 * @constructor
 */
Game.QuasiRandom = function Game_QuasiRandom() {
    this.mChance = new GameFramework.CurvedVal();
    this.mSteps = 0;
    this.mLastRoll = 0;
}
Game.QuasiRandom.prototype = {
    mChance : null,
    mSteps : 0,
    mLastRoll : 0,
    Init : function Game_QuasiRandom$Init(theCurve) {
        this.mSteps = 0;
        this.mLastRoll = 0;
        this.mChance.SetCurve(theCurve);
        var aMusicFade = new GameFramework.CurvedVal();
        aMusicFade.SetCurveRef('SpeedBoard_cs_11_21_11__05_51_47_583');
        Game.BejApp.mBejApp.PlayMusic(Game.Resources.SOUND_MUSIC_SPEED_ID, aMusicFade);
    },
    Step : function Game_QuasiRandom$Step() {
        this.Step$2(1);
    },
    Step$2 : function Game_QuasiRandom$Step$2(theCount) {
        this.mSteps += theCount;
        if(this.mChance.GetOutVal() <= 0) {
            this.mLastRoll = 0;
        } else {
            this.mLastRoll = (this.mChance.GetOutVal() * Math.min(2.5, Math.max(0.2, Math.pow(1.5 * this.mSteps * this.mChance.GetOutVal(), 1.2))));
        }
    },
    Check : function Game_QuasiRandom$Check(theRand) {
        if(theRand < this.mLastRoll) {
            this.mSteps = 0;
            return true;
        }

        else {
            return false;
        }
    }
}
Game.QuasiRandom.staticInit = function Game_QuasiRandom$staticInit() {
}

JS_AddInitFunc(function() {
    Game.QuasiRandom.registerClass('Game.QuasiRandom', null);
});
JS_AddStaticInitFunc(function() {
    Game.QuasiRandom.staticInit();
});
/**
 * @constructor
 */
Game.SpeedBoard = function Game_SpeedBoard(theApp) {
    this.m5SecChance = new Game.QuasiRandom();
    this.m10SecChance = new Game.QuasiRandom();
    this.mCollectorExtendPct = new GameFramework.CurvedVal();
    this.mCollectedTimeAlpha = new GameFramework.CurvedVal();
    this.mTimerGoldPct = new GameFramework.CurvedVal();
    this.mLastHurrahAlpha = new GameFramework.CurvedVal();
    Game.SpeedBoard.initializeBase(this, [theApp]);
    this.mShowPointMultiplier = true;
    this.mPointMultSidebarOffset = new GameFramework.geom.TPoint(0, 50);
    this.mUiConfig = Game.Board.EUIConfig.WithReset;
    this.mTimeFXManager = new Game.EffectsManager(this);
    this.mLevelBarSizeBias = 40;
    Game.Resources['PIEFFECT_LIGHTNING_POWERED_MEGASHARD'].ResetAnim();
    Game.Resources['PIEFFECT_LIGHTNING_POWERED_MEGASHARD'].mDrawTransform.identity();
    Game.Resources['PIEFFECT_LIGHTNING_POWERED_MEGASHARD'].mDrawTransform.scale(1.0, 1.0);
    Game.Resources['PIEFFECT_LIGHTNING_POWERED_MEGASHARD'].mEmitAfterTimeline = true;
    Game.Resources['PIEFFECT_LIGHTNING_POWERED_LEFTRIGHT'].ResetAnim();
    Game.Resources['PIEFFECT_LIGHTNING_POWERED_LEFTRIGHT'].mDrawTransform.identity();
    Game.Resources['PIEFFECT_LIGHTNING_POWERED_LEFTRIGHT'].mDrawTransform.scale(1.0, 1.0);
    Game.Resources['PIEFFECT_LIGHTNING_POWERED_LEFTRIGHT'].mEmitAfterTimeline = true;
    Game.Resources['POPANIM_ANIMS_GEM_MEGA'].mPIEffectIdSearchVector = [];
    Game.Resources['POPANIM_ANIMS_GEM_MEGA'].mPIEffectIdSearchVector.push('PIEFFECT_ANIMS_GEM_MEGA_');
    this.mCurTempo = 0;
}
Game.SpeedBoard.prototype = {
    mPreHurrahPoints : 0,
    mSpeedTier : 0,
    mPointsGoal : 0,
    mPrevPointsGoal : 0,
    mPMDropLevel : 0,
    mUsePM : null,
    mUseCheckpoints : null,
    mDidTimeUp : null,
    mTimeUpAnnouncement : null,
    mTimeFXManager : null,
    mHumSoundEffect : null,
    mTimeUpCount : 0,
    mTotalGameTicks : 0,
    mBonusTime : 0,
    mTotalBonusTime : 0,
    mBonusTimeDisp : 0,
    mTimedPenaltyAmnesty : 0,
    mTimedPenaltyVel : 0,
    mTimedPenaltyAccel : 0,
    mTimedPenaltyJerk : 0,
    mTimedLevelBonus : 0,
    mBonusPenalty : 0,
    mPointMultiplierStart : 0,
    mAddPointMultiplierPerLevel : 0,
    mReadyForDrop : null,
    mWantGemsCleared : 0,
    mDropGameTick : 0,
    mTimeStart : 0,
    mTimeChange : 0,
    mMaxTicksLeft : 0,
    mPointsGoalStart : 0,
    mAddPointsGoalPerLevel : 0,
    mPointsGoalAddPower : 0,
    m5SecChance : null,
    m10SecChance : null,
    mTimeStep : 0,
    mLevelTimeStep : 0,
    mGameTicksF : 0,
    mTimeScaleOverride : 0,
    mCollectorExtendPct : null,
    mCollectedTimeAlpha : null,
    mTimerGoldPct : null,
    mLastHurrahAlpha : null,
    mLastHurrahUpdates : 0,
    mPanicScalePct : 0,
    mCurUIFrameLabel : null,
    mCurTempo : 0,
    Dispose : function Game_SpeedBoard$Dispose() {
        if(this.mTimeFXManager != null) {
            this.mTimeFXManager.Dispose();
        }
        this.mTimeFXManager = null;
        Game.Board.prototype.Dispose.apply(this);
    },
    GetGameType : function Game_SpeedBoard$GetGameType() {
        return 'Speed';
    },
    GetMusicName : function Game_SpeedBoard$GetMusicName() {
        return 'Speed';
    },
    AllowSpeedBonus : function Game_SpeedBoard$AllowSpeedBonus() {
        return true;
    },
    GetHintTime : function Game_SpeedBoard$GetHintTime() {
        return 5;
    },
    Init : function Game_SpeedBoard$Init() {
        Game.Board.prototype.Init.apply(this);
        this.UIBlendTo('unpowered', 0);
        this.mPreHurrahPoints = 0;
        this.mSpeedTier = 0;
        this.mPrevPointsGoal = 0;
        this.mPMDropLevel = 0;
        this.mPointsGoal = 2500;
        this.mDoThirtySecondVoice = false;
        this.mUsePM = false;
        this.mDidTimeUp = false;
        this.mTimeUpCount = 0;
        this.mBonusTime = 0;
        this.mTotalBonusTime = 0;
        this.mBonusTimeDisp = 0;
        this.mTotalGameTicks = 0;
        this.mReadyForDrop = true;
        this.mWantGemsCleared = 0;
        this.mDropGameTick = 0;
        this.mBonusPenalty = 0;
        this.mTimedPenaltyAmnesty = 150;
        this.mUsePM = false;
        this.mPointsGoalStart = this.mPointsGoal = 0;
        this.mAddPointsGoalPerLevel = 0;
        this.mPointsGoalAddPower = 0;
        this.mTimeStart = 60;
        this.mTimeChange = 0;
        this.m5SecChance.Init('b+0,0.05,1,8,yilV `Jvb2        A/###');
        this.m10SecChance.Init('b+0,0.007,1,8,~q+p         ~/###');
        this.mTimedPenaltyVel = 0.0;
        this.mTimedPenaltyAccel = 0.0;
        this.mTimedPenaltyJerk = 0.0;
        this.mTimedLevelBonus = 0.0;
        this.mTimeStep = 2.0;
        this.mLevelTimeStep = 8.0;
        this.mPointMultiplierStart = 0.0;
        this.mAddPointMultiplierPerLevel = 0.0;
        this.mUseCheckpoints = (this.mPointsGoalStart > 0) && (this.mTimeStart > 0);
        this.mMaxTicksLeft = 60 * 60;
        this.mPanicScalePct = 0;
        this.mGameTicksF = 0;
        this.mTimeScaleOverride = 0;
        this.mCurTempo = 0;
        this.mCollectedTimeAlpha.SetConstant(1.0);
        this.mCollectorExtendPct.SetConstant(0);
        this.mLastHurrahAlpha.SetConstant(0);
    },
    UIBlendTo : function Game_SpeedBoard$UIBlendTo(theFrameLabel, theBlendTicks) {
        this.mCurUIFrameLabel = theFrameLabel;
        Game.Resources['POPANIM_ANIMS_LIGHTNINGUIBOTTOM'].Play(theFrameLabel, false);
        Game.Resources['POPANIM_ANIMS_LIGHTNINGUI'].Play(theFrameLabel, false);
        Game.Resources['POPANIM_ANIMS_GEM_MEGA'].Play(theFrameLabel, false);
    },
    ExtraTutorialSetup : function Game_SpeedBoard$ExtraTutorialSetup() {
        if(this.mTutorialMgr.GetTutorialSequence() != null) {
            this.mGoDelayCount = 50;
            this.SetTutorialCleared(Game.DM.ETutorial.SPEED_TUTORIAL_BASIC_MATCH, false);
            this.SetTutorialCleared(Game.DM.ETutorial.SPEED_TUTORIAL_TIMER, false);
            this.SetTutorialCleared(Game.DM.ETutorial.SPEED_TUTORIAL_TIME_GEM, false);
            this.SetTutorialCleared(Game.DM.ETutorial.SPEED_TUTORIAL_MULTIPLIER_UP, false);
            var gridLayout = '04166423' + '12344654' + '54211212' + '23540355' + '6112t332' + '34264125' + '61465133' + '61351542';
            for(var i = 0; i < gridLayout.length; ++i) {
                if(gridLayout.charCodeAt(i) == 116) {
                    var demoBlastPiece = this.mBoard[this.mBoard.mIdxMult0 * (((i / Game.Board.NUM_COLS) | 0)) + i % Game.Board.NUM_COLS];
                    demoBlastPiece.SetFlag(Game.Piece.EFlag.TIME_BONUS);
                    demoBlastPiece.mColor = Game.DM.EGemColor.BLUE;
                    demoBlastPiece.mCounter = 5;
                    this.StartTimeBonusEffect(demoBlastPiece);
                } else if(gridLayout.charCodeAt(i) != 63) {
                    this.mBoard[this.mBoard.mIdxMult0 * (((i / Game.Board.NUM_COLS) | 0)) + i % Game.Board.NUM_COLS].mColor = (gridLayout.charCodeAt(i) - 48);
                }
            }
            this.mGameTicks += 120;
            this.mGameTicksF += 120.0;
        }
    },
    GetTutorialSequence : function Game_SpeedBoard$GetTutorialSequence() {
        if(!this.WantsTutorial(Game.DM.ETutorial.SPEED_TUTORIAL_TIME_GEM)) {
            return null;
        }
        var ret = new Game.TutorialSequence();
        ret.mBoardSeed = 4321;
        var aStep = new Game.TutorialStep();
        aStep.mType = Game.TutorialStep.EType.ModalDialogMoveClear;
        aStep.mTextHeader = 'Speed Mode';
        aStep.mText = 'Swap adjacent gems to make a set of 3 in a row!';
        aStep.mTutorialId = Game.DM.ETutorial.SPEED_TUTORIAL_BASIC_MATCH;
        aStep.mDialogAnchorX = 708.0;
        aStep.mDialogAnchorY = 420.0;
        aStep.mDialogWidth = 650.0;
        aStep.mDelay = 70;
        aStep.mAutohintPieceLoc = new GameFramework.geom.TIntPoint(5, 1);
        aStep.mAutohintTime = 2;
        aStep.mBlockDuringDelay = true;
        aStep.mBlockTimer = Game.TutorialStep.EBlockTimerType.Pause;
        aStep.PointArrowAt(this, 5, 1, Game.TutorialStep.EArrowDir.Left);
        aStep.AddGemGridXY(this, 3, 0, false);
        aStep.AddGemGridXY(this, 4, 0, false);
        aStep.AddGemGridXY(this, 5, 0);
        aStep.AddGemGridXY(this, 3, 1, false);
        aStep.AddGemGridXY(this, 4, 1, false);
        aStep.AddGemGridXY(this, 5, 1);
        ret.Add(aStep);
        aStep = new Game.TutorialStep();
        aStep.mType = Game.TutorialStep.EType.ModalDialogOkBtnClear;
        aStep.mTextHeader = 'Timer';
        aStep.mText = '... but watch the clock! You only have 60 seconds to start with.';
        aStep.mTutorialId = Game.DM.ETutorial.SPEED_TUTORIAL_TIMER;
        aStep.mBlockTimer = Game.TutorialStep.EBlockTimerType.PauseAfterParam;
        aStep.mBlockTimerParam = 6 * 60;
        aStep.mSpecialBehavior = Game.TutorialStep.ESpecialBehavior.Timer;
        aStep.mHighlightRect = new GameFramework.TRect(490, 0, 1100, 150);
        aStep.mDialogAnchorX = 602.0;
        aStep.mDialogAnchorY = 180.0;
        aStep.mDialogWidth = 890.0;
        aStep.mShowOkBtnCv = new GameFramework.CurvedVal();
        aStep.mShowOkBtnCv.SetCurveRef('SpeedBoard_cs_11_15_11__17_35_36_339');
        aStep.mArrowDir = Game.TutorialStep.EArrowDir.Right;
        aStep.mArrowX = 1500;
        aStep.mArrowY = 72;
        aStep.mDelay = 15;
        aStep.mBlockDuringDelay = true;
        ret.Add(aStep);
        aStep = new Game.TutorialStep();
        aStep.mType = Game.TutorialStep.EType.ModalDialogMoveClear;
        aStep.mBlockTimer = Game.TutorialStep.EBlockTimerType.Pause;
        aStep.mTextHeader = 'Time Gem';
        aStep.mText = 'Score big to earn ^007700^TIME GEMS^oldclr^. Match these to collect Bonus Time!';
        aStep.mTutorialId = Game.DM.ETutorial.SPEED_TUTORIAL_TIME_GEM;
        aStep.mSpecialBehavior = Game.TutorialStep.ESpecialBehavior.TimeGem;
        aStep.mWantDrawFxOnTop = true;
        aStep.mDialogAnchorX = 644.0;
        aStep.mDialogAnchorY = 250.0;
        aStep.mDialogWidth = 790.0;
        aStep.mDelay = 0;
        aStep.mAutohintPieceLoc = new GameFramework.geom.TIntPoint(4, 4);
        aStep.mAutohintTime = 2;
        aStep.mBlockDuringDelay = true;
        aStep.PointArrowAt(this, 4, 4, Game.TutorialStep.EArrowDir.Left);
        aStep.AddGemGridXY(this, 3, 4, true);
        aStep.AddGemGridXY(this, 3, 5, false);
        aStep.AddGemGridXY(this, 3, 6, false);
        aStep.AddGemGridXY(this, 4, 4, true);
        aStep.AddGemGridXY(this, 4, 5, false);
        aStep.AddGemGridXY(this, 4, 6, false);
        ret.Add(aStep);
        if(this.WantsTutorial(Game.DM.ETutorial.CLASSIC_TUTORIAL_HINT_BUTTON)) {
            aStep = new Game.TutorialStep();
            aStep.mType = Game.TutorialStep.EType.ModalDialog;
            aStep.mTextHeader = 'Hints';
            aStep.mText = 'If you are stuck, use the ^007700^HINT^oldclr^ Button to find a match.';
            aStep.mTutorialId = Game.DM.ETutorial.CLASSIC_TUTORIAL_HINT_BUTTON;
            aStep.mSpecialBehavior = Game.TutorialStep.ESpecialBehavior.HintBtn;
            aStep.mBlockTimer = Game.TutorialStep.EBlockTimerType.Pause;
            aStep.mArrowDir = Game.TutorialStep.EArrowDir.Down;
            aStep.mArrowX = this.mHintButton.mX + this.mHintButton.mWidth / 2;
            aStep.mArrowY = this.mHintButton.mY + this.mHintButton.mHeight / 2 - 50;
            aStep.mDialogAnchorX = 426.0;
            aStep.mDialogAnchorY = 708.0;
            aStep.mDialogWidth = 700.0;
            aStep.mAllowStandardHints = true;
            var oversizeScale = 1.65;
            var xDelta = this.mHintButton.mWidth * (oversizeScale - 1.0) / 2.0;
            var yDelta = this.mHintButton.mHeight * (oversizeScale - 1.0) / 2.0;
            aStep.mHighlightRect = new GameFramework.TRect(this.mHintButton.mX - xDelta, this.mHintButton.mY - yDelta, this.mHintButton.mWidth * oversizeScale, this.mHintButton.mHeight * oversizeScale);
            aStep.mDelay = 0;
            aStep.mBlockDuringDelay = true;
            ret.Add(aStep);
        }
        return ret;
    },
    MenuButtonPressed : function Game_SpeedBoard$MenuButtonPressed(e) {
        Game.Board.prototype.MenuButtonPressed.apply(this, [e]);
    },
    GetBoardY : function Game_SpeedBoard$GetBoardY() {
        return 130;
    },
    GetTooltipText : function Game_SpeedBoard$GetTooltipText(thePiece, theHeader, theBody) {
        if(Game.Board.prototype.GetTooltipText.apply(this, [thePiece, theHeader, theBody])) {
            return true;
        } else if(thePiece.IsFlagSet(Game.Piece.EFlag.TIME_BONUS)) {
            theHeader = 'TIME GEM';
            theBody = 'Match this Gem to add ' + GameFramework.Utils.CommaSeperate(thePiece.mCounter) + ' seconds to the clock!';
            return true;
        }
        return false;
    },
    GameOverExit : function Game_SpeedBoard$GameOverExit() {
        var table = Game.BejApp.mBejApp.mHighScoreMgr.GetOrCreateTable('Lightning');
        if(table.Submit(Game.BejApp.mBejApp.mProfile.mProfileName, this.mPoints)) {
            Game.BejApp.mBejApp.SaveHighscores(false);
        }
        var anEndLevelDialog = new Game.SpeedEndLevelDialog(this);
        Game.BejApp.mBejApp.mDialogMgr.AddDialog(anEndLevelDialog);
        anEndLevelDialog.SetQuestName('Lightning');
        Game.BejApp.mBejApp.mProfile.WriteProfile();
    },
    GameOverAnnounce : function Game_SpeedBoard$GameOverAnnounce() {
        new Game.Announcement(this, 'TIME UP');
        Game.SoundUtil.Play(Game.Resources['SOUND_VOICE_TIMEUP']);
    },
    PieceTallied : function Game_SpeedBoard$PieceTallied(thePiece) {
        if(thePiece.IsFlagSet(Game.Piece.EFlag.TIME_BONUS)) {
            this.mBonusTime += thePiece.mCounter;
            this.mTotalBonusTime += thePiece.mCounter;
            var fx = new Game.SpeedCollectEffect(this, new GameFramework.geom.TIntPoint((thePiece.CX() | 0), (thePiece.CY() | 0)), new GameFramework.geom.TIntPoint(240, 430), thePiece.mCounter, 1.0);
            this.mTimeFXManager.AddEffect(fx);
            fx.Init(thePiece);
            thePiece.mAlpha.SetConstant(0);
            if(thePiece.mCounter == 5) {
                Game.SoundUtil.Play(Game.Resources['SOUND_SPEEDBOARD_TIMEBONUS_5']);
            }

            else {
                Game.SoundUtil.Play(Game.Resources['SOUND_SPEEDBOARD_TIMEBONUS_10']);
            }
            var aTimeOver = ((Math.max(0, this.mBonusTime - 60)) | 0);
            if(aTimeOver > 0) {
                var aPoints = this.AddPoints((thePiece.CX() | 0), (thePiece.CY() | 0), thePiece.mCounter * 50, Game.DM.gGemColors[(thePiece.mColor | 0)], thePiece.mMatchId, true, true, thePiece.mMoveCreditId, false, Game.Board.EPointType.SPECIAL);
            }
            var aString = String.format('+{0:d} sec', thePiece.mCounter);
            var aNewPoints = new Game.Points(Game.BejApp.mBejApp, Game.Resources['FONT_DIALOG_HEADER'], aString, (thePiece.CX() | 0), (thePiece.CY() | 0), 1.0, 0, Game.DM.gGemColors[(thePiece.mColor | 0)], -1);
            aNewPoints.mDestScale = 1.5;
            aNewPoints.mScaleDifMult = 0.2;
            aNewPoints.mScaleDampening = 0.8;
            aNewPoints.mDY *= 0.2;
        }
        Game.Board.prototype.PieceTallied.apply(this, [thePiece]);
    },
    GetLevelBarRect : function Game_SpeedBoard$GetLevelBarRect() {
        var aX = this.GetBoardCenterX();
        var aY = this.GetBoardY() + -55;
        var aBarRect = new GameFramework.TRect(0, 0, Game.Resources['IMAGE_LIGHTNING_TOP_BACK_LIGHTNING'].mWidth, Game.Resources['IMAGE_LIGHTNING_TOP_BACK_LIGHTNING'].mHeight);
        aBarRect.Offset(aX - aBarRect.mWidth / 2, aY - aBarRect.mHeight / 2);
        aBarRect.mWidth -= 120;
        return aBarRect;
    },
    GetCountdownBarRect : function Game_SpeedBoard$GetCountdownBarRect() {
        return this.GetLevelBarRect();
    },
    GetTimeDrawX : function Game_SpeedBoard$GetTimeDrawX() {
        var aLevelBarRect = this.GetLevelBarRect();
        return aLevelBarRect.mX + (aLevelBarRect.mWidth * this.mLevelBarPct) + 64;
    },
    CanTimeUp : function Game_SpeedBoard$CanTimeUp() {
        if(this.mBonusTime == 0) {
            return Game.Board.prototype.CanTimeUp.apply(this);
        }
        return true;
    },
    GetTicksLeft : function Game_SpeedBoard$GetTicksLeft() {
        var aTimeLimit = this.GetTimeLimit();
        if(aTimeLimit == 0) {
            return -1;
        }
        var anAmnesty = 150;
        var aTicksLeft = (Math.min(((aTimeLimit * 60.0) | 0), Math.max(0, ((aTimeLimit * 60.0) | 0) - Math.max(0, (this.mGameTicksF | 0) - anAmnesty))) | 0);
        return ((Math.min(this.mMaxTicksLeft, aTicksLeft)) | 0);
    },
    GetTimeLimit : function Game_SpeedBoard$GetTimeLimit() {
        return 60;
    },
    GetLevelPoints : function Game_SpeedBoard$GetLevelPoints() {
        return this.mPointsGoalStart + this.mAddPointsGoalPerLevel * this.mSpeedTier;
    },
    GetLevelPointsTotal : function Game_SpeedBoard$GetLevelPointsTotal() {
        return this.mLevelPointsTotal - (this.mBonusPenalty | 0);
    },
    LevelUp : function Game_SpeedBoard$LevelUp() {
        this.mSpeedTier++;
        this.mBonusPenalty = 0;
        this.mLevelPointsTotal = 0;
        this.mTimedPenaltyAmnesty = 500;
        var aTimeToAdvance = this.mTimedLevelBonus;
        this.mTimedPenaltyVel = Math.max(0.0, this.mTimedPenaltyVel - this.mTimedPenaltyAccel * aTimeToAdvance);
        this.mTimedPenaltyAccel = Math.max(0.0, this.mTimedPenaltyAccel - this.mTimedPenaltyJerk * aTimeToAdvance);
        Game.SoundUtil.Play(Game.Resources['SOUND_SPEEDBOARD_BACKGROUND_CHANGE']);
    },
    WantExpandedTopWidget : function Game_SpeedBoard$WantExpandedTopWidget() {
        return 1;
    },
    GetTopWidgetButtonText : function Game_SpeedBoard$GetTopWidgetButtonText() {
        return Game.Board.prototype.GetTopWidgetButtonText.apply(this);
    },
    GetModePointMultiplier : function Game_SpeedBoard$GetModePointMultiplier() {
        return 5;
    },
    GetRankPointMultiplier : function Game_SpeedBoard$GetRankPointMultiplier() {
        return 85000.0 / 15000.0;
    },
    GameOver : function Game_SpeedBoard$GameOver(visible) {
        if(visible === undefined) {
            visible = true;
        }
        if(this.mTimeFXManager.GetActiveCount() > 0) {
            return;
        }
        if((this.mBonusTime == 0) && ((this.mPointsBreakdown.length | 0) <= this.mPointMultiplier)) {
            this.AddPointBreakdownSection();
        }
        for(var aPieceIter = new Game.PieceIter(this); aPieceIter.Next();) {
            var aPiece = aPieceIter.GetPiece();
            if(aPiece == null) {
                continue;
            }
            if(aPiece.IsFlagSet(Game.Piece.EFlag.TIME_BONUS)) {
                if(this.mBonusTime == 0) {
                    var aPoints = this.AddPoints((aPiece.CX() | 0), (aPiece.CY() | 0), aPiece.mCounter * 50, Game.DM.gGemColors[(aPiece.mColor | 0)], aPiece.mMatchId, true, true, aPiece.mMoveCreditId, false, Game.Board.EPointType.SPECIAL);
                    aPoints.mTimer *= 1.5;
                }

                else {
                    if(aPiece.mCounter >= 10) {
                        this.Laserify(aPiece);
                    } else {
                        this.Flamify(aPiece);
                    }
                }
                aPiece.ClearFlag(Game.Piece.EFlag.TIME_BONUS);
                aPiece.mCounter = 0;
            }
        }
        if(this.mBonusTime > 0) {
            this.mTimeExpired = false;
            if(this.WantsTutorial(Game.DM.ETutorial.SPEED_TUTORIAL_MULTIPLIER_UP)) {
                var aSeq = this.mTutorialMgr.GetTutorialSequence();
                if(aSeq == null) {
                    aSeq = new Game.TutorialSequence();
                    this.mTutorialMgr.SetTutorialSequence(aSeq);
                }
                if(!aSeq.HasTutorialQueued(Game.DM.ETutorial.SPEED_TUTORIAL_MULTIPLIER_UP)) {
                    var aStep = new Game.TutorialStep();
                    aStep.mType = Game.TutorialStep.EType.ModalDialogOkBtnClear;
                    aStep.mTextHeader = 'Bonus Round';
                    aStep.mText = 'If you have Bonus Time stored, you\'ll get a ^007700^BONUS ROUND^oldclr^ when time runs out.\n\nEach ^007700^BONUS ROUND^oldclr^ ups your multiplier by 1!';
                    aStep.mTutorialId = Game.DM.ETutorial.SPEED_TUTORIAL_MULTIPLIER_UP;
                    aStep.mBlockTimer = Game.TutorialStep.EBlockTimerType.PlayBetweenParams;
                    aStep.mBlockTimerParam = 100;
                    aStep.mBlockTimerParam2 = 120;
                    aStep.mSpecialBehavior = Game.TutorialStep.ESpecialBehavior.MultiplierUp;
                    aStep.mHighlightRect = new GameFramework.TRect(490, 0, 1100, 150);
                    aStep.mDialogAnchorX = 602.0;
                    aStep.mDialogAnchorY = 180.0;
                    aStep.mDialogWidth = 680.0;
                    aStep.mShowOkBtnCv = new GameFramework.CurvedVal();
                    aStep.mShowOkBtnCv.SetCurveRef('SpeedBoard_cs_11_15_11__17_35_36_339');
                    aStep.mArrowDir = Game.TutorialStep.EArrowDir.Left;
                    aStep.mArrowX = 280;
                    aStep.mArrowY = 300;
                    aStep.mDelay = 15;
                    aStep.mBlockDuringDelay = true;
                    aSeq.Add(aStep);
                }

                else {
                    this.DoMultiplierUp();
                }
            }

            else {
                this.DoMultiplierUp();
            }
            return;
        }
        if(this.mSpeedBonusFlameModePct > 0) {
            return;
        }
        var aHurrahPieceCount = 0;
        this.mCursorSelectPos = new GameFramework.geom.TIntPoint(-1, -1);
        var aSpecialCount = 0;
        if(!this.mDidTimeUp) {
            this.mPreHurrahPoints = this.mPoints;
            this.mCollectedTimeAlpha.SetCurve('b;0,1,0.05,1,~###         ~####');
            this.UIBlendTo('death', 15);
            var aMusicFade = new GameFramework.CurvedVal();
            aMusicFade.SetCurveRef('SpeedBoard_cs_11_21_11__05_58_39_924');
            Game.BejApp.mBejApp.PlayMusic(Game.Resources.SOUND_MUSIC_SPEED_END_ID, aMusicFade, false);
            Game.SoundUtil.Play(Game.Resources['SOUND_BOMB_EXPLODE']);
            Game.SoundUtil.Play(Game.Resources['SOUND_VOICE_TIMEUP']);
            this.mDidTimeUp = true;
            new Game.Announcement(this, 'TIME UP');
        }
        if(this.mSpeedBonusCount > 0) {
            this.EndSpeedBonus();
        }
        var hasCoin = false;
        for(var aPieceIter_2 = new Game.PieceIter(this); aPieceIter_2.Next();) {
            var aPiece_2 = aPieceIter_2.GetPiece();
            if(aPiece_2 == null) {
                continue;
            }
            hasCoin |= aPiece_2.IsFlagSet(Game.Piece.EFlag.COIN);
            if((aPiece_2.IsFlagSet(Game.Piece.EFlag.FLAME)) || (aPiece_2.IsFlagSet(Game.Piece.EFlag.HYPERCUBE)) || (aPiece_2.IsFlagSet(Game.Piece.EFlag.LASER)) || (aPiece_2.IsFlagSet(Game.Piece.EFlag.POINT_MULTIPLIER)) || (aPiece_2.IsFlagSet(Game.Piece.EFlag.DETONATOR)) || (aPiece_2.IsFlagSet(Game.Piece.EFlag.SCRAMBLE)) || (aPiece_2.IsFlagSet(Game.Piece.EFlag.BLAST_GEM)) || (aPiece_2.IsFlagSet(Game.Piece.EFlag.TIME_BONUS))) {
                if(aPiece_2.IsFlagSet(Game.Piece.EFlag.COIN)) {
                    aPiece_2.mDestructing = true;
                }
                if(this.mTimeUpCount == 0) {
                    aPiece_2.mExplodeDelay = 175 + aSpecialCount * 25;
                } else {
                    aPiece_2.mExplodeDelay = 25 + aSpecialCount * 25;
                }
                aSpecialCount++;
                aHurrahPieceCount++;
            }
        }
        if(aSpecialCount == 0) {
            for(var aPieceIter_3 = new Game.PieceIter(this); aPieceIter_3.Next();) {
                var aPiece_3 = aPieceIter_3.GetPiece();
                if(aPiece_3 == null) {
                    continue;
                }
                if((aPiece_3.IsFlagSet(Game.Piece.EFlag.COIN)) && (!aPiece_3.mTallied)) {
                    if(aPiece_3.IsFlagSet(Game.Piece.EFlag.COIN)) {
                        aPiece_3.mDestructing = true;
                    }
                    this.TallyPiece(aPiece_3, true);
                    aPiece_3.mAlpha.SetConstant(1.0);
                    aPiece_3.ClearFlag(Game.Piece.EFlag.COIN);
                    aSpecialCount++;
                }
            }
        }
        if((aSpecialCount > 0) && (this.mLastHurrahAlpha.GetOutVal() == 0)) {
            this.mLastHurrahAlpha.SetCurve('b+0,1,0.008333,1,####    v####     +~###');
            this.mLastHurrahUpdates = 0;
        }
        var aWantCoinStart = (aHurrahPieceCount == 0) ? 125 : 200;
        if((aSpecialCount == 0)) {
            Game.Board.prototype.GameOver.apply(this, [false]);
            if(this.mLastHurrahAlpha.GetOutVal() > 0) {
                this.mGameOverCount = 200;
                this.mLastHurrahAlpha.SetCurve('b+0,1,0.01,1,~###     N~###    R####');
            }
        }
    },
    DoMultiplierUp : function Game_SpeedBoard$DoMultiplierUp() {
        if(this.IsGameSuspended()) {
            return;
        }
        Game.SoundUtil.Play(Game.Resources['SOUND_SPEEDBOARD_LIGHTNING_ENERGIZE']);
        this.UIBlendTo('energize', 15);
        this.mCollectorExtendPct.SetCurveMult('b;0,1,0.01,1,~###         ~####');
        this.mTimerGoldPct.SetCurve('b;0,1,0.01,1,####  K~###       U####');
        this.m5SecChance.Step$2(this.mLevelTimeStep);
        this.m10SecChance.Step$2(this.mLevelTimeStep);
        this.m5SecChance.mChance.IncInValBy(this.m5SecChance.mChance.mIncRate);
        this.m10SecChance.mChance.IncInValBy(this.m10SecChance.mChance.mIncRate);
        this.mTimeExpired = false;
        var multiplierSnd = Game.Resources['SOUND_SPEEDBOARD_MULTIPLIER_UP2_1'];
        switch(Math.min(3, this.mPointMultiplier - 1)) {
            case 1:
            {
                multiplierSnd = Game.Resources['SOUND_SPEEDBOARD_MULTIPLIER_UP2_2'];
                break;
            }
            case 2:
            {
                multiplierSnd = Game.Resources['SOUND_SPEEDBOARD_MULTIPLIER_UP2_3'];
                break;
            }
            case 3:
            {
                multiplierSnd = Game.Resources['SOUND_SPEEDBOARD_MULTIPLIER_UP2_4'];
                break;
            }
        }
        Game.SoundUtil.Play(multiplierSnd);
        this.mPrevPointMultAlpha.SetCurve('b+0,1,0.01,1,~###         ~####');
        this.mPointMultPosPct.SetCurve('b+0,1,0.008333,1,~###         ~~###');
        this.mPointMultTextMorph.SetConstant(0);
        this.mPointMultScale.SetCurveLinked('b+0,1.2,0,1,####    {~###     &####', this.mPointMultPosPct);
        this.mPointMultAlpha.SetCurveLinked('b+0,1,0,1,####  `~###    v~###  I####', this.mPointMultPosPct);
        this.mPointMultYAdd.SetCurveLinked('b+0,-80,0,1,####         ~####', this.mPointMultPosPct);
        this.mPointMultiplier++;
        this.AddPointBreakdownSection();
        this.mMaxTicksLeft = this.mBonusTime * 60;
        this.mGameTicks = ((Math.max(0, (60 - this.mBonusTime) * 60 + -0)) | 0);
        this.mGameTicksF = this.mGameTicks;
        this.mBonusTime = 0;
        this.mTimeScaleOverride = 0;
        var anEffect = new Game.LightningBarFillEffect();
        anEffect.mOverlay = true;
        this.mPostFXManager.AddEffect(anEffect);
    },
    AddPoints : function Game_SpeedBoard$AddPoints(theX, theY, thePoints, theColor, theId, addtotube, usePointMultiplier, theMoveCreditId, theForceAdd, thePointType) {
        var aPrevPoints = this.mPoints;
        var aPoint = Game.Board.prototype.AddPoints.apply(this, [theX, theY, thePoints, theColor, theId, addtotube, usePointMultiplier, theMoveCreditId, theForceAdd, thePointType]);
        var aPointDelta = this.mPoints - aPrevPoints;
        return aPoint;
    },
    WantSpecialPiece : function Game_SpeedBoard$WantSpecialPiece(thePieceVector) {
        if(this.mUsePM) {
            return (this.mPMDropLevel < this.mSpeedTier) && (this.mSpeedTier < 8);
        } else if(this.mTimeStart == 0) {
            return (this.mPMDropLevel < this.mSpeedTier) && (this.mSpeedTier < 8);
        } else {
            var mDroppingBlastGem = false;
            if((this.mReadyForDrop) && (this.mWantGemsCleared != 0) && (!this.mDidTimeUp)) {
                if(mDroppingBlastGem) {
                    return true;
                }
            }
            return false;
        }
    },
    WantWarningGlow : function Game_SpeedBoard$WantWarningGlow() {
        if(this.mBonusTime != 0) {
            return false;
        }
        return Game.Board.prototype.WantWarningGlow.apply(this);
    },
    StartTimeBonusEffect : function Game_SpeedBoard$StartTimeBonusEffect(thePiece) {
        var anEffectBottom = new Game.TimeBonusEffectTop(thePiece);
        anEffectBottom.mX = ((Game.Board.GEM_WIDTH / 2) | 0);
        anEffectBottom.mY = ((Game.Board.GEM_HEIGHT / 2) | 0);
        anEffectBottom.mZ = 0.08;
        this.mPostFXManager.AddEffect(anEffectBottom);
        var anEffect = new Game.TimeBonusEffect(thePiece);
        anEffect.mX = ((Game.Board.GEM_WIDTH / 2) | 0);
        anEffect.mY = ((Game.Board.GEM_HEIGHT / 2) | 0);
        anEffect.mZ = 0.08;
        this.mPostFXManager.AddEffect(anEffect);
    },
    GetLevelPct : function Game_SpeedBoard$GetLevelPct() {
        var aLevelPct = 0.0;
        var aLevelPoints = this.GetLevelPoints();
        if(aLevelPoints > 0) {
            var aLevelPointsTotal = this.GetLevelPointsTotal();
            aLevelPct = Math.min(1.0, Math.max(0.0, 0.5 + (aLevelPointsTotal / aLevelPoints) * 0.5));
            if(this.mDidTimeUp) {
                aLevelPct = 0;
            }
            if((aLevelPct <= 0.0) && (this.IsBoardStill()) && (this.mGameOverCount == 0)) {
                this.mTimeExpired = true;
                this.GameOver();
            }
            var aTicksLeft = ((aLevelPct * 4000.0) | 0);
            var aTimeBetweenWarnings = 35 + ((aTicksLeft * 0.1) | 0);
            if((this.mUpdateCnt - this.mLastWarningTick >= aTimeBetweenWarnings) && (aTicksLeft > 0) && (aTicksLeft <= 1000)) {
                Game.SoundUtil.PlayEx(Game.Resources['SOUND_COUNTDOWN_WARNING'], 0.0, Math.min(1.0, 0.5 - aTicksLeft * 0.0005));
                this.mLastWarningTick = this.mUpdateCnt;
            }
            return aLevelPct;
        }
        var aTimeLimit = this.GetTimeLimit();
        var writeTicksLeft = (this.mUpdateCnt % 20) == 0;
        if(aTimeLimit != 0) {
            aLevelPct = Math.max(0.0, this.GetTicksLeft() / (aTimeLimit * 60.0));
            if((aLevelPct <= 0.0) && (this.IsBoardStill()) && (this.mGameOverCount == 0)) {
                this.mTimeExpired = true;
                this.GameOver();
            }
            var aTicksLeft_2 = this.GetTicksLeft();
            var aTimeBetweenWarnings_2 = 35 + ((aTicksLeft_2 * 0.1) | 0);
            if(this.mUseCheckpoints) {
                if((this.mUpdateCnt - this.mLastWarningTick >= aTimeBetweenWarnings_2) && (aTicksLeft_2 > 0) && (aTicksLeft_2 <= 1000)) {
                    Game.SoundUtil.PlayEx(Game.Resources['SOUND_COUNTDOWN_WARNING'], 0.0, Math.min(1.0, 0.5 - aTicksLeft_2 * 0.0005));
                    this.mLastWarningTick = this.mUpdateCnt;
                }
            }

            else {
                if((this.mUpdateCnt - this.mLastWarningTick >= aTimeBetweenWarnings_2) && (aTicksLeft_2 > 0) && (this.WantWarningGlow()) && (!this.mKilling)) {
                    var aWarningStartTick = (this.GetTimeLimit() > 60) ? 1500 : 1000;
                    Game.SoundUtil.PlayEx(Game.Resources['SOUND_COUNTDOWN_WARNING'], 0.0, Math.min(1.0, 0.5 - aTicksLeft_2 / aWarningStartTick / 2.0));
                    this.mLastWarningTick = this.mUpdateCnt;
                }
            }
            if((aTicksLeft_2 == 30 * 60) && (this.mLevelCompleteCount == 0)) {
                if(this.mDoThirtySecondVoice) {
                    writeTicksLeft = true;
                    this.mDoThirtySecondVoice = false;
                    Game.SoundUtil.Play(Game.Resources['SOUND_VOICE_THIRTYSECONDS']);
                }
            }

            else {
                this.mDoThirtySecondVoice = true;
            }
        }
        if(this.mUseCheckpoints) {
            aLevelPct = (this.mPoints - this.mPrevPointsGoal) / (this.mPointsGoal - this.mPrevPointsGoal);
        }
        return aLevelPct;
    },
    GetCountdownPct : function Game_SpeedBoard$GetCountdownPct() {
        return this.GetLevelPct();
    },
    DropSpecialPiece : function Game_SpeedBoard$DropSpecialPiece(thePieceVector) {
        if(this.mUsePM) {
            var anIdx = GameFramework.Utils.GetRand() % (thePieceVector.length | 0);
            for(var aTryCount = 0; aTryCount < 7; aTryCount++) {
                thePieceVector[anIdx].mColor = (this.mRand.Next() % (Game.DM.EGemColor._COUNT | 0));
                var aColorCount = 0;
                for(var aPieceIter = new Game.PieceIter(this); aPieceIter.Next();) {
                    var aPiece = aPieceIter.GetPiece();
                    if(aPiece != null && (aPiece.GetScreenY() > 0) && (aPiece.mColor == thePieceVector[anIdx].mColor)) {
                        aColorCount++;
                    }
                }
                if(aColorCount > 3) {
                    break;
                }
            }
            thePieceVector[anIdx].SetFlag(Game.Piece.EFlag.POINT_MULTIPLIER);
            this.mPMDropLevel++;
        }

        else {
            var anIdx_2 = ((this.mRand.Next() % (thePieceVector.length | 0)) | 0);
            for(var aTryCount_2 = 0; aTryCount_2 < 7; aTryCount_2++) {
                thePieceVector[anIdx_2].mColor = (this.mRand.Next() % (Game.DM.EGemColor._COUNT | 0));
                var aColorCount_2 = 0;
                for(var aPieceIter_2 = new Game.PieceIter(this); aPieceIter_2.Next();) {
                    var aPiece_2 = aPieceIter_2.GetPiece();
                    if(aPiece_2 == null) {
                        continue;
                    }
                    if((aPiece_2.mY > 0) && (aPiece_2.mColor == thePieceVector[anIdx_2].mColor)) {
                        aColorCount_2++;
                    }
                }
                if(aColorCount_2 > 3) {
                    break;
                }
            }
            this.Blastify(thePieceVector[anIdx_2]);
            this.mDropGameTick = this.mGameTicks;
            this.mReadyForDrop = false;
            this.mWantGemsCleared = 0;
            this.mPMDropLevel++;
        }
        return true;
    },
    PiecesDropped : function Game_SpeedBoard$PiecesDropped(thePieceVector) {
        var aTimeAdd = 0;
        for(var i = 0; i < (thePieceVector.length | 0); i++) {
            var aPiece = thePieceVector[i];
            aPiece.mY += 120;
        }
        if((this.mGameTicks > 60) && (!this.mTimeExpired)) {
            for(var i_2 = 0; i_2 < (thePieceVector.length | 0); i_2++) {
                this.m5SecChance.Step();
                this.m10SecChance.Step();
                if(this.m10SecChance.Check((this.mRand.Next() % 100000) / 100000.0)) {
                    aTimeAdd = 10;
                } else if(this.m5SecChance.Check((this.mRand.Next() % 100000) / 100000.0)) {
                    aTimeAdd = 5;
                }
            }
        }
        if(aTimeAdd > 0) {
            var anIdx = ((this.mRand.Next() % (thePieceVector.length | 0)) | 0);
            var aPiece_2 = thePieceVector[anIdx];
            if(aPiece_2.mFlags == 0) {
                aPiece_2.SetFlag(Game.Piece.EFlag.TIME_BONUS);
                aPiece_2.mCounter = aTimeAdd;
                if(aPiece_2.mCounter == 5) {
                    Game.SoundUtil.PlayEx(Game.Resources['SOUND_SPEEDBOARD_TIMEBONUS_APPEARS_5'], this.GetPanPositionByPiece(aPiece_2), 1.0);
                } else {
                    Game.SoundUtil.PlayEx(Game.Resources['SOUND_SPEEDBOARD_TIMEBONUS_APPEARS_10'], this.GetPanPositionByPiece(aPiece_2), 1.0);
                }
            }
        }
        return true;
    },
    TimeCollected : function Game_SpeedBoard$TimeCollected(theTimeCollected) {
        if(theTimeCollected <= 5) {
            Game.SoundUtil.Play(Game.Resources['SOUND_SPEEDBOARD_LIGHTNING_TUBE_FILL_5']);
        } else {
            Game.SoundUtil.Play(Game.Resources['SOUND_SPEEDBOARD_LIGHTNING_TUBE_FILL_10']);
        }
        var aLastVal = this.mCollectorExtendPct.GetOutVal();
        this.mCollectorExtendPct.SetCurve('b;0,1,0.02,1,#.^$         ~~###');
        this.mCollectorExtendPct.mOutMin = aLastVal;
        this.mCollectorExtendPct.mOutMax = Math.min(1.0, this.mBonusTime / 60.0);
        this.UIBlendTo(String.format('pulse{0:d}', Math.min(5, ((this.mBonusTime * 5 / 60) | 0) + 1)), 12);
        if((this.mCollectorExtendPct.GetOutVal() == 0.0)) {
            var anEffect = new Game.ParticleEffect(Game.Resources['PIEFFECT_LIGHTNING_STEAMPULSE']);
            anEffect.mX = 245;
            anEffect.mY = 255;
            anEffect.mOverlay = true;
            this.mPostFXManager.AddEffect(anEffect);
        }
    },
    StartPieceEffect : function Game_SpeedBoard$StartPieceEffect(thePiece) {
        Game.Board.prototype.StartPieceEffect.apply(this, [thePiece]);
        if(thePiece.IsFlagSet(Game.Piece.EFlag.TIME_BONUS)) {
            this.StartTimeBonusEffect(thePiece);
        }
    },
    Update : function Game_SpeedBoard$Update() {
        var aPrevGameTick = this.mGameTicks;
        this.mLastHurrahAlpha.IncInVal();
        this.mLastHurrahUpdates++;
        Game.Board.prototype.Update.apply(this);
        this.mBackground.mWantAnim = false;
        if(this.mGameTicks != aPrevGameTick) {
            var aPrevTicksI = (this.mGameTicksF | 0);
            if(this.mTimeScaleOverride == 0) {
                var aTimeScale = Math.min(1.0, 0.7 + (this.GetTicksLeft() / 360.0) * 0.3);
                this.mGameTicksF += aTimeScale;
            }

            else {
                this.mGameTicksF += this.mTimeScaleOverride;
            }
            this.m5SecChance.Step$2(this.mTimeStep / 60.0);
            this.m10SecChance.Step$2(this.mTimeStep / 60.0);
            this.mTotalGameTicks++;
            if(!this.WantWarningGlow()) {
                var aTicksLeft = this.GetTicksLeft();
                if((aTicksLeft % 60 == 0) && (aTicksLeft > 0) && (aTicksLeft <= 8 * 60) && (aTicksLeft != this.mMaxTicksLeft) && (aPrevTicksI != (this.mGameTicksF | 0))) {
                    Game.SoundUtil.Play(Game.Resources['SOUND_TICK']);
                }
            }
        }
        if(this.mDidTimeUp) {
            this.mTimeUpCount++;
        }
        var aPenaltyPct = Math.min(this.GetLevelPct() + 0.65, 1.0);
        this.mBonusTimeDisp += (this.mBonusTime - this.mBonusTimeDisp) / 50;
        if(this.mTimedPenaltyAmnesty > 0) {
            this.mTimedPenaltyAmnesty--;
        } else {
            this.mBonusPenalty += (this.mTimedPenaltyVel * aPenaltyPct) / 60.0;
            this.mTimedPenaltyVel += (this.mTimedPenaltyAccel * aPenaltyPct) / 60.0;
            this.mTimedPenaltyAccel += (this.mTimedPenaltyJerk * aPenaltyPct) / 60.0;
        }
        if(this.mWantGemsCleared == 0) {
            this.mWantGemsCleared = 20;
        }
        if((this.mGameTicks % 240 == 0) && (aPrevGameTick != this.mGameTicks)) {
            this.mWantGemsCleared = ((Math.max(5, ((this.mWantGemsCleared - this.mRand.Next() % 5) | 0))) | 0);
        }
        if((this.mUseCheckpoints) && (this.mPoints > this.mPointsGoal)) {
            Game.SoundUtil.Play(Game.Resources['SOUND_SPEEDBOARD_BACKGROUND_CHANGE']);
            this.mSpeedTier++;
            this.mPrevPointsGoal = this.mPointsGoal;
            if(this.mUsePM) {
                this.mPointsGoal += ((this.mPointsGoalStart + this.mAddPointsGoalPerLevel * Math.pow(this.mSpeedTier, this.mPointsGoalAddPower)) | 0) * (this.mSpeedTier + 1);
            } else {
                this.mPointsGoal += (((this.mPointsGoalStart + this.mAddPointsGoalPerLevel * Math.pow(this.mSpeedTier, this.mPointsGoalAddPower)) | 0));
            }
            this.mGameTicks = 0;
        }
        Game.Resources['POPANIM_ANIMS_GEM_MEGA'].Update();
        Game.Resources['POPANIM_ANIMS_GEM_MEGA'].mColor = GameFramework.gfx.Color.FAlphaToInt(this.GetAlpha());
        Game.Resources['POPANIM_ANIMS_LIGHTNINGUIBOTTOM'].Update();
        Game.Resources['POPANIM_ANIMS_LIGHTNINGUIBOTTOM'].mColor = GameFramework.gfx.Color.FAlphaToInt(this.GetAlpha());
        Game.Resources['POPANIM_ANIMS_LIGHTNINGUI'].Update();
        Game.Resources['POPANIM_ANIMS_LIGHTNINGUI'].mColor = GameFramework.gfx.Color.FAlphaToInt(this.GetAlpha());
        var aPoweredScaleVal = Math.pow(this.mCollectorExtendPct.GetOutVal(), 0.7);
        var aLayer = Game.Resources['PIEFFECT_LIGHTNING_POWERED_LEFTRIGHT'].GetLayer(0);
        for(var anEmitterIdx = 0; anEmitterIdx < 2; anEmitterIdx++) {
            var anEmitterInstDef = aLayer.mLayerDef.mEmitterInstanceDefVector[anEmitterIdx];
            anEmitterInstDef.mValues[(GameFramework.resources.PIEmitterInstanceDef.Value.LIFE | 0)].mValuePointVector[0].mValue = 0.75 + aPoweredScaleVal * 1.5;
            anEmitterInstDef.mValues[(GameFramework.resources.PIEmitterInstanceDef.Value.NUMBER | 0)].mValuePointVector[0].mValue = (this.mCollectorExtendPct.GetOutVal() > 0.0) ? (0.33 + aPoweredScaleVal * 1.0) : 0.0;
            anEmitterInstDef.mValues[(GameFramework.resources.PIEmitterInstanceDef.Value.SIZE_X | 0)].mValuePointVector[0].mValue = 0.75 + aPoweredScaleVal * 0.5;
            anEmitterInstDef.mValues[(GameFramework.resources.PIEmitterInstanceDef.Value.SIZE_Y | 0)].mValuePointVector[0].mValue = 0.75 + aPoweredScaleVal * 0.5;
        }
        aLayer = Game.Resources['PIEFFECT_LIGHTNING_POWERED_MEGASHARD'].GetLayer(0);
        for(var anEmitterIdx_2 = 0; anEmitterIdx_2 < 2; anEmitterIdx_2++) {
            var anEmitterInstDef_2 = aLayer.mLayerDef.mEmitterInstanceDefVector[anEmitterIdx_2];
            anEmitterInstDef_2.mValues[(GameFramework.resources.PIEmitterInstanceDef.Value.NUMBER | 0)].mValuePointVector[0].mValue = (this.mCollectorExtendPct.GetOutVal() > 0.0) ? (0.1 + aPoweredScaleVal * 0.9) : 0.0;
        }
        Game.Resources['PIEFFECT_LIGHTNING_POWERED_MEGASHARD'].Update();
        Game.Resources['PIEFFECT_LIGHTNING_POWERED_MEGASHARD'].mColor = GameFramework.gfx.Color.FAlphaToInt(this.GetAlpha());
        Game.Resources['PIEFFECT_LIGHTNING_POWERED_LEFTRIGHT'].Update();
        Game.Resources['PIEFFECT_LIGHTNING_POWERED_LEFTRIGHT'].mColor = GameFramework.gfx.Color.FAlphaToInt(this.GetAlpha());
        this.mTimeFXManager.Update();
        if(this.mBonusTime > 0) {
            this.mPanicScalePct = Math.max(0, this.mPanicScalePct - 0.01);
        } else {
            this.mPanicScalePct = Math.min(1, this.mPanicScalePct + 0.01);
        }
        if((this.mUpdateCnt > 150) && (this.mGameOverCount == 0)) {
        }
        if((this.mTimeUpCount > 0) && (this.mTimeUpCount < 60)) {
            if(this.mUpdateCnt % 2 == 0) {
                this.mX = GameFramework.Utils.GetRandFloat() * (60 - this.mTimeUpCount) / 60.0 * 12.0;
                this.mY = GameFramework.Utils.GetRandFloat() * (60 - this.mTimeUpCount) / 60.0 * 12.0;
            }
        }

        else {
            this.mX = 0;
            this.mY = 0;
        }
        if(this.mSpeedBonusFlameModePct > 0) {
            if(this.mTimeScaleOverride == 0) {
                var aTicksLeft_2 = this.GetTicksLeft();
                var aFlameTicksLeft = ((480.0 * this.mSpeedBonusFlameModePct) | 0);
                if(aTicksLeft_2 * 1.3 < aFlameTicksLeft) {
                    this.mTimeScaleOverride = aTicksLeft_2 / aFlameTicksLeft;
                }
            }
        }

        else {
            this.mTimeScaleOverride = 0;
        }
    },
    DrawLevelBar : function Game_SpeedBoard$DrawLevelBar(g) {
        var aBarRect = this.GetLevelBarRect();
        var anAlpha = Math.pow(this.GetBoardAlpha(), 4.0);
        var aXOfs = this.GetBoardX() - 523 - 160;
        var aYOfs = this.GetBoardY() - 100;
        var noAdditive = !GameFramework.BaseApp.mApp.get_Is3D();
        aBarRect.mWidth = ((this.mLevelBarPct * aBarRect.mWidth + this.mLevelBarSizeBias) | 0);
        var aSnappedStartX = g.GetSnappedX(aBarRect.mX);
        var aSnappedEndX = g.GetSnappedX(aBarRect.mX + aBarRect.mWidth);
        var aSnappedWidth = aSnappedEndX - aSnappedStartX;
        if(!noAdditive) {
            var _t1 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(180, 120, 70, ((anAlpha * 255.0) | 0)));
            try {
                g.FillRect(aSnappedStartX, aBarRect.mY, aSnappedWidth, aBarRect.mHeight);
            } finally {
                _t1.Dispose();
            }
        }
        if(this.mLevelBarBonusAlpha.GetOutVal() > 0.0) {
            g.PushColor(GameFramework.gfx.Color.RGBAToInt(240, 255, 200, ((this.mLevelBarBonusAlpha.GetOutVal() * 255.0) | 0)));
            g.FillRect(aSnappedStartX, aBarRect.mY, aSnappedWidth, aBarRect.mHeight);
            g.PopColor();
        }
        for(var aBarIdx = 0; aBarIdx < this.mBarInstanceVector.length; aBarIdx++) {
            var aBarInstance = this.mBarInstanceVector[aBarIdx];
            var anImageInst = Game.Resources['IMAGE_BARFILLRED'].CreateImageInstRect(((aBarInstance.mSrcX * 1000 * g.mScale) | 0), ((aBarInstance.mSrcY * 100 * g.mScale) | 0), ((aSnappedWidth * g.mScale) | 0), ((aBarRect.mHeight * g.mScale) | 0));
            if(!noAdditive) {
                anImageInst.mAdditive = true;
            }
            var _t2 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((aBarInstance.mAlpha * anAlpha * 255.0) | 0)));
            try {
                g.DrawImage(anImageInst, aSnappedStartX, aBarRect.mY);
            } finally {
                _t2.Dispose();
            }
        }
        if(noAdditive) {
            var _t3 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 160, 60, ((anAlpha * 160.0) | 0)));
            try {
                g.FillRect(aSnappedStartX, aBarRect.mY, aSnappedWidth, aBarRect.mHeight);
            } finally {
                _t3.Dispose();
            }
        }
    },
    KeyChar : function Game_SpeedBoard$KeyChar(theChar) {
        if(Game.BejApp.mBejApp.mDebugKeysEnabled) {
            var aCursorPiece = this.GetPieceAtScreenXY((this.mLastMouseX | 0), (this.mLastMouseY | 0));
            if(theChar == 116) {
                if(aCursorPiece != null) {
                    aCursorPiece.SetFlag(Game.Piece.EFlag.TIME_BONUS);
                    aCursorPiece.mCounter = 5;
                    this.StartTimeBonusEffect(aCursorPiece);
                    return;
                }
            } else if(theChar == 92) {
                this.mTutorialMgr.SetTutorialFlags(0);
                this.mTutorialMgr.SetTutorialEnabled(true);
                this.mBonusTime = 5;
                this.mGameTicks = ((Math.max(0, (60 - 1) * 60 + 250)) | 0);
                this.mGameTicksF = this.mGameTicks;
                return;
            } else if(theChar == 91) {
                this.mGameTicks = ((Math.max(0, (60 - 5) * 60 + 250)) | 0);
                this.mGameTicksF = this.mGameTicks;
                return;
            }
        }
        Game.Board.prototype.KeyChar.apply(this, [theChar]);
    },
    DrawScore : function Game_SpeedBoard$DrawScore(g) {
        g.SetFont(Game.Resources['FONT_SCORE_LARGE']);
        g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255 * this.GetAlpha()) | 0)));
        var aScore = GameFramework.Utils.CommaSeperate(this.mDispPoints);
        g.DrawStringEx(aScore, 242, 210, 0, 0);
        g.PopColor();
    },
    DrawFrame : function Game_SpeedBoard$DrawFrame(g) {
        var _t4 = g.PushTranslate(-160, 0);
        try {
            Game.Resources['POPANIM_ANIMS_LIGHTNINGUIBOTTOM'].Draw(g);
        } finally {
            _t4.Dispose();
        }
    },
    GetWarningGlowColor : function Game_SpeedBoard$GetWarningGlowColor() {
        var aTicksLeft = this.GetTicksLeft();
        var aWarningStartTick = (this.GetTimeLimit() > 60) ? 1500 : 1000;
        var aMult = (aWarningStartTick - aTicksLeft) / aWarningStartTick;
        if(aTicksLeft == 0) {
            var aTimeLimit = this.GetTimeLimit();
            aMult *= Math.max(0, 120 - ((this.mGameTicks - 150) - aTimeLimit * 60)) / 120;
            aMult *= Math.max(0, 1.0 - (this.mTimeUpCount) / 20.0);
        }
        var c = (((Math.sin(this.mUpdateCnt * 0.15) * 127 + 127) * aMult * this.GetPieceAlpha()) | 0);
        return GameFramework.gfx.Color.RGBAToInt(255, 255, 255, c);
    },
    DrawFrame2 : function Game_SpeedBoard$DrawFrame2(g) {
        var _t5 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * this.GetBoardAlpha()) | 0)));
        try {
            var aScaledShowPct = 0;
            if(this.mCollectorExtendPct.GetOutVal() > 0.0) {
                aScaledShowPct = Math.pow(this.mCollectorExtendPct.GetOutVal(), 0.5) * 1.0 + 0.0;
            }
            var _t6 = g.PushTranslate(56, -22 + aScaledShowPct * 280);
            try {
                Game.Resources['POPANIM_ANIMS_GEM_MEGA'].Draw(g);
                var _t7 = g.PushTranslate(170, 300);
                try {
                    Game.Resources['PIEFFECT_LIGHTNING_POWERED_MEGASHARD'].Draw(g);
                } finally {
                    _t7.Dispose();
                }
                if(this.WantWarningGlow()) {
                    var _t8 = g.PushColor(this.GetWarningGlowColor());
                    try {
                        g.DrawImage(Game.Resources['IMAGE_LIGHTNING_MEGASHARD_RED_LIGHTNING'], 45, 34);
                    } finally {
                        _t8.Dispose();
                    }
                }
                g.SetFont(Game.Resources['FONT_SCORE']);
                g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, ((255.0 * this.GetAlpha() * this.mCollectedTimeAlpha.GetOutVal()) | 0)));
                Game.Resources['FONT_SCORE'].PushLayerColor('GLOW', 0x9f000000);
                var aTimeDisp = ((this.mCollectorExtendPct.GetOutVal() * 60.0 + 0.5) | 0);
                g.DrawStringEx(String.format('+{0:d}:{1:00}', ((aTimeDisp / 60) | 0), aTimeDisp % 60), 186, 442, 0, 0);
                Game.Resources['FONT_SCORE'].PopLayerColor('GLOW');
            } finally {
                _t6.Dispose();
            }
            g.PopColor();
            var aXOfs = this.GetBoardX() - 523 - 160;
            var aYOfs = this.GetBoardY() - 130;
            g.DrawImage(Game.Resources['IMAGE_LIGHTNING_TOP_BACK_LIGHTNING'].get_OffsetImage(), (aXOfs), (aYOfs));
            this.DrawLevelBar(g);
            var _t9 = g.PushTranslate(-160, 0);
            try {
                Game.Resources['POPANIM_ANIMS_LIGHTNINGUI'].Draw(g);
            } finally {
                _t9.Dispose();
            }
            if((this.mLastHurrahAlpha != null) && (this.mLastHurrahAlpha.get_v() > 0)) {
                g.SetFont(Game.Resources['FONT_SPEED_TEXT']);
                var _t10 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.mLastHurrahAlpha.GetOutVal() * this.GetPieceAlpha()));
                try {
                    g.GetFont().PushLayerColor('GLOW', GameFramework.gfx.Color.BLACK_RGB);
                    g.GetFont().PushLayerColor('OUTLINE', GameFramework.gfx.Color.BLACK_RGB);
                    var aScale = 1.25 + Math.sin(this.mLastHurrahUpdates * 0.1) * 0.25;
                    g.PushScale(aScale, aScale, this.GetBoardCenterX(), 75);
                    g.DrawStringEx('Last Hurrah', this.GetBoardCenterX(), 98, 0, 0);
                    g.PopMatrix();
                    g.GetFont().PopLayerColor('GLOW');
                    g.GetFont().PopLayerColor('OUTLINE');
                } finally {
                    _t10.Dispose();
                }
            }
            var _t11 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.GetAlpha()));
            try {
                g.DrawImage(Game.Resources['IMAGE_LIGHTNING_TIMER_LIGHTNING'].get_CenteredImage(), this.GetTimeDrawX() + -2, 76);
            } finally {
                _t11.Dispose();
            }
            if(this.mTimerGoldPct != null) {
                var _t12 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.mTimerGoldPct.GetOutVal()));
                try {
                    g.DrawImage(Game.Resources['IMAGE_LIGHTNING_TIMER_GOLD_LIGHTNING'].get_CenteredImage(), this.GetTimeDrawX() + -2, 76);
                } finally {
                    _t12.Dispose();
                }
            }
            this.DrawSpeedBonus(g);
            var _t13 = g.PushTranslate(240, 240);
            try {
                Game.Resources['PIEFFECT_LIGHTNING_POWERED_LEFTRIGHT'].Draw(g);
            } finally {
                _t13.Dispose();
            }
            if(this.WantWarningGlow()) {
                var _t14 = g.PushColor(this.GetWarningGlowColor());
                try {
                    Game.Resources['IMAGE_LIGHTNING_TOP_RED_LIGHTNING'].set_Additive(true);
                    Game.Resources['IMAGE_LIGHTNING_BOTTOM_RED_LIGHTNING'].set_Additive(true);
                    g.DrawImage(Game.Resources['IMAGE_LIGHTNING_TOP_RED_LIGHTNING'].get_OffsetImage(), aXOfs, aYOfs);
                    g.DrawImage(Game.Resources['IMAGE_LIGHTNING_BOTTOM_RED_LIGHTNING'].get_OffsetImage(), aXOfs, aYOfs);
                    g.DrawImage(Game.Resources['IMAGE_LIGHTNING_TIMER_RED_LIGHTNING'].get_CenteredImage(), this.GetTimeDrawX() + -2, 76);
                } finally {
                    _t14.Dispose();
                }
            }
            this.DrawScore(g);
        } finally {
            _t5.Dispose();
        }
    },
    WantBaseDrawSpeedBonusText : function Game_SpeedBoard$WantBaseDrawSpeedBonusText() {
        return false;
    },
    DrawOverlay : function Game_SpeedBoard$DrawOverlay(g) {
        this.DrawFrame2(g);
        this.mTimeFXManager.Draw(g);
        Game.Board.prototype.DrawOverlay.apply(this, [g]);
        this.DrawSpeedBonusDynImage(g);
    },
    Draw : function Game_SpeedBoard$Draw(g) {
        Game.Board.prototype.Draw.apply(this, [g]);
    },
    DrawSideUI : function Game_SpeedBoard$DrawSideUI(g) {
        this.DrawBottomWidget(g);
    }
}
Game.SpeedBoard.staticInit = function Game_SpeedBoard$staticInit() {
}

JS_AddInitFunc(function() {
    Game.SpeedBoard.registerClass('Game.SpeedBoard', Game.Board);
});
JS_AddStaticInitFunc(function() {
    Game.SpeedBoard.staticInit();
});
/**
 * @constructor
 */
Game.ElectroBolt = function Game_ElectroBolt() {
    this.mMidPointsPos = Array.Create(8, null);
    this.mMidPointsPosD = Array.Create(8, null);
}
Game.ElectroBolt.prototype = {
    mAngStart : 0,
    mAngStartD : 0,
    mAngEnd : 0,
    mAngEndD : 0,
    mCrossover : null,
    mHitOtherGem : null,
    mHitOtherGemId : 0,
    mMidPointsPos : null,
    mMidPointsPosD : null,
    mNumMidPoints : 0
}
Game.ElectroBolt.staticInit = function Game_ElectroBolt$staticInit() {
}

JS_AddInitFunc(function() {
    Game.ElectroBolt.registerClass('Game.ElectroBolt', null);
});
JS_AddStaticInitFunc(function() {
    Game.ElectroBolt.staticInit();
});
/**
 * @constructor
 */
Game.TimeBonusEffectTop = function Game_TimeBonusEffectTop(thePiece) {
    this.mCirclePct = new GameFramework.CurvedVal();
    this.mRadiusScale = new GameFramework.CurvedVal();
    Game.TimeBonusEffectTop.initializeBase(this, [Game.Effect.EFxType.TIME_BONUS_TOP]);
    this.mPieceIdRel = thePiece.mId;
    this.mGemColor = thePiece.mColor;
    this.mTimeBonus = thePiece.mCounter;
    this.mDAlpha = 0;
    this.mRadiusScale.SetConstant(1.0);
}
Game.TimeBonusEffectTop.prototype = {
    mGemColor : null,
    mTimeBonus : 0,
    mCirclePct : null,
    mRadiusScale : null,
    Update : function Game_TimeBonusEffectTop$Update() {
        this.mCirclePct.IncInVal();
        this.mRadiusScale.IncInVal();
        var aRelPiece = this.mFXManager.mBoard.GetPieceById(this.mPieceIdRel);
        if(aRelPiece != null) {
            this.mOverlay = false;
            this.mX = aRelPiece.GetScreenX() + ((Game.Board.GEM_WIDTH / 2) | 0);
            this.mY = aRelPiece.GetScreenY() + ((Game.Board.GEM_HEIGHT / 2) | 0);
            this.mTimeBonus = aRelPiece.mCounter;
            for(var anIdx = 0; anIdx < (this.mFXManager.mBoard.mLightningStorms.length | 0); anIdx++) {
                if(this.mFXManager.mBoard.mLightningStorms[anIdx].mStormType == Game.LightningStorm.EStormType.HYPERCUBE) {
                    if(this.mFXManager.mBoard.mLightningStorms[anIdx].mColor == aRelPiece.mColor) {
                        this.mOverlay = true;
                    }
                }
            }
        }
        if((this.mPieceIdRel != -1) && ((aRelPiece == null) || ((!aRelPiece.IsFlagSet(Game.Piece.EFlag.TIME_BONUS))))) {
            this.mDeleteMe = true;
        }
    },
    Draw : function Game_TimeBonusEffectTop$Draw(g) {
        var anAlpha = this.mAlpha * this.mFXManager.mAlpha;
        var aRelPiece = this.mFXManager.mBoard.GetPieceById(this.mPieceIdRel);
        if(aRelPiece != null) {
            if(aRelPiece.mScale.GetOutVal() != 1.0) {
                g.PushScale(aRelPiece.mScale.GetOutVal(), aRelPiece.mScale.GetOutVal(), aRelPiece.CX(), aRelPiece.CY());
            }
        }
        var _t15 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(anAlpha));
        try {
            if(this.mTimeBonus > 0) {
                var aPieceX = ((this.mX - Game.Board.GEM_WIDTH / 2.0) | 0);
                var aPieceY = ((this.mY - Game.Board.GEM_HEIGHT / 2.0) | 0);
                var gemImg;
                switch((this.mGemColor | 0)) {
                    case (Game.DM.EGemColor.RED | 0):
                    {
                        gemImg = Game.Resources['IMAGE_LIGHTNING_GEMNUMS_RED'];
                        break;
                    }
                    case (Game.DM.EGemColor.WHITE | 0):
                    {
                        gemImg = Game.Resources['IMAGE_LIGHTNING_GEMNUMS_WHITE'];
                        break;
                    }
                    case (Game.DM.EGemColor.GREEN | 0):
                    {
                        gemImg = Game.Resources['IMAGE_LIGHTNING_GEMNUMS_GREEN'];
                        break;
                    }
                    case (Game.DM.EGemColor.YELLOW | 0):
                    {
                        gemImg = Game.Resources['IMAGE_LIGHTNING_GEMNUMS_YELLOW'];
                        break;
                    }
                    case (Game.DM.EGemColor.PURPLE | 0):
                    {
                        gemImg = Game.Resources['IMAGE_LIGHTNING_GEMNUMS_PURPLE'];
                        break;
                    }
                    case (Game.DM.EGemColor.ORANGE | 0):
                    {
                        gemImg = Game.Resources['IMAGE_LIGHTNING_GEMNUMS_ORANGE'];
                        break;
                    }
                    case (Game.DM.EGemColor.BLUE | 0):
                    {
                        gemImg = Game.Resources['IMAGE_LIGHTNING_GEMNUMS_BLUE'];
                        break;
                    }
                    default:
                    {
                        gemImg = Game.Resources['IMAGE_LIGHTNING_GEMNUMS_CLEAR'];
                        break;
                    }
                }
                g.DrawImageCel(gemImg, aPieceX, aPieceY, ((this.mTimeBonus / 5) | 0) - 1);
                if((aRelPiece != null) && (this.mFXManager.mBoard.GetTicksLeft() <= 500) && ((((this.mFXManager.mBoard.mGameTicks / 18) | 0)) % 2 == 0)) {
                    var _t16 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 200, 200, 255));
                    try {
                        g.DrawImageCel(Game.Resources['IMAGE_LIGHTNING_GEMNUMS_WHITE'], aPieceX, aPieceY, ((this.mTimeBonus / 5) | 0) - 1);
                    } finally {
                        _t16.Dispose();
                    }
                }
            }
        } finally {
            _t15.Dispose();
        }
        if(aRelPiece != null) {
            if(aRelPiece.mScale.GetOutVal() != 1.0) {
                g.PopMatrix();
            }
        }
    }
}
Game.TimeBonusEffectTop.staticInit = function Game_TimeBonusEffectTop$staticInit() {
}

JS_AddInitFunc(function() {
    Game.TimeBonusEffectTop.registerClass('Game.TimeBonusEffectTop', Game.Effect);
});
JS_AddStaticInitFunc(function() {
    Game.TimeBonusEffectTop.staticInit();
});
/**
 * @constructor
 */
Game.TimeBonusEffect = function Game_TimeBonusEffect(thePiece) {
    this.mCirclePct = new GameFramework.CurvedVal();
    this.mRadiusScale = new GameFramework.CurvedVal();
    Game.TimeBonusEffect.initializeBase(this, [Game.Effect.EFxType.TIME_BONUS]);
    this.mElectroBoltVector = [];
    this.mPieceIdRel = thePiece.mId;
    this.mGemColor = thePiece.mColor;
    this.mTimeBonus = thePiece.mCounter;
    this.mDAlpha = 0;
    this.mRadiusScale.SetConstant(1.0);
}
Game.TimeBonusEffect.prototype = {
    mElectroBoltVector : null,
    mGemColor : null,
    mTimeBonus : 0,
    mCirclePct : null,
    mRadiusScale : null,
    Update : function Game_TimeBonusEffect$Update() {
        this.mCirclePct.IncInVal();
        this.mRadiusScale.IncInVal();
        var aRelPiece = this.mFXManager.mBoard.GetPieceById(this.mPieceIdRel);
        if(aRelPiece != null) {
            this.mOverlay = false;
            this.mX = aRelPiece.GetScreenX() + ((Game.Board.GEM_WIDTH / 2) | 0);
            this.mY = aRelPiece.GetScreenY() + ((Game.Board.GEM_HEIGHT / 2) | 0);
            this.mTimeBonus = aRelPiece.mCounter;
            for(var anIdx = 0; anIdx < (this.mFXManager.mBoard.mLightningStorms.length | 0); anIdx++) {
                if(this.mFXManager.mBoard.mLightningStorms[anIdx].mStormType == Game.LightningStorm.EStormType.HYPERCUBE) {
                    if(this.mFXManager.mBoard.mLightningStorms[anIdx].mColor == aRelPiece.mColor) {
                        this.mOverlay = true;
                    }
                }
            }
        }
        var aFrame = 0;
        if(aRelPiece != null) {
            aFrame = ((Math.min(19, ((20.0 * aRelPiece.mRotPct) | 0))) | 0);
        }
        var noEffect = ((Game.BejApp.mBejApp.mFXScale != 1.0) && (GameFramework.Utils.GetRandFloatU() > 0.5 + Game.BejApp.mBejApp.mFXScale * 0.5));
        {
            var anElectroMult = Math.min(4.0, this.mTimeBonus - 1.0) / 4.0;
            if(!Game.BejApp.mBejApp.mIsSlow) {
                if((GameFramework.Utils.GetRandFloatU() < 0.025 * Math.min(5.0, this.mTimeBonus - 1.0)) && (!noEffect)) {
                    var anEffect = this.mFXManager.AllocEffect(Game.Effect.EFxType.EMBER);
                    var anAngle = GameFramework.Utils.GetRandFloat() * Math.PI;
                    var aDist = Game.Piece.GetAngleRadiusColorFrame(anAngle, this.mGemColor, aFrame);
                    var aSpeed = 0.35 + GameFramework.Utils.GetRandFloatU() * 0.1;
                    anEffect.mAlpha = 1.0;
                    anEffect.mScale = 1.0;
                    anEffect.mDScale = -0.0;
                    anEffect.mDAlpha = -0.012;
                    anEffect.mFrame = 0;
                    Game.Resources['IMAGE_SPARKLET'].mPixelSnapping = GameFramework.resources.PixelSnapping.Never;
                    anEffect.mImage = Game.Resources['IMAGE_SPARKLET'];
                    anEffect.mX = ((Game.Board.GEM_WIDTH / 2) | 0) + Math.cos(anAngle) * aDist;
                    anEffect.mY = ((Game.Board.GEM_HEIGHT / 2) | 0) + Math.sin(anAngle) * aDist;
                    anEffect.mDX = Math.cos(anAngle) * aSpeed;
                    anEffect.mDY = Math.sin(anAngle) * aSpeed;
                    anEffect.mColor = Game.DM.gArcColors[(this.mGemColor | 0)];
                    anEffect.mPieceIdRel = aRelPiece == null ? -1 : aRelPiece.mId;
                    this.mFXManager.mBoard.mPreFXManager.AddEffect(anEffect);
                }
            }
            if(Game.BejApp.mBejApp.mIsSlow) {
                anElectroMult *= 0.25;
            }
            var wantElectro = GameFramework.Utils.GetRandFloatU() < 0.15 * anElectroMult;
            wantElectro |= (this.mElectroBoltVector.length | 0) < Math.min(3, this.mTimeBonus * 2 - 1);
            if(noEffect) {
                wantElectro = false;
            }
            if(wantElectro) {
                var aBolt = new Game.ElectroBolt();
                aBolt.mHitOtherGem = false;
                aBolt.mCrossover = (!aBolt.mHitOtherGem) && (GameFramework.Utils.GetRandFloatU() < 0.02);
                if(Game.BejApp.mBejApp.mIsSlow) {
                    aBolt.mCrossover |= (!aBolt.mHitOtherGem) && (GameFramework.Utils.GetRandFloatU() < 0.1);
                }
                if(aBolt.mHitOtherGem) {
                    aBolt.mAngStart = Math.abs(GameFramework.Utils.GetRandFloat()) * Math.PI * 2.0;
                    var aPiece = this.mFXManager.mBoard.GetPieceAtScreenXY(((this.mX + Game.Board.GEM_WIDTH / 2.0 + Math.cos(aBolt.mAngStart) * Game.Board.GEM_WIDTH * 0.6) | 0), ((this.mY + Game.Board.GEM_HEIGHT / 2 + Math.sin(aBolt.mAngStart) * Game.Board.GEM_HEIGHT * 0.6) | 0));
                    if((aPiece != null) && (aPiece != aRelPiece)) {
                        aBolt.mHitOtherGemId = aPiece.mId;
                    } else {
                        aBolt.mHitOtherGem = false;
                    }
                }
                if(aBolt.mHitOtherGem) {
                    aBolt.mAngEnd = Math.PI + aBolt.mAngStart + Math.abs(GameFramework.Utils.GetRandFloat()) * 0.5;
                    aBolt.mAngStartD = GameFramework.Utils.GetRandFloat() * 0.03;
                    aBolt.mAngEndD = GameFramework.Utils.GetRandFloat() * 0.03;
                } else if(aBolt.mCrossover) {
                    aBolt.mAngStart = Math.abs(GameFramework.Utils.GetRandFloat()) * Math.PI * 2.0;
                    aBolt.mAngEnd = aBolt.mAngStart;
                    aBolt.mAngStartD = GameFramework.Utils.GetRandFloat() * 0.02;
                    if(aBolt.mAngStartD < 0) {
                        aBolt.mAngStartD += -0.02;
                    } else {
                        aBolt.mAngStartD += 0.02;
                    }
                    aBolt.mAngEndD = -aBolt.mAngStartD + GameFramework.Utils.GetRandFloat() * 0.02;
                } else {
                    aBolt.mAngStart = Math.abs(GameFramework.Utils.GetRandFloat()) * Math.PI * 2.0;
                    aBolt.mAngEnd = aBolt.mAngStart + Math.abs(GameFramework.Utils.GetRandFloat()) * 0.5 + 0.5;
                    aBolt.mAngStartD = GameFramework.Utils.GetRandFloat() * 0.0075;
                    aBolt.mAngEndD = aBolt.mAngStartD + GameFramework.Utils.GetRandFloat() * 0.002;
                }
                aBolt.mNumMidPoints = 2;
                for(var aPtNum = 0; aPtNum < aBolt.mNumMidPoints; aPtNum++) {
                    aBolt.mMidPointsPos[aPtNum] = GameFramework.Utils.GetRandFloat() * 10.0;
                    aBolt.mMidPointsPosD[aPtNum] = GameFramework.Utils.GetRandFloat() * 0.2;
                }
                this.mElectroBoltVector.push(aBolt);
            }
            for(var aBoltNum = 0; aBoltNum < (this.mElectroBoltVector.length | 0); aBoltNum++) {
                var aBolt_2 = this.mElectroBoltVector[aBoltNum];
                aBolt_2.mAngStart += aBolt_2.mAngStartD;
                aBolt_2.mAngEnd += aBolt_2.mAngEndD;
                var deleteMe = false;
                for(var aPtNum_2 = 0; aPtNum_2 < aBolt_2.mNumMidPoints; aPtNum_2++) {
                    aBolt_2.mMidPointsPos[aPtNum_2] += aBolt_2.mMidPointsPosD[aPtNum_2];
                    if(aBolt_2.mHitOtherGem) {
                        if(Math.abs(aBolt_2.mMidPointsPos[aPtNum_2]) >= 25) {
                            aBolt_2.mMidPointsPosD[aPtNum_2] *= -0.65;
                        } else if(GameFramework.Utils.GetRandFloatU() < 0.2) {
                            aBolt_2.mMidPointsPos[aPtNum_2] = GameFramework.Utils.GetRandFloat() * 15.0;
                        } else if(GameFramework.Utils.GetRandFloatU() < 0.05) {
                            aBolt_2.mMidPointsPosD[aPtNum_2] += GameFramework.Utils.GetRandFloat() * 1.5;
                        } else if(GameFramework.Utils.GetRandFloatU() < 0.05) {
                            aBolt_2.mMidPointsPosD[aPtNum_2] = GameFramework.Utils.GetRandFloat() * 1.5;
                        }
                    } else if(aBolt_2.mCrossover) {
                        if(Math.abs(aBolt_2.mMidPointsPos[aPtNum_2]) >= 25) {
                            aBolt_2.mMidPointsPosD[aPtNum_2] *= -0.65;
                        } else if(GameFramework.Utils.GetRandFloatU() < 0.2) {
                            aBolt_2.mMidPointsPos[aPtNum_2] = GameFramework.Utils.GetRandFloat() * 15.0;
                        } else if(GameFramework.Utils.GetRandFloatU() < 0.1) {
                            aBolt_2.mMidPointsPosD[aPtNum_2] += GameFramework.Utils.GetRandFloat() * 1.5;
                        } else if(GameFramework.Utils.GetRandFloatU() < 0.1) {
                            aBolt_2.mMidPointsPosD[aPtNum_2] = GameFramework.Utils.GetRandFloat() * 1.5;
                        }
                    } else {
                        if(aBolt_2.mMidPointsPos[aPtNum_2] <= 0) {
                            aBolt_2.mMidPointsPos[aPtNum_2] = 0;
                            aBolt_2.mMidPointsPosD[aPtNum_2] = GameFramework.Utils.GetRandFloatU() * 0.1;
                        } else if(GameFramework.Utils.GetRandFloatU() < 0.05) {
                            var aMoveTend = (4.0 - aBolt_2.mMidPointsPos[aPtNum_2]) * 0.1;
                            aBolt_2.mMidPointsPosD[aPtNum_2] = aMoveTend + GameFramework.Utils.GetRandFloat() * 1.0;
                        } else if(GameFramework.Utils.GetRandFloatU() < 0.025) {
                            aBolt_2.mMidPointsPos[aPtNum_2] = GameFramework.Utils.GetRandFloatU() * 18.0;
                        } else if(GameFramework.Utils.GetRandFloatU() < 0.04) {
                            aBolt_2.mMidPointsPosD[aPtNum_2] += GameFramework.Utils.GetRandFloat() * 2.5;
                        }
                        if(GameFramework.Utils.GetRandFloatU() < 0.1) {
                            var aPrevVal = 0.0;
                            var aNextVal = 0.0;
                            if(aPtNum_2 - 1 >= 0) {
                                aPrevVal = aBolt_2.mMidPointsPos[aPtNum_2 - 1];
                            }
                            if(aPtNum_2 + 1 < aBolt_2.mNumMidPoints) {
                                aNextVal = aBolt_2.mMidPointsPos[aPtNum_2 + 1];
                            }
                            aBolt_2.mMidPointsPos[aPtNum_2] = (aBolt_2.mMidPointsPos[aPtNum_2] + aPrevVal + aNextVal) / 3;
                        }
                        if(GameFramework.Utils.GetRandFloatU() < 0.2) {
                            var aMoveTowardPt = aPtNum_2 + GameFramework.Utils.GetRand() % 3 - 1;
                            if((aMoveTowardPt >= 0) && (aMoveTowardPt < aBolt_2.mNumMidPoints)) {
                                var aDelta = aBolt_2.mMidPointsPos[aMoveTowardPt] - aBolt_2.mMidPointsPos[aPtNum_2];
                                aBolt_2.mMidPointsPosD[aPtNum_2] += aDelta * 0.2;
                            }
                        }
                        if(GameFramework.Utils.GetRandFloatU() < 0.1) {
                            var aPrevVal_2 = 0.0;
                            var aNextVal_2 = 0.0;
                            if(aPtNum_2 - 1 >= 0) {
                                aPrevVal_2 = aBolt_2.mMidPointsPosD[aPtNum_2 - 1];
                            }
                            if(aPtNum_2 + 1 < aBolt_2.mNumMidPoints) {
                                aNextVal_2 = aBolt_2.mMidPointsPosD[aPtNum_2 + 1];
                            }
                            aBolt_2.mMidPointsPosD[aPtNum_2] = (aPrevVal_2 + aNextVal_2) / 2;
                        }
                    }
                    if((aBolt_2.mMidPointsPos[aPtNum_2] > 18.0) || ((anElectroMult <= 0) && (GameFramework.Utils.GetRandFloatU() < 0.0075))) {
                        deleteMe = true;
                    }
                }
                if(aBolt_2.mHitOtherGem) {
                    var aLastDist = Game.Piece.GetAngleRadiusColorFrame(aBolt_2.mAngStart, this.mGemColor, aFrame) + 0.0;
                    var aLastX = Math.cos(aBolt_2.mAngStart) * aLastDist;
                    var aLastY = Math.sin(aBolt_2.mAngStart) * aLastDist;
                    var aPiece_2 = this.mFXManager.mBoard.GetPieceById(aBolt_2.mHitOtherGemId);
                    if(aPiece_2 != null) {
                        var aEndDist = aPiece_2.GetAngleRadius(aBolt_2.mAngEnd);
                        var aEndX = (aPiece_2.mX - this.mX) / 1.0 + Math.cos(aBolt_2.mAngEnd) * aEndDist;
                        var aEndY = (aPiece_2.mY - this.mY) / 1.0 + Math.sin(aBolt_2.mAngEnd) * aEndDist;
                        var aDX = aLastX - aEndX;
                        var aDY = aLastY - aEndY;
                        if(Math.sqrt(aDX * aDX + aDY * aDY) > 90.0) {
                            deleteMe = true;
                        }
                        var aPieceAng = Math.atan2(aPiece_2.mY - this.mY, aPiece_2.mX - this.mX);
                        var aMyElectDot = (Math.cos(aBolt_2.mAngStart) * Math.cos(aPieceAng) + Math.sin(aBolt_2.mAngStart) * Math.sin(aPieceAng));
                        if(aMyElectDot < 0.75) {
                            deleteMe = true;
                        }
                        var aHitElectDot = Math.cos(aBolt_2.mAngEnd) * Math.cos(aPieceAng + Math.PI) + Math.sin(aBolt_2.mAngEnd) * Math.sin(aPieceAng + Math.PI);
                        if(aHitElectDot < 0.75) {
                            deleteMe = true;
                        }
                    }

                    else {
                        deleteMe = true;
                    }
                    if(GameFramework.Utils.GetRandFloatU() < 0.001) {
                        deleteMe = true;
                    }
                } else if(aBolt_2.mCrossover) {
                    if(GameFramework.Utils.GetRandFloatU() < 0.001) {
                        deleteMe = true;
                    }
                    if(Math.abs(aBolt_2.mAngStart - aBolt_2.mAngEnd) >= Math.PI * 2) {
                        deleteMe = true;
                    }
                } else {
                    if(GameFramework.Utils.GetRandFloatU() < 0.005) {
                        deleteMe = true;
                    }
                }
                if(deleteMe) {
                    this.mElectroBoltVector.removeAt(aBoltNum);
                    aBoltNum--;
                    continue;
                }
            }
        }
        if(GameFramework.Utils.GetRand() % 25 == 0) {
            var anEffect_2 = this.mFXManager.AllocEffect(Game.Effect.EFxType.LIGHT);
            anEffect_2.mFlags = (Game.Effect.EFlag.ALPHA_FADEINOUT | 0);
            anEffect_2.mX = this.mX + GameFramework.Utils.GetRandFloat() * 20.0;
            anEffect_2.mY = this.mY + GameFramework.Utils.GetRandFloat() * 20.0;
            anEffect_2.mZ = 0.08;
            anEffect_2.mZ = 0.08;
            anEffect_2.mValue[0] = 6000.0;
            anEffect_2.mValue[1] = -4000.0;
            anEffect_2.mValue[2] = 0.5;
            anEffect_2.mAlpha = 0.0;
            anEffect_2.mDAlpha = 0.07;
            anEffect_2.mScale = 0.75;
            anEffect_2.mColor = GameFramework.gfx.Color.RGBToInt(255, 255, 255);
            if(GameFramework.Utils.GetRand() % 2 != 0 && this.mPieceIdRel != -1) {
                anEffect_2.mPieceId = this.mPieceIdRel;
            }
            this.mFXManager.AddEffect(anEffect_2);
        }
        if((this.mPieceIdRel != -1) && ((aRelPiece == null) || ((!aRelPiece.IsFlagSet(Game.Piece.EFlag.TIME_BONUS)) && (this.mElectroBoltVector.length == 0)))) {
            this.mDeleteMe = true;
        }
    },
    DrawElectroLine : function Game_TimeBonusEffect$DrawElectroLine(g, theImage, theStartX, theStartY, theEndX, theEndY, theWidth, theColor1, theColor2) {
        if(Game.BejApp.mBejApp.get_Is3D()) {
            var aDX = theEndX - theStartX;
            var aDY = theEndY - theStartY;
            var anAng = Math.atan2(aDY, aDX);
            var aCos = Math.cos(anAng);
            var aSin = Math.sin(anAng);
            var aCosT = -aSin;
            var aSinT = aCos;
            var aStartXE = theStartX + aCos * -theWidth;
            var aStartYE = theStartY + aSin * -theWidth;
            var aEndXE = theEndX + aCos * theWidth;
            var aEndYE = theEndY + aSin * theWidth;
            var color0 = GameFramework.gfx.Color.WHITE_RGB;
            var w = theWidth;
            var color1 = theColor1;
            var color2 = theColor2;
            if(Game.TimeBonusEffect.mElectoLineVertices == null) {
                Game.TimeBonusEffect.mElectoLineVertices = Array.Create2D(6, 3, null, new GameFramework.gfx.TriVertex(aStartXE + aCosT * w, theStartY + aSinT * w, 0.0, 0, color1), new GameFramework.gfx.TriVertex(aStartXE + aCosT * -w, theStartY + aSinT * -w, 0.0, 1, color1), new GameFramework.gfx.TriVertex(theStartX + aCosT * w, theStartY + aSinT * w, 0.5, 0, color1), new GameFramework.gfx.TriVertex(aStartXE + aCosT * -w, theStartY + aSinT * -w, 0.0, 1, color1), new GameFramework.gfx.TriVertex(theStartX + aCosT * w, theStartY + aSinT * w, 0.5, 0, color1), new GameFramework.gfx.TriVertex(theStartX + aCosT * -w, theStartY + aSinT * -w, 0.5, 1, color1), new GameFramework.gfx.TriVertex(theStartX + aCosT * w, theStartY + aSinT * w, 0.5, 0, color1), new GameFramework.gfx.TriVertex(theStartX + aCosT * -w, theStartY + aSinT * -w, 0.5, 1, color1), new GameFramework.gfx.TriVertex(theEndX + aCosT * w, theEndY + aSinT * w, 0.5, 0, color2), new GameFramework.gfx.TriVertex(theStartX + aCosT * -w, theStartY + aSinT * -w, 0.5, 1, color1), new GameFramework.gfx.TriVertex(theEndX + aCosT * w, theEndY + aSinT * w, 0.5, 0, color2), new GameFramework.gfx.TriVertex(theEndX + aCosT * -w, theEndY + aSinT * -w, 0.5, 1, color2), new GameFramework.gfx.TriVertex(theEndX + aCosT * w, theEndY + aSinT * w, 0.5, 0, color2), new GameFramework.gfx.TriVertex(theEndX + aCosT * -w, theEndY + aSinT * -w, 0.5, 1, color2), new GameFramework.gfx.TriVertex(aEndXE + aCosT * w, theEndY + aSinT * w, 1.0, 0, color2), new GameFramework.gfx.TriVertex(theEndX + aCosT * -w, theEndY + aSinT * -w, 0.5, 1, color2), new GameFramework.gfx.TriVertex(aEndXE + aCosT * w, theEndY + aSinT * w, 1.0, 0, color2), new GameFramework.gfx.TriVertex(aEndXE + aCosT * -w, theEndY + aSinT * -w, 1.0, 1, color2));
            }

            else {
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (0) + 0].x = aStartXE + aCosT * w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (0) + 0].y = theStartY + aSinT * w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (0) + 0].color = color1;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (0) + 1].x = aStartXE + aCosT * -w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (0) + 1].y = theStartY + aSinT * -w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (0) + 1].color = color1;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (0) + 2].x = theStartX + aCosT * w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (0) + 2].y = theStartY + aSinT * w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (0) + 2].color = color1;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (1) + 0].x = aStartXE + aCosT * -w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (1) + 0].y = theStartY + aSinT * -w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (1) + 0].color = color1;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (1) + 1].x = theStartX + aCosT * w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (1) + 1].y = theStartY + aSinT * w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (1) + 1].color = color1;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (1) + 2].x = theStartX + aCosT * -w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (1) + 2].y = theStartY + aSinT * -w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (1) + 2].color = color1;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (2) + 0].x = theStartX + aCosT * w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (2) + 0].y = theStartY + aSinT * w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (2) + 0].color = color1;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (2) + 1].x = theStartX + aCosT * -w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (2) + 1].y = theStartY + aSinT * -w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (2) + 1].color = color1;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (2) + 2].x = theEndX + aCosT * w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (2) + 2].y = theEndY + aSinT * w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (2) + 2].color = color2;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (3) + 0].x = theStartX + aCosT * -w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (3) + 0].y = theStartY + aSinT * -w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (3) + 0].color = color1;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (3) + 1].x = theEndX + aCosT * w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (3) + 1].y = theEndY + aSinT * w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (3) + 1].color = color2;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (3) + 2].x = theEndX + aCosT * -w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (3) + 2].y = theEndY + aSinT * -w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (3) + 2].color = color2;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (4) + 0].x = theEndX + aCosT * w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (4) + 0].y = theEndY + aSinT * w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (4) + 0].color = color2;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (4) + 1].x = theEndX + aCosT * -w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (4) + 1].y = theEndY + aSinT * -w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (4) + 1].color = color2;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (4) + 2].x = aEndXE + aCosT * w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (4) + 2].y = theEndY + aSinT * w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (4) + 2].color = color2;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (5) + 0].x = theEndX + aCosT * -w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (5) + 0].y = theEndY + aSinT * -w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (5) + 0].color = color2;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (5) + 1].x = aEndXE + aCosT * w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (5) + 1].y = theEndY + aSinT * w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (5) + 1].color = color2;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (5) + 2].x = aEndXE + aCosT * -w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (5) + 2].y = theEndY + aSinT * -w;
                Game.TimeBonusEffect.mElectoLineVertices[Game.TimeBonusEffect.mElectoLineVertices.mIdxMult0 * (5) + 2].color = color2;
            }
            theImage.set_Additive(true);
            g.DrawTrianglesTex(theImage, Game.TimeBonusEffect.mElectoLineVertices);
        }
    },
    Draw : function Game_TimeBonusEffect$Draw(g) {
        var anAlpha = this.mAlpha * this.mFXManager.mAlpha;
        var aFrame = 0;
        var _t17 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(anAlpha));
        try {
            var aPieceX = ((this.mX - Game.Board.GEM_WIDTH / 2.0) | 0);
            var aPieceY = ((this.mY - Game.Board.GEM_HEIGHT / 2.0) | 0);
            var aRelPiece = this.mFXManager.mBoard.GetPieceById(this.mPieceIdRel);
            if(aRelPiece != null) {
                if(aRelPiece.mScale.GetOutVal() != 1.0) {
                    g.PushScale(aRelPiece.mScale.GetOutVal(), aRelPiece.mScale.GetOutVal(), aRelPiece.CX(), aRelPiece.CY());
                }
                aFrame = (Math.min(19.0, 20.0 * aRelPiece.mRotPct) | 0);
                if((aRelPiece.mRotPct == 0) && (this.mElectroBoltVector.length != 0)) {
                    var _t18 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(Math.min(this.mElectroBoltVector.length * 32.0, 255.0) * this.mAlpha / 255.0));
                    try {
                        Game.Resources['IMAGE_GEMOUTLINES'].set_Additive(true);
                        var _t19 = g.PushScale(0.5, 0.5, aRelPiece.CX(), aRelPiece.CY());
                        try {
                            g.DrawImageCel(Game.Resources['IMAGE_GEMOUTLINES'].get_CenteredImage(), aRelPiece.CX(), aRelPiece.CY() - 2, (this.mGemColor | 0));
                        } finally {
                            _t19.Dispose();
                        }
                    } finally {
                        _t18.Dispose();
                    }
                }
            }
            for(var aBoltNum = 0; aBoltNum < (this.mElectroBoltVector.length | 0); aBoltNum++) {
                var aBolt = this.mElectroBoltVector[aBoltNum];
                var aColor = GameFramework.gfx.Color.CreateFromIntAlpha(aBolt.mCrossover ? Game.DM.gCrossoverColors[(this.mGemColor | 0)] : Game.DM.gArcColors[(this.mGemColor | 0)], ((255.0 * this.mAlpha) | 0));
                var _t20 = g.PushColor(aColor.ToInt());
                try {
                    var aLastDistAdd = 0.0;
                    var aLastDist = Game.Piece.GetAngleRadiusColorFrame(aBolt.mAngStart, this.mGemColor, aFrame);
                    aLastDist = ((this.mCirclePct.GetOutVal() * 48.0) + ((1.0 - this.mCirclePct.GetOutVal()) * aLastDist)) * this.mRadiusScale.GetOutVal();
                    var aLastX = Math.cos(aBolt.mAngStart) * aLastDist;
                    var aLastY = Math.sin(aBolt.mAngStart) * aLastDist;
                    var aStartX = aLastX;
                    var aStartY = aLastY;
                    var aEndDist = Game.Piece.GetAngleRadiusColorFrame(aBolt.mAngEnd, this.mGemColor, aFrame);
                    aEndDist = ((this.mCirclePct.GetOutVal() * 48.0) + ((1.0 - this.mCirclePct.GetOutVal()) * aEndDist)) * this.mRadiusScale.GetOutVal();
                    var aEndX = Math.cos(aBolt.mAngEnd) * aEndDist;
                    var aEndY = Math.sin(aBolt.mAngEnd) * aEndDist;
                    if(aBolt.mHitOtherGem) {
                        var aPiece = this.mFXManager.mBoard.GetPieceById(aBolt.mHitOtherGemId);
                        if(aPiece != null) {
                            aEndDist = Game.Piece.GetAngleRadiusColorFrame(aBolt.mAngEnd, this.mGemColor, aFrame);
                            aEndDist = (this.mCirclePct.GetOutVal() * 48.0) + ((1.0 - this.mCirclePct.GetOutVal()) * aEndDist);
                            aEndX = (aPiece.mX - aPieceX) / 1.0 + Math.cos(aBolt.mAngEnd) * aEndDist;
                            aEndY = (aPiece.mY - aPieceY) / 1.0 + Math.sin(aBolt.mAngEnd) * aEndDist;
                        }
                    }
                    for(var aPtNum = 0; aPtNum < aBolt.mNumMidPoints + 1; aPtNum++) {
                        var aPct = (aPtNum + 1) / (aBolt.mNumMidPoints + 1);
                        var anAng = aBolt.mAngStart * (1.0 - aPct) + aBolt.mAngEnd * aPct;
                        var aDistAdd = 0.0;
                        if(aPtNum < aBolt.mNumMidPoints) {
                            aDistAdd = aBolt.mMidPointsPos[aPtNum];
                        }
                        var aDist = Game.Piece.GetAngleRadiusColorFrame(anAng, this.mGemColor, aFrame);
                        aDist = ((this.mCirclePct.GetOutVal() * 48.0) + ((1.0 - this.mCirclePct.GetOutVal()) * aDist) + aDistAdd) * this.mRadiusScale.GetOutVal();
                        var aX = Math.cos(anAng) * aDist;
                        var aY = Math.sin(anAng) * aDist;
                        if((aBolt.mCrossover) || (aBolt.mHitOtherGem)) {
                            var aTrajAng = Math.atan2(aEndY - aLastY, aEndX - aLastX);
                            aX = aStartX * (1.0 - aPct) + aEndX * aPct;
                            aY = aStartY * (1.0 - aPct) + aEndY * aPct;
                            if(aPtNum < aBolt.mNumMidPoints) {
                                aX += Math.sin(aTrajAng) * aBolt.mMidPointsPos[aPtNum];
                                aY += Math.cos(aTrajAng) * aBolt.mMidPointsPos[aPtNum];
                            }
                        }
                        var aColor1 = aColor;
                        var aColor2 = aColor;
                        if((!aBolt.mCrossover) && (!aBolt.mHitOtherGem)) {
                            aColor1.mAlpha = ((Math.max(2, ((255.0 * (1.0 - aLastDistAdd * 0.03)) | 0))) | 0);
                            aColor2.mAlpha = ((Math.max(2, ((255.0 * (1.0 - aDistAdd * 0.03)) | 0))) | 0);
                        }
                        aColor1.mAlpha = ((aColor1.mAlpha * anAlpha) | 0);
                        aColor2.mAlpha = ((aColor2.mAlpha * anAlpha) | 0);
                        this.DrawElectroLine(g, Game.Resources['IMAGE_ELECTROTEX'], (aPieceX + ((Game.Board.GEM_WIDTH / 2) | 0) + aLastX), (aPieceY + ((Game.Board.GEM_HEIGHT / 2) | 0) + aLastY), (aPieceX + ((Game.Board.GEM_WIDTH / 2) | 0) + aX), (aPieceY + ((Game.Board.GEM_HEIGHT / 2) | 0) + aY), aBolt.mHitOtherGem ? 8.0 : (aBolt.mCrossover ? 9.0 : 6.0), aColor2.ToInt(), aColor1.ToInt());
                        var aColorCenter1 = GameFramework.gfx.Color.CreateFromInt(GameFramework.gfx.Color.WHITE_RGB);
                        var aColorCenter2 = GameFramework.gfx.Color.CreateFromInt(GameFramework.gfx.Color.WHITE_RGB);
                        if((!aBolt.mCrossover) && (!aBolt.mHitOtherGem)) {
                            aColorCenter1.mAlpha = ((Math.max(2, ((255.0 * (0.85 - aLastDistAdd * 0.04)) | 0))) | 0);
                            aColorCenter2.mAlpha = ((Math.max(2, ((255.0 * (0.85 - aDistAdd * 0.04)) | 0))) | 0);
                        }
                        if(aBolt.mCrossover) {
                            aColorCenter1.mAlpha = ((aColorCenter1.mAlpha * 0.5) | 0);
                            aColorCenter2.mAlpha = ((aColorCenter2.mAlpha * 0.5) | 0);
                        }
                        aColorCenter1.mAlpha = ((aColorCenter1.mAlpha * anAlpha) | 0);
                        aColorCenter2.mAlpha = ((aColorCenter2.mAlpha * anAlpha) | 0);
                        this.DrawElectroLine(g, Game.Resources['IMAGE_ELECTROTEX_CENTER'], aPieceX + ((Game.Board.GEM_WIDTH / 2) | 0) + aLastX, aPieceY + ((Game.Board.GEM_HEIGHT / 2) | 0) + aLastY, aPieceX + Game.Board.GEM_WIDTH / 2.0 + aX, aPieceY + Game.Board.GEM_HEIGHT / 2.0 + aY, aBolt.mHitOtherGem ? 8.0 : (aBolt.mCrossover ? 8.0 : 6.0), aColorCenter1.ToInt(), aColorCenter2.ToInt());
                        aLastX = aX;
                        aLastY = aY;
                        aLastDist = aDist;
                        aLastDistAdd = aDistAdd;
                    }
                } finally {
                    _t20.Dispose();
                }
            }
            if(aRelPiece != null) {
                if(aRelPiece.mScale.GetOutVal() != 1.0) {
                    g.PopMatrix();
                }
            }
        } finally {
            _t17.Dispose();
        }
    }
}
Game.TimeBonusEffect.staticInit = function Game_TimeBonusEffect$staticInit() {
    Game.TimeBonusEffect.mElectoLineVertices = null;
}

JS_AddInitFunc(function() {
    Game.TimeBonusEffect.registerClass('Game.TimeBonusEffect', Game.Effect);
});
JS_AddStaticInitFunc(function() {
    Game.TimeBonusEffect.staticInit();
});
/**
 * @constructor
 */
Game.SpeedCollectEffect = function Game_SpeedCollectEffect(theSpeedBoard, theSrc, theTgt, theTimeCollected, theTimeMod) {
    this.mSpline = new GameFramework.misc.BSpline();
    this.mSplineInterp = new GameFramework.CurvedVal();
    this.mAlphaOut = new GameFramework.CurvedVal();
    this.mScaleCv = new GameFramework.CurvedVal();
    this.mStartPoint = new GameFramework.geom.TIntPoint();
    this.mTargetPoint = new GameFramework.geom.TIntPoint();
    this.mLastPoint = new GameFramework.geom.TIntPoint();
    Game.SpeedCollectEffect.initializeBase(this, [Game.Effect.EFxType.CUSTOMCLASS]);
    this.mTimeCollected = theTimeCollected;
    this.mBoard = theSpeedBoard;
    this.mX = theSrc.x;
    this.mY = theSrc.y;
    this.mLastPoint = new GameFramework.geom.TIntPoint(theSrc.x, theSrc.y);
    this.mDAlpha = 0;
    this.mUpdateCnt = 0;
    this.mStartPoint = new GameFramework.geom.TIntPoint(theSrc.x, theSrc.y);
    this.mTargetPoint = new GameFramework.geom.TIntPoint(theTgt.x, theTgt.y);
    this.mLastRotation = 0.0;
    this.mCentering = false;
    this.mTimeMod = theTimeMod;
    this.mSparkles = null;
    this.mTimeBonusEffect = null;
}
Game.SpeedCollectEffect.prototype = {
    mSpline : null,
    mSplineInterp : null,
    mAlphaOut : null,
    mScaleCv : null,
    mSparkles : null,
    mTimeBonusEffect : null,
    mUpdateCnt : 0,
    mAccel : 0,
    mBoard : null,
    mCentering : null,
    mStartPoint : null,
    mTargetPoint : null,
    mLastPoint : null,
    mLastRotation : 0,
    mTimeMod : 0,
    mTimeCollected : 0,
    Dispose : function Game_SpeedCollectEffect$Dispose() {
        if(this.mSparkles != null) {
            this.mSparkles.mDeleteMe = true;
            this.mSparkles.mRefCount--;
        }
        this.mSparkles = null;
        if(this.mTimeBonusEffect != null) {
            this.mTimeBonusEffect.mDeleteMe = true;
            this.mTimeBonusEffect.mRefCount--;
        }
        this.mTimeBonusEffect = null;
    },
    Init : function Game_SpeedCollectEffect$Init(thePiece) {
        this.mSplineInterp.mAppUpdateCountSrc = this.mFXManager;
        this.mScaleCv.mAppUpdateCountSrc = this.mFXManager;
        this.mSplineInterp.SetCurve('b-0,1,0.016667,2,####   R0+vy      N~TJe');
        this.mSplineInterp.SetInRange(0.0, this.mSplineInterp.mInMax * this.mTimeMod);
        this.mAlphaOut.SetCurve('b-0,1,0,1,~###      H~###   X####');
        this.mAlphaOut.mIncRate = this.mSplineInterp.mIncRate;
        this.mAlphaOut.mInMax = this.mSplineInterp.mInMax + 0.0;
        this.mScaleCv.SetConstant(1.0);
        this.mSpline.AddPoint(this.mX, this.mY);
        this.mSpline.AddPoint(520, 150);
        this.mSpline.AddPoint(this.mTargetPoint.x, this.mTargetPoint.y);
        this.mSpline.CalculateSpline(false);
        this.mSparkles = new Game.ParticleEffect(Game.Resources['PIEFFECT_QUEST_DIG_COLLECT_GOLD']);
        this.mSparkles.SetEmitAfterTimeline(true);
        this.mSparkles.mDoDrawTransform = false;
        this.mSparkles.mRefCount++;
        this.mFXManager.AddEffect(this.mSparkles);
        var fxArr = this.mFXManager.mBoard.mPostFXManager.mEffects[(Game.Effect.EFxType.TIME_BONUS | 0)];
        for(var i = 0; i < fxArr.length; ++i) {
            var anEffect = fxArr[(i | 0)];
            if(anEffect.mPieceIdRel == thePiece.mId) {
                this.mTimeBonusEffect = anEffect;
                this.mTimeBonusEffect.mLightIntensity = 6.0;
                this.mTimeBonusEffect.mLightSize = 300.0;
                this.mTimeBonusEffect.mValue = Array.Create(2, null);
                this.mTimeBonusEffect.mValue[0] = 50.0;
                this.mTimeBonusEffect.mValue[1] = -0.0005;
                this.mTimeBonusEffect.mRefCount++;
                this.mTimeBonusEffect.mPieceIdRel = -1;
                this.mTimeBonusEffect.mOverlay = true;
                this.mTimeBonusEffect.mCirclePct.SetCurve('b+0,1,0.04,1,####         ~~###');
                this.mTimeBonusEffect.mRadiusScale.SetCurve('b+0.65,1,0.02,1,~n%T         ~#?j,');
                break;
            }
        }
    },
    CalcRotation : function Game_SpeedCollectEffect$CalcRotation() {
        if(this.mCentering) {
            return 0.0;
        }
        if(!this.mSplineInterp.HasBeenTriggered()) {
            var rotation = Math.atan2(this.mLastPoint.y - this.mY, this.mX - this.mLastPoint.x);
            var deltaRotation = rotation - this.mLastRotation;
            deltaRotation = (deltaRotation < 0.0 ? -1.0 : 1.0) * Math.min(0.03, Math.abs(deltaRotation));
            this.mLastRotation += deltaRotation;
            this.mLastPoint.x = (this.mX | 0);
            this.mLastPoint.y = (this.mY | 0);
        }
        return this.mLastRotation;
    },
    Update : function Game_SpeedCollectEffect$Update() {
        Game.Effect.prototype.Update.apply(this);
        ++this.mUpdateCnt;
        if(this.mCentering) {
            this.mX = this.mStartPoint.x + this.mSplineInterp.GetOutVal() * (this.mFXManager.mBoard.GetBoardCenterX() - this.mStartPoint.x);
            this.mY = this.mStartPoint.y + this.mSplineInterp.GetOutVal() * (this.mFXManager.mBoard.GetBoardCenterY() - this.mStartPoint.y);
            if(!this.mSplineInterp.IncInVal()) {
                Game.SoundUtil.Play(Game.Resources['SOUND_QUEST_GET']);
                this.mSplineInterp.SetCurve('b-0,1,0.01,2,####  `D2UB       A~###');
                this.mSplineInterp.SetInRange(0.0, this.mSplineInterp.mInMax * this.mTimeMod);
                this.mCentering = false;
                this.mSpline.AddPoint(this.mX, this.mY);
                this.mSpline.AddPoint(800, 150);
                this.mSpline.AddPoint(600, 175);
                this.mSpline.AddPoint(400, 150);
                this.mSpline.AddPoint(200, 300);
                this.mSpline.AddPoint(this.mTargetPoint.x, this.mTargetPoint.y);
                this.mSpline.CalculateSpline(false);
                this.mScaleCv.SetCurve('b;1,3,0.01,1,~###  q####       0####');
                this.mScaleCv.SetInRange(0.0, this.mScaleCv.mInMax * this.mTimeMod);
            }
        }

        else {
            this.mX = this.mSpline.GetXPoint(this.mSplineInterp.GetOutVal() * this.mSpline.GetMaxT());
            this.mY = this.mSpline.GetYPoint(this.mSplineInterp.GetOutVal() * this.mSpline.GetMaxT());
        }
        if(this.mSparkles != null) {
            this.mSparkles.mX = this.mX + -30;
            this.mSparkles.mY = this.mY + -20;
        }
        if(this.mTimeBonusEffect != null) {
            this.mTimeBonusEffect.mX = this.mX;
            this.mTimeBonusEffect.mY = this.mY;
        }
        this.mScaleCv.IncInVal();
        if(this.mCentering) {
            return;
        }
        if(!this.mSplineInterp.IncInVal()) {
        }
        if(this.mAlphaOut.IsDoingCurve()) {
            if(this.mAlphaOut.CheckUpdatesFromEndThreshold(10)) {
                this.mBoard.TimeCollected(this.mTimeCollected);
            }
            if(!this.mAlphaOut.IncInVal()) {
                this.mDeleteMe = true;
            }
            if(this.mSparkles != null) {
                this.mSparkles.mAlpha = this.mAlphaOut.GetOutVal();
            }
            if(this.mTimeBonusEffect != null) {
                this.mTimeBonusEffect.mAlpha = this.mAlphaOut.GetOutVal();
            }
        }
    },
    Draw : function Game_SpeedCollectEffect$Draw(g) {
    },
    WantExpandedTopWidget : function Game_SpeedCollectEffect$WantExpandedTopWidget() {
        return 1;
    }
}
Game.SpeedCollectEffect.staticInit = function Game_SpeedCollectEffect$staticInit() {
}

JS_AddInitFunc(function() {
    Game.SpeedCollectEffect.registerClass('Game.SpeedCollectEffect', Game.Effect);
});
JS_AddStaticInitFunc(function() {
    Game.SpeedCollectEffect.staticInit();
});
/**
 * @constructor
 */
Game.LightningBarFillEffect = function Game_LightningBarFillEffect() {
    this.mPoints = Array.Create2D(Game.LightningBarFillEffect.NUM_BARFILL_LIGTNING_POINTS, 2, null);
    Game.LightningBarFillEffect.initializeBase(this, [Game.Effect.EFxType.CUSTOMCLASS]);
    this.mPercentDone = 0.0;
    for(var i = 0; i < Game.LightningBarFillEffect.NUM_BARFILL_LIGTNING_POINTS; ++i) {
        for(var j = 0; j < 2; ++j) {
            this.mPoints[this.mPoints.mIdxMult0 * (i) + j] = new GameFramework.geom.TPoint();
        }
    }
}
Game.LightningBarFillEffect.prototype = {
    mPoints : null,
    mPercentDone : 0,
    Update : function Game_LightningBarFillEffect$Update() {
        var isNew = this.mPercentDone == 0.0;
        this.mPercentDone += 0.012 * 1.67;
        if(this.mPercentDone > 1.0) {
            this.mDeleteMe = true;
            return;
        }
        var aPullFactor = Math.max(0.0, 1.0 - ((1.0 - this.mPercentDone) * 3.0));
        if((this.mFXManager.mBoard.mUpdateCnt % 2 == 0) || (isNew)) {
            var aStartX = 200;
            var aStartY = 320;
            var anEndX = 550 + this.mFXManager.mBoard.mLevelBarPct * 1000;
            var anEndY = 70;
            for(var aLightningPointNum = 0; aLightningPointNum < Game.LightningBarFillEffect.NUM_BARFILL_LIGTNING_POINTS; aLightningPointNum++) {
                var aDistAlong = aLightningPointNum / (Game.LightningBarFillEffect.NUM_BARFILL_LIGTNING_POINTS - 1);
                var aCenterMult = 1.0 - Math.abs(1.0 - aDistAlong * 2.0);
                var aCenterX = (aStartX * (1.0 - aDistAlong)) + (anEndX * aDistAlong) + aCenterMult * (GameFramework.Utils.GetRandFloat() * 60.0);
                var aCenterY = (aStartY * (1.0 - aDistAlong)) + (anEndY * aDistAlong) + aCenterMult * (GameFramework.Utils.GetRandFloat() * 60.0);
                var aPoint = this.mPoints[this.mPoints.mIdxMult0 * (aLightningPointNum) + 0];
                var aPointR = this.mPoints[this.mPoints.mIdxMult0 * (aLightningPointNum) + 1];
                if((aLightningPointNum == 0) || (aLightningPointNum == Game.LightningBarFillEffect.NUM_BARFILL_LIGTNING_POINTS - 1)) {
                    aPoint.x = aCenterX;
                    aPoint.y = aCenterY;
                    aPointR.x = aCenterX;
                    aPointR.y = aCenterY;
                }

                else {
                    var aWidthMult = 60.0;
                    aPoint.x = aCenterX + GameFramework.Utils.GetRandFloat() * aWidthMult;
                    aPoint.y = aCenterY + GameFramework.Utils.GetRandFloat() * aWidthMult;
                    aPointR.x = aCenterX + GameFramework.Utils.GetRandFloat() * aWidthMult;
                    aPointR.y = aCenterY + GameFramework.Utils.GetRandFloat() * aWidthMult;
                }
            }
        }
    },
    Draw : function Game_LightningBarFillEffect$Draw(g) {
        var aBrightness = Math.min((1.0 - this.mPercentDone) * 8.0, 1.0) * this.mFXManager.mBoard.GetPieceAlpha();
        var aCenterColor = ((aBrightness * 255.0) | 0);
        if(GameFramework.BaseApp.mApp.get_Is3D()) {
            var aTriVertices = Array.Create2D((Game.LightningBarFillEffect.NUM_BARFILL_LIGTNING_POINTS - 1) * 2, 3, null);
            for(var i = 0; i < (Game.LightningBarFillEffect.NUM_BARFILL_LIGTNING_POINTS - 1) * 2; i++) {
                aTriVertices[aTriVertices.mIdxMult0 * (i) + 0] = new GameFramework.gfx.TriVertex();
                aTriVertices[aTriVertices.mIdxMult0 * (i) + 1] = new GameFramework.gfx.TriVertex();
                aTriVertices[aTriVertices.mIdxMult0 * (i) + 2] = new GameFramework.gfx.TriVertex();
            }
            var aTriCount = 0;
            var aColor = GameFramework.gfx.Color.RGBAToInt(255, 200, 100, aCenterColor);
            for(var aLightningPointNum = 0; aLightningPointNum < Game.LightningBarFillEffect.NUM_BARFILL_LIGTNING_POINTS - 1; aLightningPointNum++) {
                var aPoint = this.mPoints[this.mPoints.mIdxMult0 * (aLightningPointNum) + 0];
                var aPointR = this.mPoints[this.mPoints.mIdxMult0 * (aLightningPointNum) + 1];
                var aPointD = this.mPoints[this.mPoints.mIdxMult0 * (aLightningPointNum + 1) + 0];
                var aPointRD = this.mPoints[this.mPoints.mIdxMult0 * (aLightningPointNum + 1) + 1];
                var aV = aLightningPointNum / (Game.LightningBarFillEffect.NUM_BARFILL_LIGTNING_POINTS - 1);
                var aVD = (aLightningPointNum + 1) / (Game.LightningBarFillEffect.NUM_BARFILL_LIGTNING_POINTS - 1);
                if(aLightningPointNum == 0) {
                    var aTri = aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 0];
                    aTri.x = aPoint.x;
                    aTri.y = aPoint.y;
                    aTri.u = 0.5;
                    aTri.v = aV;
                    aTri.color = aColor;
                    aTri = aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 1];
                    aTri.x = aPointRD.x;
                    aTri.y = aPointRD.y;
                    aTri.u = 1.0;
                    aTri.v = aVD;
                    aTri.color = aColor;
                    aTri = aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 2];
                    aTri.x = aPointD.x;
                    aTri.y = aPointD.y;
                    aTri.u = 0.0;
                    aTri.v = aVD;
                    aTri.color = aColor;
                    aTriCount++;
                } else if(aLightningPointNum == Game.LightningBarFillEffect.NUM_BARFILL_LIGTNING_POINTS - 2) {
                    var aTri_2 = aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 0];
                    aTri_2.x = aPoint.x;
                    aTri_2.y = aPoint.y;
                    aTri_2.u = 0.0;
                    aTri_2.v = aV;
                    aTri_2.color = aColor;
                    aTri_2 = aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 1];
                    aTri_2.x = aPointR.x;
                    aTri_2.y = aPointR.y;
                    aTri_2.u = 1.0;
                    aTri_2.v = aV;
                    aTri_2.color = aColor;
                    aTri_2 = aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 2];
                    aTri_2.x = aPointD.x;
                    aTri_2.y = aPointD.y;
                    aTri_2.u = 0.5;
                    aTri_2.v = aVD;
                    aTri_2.color = aColor;
                    aTriCount++;
                } else {
                    var aTri_3 = aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 0];
                    aTri_3.x = aPoint.x;
                    aTri_3.y = aPoint.y;
                    aTri_3.u = 0.0;
                    aTri_3.v = aV;
                    aTri_3.color = aColor;
                    aTri_3 = aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 1];
                    aTri_3.x = aPointRD.x;
                    aTri_3.y = aPointRD.y;
                    aTri_3.u = 1.0;
                    aTri_3.v = aVD;
                    aTri_3.color = aColor;
                    aTri_3 = aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 2];
                    aTri_3.x = aPointD.x;
                    aTri_3.y = aPointD.y;
                    aTri_3.u = 0.0;
                    aTri_3.v = aVD;
                    aTri_3.color = aColor;
                    aTriCount++;
                    aTri_3 = aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 0];
                    aTri_3.x = aPoint.x;
                    aTri_3.y = aPoint.y;
                    aTri_3.u = 0.0;
                    aTri_3.v = aV;
                    aTri_3.color = aColor;
                    aTri_3 = aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 1];
                    aTri_3.x = aPointR.x;
                    aTri_3.y = aPointR.y;
                    aTri_3.u = 1.0;
                    aTri_3.v = aV;
                    aTri_3.color = aColor;
                    aTri_3 = aTriVertices[aTriVertices.mIdxMult0 * (aTriCount) + 2];
                    aTri_3.x = aPointRD.x;
                    aTri_3.y = aPointRD.y;
                    aTri_3.u = 1.0;
                    aTri_3.v = aVD;
                    aTri_3.color = aColor;
                    aTriCount++;
                }
            }
            Game.Resources['IMAGE_LIGHTNING_TEX'].set_Additive(true);
            g.DrawTrianglesTex(Game.Resources['IMAGE_LIGHTNING_TEX'], aTriVertices);
            var aCenterColorI = GameFramework.gfx.Color.RGBAToInt(aCenterColor, aCenterColor, aCenterColor, 255);

            {
                var $srcArray21 = aTriVertices;
                for(var $enum21 = 0; $enum21 < $srcArray21.length; $enum21++) {
                    var aTriVertex = $srcArray21[$enum21];
                    aTriVertex.color = aCenterColorI;
                }
            }
            Game.Resources['IMAGE_LIGHTNING_CENTER'].set_Additive(true);
            g.DrawTrianglesTex(Game.Resources['IMAGE_LIGHTNING_CENTER'], aTriVertices);
        }

        else {
            var aColor_2 = GameFramework.gfx.Color.RGBToInt(255, 200, 100);
            for(var aLightningPointNum_2 = 0; aLightningPointNum_2 < Game.LightningBarFillEffect.NUM_BARFILL_LIGTNING_POINTS - 1; aLightningPointNum_2++) {
                var aPoint_2 = this.mPoints[this.mPoints.mIdxMult0 * (aLightningPointNum_2) + 0];
                var aPointR_2 = this.mPoints[this.mPoints.mIdxMult0 * (aLightningPointNum_2) + 1];
                var aPointD_2 = this.mPoints[this.mPoints.mIdxMult0 * (aLightningPointNum_2 + 1) + 0];
                var aPointRD_2 = this.mPoints[this.mPoints.mIdxMult0 * (aLightningPointNum_2 + 1) + 1];
                var aSidePct = 0.3;
                var aCenterX = ((aPoint_2.x) * aSidePct) + ((aPointR_2.x) * (1.0 - aSidePct));
                var aCenterY = ((aPoint_2.y) * aSidePct) + ((aPointR_2.y) * (1.0 - aSidePct));
                var aCenterRX = ((aPointR_2.x) * aSidePct) + ((aPoint_2.x) * (1.0 - aSidePct));
                var aCenterRY = ((aPointR_2.y) * aSidePct) + ((aPoint_2.y) * (1.0 - aSidePct));
                var aCenterDX = ((aPointD_2.x) * aSidePct) + ((aPointRD_2.x) * (1.0 - aSidePct));
                var aCenterDY = ((aPointD_2.y) * aSidePct) + ((aPointRD_2.y) * (1.0 - aSidePct));
                var aCenterRDX = ((aPointRD_2.x) * aSidePct) + ((aPointD_2.x) * (1.0 - aSidePct));
                var aCenterRDY = ((aPointRD_2.y) * aSidePct) + ((aPointD_2.y) * (1.0 - aSidePct));
                var aPt = Array.Create2D(3, 2, null);
                var _t22 = g.PushColor(aColor_2);
                try {
                    aPt[aPt.mIdxMult0 * (0) + 0] = (aPoint_2.x | 0);
                    aPt[aPt.mIdxMult0 * (0) + 1] = (aPoint_2.y | 0);
                    aPt[aPt.mIdxMult0 * (1) + 0] = (aPointRD_2.x | 0);
                    aPt[aPt.mIdxMult0 * (1) + 1] = (aPointRD_2.y | 0);
                    aPt[aPt.mIdxMult0 * (2) + 0] = (aPointD_2.x | 0);
                    aPt[aPt.mIdxMult0 * (2) + 1] = (aPointD_2.y | 0);
                    aPt[aPt.mIdxMult0 * (0) + 0] = (aPoint_2.x | 0);
                    aPt[aPt.mIdxMult0 * (0) + 1] = (aPoint_2.y | 0);
                    aPt[aPt.mIdxMult0 * (1) + 0] = (aPointR_2.x | 0);
                    aPt[aPt.mIdxMult0 * (1) + 1] = (aPointR_2.y | 0);
                    aPt[aPt.mIdxMult0 * (2) + 0] = (aPointRD_2.x | 0);
                    aPt[aPt.mIdxMult0 * (2) + 1] = (aPointRD_2.y | 0);
                } finally {
                    _t22.Dispose();
                }
                var _t23 = g.PushColor(GameFramework.gfx.Color.RGBAToInt(255, 255, 255, aCenterColor));
                try {
                    aPt[aPt.mIdxMult0 * (0) + 0] = (aCenterX | 0);
                    aPt[aPt.mIdxMult0 * (0) + 1] = (aCenterY | 0);
                    aPt[aPt.mIdxMult0 * (1) + 0] = (aCenterRDX | 0);
                    aPt[aPt.mIdxMult0 * (1) + 1] = (aCenterRDY | 0);
                    aPt[aPt.mIdxMult0 * (2) + 0] = (aCenterDX | 0);
                    aPt[aPt.mIdxMult0 * (2) + 1] = (aCenterDY | 0);
                    g.PolyFill(aPt);
                    aPt[aPt.mIdxMult0 * (0) + 0] = (aCenterX | 0);
                    aPt[aPt.mIdxMult0 * (0) + 1] = (aCenterY | 0);
                    aPt[aPt.mIdxMult0 * (1) + 0] = (aCenterRX | 0);
                    aPt[aPt.mIdxMult0 * (1) + 1] = (aCenterRY | 0);
                    aPt[aPt.mIdxMult0 * (2) + 0] = (aCenterRDX | 0);
                    aPt[aPt.mIdxMult0 * (2) + 1] = (aCenterRDY | 0);
                    g.PolyFill(aPt);
                } finally {
                    _t23.Dispose();
                }
            }
        }
    }
}
Game.LightningBarFillEffect.staticInit = function Game_LightningBarFillEffect$staticInit() {
    Game.LightningBarFillEffect.NUM_BARFILL_LIGTNING_POINTS = 8;
}

JS_AddInitFunc(function() {
    Game.LightningBarFillEffect.registerClass('Game.LightningBarFillEffect', Game.Effect);
});
JS_AddStaticInitFunc(function() {
    Game.LightningBarFillEffect.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\SpeedBoard.cs
//LineMap:2=3 5=21 7=16 8=22 17=26 22=32 32=43 50=60 59=65 62=129 64=109 66=117 70=128 71=130 73=133 74=137 76=148 80=153 84=158 86=161 138=164 143=172 166=196 169=200 170=202 183=216 188=235 192=240 194=243 196=246 200=251 202=254 204=257 205=259 218=283 220=289 225=295 
//LineMap:228=299 232=314 233=323 243=331 244=334 246=338 255=348 257=351 278=373 298=394 321=418 337=435 345=444 364=461 366=465 370=470 378=479 381=483 384=487 390=492 396=499 397=501 399=504 400=506 402=510 407=516 409=519 414=543 416=546 421=552 428=560 431=564 434=566 
//LineMap:439=570 445=575 452=581 457=587 459=590 467=597 472=601 477=605 482=611 486=616 499=628 504=632 511=637 512=643 514=646 516=649 518=652 523=658 533=667 538=673 542=678 553=690 579=715 583=718 584=720 586=723 588=726 589=728 590=730 591=732 594=740 595=742 596=744 
//LineMap:599=748 601=753 602=757 604=762 606=765 607=767 610=771 612=774 613=776 615=779 617=782 625=791 630=797 632=800 634=803 636=806 639=810 643=815 648=821 649=823 652=827 664=840 665=842 668=846 670=849 672=852 673=855 675=856 678=858 680=858 682=859 683=859 685=859 
//LineMap:687=860 688=860 691=862 692=864 698=872 699=874 700=876 701=878 705=883 710=890 713=895 715=898 724=905 726=910 728=913 730=914 731=916 736=922 740=925 742=932 754=945 765=957 769=962 771=966 776=972 777=974 783=981 785=984 786=989 787=991 790=996 795=1002 
//LineMap:797=1005 808=1015 815=1025 821=1032 826=1036 828=1041 830=1044 846=1064 847=1066 850=1070 852=1074 855=1079 858=1083 859=1089 868=1102 869=1104 872=1108 874=1111 877=1116 880=1120 881=1122 884=1127 886=1130 889=1132 892=1137 897=1143 903=1150 905=1153 908=1157 
//LineMap:916=1171 922=1178 931=1189 935=1194 936=1197 958=1220 959=1222 960=1240 963=1244 970=1250 971=1252 973=1255 974=1257 979=1264 983=1269 987=1274 988=1276 989=1278 991=1281 993=1282 997=1287 999=1290 1003=1296 1006=1300 1012=1307 1014=1314 1020=1323 1021=1325 
//LineMap:1030=1335 1036=1343 1040=1348 1041=1350 1045=1355 1048=1380 1059=1390 1062=1394 1068=1401 1074=1406 1077=1410 1081=1415 1083=1420 1084=1422 1085=1424 1087=1427 1088=1429 1100=1438 1106=1445 1115=1452 1122=1455 1127=1459 1136=1497 1138=1500 1141=1504 1151=1511 
//LineMap:1153=1516 1155=1519 1160=1522 1162=1526 1167=1533 1170=1535 1174=1541 1175=1543 1179=1548 1184=1551 1192=1554 1196=1559 1197=1561 1203=1568 1204=1570 1212=1579 1218=1584 1219=1588 1222=1590 1228=1593 1233=1597 1240=1601 1243=1605 1245=1608 1251=1610 1252=1612 
//LineMap:1254=1615 1256=1618 1259=1619 1265=1621 1271=1626 1274=1631 1276=1634 1285=1640 1288=1642 1294=1645 1299=1649 1306=1653 1307=1655 1310=1657 1316=1660 1321=1664 1325=1669 1332=1673 1340=1677 1342=1680 1348=1687 1349=1689 1350=1696 1369=1710 1374=1720 1396=1725 
//LineMap:1399=1734 1401=1729 1403=1733 1404=1735 1417=1742 1421=1747 1422=1749 1428=1756 1435=1764 1442=1773 1448=1780 1451=1782 1455=1787 1457=1788 1460=1790 1462=1790 1464=1791 1465=1791 1467=1791 1469=1792 1470=1792 1472=1792 1474=1793 1475=1793 1477=1793 1479=1794 
//LineMap:1480=1794 1482=1794 1484=1795 1485=1795 1487=1795 1489=1796 1490=1796 1492=1796 1494=1797 1495=1797 1499=1802 1504=1806 1517=1812 1530=1820 1533=1830 1535=1825 1537=1829 1538=1831 1553=1839 1557=1844 1558=1846 1564=1853 1571=1861 1574=1865 1575=1868 1577=1871 
//LineMap:1585=1880 1598=1894 1601=1898 1603=1901 1604=1906 1605=1908 1607=1911 1609=1914 1610=1917 1611=1922 1614=1926 1618=1931 1623=1937 1629=1941 1631=1945 1640=1955 1642=1956 1647=1964 1648=1972 1655=1980 1660=1986 1661=1988 1664=1992 1670=1996 1672=2000 1674=2000 
//LineMap:1676=2004 1678=2004 1680=2008 1683=2008 1685=2013 1689=2015 1691=2019 1693=2019 1695=2023 1697=2023 1699=2027 1702=2031 1704=2032 1709=2035 1711=2039 1712=2041 1714=2041 1716=2045 1718=2045 1720=2049 1722=2052 1724=2055 1726=2058 1730=2063 1732=2066 1734=2069 
//LineMap:1741=2077 1743=2080 1745=2083 1749=2088 1752=2092 1755=2096 1760=2102 1766=2109 1770=2114 1774=2119 1780=2124 1781=2126 1784=2127 1786=2131 1788=2134 1791=2138 1793=2139 1796=2143 1804=2152 1823=2172 1827=2178 1829=2181 1833=2186 1834=2188 1838=2193 1842=2198 
//LineMap:1843=2200 1844=2202 1846=2206 1851=2243 1853=2244 1862=2254 1871=2264 1880=2274 1889=2284 1898=2294 1908=2308 1913=2351 1917=2356 1920=2358 1922=2361 1927=2367 1928=2369 1933=2373 1934=2378 1937=2380 1950=2386 1953=2390 1957=2393 1962=2399 1964=2402 1968=2407 
//LineMap:1979=2419 1983=2424 1988=2430 1990=2433 1993=2437 1995=2440 2001=2447 2008=2455 2010=2460 2011=2469 2018=2477 2023=2483 2025=2486 2026=2496 2037=2504 2056=2513 2059=2538 2061=2515 2065=2525 2068=2537 2069=2539 2103=2555 2111=2564 2123=2577 2125=2580 2128=2584 
//LineMap:2129=2586 2133=2591 2138=2597 2164=2624 2180=2641 2184=2646 2187=2650 2190=2654 2197=2662 2204=2668 2207=2672 2212=2678 2217=2684 2218=2686 2220=2689 2223=2697 2229=2704 2231=2708 2233=2711 2240=2717 2255=2727 2258=2735 2260=2731 2261=2734 2262=2736 2263=2738 
//LineMap:2272=2743 2275=2747 2281=2754 2282=2756 2286=2761 2288=2764 2291=2768 2292=2770 2294=2773 2296=2776 2306=2787 2307=2789 2320=2803 2322=2807 2323=2809 2329=2816 2331=2819 2337=2826 2339=2829 2341=2832 2347=2839 2353=2846 2359=2853 2361=2853 2363=2858 2369=2865 
//LineMap:2375=2872 2381=2879 2383=2882 2391=2891 2397=2898 2403=2905 2404=2907 2410=2914 2416=2921 2422=2928 2425=2932 2427=2935 2430=2936 2434=2937 2437=2938 2441=2946 2443=2947 2444=2949 2450=2956 2451=2958 2459=2967 2460=2973 2463=2975 2469=2984 2483=2997 2490=3005 
//LineMap:2508=2729 
//Start:SpeedEndLevelDialog
/**
 * @constructor
 */
Game.SpeedEndLevelDialog = function Game_SpeedEndLevelDialog(theBoard) {
    Game.SpeedEndLevelDialog.initializeBase(this, [theBoard]);
    this.mSpeedBoard = theBoard;
    this.mTotalBonusTime = this.mSpeedBoard.mTotalBonusTime;
}
Game.SpeedEndLevelDialog.prototype = {
    mSpeedBoard : null,
    mTotalBonusTime : 0,
    Update : function Game_SpeedEndLevelDialog$Update() {
        Game.EndLevelDialog.prototype.Update.apply(this);
    },
    DrawStatsLabels : function Game_SpeedEndLevelDialog$DrawStatsLabels(g) {
        g.DrawStringEx('Highest Multiplier', 230, 475 + 48 * 0, -1, -1);
        g.DrawStringEx('Best Move', 230, 475 + 48 * 1, -1, -1);
        g.DrawStringEx('Longest Cascade', 230, 475 + 48 * 2, -1, -1);
        g.DrawStringEx('Total Time', 230, 475 + 48 * 3, -1, -1);
    },
    DrawStatsText : function Game_SpeedEndLevelDialog$DrawStatsText(g) {
        g.DrawStringEx(String.format('x{0}', this.mPointMultiplier), 765, 475 + 48 * 0, -1, 1);
        g.DrawStringEx(GameFramework.Utils.CommaSeperate(this.mGameStats[(Game.DM.EStat.BIGGESTMOVE | 0)]), 765, 475 + 48 * 1, -1, 1);
        g.DrawStringEx(GameFramework.Utils.CommaSeperate(this.mGameStats[(Game.DM.EStat.BIGGESTMATCH | 0)]), 765, 475 + 48 * 2, -1, 1);
        var aSeconds = 60 + this.mTotalBonusTime;
        g.DrawStringEx(String.format('{0}:{1:00}', ((aSeconds / 60) | 0), aSeconds % 60), 765, 475 + 48 * 3, -1, 1);
    },
    Draw : function Game_SpeedEndLevelDialog$Draw(g) {
        Game.EndLevelDialog.prototype.Draw.apply(this, [g]);
        var _t1 = g.PushTranslate(-160, 0);
        try {
            g.DrawImage(Game.Resources['IMAGE_GAMEOVER_SECTION_GRAPH'].get_OffsetImage(), 0, 0);
            g.DrawImage(Game.Resources['IMAGE_GAMEOVER_LINES'].get_OffsetImage(), 0, 0);
            g.DrawImage(Game.Resources['IMAGE_GAMEOVER_ICON_FLAME'].get_OffsetImage(), 0, 0);
            g.DrawImage(Game.Resources['IMAGE_GAMEOVER_ICON_STAR'].get_OffsetImage(), 0, 0);
            g.DrawImage(Game.Resources['IMAGE_GAMEOVER_ICON_HYPERCUBE'].get_OffsetImage(), 0, 0);
            g.DrawImage(Game.Resources['IMAGE_GAMEOVER_ICON_LIGHTNING'].get_OffsetImage(), 0, 0);
            g.DrawImage(Game.Resources['IMAGE_GAMEOVER_BOX_YELLOW'].get_OffsetImage(), 0, 0);
            g.DrawImage(Game.Resources['IMAGE_GAMEOVER_BOX_PINK'].get_OffsetImage(), 0, 0);
            g.DrawImage(Game.Resources['IMAGE_GAMEOVER_BOX_ORANGE'].get_OffsetImage(), 0, 0);
        } finally {
            _t1.Dispose();
        }
        g.SetFont(Game.Resources['FONT_GAMEOVER_DIALOG_SMALL']);
        Game.Resources['FONT_GAMEOVER_DIALOG_SMALL'].PushLayerColor('OUTLINE', 0xf404020);
        g.DrawString(String.format('FLAME x{0}', this.mGameStats[(Game.DM.EStat.FLAMEGEMS_MADE | 0)]), 276, 723);
        g.DrawString(String.format('STAR x{0}', this.mGameStats[(Game.DM.EStat.LASERGEMS_MADE | 0)]), 467, 723);
        g.DrawString(String.format('HYPER x{0}', this.mGameStats[(Game.DM.EStat.HYPERCUBES_MADE | 0)]), 645, 723);
        g.DrawString(String.format('TIME +{0}:{1:00}', ((this.mTotalBonusTime / 60) | 0), this.mTotalBonusTime % 60), 830, 723);
        g.DrawString('SPEED', 1005, 723);
        g.DrawString('SPECIAL', 1130, 723);
        g.DrawString('MATCHES', 1275, 723);
        Game.Resources['FONT_GAMEOVER_DIALOG_SMALL'].PopLayerColor('OUTLINE');
        var aMaxSectionPoints = 0;
        var aPointTypes = Array.Create(3, 3, Game.Board.EPointType.MATCH, Game.Board.EPointType.SPECIAL, Game.Board.EPointType.SPEED);
        var aTotalPoints = 0;
        for(var aPointSection = 0; aPointSection < (this.mPointsBreakdown.length | 0); aPointSection++) {
            var aCurSectionPoints = 0;
            for(var aPointTypeIdx = 0; aPointTypeIdx < aPointTypes.length; aPointTypeIdx++) {
                aCurSectionPoints += this.mPointsBreakdown[aPointSection][(aPointTypes[aPointTypeIdx] | 0)];
            }
            aMaxSectionPoints = ((Math.max(aMaxSectionPoints, aCurSectionPoints)) | 0);
            aTotalPoints += aCurSectionPoints;
        }
        var aChunkPoints;
        if(aMaxSectionPoints <= 5000) {
            aChunkPoints = 1000;
        } else if(aMaxSectionPoints <= 10000) {
            aChunkPoints = 2000;
        } else {
            aChunkPoints = ((((aMaxSectionPoints + 24999) / 25000) | 0)) * 5000;
        }
        var aCurX = 360;
        var aSectionWidth = ((880 / (this.mPointsBreakdown.length | 0)) | 0);
        g.SetFont(Game.Resources['FONT_GAMEOVER_DIALOG_MED']);
        var _t2 = g.PushColor(0xffd0b090);
        try {
            for(var i = 0; i < 5; i++) {
                g.DrawStringEx(String.format('{0}k', (((i + 1) * aChunkPoints / 1000) | 0)), 330, 975 + i * -46, -1, 1);
            }
        } finally {
            _t2.Dispose();
        }
        for(var aPointSection_2 = 0; aPointSection_2 < (this.mPointsBreakdown.length | 0); aPointSection_2++) {
            for(var aPointTypeIdx_2 = aPointTypes.length - 1; aPointTypeIdx_2 >= 0; aPointTypeIdx_2--) {
                var aCurSectionPoints_2 = 0;
                for(var aPointTypeAdd = 0; aPointTypeAdd <= aPointTypeIdx_2; aPointTypeAdd++) {
                    aCurSectionPoints_2 += this.mPointsBreakdown[aPointSection_2][(aPointTypes[aPointTypeAdd] | 0)];
                }
                var aBarImages = Array.Create(3, 3, Game.Resources['IMAGE_GAMEOVER_BAR__PINK'], Game.Resources['IMAGE_GAMEOVER_BAR_ORANGE'], Game.Resources['IMAGE_GAMEOVER_BAR_YELLOW']);
                var aHeight = ((225.0 * aCurSectionPoints_2 / (aChunkPoints * 5.0) * this.mCountupPct.GetOutVal()) | 0);
                if(aHeight > 0) {
                    aHeight = ((Math.max(aHeight, 10)) | 0);
                    g.DrawImageBox(aBarImages[aPointTypeIdx_2], aCurX + 10, 1005 - aHeight, aSectionWidth - 20, aHeight, 0);
                }
                g.DrawStringCentered((aPointSection_2 == (this.mPointsBreakdown.length | 0) - 1) ? 'Last' : String.format('x{0}', aPointSection_2 + 1), aCurX + ((aSectionWidth / 2) | 0), 1043);
            }
            aCurX += aSectionWidth;
        }
    }
}
Game.SpeedEndLevelDialog.staticInit = function Game_SpeedEndLevelDialog$staticInit() {
}

JS_AddInitFunc(function() {
    Game.SpeedEndLevelDialog.registerClass('Game.SpeedEndLevelDialog', Game.EndLevelDialog);
});
JS_AddStaticInitFunc(function() {
    Game.SpeedEndLevelDialog.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\SpeedEndLevelDialog.cs
//LineMap:1=2 2=4 5=21 7=20 8=22 16=26 29=38 38=49 41=53 44=55 46=58 58=67 64=74 67=78 68=80 69=82 70=84 71=86 74=90 76=93 79=97 82=101 85=105 87=108 91=111 98=115 105=123 106=125 112=132 114=135 
//Start:SpreadCurve
/**
 * @constructor
 */
Game.SpreadCurve = function Game_SpreadCurve(theSize) {
    this.mSize = theSize;
    this.mVals = Array.Create(this.mSize, null);
    for(var i = 0; i < this.mSize; ++i) {
        this.mVals[i] = i / theSize;
    }
}
Game.SpreadCurve.CreateFromCurve = function Game_SpreadCurve$CreateFromCurve(theCurve) {
    var ret = new Game.SpreadCurve(256);
    ret.SetToCurve(theCurve);
    return ret;
}
Game.SpreadCurve.prototype = {
    mVals : null,
    mSize : 0,
    SetToCurve : function Game_SpreadCurve$SetToCurve(theCurve) {
        var tempDist = Array.Create(this.mSize, null);
        for(var i = 0; i < this.mSize; ++i) {
            tempDist[i] = 0.0;
        }
        JS_Assert(theCurve.mOutMax <= 1.0);
        JS_Assert(theCurve.mInMax >= 0.0);
        var total = 0.0;
        for(var i_2 = 0; i_2 < this.mSize; ++i_2) {
            var val = theCurve.GetOutValAt(i_2 / this.mSize);
            tempDist[i_2] += val;
            total += val;
        }
        var cur = 0;
        var tgt = 0.0;
        var sizeDbl = this.mSize;
        for(var i_3 = 0; i_3 < this.mSize; ++i_3) {
            this.mVals[i_3] = 1.0;
            tgt += tempDist[i_3] / total * (sizeDbl - 1.0);
            var val_2 = i_3 / (sizeDbl - 1.0);
            while(cur <= tgt) {
                if(cur < sizeDbl) {
                    JS_Assert(val_2 <= 1.0 && val_2 >= 0.0);
                    this.mVals[cur] = val_2;
                }
                ++cur;
            }
        }
    },
    GetOutVal : function Game_SpreadCurve$GetOutVal(theVal) {
        var idx = (Math.max(0, Math.min(this.mSize - 1, ((theVal * (this.mSize - 1)) | 0))) | 0);
        return this.mVals[idx];
    }
}
Game.SpreadCurve.staticInit = function Game_SpreadCurve$staticInit() {
}

JS_AddInitFunc(function() {
    Game.SpreadCurve.registerClass('Game.SpreadCurve', null);
});
JS_AddStaticInitFunc(function() {
    Game.SpreadCurve.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\SpreadCurve.cs
//LineMap:1=2 2=4 5=11 7=12 9=15 12=19 23=26 28=32 30=35 37=44 40=48 43=52 52=62 57=66 
//Start:Tooltip
/**
 * @constructor
 */
Game.TooltipManager = function Game_TooltipManager() {
    this.mCurrentRequestedPos = new GameFramework.geom.TPoint(0, 0);
    this.mTooltips = [];
    this.mAlpha = new GameFramework.CurvedVal();
    this.mArrowOffset = new GameFramework.CurvedVal();
    Game.TooltipManager.initializeBase(this);
    this.mAlpha.SetCurve('b+0,1,0.01,1,####         ~~###');
    this.mArrowOffset.SetConstant(-16);
}
Game.TooltipManager.prototype = {
    mCurrentRequestedPos : null,
    mCurrentTooltipIdx : 0,
    mTooltips : null,
    mAlpha : null,
    mArrowOffset : null,
    RequestTooltip : function Game_TooltipManager$RequestTooltip(theCallingWidget, theHeaderText, theBodyText, thePos, theWidth, theArrowDir, theTimer) {
        this.RequestTooltipEx(theCallingWidget, theHeaderText, theBodyText, thePos, theWidth, theArrowDir, theTimer, null, null, 0, 0xffffffff);
    },
    RequestTooltipEx : function Game_TooltipManager$RequestTooltipEx(theCallingWidget, theHeaderText, theBodyText, thePos, theWidth, theArrowDir, theTimer, theFontResourceTitle, theFontResource, theHeightAdj, theColor) {
        for(var i = 0; i < (this.mTooltips.length | 0); i++) {
            if((thePos == this.mTooltips[i].mRequestedPos) && (theBodyText == this.mTooltips[i].mBodyText)) {
                this.mTooltips[i].mAppearing = true;
                return;
            }
        }
        var aTip = new Game.Tooltip();
        aTip.mHeaderText = theHeaderText;
        aTip.mBodyText = theBodyText;
        aTip.mRequestedPos = new GameFramework.geom.TPoint(thePos.x, thePos.y);
        aTip.mArrowDir = theArrowDir;
        aTip.mTimer = theTimer;
        aTip.mAppearing = true;
        aTip.mAlphaPct = 0;
        aTip.mWidth = theWidth;
        aTip.mColor = theColor;
        aTip.mFontResourceTitle = theFontResourceTitle != null ? theFontResourceTitle : Game.Resources['FONT_TOOLTIP_BOLD'];
        aTip.mFontResource = theFontResource != null ? theFontResource : Game.Resources['FONT_TOOLTIP'];
        aTip.mHeight = Game.Resources['IMAGE_TOOLTIP'].mHeight - 20;
        var g = new GameFramework.gfx.Graphics(Game.BejApp.mBejApp.mWidth, Game.BejApp.mBejApp.mHeight);
        g.SetFont(aTip.mFontResource);
        var aTextHeight = 0;
        var aTestText = '';
        if(aTip.mHeaderText != '') {
            aTestText += aTip.mHeaderText;
            if(aTip.mBodyText != '') {
                aTestText += '\n';
            }
        }
        if(aTip.mBodyText != '') {
            if(aTextHeight > 0) {
                aTestText += aTip.mBodyText;
            }
        }
        if(aTip.mHeight < aTextHeight + 75) {
            aTip.mHeight = aTextHeight + 75;
        }
        aTip.mHeight += theHeightAdj;
        aTip.mOffsetPos.x = aTip.mRequestedPos.x;
        aTip.mOffsetPos.y = aTip.mRequestedPos.y;
        var anOffset = 20;
        switch(aTip.mArrowDir) {
            case Game.Tooltip.EArrowDir.ARROW_UP:
            {
                aTip.mOffsetPos.x += -aTip.mWidth / 2.0;
                aTip.mOffsetPos.y += anOffset;
                break;
            }
            case Game.Tooltip.EArrowDir.ARROW_DOWN:
            {
                aTip.mOffsetPos.x += -aTip.mWidth / 2.0;
                aTip.mOffsetPos.y += -aTip.mHeight - anOffset;
                break;
            }
            case Game.Tooltip.EArrowDir.ARROW_LEFT:
            {
                aTip.mOffsetPos.x += anOffset;
                aTip.mOffsetPos.y += -aTip.mHeight / 2.0;
                break;
            }
            case Game.Tooltip.EArrowDir.ARROW_RIGHT:
            {
                aTip.mOffsetPos.x += -aTip.mWidth - anOffset;
                aTip.mOffsetPos.y += -aTip.mHeight / 2.0;
                break;
            }
        }
        this.mTooltips.push(aTip);
        this.mCurrentRequestedPos = new GameFramework.geom.TPoint(thePos.x, thePos.y);
    }
}
Game.TooltipManager.staticInit = function Game_TooltipManager$staticInit() {
}

JS_AddInitFunc(function() {
    Game.TooltipManager.registerClass('Game.TooltipManager', GameFramework.widgets.ClassicWidget);
});
JS_AddStaticInitFunc(function() {
    Game.TooltipManager.staticInit();
});
/**
 * @constructor
 */
Game.Tooltip = function Game_Tooltip() {
    this.mRequestedPos = new GameFramework.geom.TPoint(0, 0);
    this.mOffsetPos = new GameFramework.geom.TPoint(0, 0);
}
Game.Tooltip.prototype = {
    mRequestedPos : null,
    mOffsetPos : null,
    mWidth : 0,
    mHeight : 0,
    mArrowDir : null,
    mHeaderText : null,
    mBodyText : null,
    mTimer : 0,
    mAlphaPct : 0,
    mAppearing : null,
    mFontResourceTitle : null,
    mFontResource : null,
    mColor : 0
}
Game.Tooltip.staticInit = function Game_Tooltip$staticInit() {
}

JS_AddInitFunc(function() {
    Game.Tooltip.registerClass('Game.Tooltip', null);
});
JS_AddStaticInitFunc(function() {
    Game.Tooltip.staticInit();
});
Game.Tooltip.EArrowDir = {};
Game.Tooltip.EArrowDir.staticInit = function Game_Tooltip_EArrowDir$staticInit() {
    Game.Tooltip.EArrowDir.ARROW_UP = 0;
    Game.Tooltip.EArrowDir.ARROW_DOWN = 1;
    Game.Tooltip.EArrowDir.ARROW_LEFT = 2;
    Game.Tooltip.EArrowDir.ARROW_RIGHT = 3;
    Game.Tooltip.EArrowDir.NONE = 4;
}
JS_AddInitFunc(function() {
    Game.Tooltip.EArrowDir.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\Tooltip.cs
//LineMap:2=3 5=21 7=14 8=16 12=25 13=28 23=66 30=86 38=95 39=97 41=100 50=112 51=114 53=117 55=120 58=125 61=129 65=134 68=141 70=144 71=148 74=152 75=152 77=155 81=157 87=161 93=165 101=174 110=278 115=289 140=280 143=282 
//Start:TutorialMgr
/**
 * @constructor
 */
Game.TutorialStep = function Game_TutorialStep() {
    this.mType = Game.TutorialStep.EType.ModalDialogOkBtnClear;
    this.mArrowShowPct = GameFramework.CurvedVal.CreateAsConstant(0.0);
    this.mUiAccessibleGems = [];
    this.mHighlightShowPct = GameFramework.CurvedVal.CreateAsConstant(0.0);
    this.mHighlightRect = null;
    this.mDialogInsets = null;
    this.mShowOkBtnCv = null;
    this.mAutohintPieceLoc = null;
    this.mArrowDir = Game.TutorialStep.EArrowDir.None;
    this.mTutorialId = Game.DM.ETutorial._COUNT;
    this.mBlockTimer = Game.TutorialStep.EBlockTimerType.None;
    this.mState = Game.TutorialStep.EState.Init;
    this.mSpecialBehavior = Game.TutorialStep.ESpecialBehavior.None;
    this.mHintDlg = null;
}
Game.TutorialStep.AddGemGridXYToRect = function Game_TutorialStep$AddGemGridXYToRect(theBoard, theRect, theCol, theRow, theHighlightRectGemPadding) {
    if(theHighlightRectGemPadding === undefined) {
        theHighlightRectGemPadding = 0.0;
    }
    var gemRect = new GameFramework.TRect(theBoard.GetColScreenX(theCol) - theHighlightRectGemPadding, theBoard.GetRowScreenY(theRow) - theHighlightRectGemPadding, Game.Board.GEM_WIDTH + theHighlightRectGemPadding * 2.0, Game.Board.GEM_HEIGHT + theHighlightRectGemPadding * 2.0);
    if(theRect == null || theRect.mWidth == 0 || theRect.mHeight == 0) {
        return gemRect;
    }
    return theRect.Union(gemRect);
}
Game.TutorialStep.prototype = {
    mSequence : null,
    mTextHeader : '',
    mText : '',
    mType : null,
    mArrowShowPct : null,
    mUiAccessibleGems : null,
    mLimitUiAccessibleGems : true,
    mHighlightShowPct : null,
    mHighlightRect : null,
    mDialogWidth : 0.0,
    mDialogHeight : 0.0,
    mDialogAnchorX : 0.0,
    mDialogAnchorY : 0.0,
    mDialogInsets : null,
    mDialogSpaceAfterHeader : 0,
    mWantDrawFxOnTop : false,
    mShowOkBtnCv : null,
    mAllowStandardHints : false,
    mAutohintPieceLoc : null,
    mAutohintTime : -1,
    mArrowDir : null,
    mTutorialId : null,
    mArrowX : -1.0,
    mArrowY : -1.0,
    mDelay : 0,
    mBlockDuringDelay : false,
    mBlockTimer : null,
    mBlockTimerParam : 0,
    mBlockTimerParam2 : 0,
    mHighlightRectGemPadding : 10.0,
    mState : null,
    mSpecialBehavior : null,
    mHintDlg : null,
    mUpdateCnt : 0,
    mFinishCountdown : 0,
    Finish : function Game_TutorialStep$Finish() {
        if(this.mSpecialBehavior == Game.TutorialStep.ESpecialBehavior.TimeGem && this.mState != Game.TutorialStep.EState.Finishing) {
            this.mFinishCountdown = ((60.0 * 2.5) | 0);
            this.mState = Game.TutorialStep.EState.Finishing;
        }

        else {
            this.mState = Game.TutorialStep.EState.Finished;
        }
    },
    WasFinished : function Game_TutorialStep$WasFinished() {
        return this.mState == Game.TutorialStep.EState.Finished;
    },
    Kill : function Game_TutorialStep$Kill(theDoFadeOut) {
        if(this.mHintDlg != null) {
            this.mHintDlg.Kill();
        }
        this.mArrowShowPct.SetCurveRef('TutorialMgr_cs_11_14_11__19_18_09_946');
        if(theDoFadeOut) {
            this.mHighlightShowPct.SetCurveRef('TutorialMgr_cs_11_14_11__19_05_53_409');
        } else {
            this.mHighlightShowPct.SetConstant(0.0);
        }
    },
    Update : function Game_TutorialStep$Update() {
        if(this.mShowOkBtnCv != null) {
            this.mShowOkBtnCv.IncInVal();
            if(this.mHintDlg != null) {
                this.mHintDlg.mShowBtnPct = this.mShowOkBtnCv.get_v();
            }
        }
        if(this.mState == Game.TutorialStep.EState.Init) {
            if(this.mDelay > 0) {
                --this.mDelay;
            } else {
                this.Start();
            }
        }

        else {
            ++this.mUpdateCnt;
        }
        if(this.mState != Game.TutorialStep.EState.Finished && this.mFinishCountdown > 0) {
            --this.mFinishCountdown;
            if(this.mFinishCountdown == 0) {
                this.Finish();
            }
        }
    },
    Draw : function Game_TutorialStep$Draw(g) {
        if(this.mHintDlg != null) {
            this.mHintDlg.Move(this.mDialogAnchorX, this.mDialogAnchorY);
        }
        var _t1 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(Math.min(1.0, this.mHighlightShowPct.get_v())));
        try {
            if(this.mHighlightRect != null) {
                if(this.mSpecialBehavior == Game.TutorialStep.ESpecialBehavior.HintBtn) {
                    Game.TutorialMgr.DrawHighlightCircle(g, this.mHighlightRect);
                } else {
                    if(this.mSpecialBehavior == Game.TutorialStep.ESpecialBehavior.MultiplierUp) {
                        var sepX = 450.0;
                        Game.TutorialMgr.DrawHighlightBox(g, new GameFramework.TRect(62.0, 240.0, 360.0, 500.0), new GameFramework.TRect(0, 0, sepX, GameFramework.BaseApp.mApp.mHeight));
                        Game.TutorialMgr.DrawHighlightBox(g, this.mHighlightRect, new GameFramework.TRect(sepX, 0, GameFramework.BaseApp.mApp.mWidth - sepX, GameFramework.BaseApp.mApp.mHeight));
                    } else if(this.mSpecialBehavior == Game.TutorialStep.ESpecialBehavior.TimeGem && (this.mState == Game.TutorialStep.EState.Finishing || this.mState == Game.TutorialStep.EState.Finished)) {
                        var sepX_2 = 450.0;
                        Game.TutorialMgr.DrawHighlightBox(g, new GameFramework.TRect(62.0, 240.0, 360.0, 500.0), new GameFramework.TRect(0, 0, sepX_2, GameFramework.BaseApp.mApp.mHeight));
                        Game.TutorialMgr.DrawHighlightBox(g, this.mHighlightRect, new GameFramework.TRect(sepX_2, 0, GameFramework.BaseApp.mApp.mWidth - sepX_2, GameFramework.BaseApp.mApp.mHeight));
                    } else {
                        Game.TutorialMgr.DrawHighlightBox(g, this.mHighlightRect);
                    }
                }
            }
        } finally {
            _t1.Dispose();
        }
        var _t2 = g.PushColor(GameFramework.gfx.Color.FAlphaToInt(this.mArrowShowPct.get_v()));
        try {
            if(this.mArrowDir != Game.TutorialStep.EArrowDir.None) {
                var rotation = 0.0;
                var extraDist = 50.0 + (Math.sin(this.mUpdateCnt / 10.0) / 2.0 + 0.5) * 50.0;
                var extraX = 0.0;
                var extraY = 0.0;
                var arrRes = Game.Resources['IMAGE_BOARD_HIGHLIGHT_ARROW'];
                if(this.mSpecialBehavior == Game.TutorialStep.ESpecialBehavior.Timer) {
                    extraX -= (this.mSequence.mMgr.mBoard.mGameTicks - 120.0) * 0.25;
                }
                switch(this.mArrowDir) {
                    case Game.TutorialStep.EArrowDir.Down:
                    {
                        rotation = Math.PI / 2.0;
                        extraY += -extraDist;
                        break;
                    }
                    case Game.TutorialStep.EArrowDir.Up:
                    {
                        rotation = -Math.PI / 2.0;
                        extraY += extraDist;
                        break;
                    }
                    case Game.TutorialStep.EArrowDir.Left:
                    {
                        rotation = Math.PI;
                        extraX += extraDist;
                        break;
                    }
                    default:
                    {
                        rotation = 0.0;
                        extraX += -extraDist;
                        break;
                    }
                }
                var m = new GameFramework.geom.Matrix();
                m.translate(-this.mArrowX - arrRes.mWidth / 2.0, -this.mArrowY);
                m.rotate(rotation);
                m.translate(this.mArrowX + extraX, this.mArrowY + extraY);
                g.PushMatrix(m);
                g.DrawImage(arrRes.get_CenteredImage(), this.mArrowX, this.mArrowY);
                g.PopMatrix();
            }
        } finally {
            _t2.Dispose();
        }
    },
    Start : function Game_TutorialStep$Start() {
        this.mState = Game.TutorialStep.EState.Started;
        var aBoard = this.mSequence.mMgr.mBoard;
        if(this.mAutohintPieceLoc != null) {
            var aPiece = aBoard.GetPieceAtColRow(this.mAutohintPieceLoc.x, this.mAutohintPieceLoc.y);
            if(aPiece != null) {
                aBoard.mAutohintOverridePieceId = aPiece.mId;
                aBoard.mAutohintOverrideTime = this.mAutohintTime;
            }
        }

        else {
            aBoard.mAutohintOverridePieceId = -1;
            aBoard.mAutohintOverrideTime = -1;
        }
        if(this.mHighlightShowPct.get_v() == 0.0) {
            this.mHighlightShowPct.SetCurveRef('TutorialMgr_cs_11_11_11__15_19_51_707');
        }
        this.mArrowShowPct.SetCurveRef('TutorialMgr_cs_11_11_11__15_19_51_707');
        if(this.mHintDlg != null) {
            this.mHintDlg.Kill();
        }
        if(this.mType == Game.TutorialStep.EType.ModalDialogOkBtnClear) {
            this.mHintDlg = new Game.HintDialog(this.mTextHeader, this.mText, true, false);
            this.mHintDlg.mWantsDarken = false;
        } else if(this.mType == Game.TutorialStep.EType.ModalDialogMoveClear || this.mType == Game.TutorialStep.EType.ModalDialog) {
            this.mHintDlg = new Game.HintDialog(this.mTextHeader, this.mText, true, false);
            this.mHintDlg.mWantsDarken = false;
            this.mHintDlg.mShowBtnPct = 0.0;
        }
        Game.BejApp.mBejApp.mDialogMgr.AddDialog(this.mHintDlg);
        this.mHintDlg.AddEventListener(GameFramework.widgets.DialogEvent.CLOSED, ss.Delegate.create(this, this.handleHintDialogClosed));
        this.mHintDlg.mFlushPriority = 1;
        if(this.mDialogWidth != 0.0 || this.mDialogHeight != 0.0) {
            if(this.mDialogInsets != null) {
                this.mHintDlg.mContentInsets = this.mDialogInsets;
            }
            if(this.mDialogSpaceAfterHeader != 0) {
                this.mHintDlg.mSpaceAfterHeader = this.mDialogSpaceAfterHeader;
            }
            this.mHintDlg.Resize(this.mHintDlg.mX, this.mHintDlg.mY, this.mDialogWidth != 0.0 ? this.mDialogWidth : this.mHintDlg.mWidth, this.mDialogHeight != 0.0 ? this.mDialogHeight : this.mHintDlg.mHeight);
            this.mHintDlg.mFullHeight = this.mHintDlg.mHeight;
        }
        this.mHintDlg.Move(this.mDialogAnchorX, this.mDialogAnchorY);
    },
    handleHintDialogClosed : function Game_TutorialStep$handleHintDialogClosed(e) {
        this.mState = Game.TutorialStep.EState.Finished;
        if(this.mHintDlg != null && this.mHintDlg.mNoHintsCheckbox.IsChecked()) {
            this.mSequence.mMgr.SetTutorialEnabled(false);
            if(this.mTutorialId != Game.DM.ETutorial._COUNT) {
                Game.BejApp.mBejApp.mBoard.SetTutorialCleared(this.mTutorialId);
            }
        }
    },
    PointArrowAt : function Game_TutorialStep$PointArrowAt(theBoard, theCol, theRow, theArrowDir) {
        var gemRect = new GameFramework.TRect(theBoard.GetColScreenX(theCol), theBoard.GetRowScreenY(theRow), Game.Board.GEM_WIDTH, Game.Board.GEM_HEIGHT);
        this.mArrowDir = theArrowDir;
        this.mArrowX = gemRect.mX + gemRect.mWidth / 2;
        this.mArrowY = gemRect.mY + gemRect.mHeight / 2;
    },
    AddGemGridXY : function Game_TutorialStep$AddGemGridXY(theBoard, theCol, theRow, theIsUISelectable, theAddToHighlightRect) {
        if(theIsUISelectable === undefined) {
            theIsUISelectable = true;
        }
        if(theAddToHighlightRect === undefined) {
            theAddToHighlightRect = true;
        }
        var newPt = new GameFramework.geom.TIntPoint(theCol, theRow);
        if(theIsUISelectable) {
            this.mUiAccessibleGems.push(newPt);
        }
        if(theAddToHighlightRect) {
            this.mHighlightRect = Game.TutorialStep.AddGemGridXYToRect(theBoard, this.mHighlightRect, theCol, theRow, this.mHighlightRectGemPadding);
        }
    }
}
Game.TutorialStep.staticInit = function Game_TutorialStep$staticInit() {
}

JS_AddInitFunc(function() {
    Game.TutorialStep.registerClass('Game.TutorialStep', null);
});
JS_AddStaticInitFunc(function() {
    Game.TutorialStep.staticInit();
});
Game.TutorialStep.EType = {};
Game.TutorialStep.EType.staticInit = function Game_TutorialStep_EType$staticInit() {
    Game.TutorialStep.EType.ModalDialogOkBtnClear = 0;
    Game.TutorialStep.EType.ModalDialogMoveClear = 1;
    Game.TutorialStep.EType.ModalDialog = 2;
}
JS_AddInitFunc(function() {
    Game.TutorialStep.EType.staticInit();
});
Game.TutorialStep.EArrowDir = {};
Game.TutorialStep.EArrowDir.staticInit = function Game_TutorialStep_EArrowDir$staticInit() {
    Game.TutorialStep.EArrowDir.None = -1;
    Game.TutorialStep.EArrowDir.Left = 0;
    Game.TutorialStep.EArrowDir.Right = 1;
    Game.TutorialStep.EArrowDir.Up = 2;
    Game.TutorialStep.EArrowDir.Down = 3;
}
JS_AddInitFunc(function() {
    Game.TutorialStep.EArrowDir.staticInit();
});
Game.TutorialStep.EState = {};
Game.TutorialStep.EState.staticInit = function Game_TutorialStep_EState$staticInit() {
    Game.TutorialStep.EState.Init = 0;
    Game.TutorialStep.EState.Started = 1;
    Game.TutorialStep.EState.Finishing = 2;
    Game.TutorialStep.EState.Finished = 3;
}
JS_AddInitFunc(function() {
    Game.TutorialStep.EState.staticInit();
});
Game.TutorialStep.ESpecialBehavior = {};
Game.TutorialStep.ESpecialBehavior.staticInit = function Game_TutorialStep_ESpecialBehavior$staticInit() {
    Game.TutorialStep.ESpecialBehavior.None = 0;
    Game.TutorialStep.ESpecialBehavior.HintBtn = 1;
    Game.TutorialStep.ESpecialBehavior.Timer = 2;
    Game.TutorialStep.ESpecialBehavior.TimeGem = 3;
    Game.TutorialStep.ESpecialBehavior.MultiplierUp = 4;
}
JS_AddInitFunc(function() {
    Game.TutorialStep.ESpecialBehavior.staticInit();
});
Game.TutorialStep.EBlockTimerType = {};
Game.TutorialStep.EBlockTimerType.staticInit = function Game_TutorialStep_EBlockTimerType$staticInit() {
    Game.TutorialStep.EBlockTimerType.None = 0;
    Game.TutorialStep.EBlockTimerType.Pause = 1;
    Game.TutorialStep.EBlockTimerType.PauseAfterParam = 2;
    Game.TutorialStep.EBlockTimerType.PauseUntilParam = 3;
    Game.TutorialStep.EBlockTimerType.PlayBetweenParams = 4;
    Game.TutorialStep.EBlockTimerType.PauseBetweenParams = 5;
}
JS_AddInitFunc(function() {
    Game.TutorialStep.EBlockTimerType.staticInit();
});
/**
 * @constructor
 */
Game.TutorialSequence = function Game_TutorialSequence() {
    this.mTutorialSteps = [];
}
Game.TutorialSequence.prototype = {
    mTutorialSteps : null,
    mCurStepIdx : -1,
    mRunning : true,
    mMgr : null,
    mBoardSeed : 0,
    mKillStep : null,
    Add : function Game_TutorialSequence$Add(theStep) {
        theStep.mSequence = this;
        this.mTutorialSteps.push(theStep);
    },
    AdvanceStep : function Game_TutorialSequence$AdvanceStep() {
        var wantDisableTutorials = false;
        var aStep = this.GetCurrentStep();
        if(aStep != null && aStep.mHintDlg != null && aStep.mHintDlg.mNoHintsCheckbox.IsChecked()) {
            wantDisableTutorials = true;
        }
        if(aStep != null && aStep.mTutorialId != Game.DM.ETutorial._COUNT) {
            if(wantDisableTutorials) {
                this.mMgr.SetTutorialEnabled(false);
            }
            Game.BejApp.mBejApp.mBoard.SetTutorialCleared(aStep.mTutorialId);
        }
        this.KillCurrent(wantDisableTutorials || this.mCurStepIdx + 1 >= this.mTutorialSteps.length || !this.mMgr.GetTutorialEnabled());
        if(wantDisableTutorials) {
            this.mCurStepIdx = this.mTutorialSteps.length;
        } else if(this.mCurStepIdx < this.mTutorialSteps.length) {
            ++this.mCurStepIdx;
        }
        if(this.mCurStepIdx > 0) {
            aStep = this.GetCurrentStep();
            if(aStep != null) {
                aStep.mHighlightShowPct.SetConstant(1.0);
            }
        }
        return this.mCurStepIdx < this.mTutorialSteps.length;
    },
    GetCurrentStep : function Game_TutorialSequence$GetCurrentStep() {
        if(this.mCurStepIdx < this.mTutorialSteps.length && this.mCurStepIdx >= 0) {
            return this.mTutorialSteps[this.mCurStepIdx];
        }
        return null;
    },
    KillCurrent : function Game_TutorialSequence$KillCurrent(theDoFadeOut) {
        this.mKillStep = this.GetCurrentStep();
        if(this.mKillStep != null) {
            this.mKillStep.Kill(theDoFadeOut);
        }
    },
    HasTutorialQueued : function Game_TutorialSequence$HasTutorialQueued(theTutorial) {
        for(var i = 0; i < this.mTutorialSteps.length; ++i) {
            if(this.mTutorialSteps[i].mTutorialId == theTutorial) {
                return true;
            }
        }
        return false;
    },
    Update : function Game_TutorialSequence$Update() {
        var aStep = this.GetCurrentStep();
        if(aStep == null || aStep.WasFinished()) {
            while(true) {
                this.AdvanceStep();
                var thisStep = this.GetCurrentStep();
                if(thisStep == null || (this.mMgr.GetTutorialFlags() & (1 << (thisStep.mTutorialId | 0))) == 0) {
                    break;
                }
            }
        } else if(aStep != null) {
            aStep.Update();
        }
        if(this.mKillStep != null && this.mKillStep.mArrowShowPct.get_v() + this.mKillStep.mHighlightShowPct.get_v() == 0.0) {
            this.mKillStep = null;
        }
    },
    Draw : function Game_TutorialSequence$Draw(g) {
        var curStep = this.GetCurrentStep();
        if(curStep != null) {
            curStep.Draw(g);
        }
        if(this.mKillStep != null) {
            this.mKillStep.Draw(g);
        }
    }
}
Game.TutorialSequence.staticInit = function Game_TutorialSequence$staticInit() {
}

JS_AddInitFunc(function() {
    Game.TutorialSequence.registerClass('Game.TutorialSequence', null);
});
JS_AddStaticInitFunc(function() {
    Game.TutorialSequence.staticInit();
});
/**
 * @constructor
 */
Game.TutorialMgr = function Game_TutorialMgr(theBoard) {
    Game.TutorialMgr.G = this;
    this.mBoard = theBoard;
    this.mProfile = Game.BejApp.mBejApp.mProfile;
}
Game.TutorialMgr.DrawHighlightCircle = function Game_TutorialMgr$DrawHighlightCircle(g, theRect, theScreenRect) {
    if(theScreenRect === undefined) {
        theScreenRect = null;
    }
    var _t3 = g.PushColor(0xc0000000);
    try {
        var aX1 = g.GetSnappedX(theRect.mX);
        var aX2 = g.GetSnappedX(theRect.mX + theRect.mWidth);
        var aY1 = g.GetSnappedX(theRect.mY);
        var aY2 = g.GetSnappedX(theRect.mY + theRect.mHeight);
        theRect = new GameFramework.TRect(aX1, aY1, aX2 - aX1, aY2 - aY1);
        if(theScreenRect == null) {
            theScreenRect = new GameFramework.TRect(GameFramework.BaseApp.mApp.mX, GameFramework.BaseApp.mApp.mY, GameFramework.BaseApp.mApp.mDrawWidth, GameFramework.BaseApp.mApp.mDrawHeight);
        }
        g.FillRect(theScreenRect.mX, theScreenRect.mY, theRect.mX - theScreenRect.mX, theScreenRect.mHeight);
        g.FillRect(theRect.mX, theScreenRect.mY, theRect.mWidth, theRect.mY);
        g.FillRect(theRect.mX, theRect.mY + theRect.mHeight, theRect.mWidth, theScreenRect.mHeight - (theRect.mY + theRect.mHeight));
        g.FillRect(theRect.mX + theRect.mWidth, theScreenRect.mY, theScreenRect.mWidth - (theRect.mX - theScreenRect.mX + theRect.mWidth), theScreenRect.mHeight);
        var anImageInst = Game.Resources['IMAGE_BOARD_HIGHLIGHT_CIRCLE'].CreateImageInstRect(1, 1, Game.Resources['IMAGE_BOARD_HIGHLIGHT_CIRCLE'].mPhysCelWidth - 2, Game.Resources['IMAGE_BOARD_HIGHLIGHT_CIRCLE'].mPhysCelHeight - 2);
        var _t4 = g.PushScale(theRect.mWidth / (anImageInst.mSrcWidth / g.mScale), theRect.mHeight / (anImageInst.mSrcHeight / g.mScale), aX1, aY1);
        try {
            g.DrawImage(anImageInst, aX1, aY1);
        } finally {
            _t4.Dispose();
        }
    } finally {
        _t3.Dispose();
    }
}
Game.TutorialMgr.DrawHighlightBox = function Game_TutorialMgr$DrawHighlightBox(g, theRect, theScreenRect) {
    if(theScreenRect === undefined) {
        theScreenRect = null;
    }
    if(theScreenRect == null) {
        theScreenRect = new GameFramework.TRect(GameFramework.BaseApp.mApp.mX, GameFramework.BaseApp.mApp.mY, GameFramework.BaseApp.mApp.mDrawWidth, GameFramework.BaseApp.mApp.mDrawHeight);
    }
    var _t5 = g.PushColor(0xc0000000);
    try {
        var aX1 = g.GetSnappedX(theRect.mX);
        var aX2 = g.GetSnappedX(theRect.mX + theRect.mWidth);
        var aY1 = g.GetSnappedX(theRect.mY);
        var aY2 = g.GetSnappedX(theRect.mY + theRect.mHeight);
        theRect = new GameFramework.TRect(aX1, aY1, aX2 - aX1, aY2 - aY1);
        g.FillRect(theScreenRect.mX, theScreenRect.mY, theRect.mX - theScreenRect.mX, theScreenRect.mHeight);
        g.FillRect(theRect.mX, theScreenRect.mY, theRect.mWidth, theRect.mY);
        g.FillRect(theRect.mX, theRect.mY + theRect.mHeight, theRect.mWidth, theScreenRect.mHeight - (theRect.mY + theRect.mHeight));
        g.FillRect(theRect.mX + theRect.mWidth, theScreenRect.mY, theScreenRect.mWidth - (theRect.mX - theScreenRect.mX + theRect.mWidth), theScreenRect.mHeight);
        g.DrawImageBox(Game.Resources['IMAGE_BOARD_HIGHLIGHT_FULL'], theRect.mX, theRect.mY, theRect.mWidth, theRect.mHeight, 0);
    } finally {
        _t5.Dispose();
    }
}
Game.TutorialMgr.prototype = {
    mProfile : null,
    mBoard : null,
    mCurTutorial : null,
    GetTutorialFlags : function Game_TutorialMgr$GetTutorialFlags() {
        return this.mProfile.mTutorialFlags;
    },
    SetTutorialFlags : function Game_TutorialMgr$SetTutorialFlags(theFlags) {
        this.mProfile.mTutorialFlags = theFlags;
    },
    GetTutorialEnabled : function Game_TutorialMgr$GetTutorialEnabled() {
        return this.mProfile.mTutorialEnabled;
    },
    SetTutorialEnabled : function Game_TutorialMgr$SetTutorialEnabled(theEnabled) {
        this.mProfile.mTutorialEnabled = theEnabled;
    },
    GetTutorialSequence : function Game_TutorialMgr$GetTutorialSequence() {
        return this.mCurTutorial;
    },
    SetTutorialSequence : function Game_TutorialMgr$SetTutorialSequence(theSeq) {
        this.mCurTutorial = theSeq;
        if(this.mCurTutorial != null) {
            this.mCurTutorial.mMgr = this;
        }
    },
    Kill : function Game_TutorialMgr$Kill() {
        if(this.mCurTutorial != null) {
            this.mCurTutorial.KillCurrent(true);
            this.mCurTutorial.mRunning = false;
            this.mCurTutorial = null;
        }
    },
    Update : function Game_TutorialMgr$Update() {
        if(this.mCurTutorial != null && this.mCurTutorial.mRunning) {
            this.mCurTutorial.Update();
        }
    },
    GetCurrentStep : function Game_TutorialMgr$GetCurrentStep() {
        if(this.GetTutorialEnabled() && this.mCurTutorial != null) {
            return this.mCurTutorial.GetCurrentStep();
        }
        return null;
    },
    Draw : function Game_TutorialMgr$Draw(g) {
        var a = this.mBoard.GetPieceAlpha();
        if(a != 1.0) {
            g.PushColor(GameFramework.gfx.Color.FAlphaToInt(a));
        }
        if(this.mCurTutorial != null) {
            this.mCurTutorial.Draw(g);
        }
        if(a != 1.0) {
            g.PopColor();
        }
    },
    WantDrawFxOnTop : function Game_TutorialMgr$WantDrawFxOnTop() {
        var aStep = this.GetCurrentStep();
        return aStep != null && aStep.mWantDrawFxOnTop;
    },
    HasClearedTutorial : function Game_TutorialMgr$HasClearedTutorial(theTutorial) {
        return ((this.GetTutorialFlags() & (1 << theTutorial)) != 0) || !this.GetTutorialEnabled();
    },
    AllowHints : function Game_TutorialMgr$AllowHints() {
        var aStep = this.GetCurrentStep();
        return aStep == null || aStep.mAutohintPieceLoc != null || aStep.mAllowStandardHints;
    },
    IsBusy : function Game_TutorialMgr$IsBusy() {
        return this.GetCurrentStep() != null;
    },
    WantsBlockUi : function Game_TutorialMgr$WantsBlockUi() {
        var aStep = this.GetCurrentStep();
        if(aStep != null) {
            return !(aStep.mDelay > 0 && !aStep.mBlockDuringDelay);
        }
        return false;
    },
    IsGridLockedAt : function Game_TutorialMgr$IsGridLockedAt(theCol, theRow) {
        var aStep = this.GetCurrentStep();
        if(aStep != null) {
            if(!aStep.mLimitUiAccessibleGems) {
                return false;
            }

            {
                var $srcArray6 = aStep.mUiAccessibleGems;
                for(var $enum6 = 0; $enum6 < $srcArray6.length; $enum6++) {
                    var pt = $srcArray6[$enum6];
                    if(pt.x == theCol && pt.y == theRow) {
                        return false;
                    }
                }
            }
            return true;
        }
        return false;
    },
    HasTutorialQueued : function Game_TutorialMgr$HasTutorialQueued(theTutorial) {
        if(this.mCurTutorial == null) {
            return false;
        }
        return this.mCurTutorial.HasTutorialQueued(theTutorial);
    },
    WantsBlockTimer : function Game_TutorialMgr$WantsBlockTimer() {
        var aStep = this.GetCurrentStep();
        if(aStep != null) {
            switch(aStep.mBlockTimer) {
                case Game.TutorialStep.EBlockTimerType.None:
                {
                    return false;
                }
                case Game.TutorialStep.EBlockTimerType.Pause:
                {
                    return true;
                }
                case Game.TutorialStep.EBlockTimerType.PauseAfterParam:
                {
                    return aStep.mUpdateCnt > aStep.mBlockTimerParam;
                }
                case Game.TutorialStep.EBlockTimerType.PauseUntilParam:
                {
                    return aStep.mUpdateCnt < aStep.mBlockTimerParam;
                }
                case Game.TutorialStep.EBlockTimerType.PauseBetweenParams:
                {
                    return aStep.mBlockTimerParam < aStep.mUpdateCnt && aStep.mUpdateCnt < aStep.mBlockTimerParam2;
                }
                case Game.TutorialStep.EBlockTimerType.PlayBetweenParams:
                {
                    return aStep.mBlockTimerParam > aStep.mUpdateCnt || aStep.mUpdateCnt > aStep.mBlockTimerParam2;
                }
            }
        }
        return false;
    }
}
Game.TutorialMgr.staticInit = function Game_TutorialMgr$staticInit() {
    Game.TutorialMgr.G = null;
}

JS_AddInitFunc(function() {
    Game.TutorialMgr.registerClass('Game.TutorialMgr', null);
});
JS_AddStaticInitFunc(function() {
    Game.TutorialMgr.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\TutorialMgr.cs
//LineMap:2=3 7=62 8=64 10=69 12=76 13=81 14=84 15=87 16=89 17=96 18=101 22=109 24=109 25=111 28=115 33=60 38=66 41=72 47=79 49=83 54=91 56=94 61=100 65=105 68=118 72=123 78=128 93=144 94=146 105=158 108=162 118=171 120=174 122=177 134=190 141=198 143=199 149=203 151=208 
//LineMap:155=213 157=214 166=220 169=222 176=230 178=233 180=236 181=236 184=238 185=238 187=238 189=239 190=239 191=239 193=239 195=240 196=240 197=240 199=240 201=241 202=241 203=241 211=250 212=252 221=257 225=262 237=273 240=277 242=280 243=282 245=285 250=288 252=293 
//LineMap:256=298 263=306 265=309 274=319 286=332 292=336 293=336 294=338 297=342 309=15 312=17 320=24 330=33 336=40 339=42 349=51 357=350 362=352 367=353 368=355 373=362 379=369 385=376 387=379 389=382 391=387 392=389 394=392 395=394 401=401 408=409 410=412 429=432 
//LineMap:437=441 439=444 440=446 443=450 447=450 448=455 449=457 451=460 462=472 474=479 477=498 479=499 483=547 485=547 486=549 489=551 493=556 494=558 496=564 500=570 501=573 504=574 516=579 518=579 519=581 521=584 524=586 528=591 529=593 546=483 548=483 551=484 553=484 
//LineMap:556=486 558=486 561=487 563=487 566=504 592=531 600=540 602=543 605=601 610=607 612=610 622=621 633=634 645=647 655=658 657=658 661=660 669=669 676=677 685=685 689=687 691=688 693=688 695=689 697=689 699=690 701=690 703=691 705=691 707=692 
//Start:Util
/**
 * @constructor
 */
Game.CheckMatrixInfo = function Game_CheckMatrixInfo() {
}
Game.CheckMatrixInfo.prototype = {
    mProxy : null,
    mMatrixDepth : 0,
    mColorDepth : 0,
    mGraphics : null
}
Game.CheckMatrixInfo.staticInit = function Game_CheckMatrixInfo$staticInit() {
}

JS_AddInitFunc(function() {
    Game.CheckMatrixInfo.registerClass('Game.CheckMatrixInfo', null);
});
JS_AddStaticInitFunc(function() {
    Game.CheckMatrixInfo.staticInit();
});
/**
 * @constructor
 */
Game.ColorTracker = function Game_ColorTracker(g) {
    this.mG = g;
    this.mPushCount = 0;
}
Game.ColorTracker.prototype = {
    mG : null,
    mPushCount : 0,
    Set : function Game_ColorTracker$Set(theColor) {
        this.PopAll();
        this.Push(theColor);
    },
    Push : function Game_ColorTracker$Push(theColor) {
        this.mG.PushColor(theColor);
        ++this.mPushCount;
    },
    Pop : function Game_ColorTracker$Pop() {
        this.mG.PopColor();
        --this.mPushCount;
    },
    PopAll : function Game_ColorTracker$PopAll() {
        for(var i = 0; i < this.mPushCount; ++i) {
            this.mG.PopColor();
        }
        this.mPushCount = 0;
    },
    PopTo : function Game_ColorTracker$PopTo(thePushIdx) {
        for(var i = this.mPushCount; i > thePushIdx; --i) {
            this.mG.PopColor();
            --this.mPushCount;
        }
    }
}
Game.ColorTracker.staticInit = function Game_ColorTracker$staticInit() {
}

JS_AddInitFunc(function() {
    Game.ColorTracker.registerClass('Game.ColorTracker', null);
});
JS_AddStaticInitFunc(function() {
    Game.ColorTracker.staticInit();
});
/**
 * @constructor
 */
Game.BejUtil = function Game_BejUtil() {
}
Game.BejUtil.GetGemColorImage = function Game_BejUtil$GetGemColorImage(theColor) {
    switch(theColor) {
        case Game.DM.EGemColor.BLUE:
        {
            return Game.Resources['IMAGE_GEMS_BLUE'];
        }
        case Game.DM.EGemColor.GREEN:
        {
            return Game.Resources['IMAGE_GEMS_GREEN'];
        }
        case Game.DM.EGemColor.ORANGE:
        {
            return Game.Resources['IMAGE_GEMS_ORANGE'];
        }
        case Game.DM.EGemColor.PURPLE:
        {
            return Game.Resources['IMAGE_GEMS_PURPLE'];
        }
        case Game.DM.EGemColor.RED:
        {
            return Game.Resources['IMAGE_GEMS_RED'];
        }
        case Game.DM.EGemColor.WHITE:
        {
            return Game.Resources['IMAGE_GEMS_WHITE'];
        }
        case Game.DM.EGemColor.YELLOW:
        {
            return Game.Resources['IMAGE_GEMS_YELLOW'];
        }
    }
    JS_Assert(false);
    return Game.Resources['IMAGE_GEMS_WHITE'];
}
Game.BejUtil.GetGemColorImageShadow = function Game_BejUtil$GetGemColorImageShadow(theColor) {
    switch(theColor) {
        case Game.DM.EGemColor.BLUE:
        {
            return Game.Resources['IMAGE_GEMSSHADOW_BLUE'];
        }
        case Game.DM.EGemColor.GREEN:
        {
            return Game.Resources['IMAGE_GEMSSHADOW_GREEN'];
        }
        case Game.DM.EGemColor.ORANGE:
        {
            return Game.Resources['IMAGE_GEMSSHADOW_ORANGE'];
        }
        case Game.DM.EGemColor.PURPLE:
        {
            return Game.Resources['IMAGE_GEMSSHADOW_PURPLE'];
        }
        case Game.DM.EGemColor.RED:
        {
            return Game.Resources['IMAGE_GEMSSHADOW_RED'];
        }
        case Game.DM.EGemColor.WHITE:
        {
            return Game.Resources['IMAGE_GEMSSHADOW_WHITE'];
        }
        case Game.DM.EGemColor.YELLOW:
        {
            return Game.Resources['IMAGE_GEMSSHADOW_YELLOW'];
        }
    }
    JS_Assert(false);
    return Game.Resources['IMAGE_GEMSSHADOW_WHITE'];
}
Game.BejUtil.prototype = {

}
Game.BejUtil.staticInit = function Game_BejUtil$staticInit() {
}

JS_AddInitFunc(function() {
    Game.BejUtil.registerClass('Game.BejUtil', null);
});
JS_AddStaticInitFunc(function() {
    Game.BejUtil.staticInit();
});
/**
 * @constructor
 */
Game.GfxUtil = function Game_GfxUtil() {
}
Game.GfxUtil.GetEllipsisString = function Game_GfxUtil$GetEllipsisString(g, theString, theWidth) {
    if(g.StringWidth(theString) <= theWidth) {
        return theString;
    }
    var aTempString = theString;
    while((aTempString.length > 0) && (g.StringWidth(aTempString + '...') > theWidth)) {
        aTempString = aTempString.remove(aTempString.length - 1);
    }
    return aTempString + '...';
}
Game.GfxUtil.prototype = {

}
Game.GfxUtil.staticInit = function Game_GfxUtil$staticInit() {
}

JS_AddInitFunc(function() {
    Game.GfxUtil.registerClass('Game.GfxUtil', null);
});
JS_AddStaticInitFunc(function() {
    Game.GfxUtil.staticInit();
});
/**
 * @constructor
 */
Game.MathUtil = function Game_MathUtil() {
}
Game.MathUtil.Abs = function Game_MathUtil$Abs(theA) {
    return Math.abs(theA);
}
Game.MathUtil.Min = function Game_MathUtil$Min(theA, theB) {
    return Math.min(theA, theB);
}
Game.MathUtil.Max = function Game_MathUtil$Max(theA, theB) {
    return Math.max(theA, theB);
}
Game.MathUtil.prototype = {

}
Game.MathUtil.staticInit = function Game_MathUtil$staticInit() {
    Game.MathUtil.PI = 3.141593;
    Game.MathUtil.PI_M2 = 6.283185;
    Game.MathUtil.PI_D2 = 1.570796;
    Game.MathUtil.E = 2.71828;
    Game.MathUtil.EPSILON = 0.001;
    Game.MathUtil.EPSILONSQ = 0.000001;
}

JS_AddInitFunc(function() {
    Game.MathUtil.registerClass('Game.MathUtil', null);
});
JS_AddStaticInitFunc(function() {
    Game.MathUtil.staticInit();
});
/**
 * @constructor
 */
Game.SoundUtil = function Game_SoundUtil() {
}
Game.SoundUtil.Play = function Game_SoundUtil$Play(theSound) {
    Game.SoundUtil.PlayEx(theSound, 0.0, 1.0);
}
Game.SoundUtil.PlayEx = function Game_SoundUtil$PlayEx(theSound, thePan, theVolume) {
    GameFramework.BaseApp.mApp.PlaySoundEx(theSound, theVolume, thePan);
}
Game.SoundUtil.PlayVoice = function Game_SoundUtil$PlayVoice(theSound) {
    Game.SoundUtil.PlayVoiceEx(theSound, 0.0, 1.0, -1);
}
Game.SoundUtil.PlayVoiceEx = function Game_SoundUtil$PlayVoiceEx(theSound, thePan, theVolume, theInterruptId) {
    if(Game.SoundUtil.mIgnoreSound) {
        return;
    }
    Game.SoundUtil.PlayEx(theSound, thePan, theVolume);
    if(Game.SoundUtil.mNextVoice != null) {
    }
}
Game.SoundUtil.prototype = {

}
Game.SoundUtil.staticInit = function Game_SoundUtil$staticInit() {
    Game.SoundUtil.mIgnoreSound = false;
    Game.SoundUtil.mNextVoice = null;
}

JS_AddInitFunc(function() {
    Game.SoundUtil.registerClass('Game.SoundUtil', null);
});
JS_AddStaticInitFunc(function() {
    Game.SoundUtil.staticInit();
});
/**
 * @constructor
 */
Game.Util = function Game_Util() {
}
Game.Util.Rand = function Game_Util$Rand() {
    return (Game.Util.gRand.Next() | 0);
}
Game.Util.ReverseIntVector = function Game_Util$ReverseIntVector(theVec) {
    for(var i = 0; i < ((theVec.length / 2) | 0); ++i) {
        var t = theVec[i];
        var swapIdx = theVec.length - 1 - i;
        theVec[i] = theVec[swapIdx];
        theVec[swapIdx] = t;
    }
}
Game.Util.RandWithin = function Game_Util$RandWithin(theMax) {
    return (Game.Util.gRand.Next() | 0) % theMax;
}
Game.Util.DbgDrawCenter = function Game_Util$DbgDrawCenter(g, theRes, theIsWidescreenSrc) {
    Game.Util.DbgDrawMarker(g, (theIsWidescreenSrc ? -160 : 0) + Game.Util.ImgCXOfs(theRes), Game.Util.ImgCYOfs(theRes));
}
Game.Util.DbgDrawMarker = function Game_Util$DbgDrawMarker(g, x, y) {
    var _t1 = g.PushColor(0x0);
    try {
        g.FillRect(x - 12, y - 12, 24, 24);
    } finally {
        _t1.Dispose();
    }
    var _t2 = g.PushColor(0xffff0000);
    try {
        g.FillRect(x - 8, y - 8, 16, 16);
    } finally {
        _t2.Dispose();
    }
    var _t3 = g.PushColor(0xffffffff);
    try {
        g.FillRect(x - 4, y - 4, 8, 8);
    } finally {
        _t3.Dispose();
    }
}
Game.Util.ImgCXOfs = function Game_Util$ImgCXOfs(theRes) {
    return theRes.mOffsetX + ((theRes.mWidth / 2) | 0);
}
Game.Util.ImgCYOfs = function Game_Util$ImgCYOfs(theRes) {
    return theRes.mOffsetY + ((theRes.mHeight / 2) | 0);
}
Game.Util.ControlKey = function Game_Util$ControlKey(theKey) {
    return ((GameFramework.Utils.GetCharCode(theKey) - 65 + 1) | 0);
}
Game.Util.DrawImageStretched = function Game_Util$DrawImageStretched(g, theImg, theNewWidth, theNewHeight, theX, theY, theDrawCentered) {
    var m = new GameFramework.geom.Matrix();
    if(theDrawCentered) {
        m.translate(0 - ((theImg.mWidth / 2) | 0), 0 - ((theImg.mHeight / 2) | 0));
    }
    m.scale(theNewWidth / theImg.mWidth, theNewHeight / theImg.mHeight);
    var _t4 = g.PushMatrix(m);
    try {
        g.DrawImage(theImg, theX, theY);
    } finally {
        _t4.Dispose();
    }
}
Game.Util.DrawImageMatrix = function Game_Util$DrawImageMatrix(g, theImg, theMatrix) {
    g.PushMatrix(theMatrix);
    g.DrawImage(theImg.get_CenteredImage(), 0.0, 0.0);
    g.PopMatrix();
}
Game.Util.DrawImageMatrixT = function Game_Util$DrawImageMatrixT(g, theImg, theMatrix, theX, theY) {
    theMatrix.tx += theX;
    theMatrix.ty += theY;
    g.PushMatrix(theMatrix);
    g.DrawImage(theImg.get_CenteredImage(), 0, 0);
    g.PopMatrix();
    theMatrix.tx -= theX;
    theMatrix.ty -= theY;
}
Game.Util.DrawImageSRT = function Game_Util$DrawImageSRT(g, theImg, theScale, theRot, theX, theY) {
    var m = new GameFramework.geom.Matrix();
    m.rotate(theRot);
    m.scale(theScale, theScale);
    m.translate(theX, theY);
    g.PushMatrix(m);
    g.DrawImage(theImg, 0.0, 0.0);
    g.PopMatrix();
}
Game.Util.DrawImageRT = function Game_Util$DrawImageRT(g, theImg, theRot, theX, theY) {
    var m = new GameFramework.geom.Matrix();
    m.rotate(theRot);
    m.translate(theX, theY);
    g.PushMatrix(m);
    g.DrawImage(theImg, 0.0, 0.0);
    g.PopMatrix();
}
Game.Util.DrawImageR = function Game_Util$DrawImageR(g, theImg, theRot) {
    var m = new GameFramework.geom.Matrix();
    m.rotate(theRot);
    g.PushMatrix(m);
    g.DrawImage(theImg, 0.0, 0.0);
    g.PopMatrix();
}
Game.Util.DrawImageAtDef = function Game_Util$DrawImageAtDef(g, theImg, theIsAdditive) {
    theImg.mAdditive = theIsAdditive;
    g.DrawImage(theImg, theImg.mOffsetX, theImg.mOffsetY);
    theImg.mAdditive = false;
}
Game.Util.DrawImageAtDefXY = function Game_Util$DrawImageAtDefXY(g, theImg, theOffsetX, theOffsetY, theIsAdditive) {
    theImg.mAdditive = theIsAdditive;
    g.DrawImage(theImg, theImg.mOffsetX + theOffsetX, theImg.mOffsetY + theOffsetY);
    theImg.mAdditive = false;
}
Game.Util.DrawImageCentered = function Game_Util$DrawImageCentered(g, theImg, theOffsetX, theOffsetY) {
    g.DrawImage(theImg, theOffsetX - theImg.mWidth / 2.0, theOffsetY - theImg.mHeight / 2.0);
}
Game.Util.ShuffleIntArr = function Game_Util$ShuffleIntArr(theVec) {
    for(var i = theVec.length - 1; i >= 1; --i) {
        var j = (Game.Util.gRand.Next() | 0) % i;
        var t = theVec[i];
        theVec[i] = theVec[j];
        theVec[j] = t;
    }
}
Game.Util.RGBToHSL = function Game_Util$RGBToHSL(r, g, b) {
    var maxval = (((Math.max(r, Math.max(g, b)) | 0)) | 0);
    var minval = (((Math.min(r, Math.min(g, b)) | 0)) | 0);
    var hue = 0;
    var saturation = 0;
    var luminosity = (((minval + maxval) / 2) | 0);
    var delta = maxval - minval;
    if(delta != 0) {
        saturation = (((delta * 256) / ((luminosity <= 128) ? (minval + maxval) : (512 - maxval - minval))) | 0);
        if(r == maxval) {
            hue = (g == minval ? 1280 + (((((maxval - b) * 256) / delta) | 0)) : 256 - (((((maxval - g) * 256) / delta) | 0)));
        } else if(g == maxval) {
            hue = (b == minval ? 256 + (((((maxval - r) * 256) / delta) | 0)) : 768 - (((((maxval - b) * 256) / delta) | 0)));
        } else {
            hue = (r == minval ? 768 + (((((maxval - g) * 256) / delta) | 0)) : 1280 - (((((maxval - r) * 256) / delta) | 0)));
        }
        hue = ((hue) / 6) | 0;
    }
    return 0xff000000 | (hue) | (saturation << 8) | (luminosity << 16);
}
Game.Util.HSLToRGB = function Game_Util$HSLToRGB(h, s, l) {
    var r;
    var g;
    var b;
    var v = (l < 128) ? (((l * (255 + s)) / 255) | 0) : (l + s - ((l * s / 255) | 0));
    var y = ((2 * l - v) | 0);
    var aColorDiv = (((6 * h) / 256) | 0);
    var x = ((y + (v - y) * ((h - (((aColorDiv * 256 / 6) | 0))) * 6) / 255) | 0);
    if(x > 255) {
        x = 255;
    }
    var z = ((v - (v - y) * ((h - (((aColorDiv * 256 / 6) | 0))) * 6) / 255) | 0);
    if(z < 0) {
        z = 0;
    }
    switch(aColorDiv) {
        case 0:
        {
            r = (v | 0);
            g = (x | 0);
            b = (y | 0);
            break;
        }
        case 1:
        {
            r = (z | 0);
            g = (v | 0);
            b = (y | 0);
            break;
        }
        case 2:
        {
            r = (y | 0);
            g = (v | 0);
            b = (x | 0);
            break;
        }
        case 3:
        {
            r = (y | 0);
            g = (z | 0);
            b = (v | 0);
            break;
        }
        case 4:
        {
            r = (x | 0);
            g = (y | 0);
            b = (v | 0);
            break;
        }
        case 5:
        {
            r = (v | 0);
            g = (y | 0);
            b = (z | 0);
            break;
        }
        default:
        {
            r = (v | 0);
            g = (x | 0);
            b = (y | 0);
            break;
        }
    }
    return 0xff000000 | (r << 16) | (g << 8) | (b);
}
Game.Util.TicksToString = function Game_Util$TicksToString(theTicks) {
    theTicks = ((theTicks) / 60) | 0;
    var sec = theTicks % 60;
    theTicks = ((theTicks) / 60) | 0;
    var min = theTicks % 60;
    var hours = (((theTicks / 60) | 0)) % 24;
    var days = (((((theTicks / 60) | 0)) / 24) | 0);
    if(days > 0) {
        return String.format('{0} days {1:00} hours {2:00} min {3:00} sec', days, hours, min, sec);
    } else if(hours > 0) {
        return String.format('{0:00} hours {1:00} min {2:00} sec', hours, min, sec);
    } else if(min > 0) {
        return String.format('{0:00} min {1:00} sec', min, sec);
    } else {
        return String.format('{0:00} sec', sec);
    }
}
Game.Util.SplitStr = function Game_Util$SplitStr(i_str, outVals, theType) {
    Game.Util.SplitStrEx(i_str, outVals, theType, 44, false, -1);
}
Game.Util.SplitStrEx = function Game_Util$SplitStrEx(i_str, outVals, theType, theSplitChar, theTrimLeadingWhitespace, theMaxEntries) {
    if(i_str.length == 0) {
        return;
    }
    var idx = 0;
    var oldIdx = 0;
    var count = 0;
    while(true) {
        var lastEntry = (theMaxEntries != -1 && (count + 1 == theMaxEntries));
        idx = lastEntry ? -1 : i_str.indexOf(String.fromCharCode(theSplitChar), oldIdx);
        var done = idx == -1;
        if(done) {
            idx = i_str.length;
        }
        if(theTrimLeadingWhitespace) {
            while(oldIdx < idx && GameFramework.Utils.IsWhitespaceAt(i_str, oldIdx)) {
                ++oldIdx;
            }
        }
        switch(theType) {
            case Game.Util.ESplitStrType.TVector_STRING:

            {
                var aStrVec = Type.safeCast(outVals, GameFramework.TVector);
                aStrVec.push(i_str.substr(oldIdx, idx - oldIdx));
            }

                break;
            case Game.Util.ESplitStrType.TIntVector:
            {
                (outVals).push(GameFramework.Utils.ToInt(i_str.substr(oldIdx, idx - oldIdx)));
                break;
            }
            case Game.Util.ESplitStrType.TVector_FLOAT:

            {
                var aNumVec = Type.safeCast(outVals, GameFramework.TVector);
                aNumVec.push(GameFramework.Utils.ToFloat(i_str.substr(oldIdx, idx - oldIdx)));
            }

                break;
        }
        ++count;
        if(done || lastEntry) {
            break;
        }
        oldIdx = idx + 1;
    }
}
Game.Util.CheckGraphicsState = function Game_Util$CheckGraphicsState(g) {
    var m = new Game.CheckMatrixInfo();
    m.mMatrixDepth = g.mMatrixDepth;
    m.mColorDepth = g.mColorVector.length;
    m.mGraphics = g;
    m.mProxy = new GameFramework.misc.DisposeProxy(ss.Delegate.create(this, Game.Util.CheckGraphicsStatePop));
    Game.Util.mAutoPopCheckMatrix.push(m);
    return m.mProxy;
}
Game.Util.CheckGraphicsStatePop = function Game_Util$CheckGraphicsStatePop() {
    JS_Assert(Game.Util.mAutoPopCheckMatrix[Game.Util.mAutoPopCheckMatrix.length - 1].mMatrixDepth == Game.Util.mAutoPopCheckMatrix[Game.Util.mAutoPopCheckMatrix.length - 1].mGraphics.mMatrixDepth, 'CheckGraphicsState MATRIX calls not aligned (check push/pop calls)');
    JS_Assert(Game.Util.mAutoPopCheckMatrix[Game.Util.mAutoPopCheckMatrix.length - 1].mColorDepth == Game.Util.mAutoPopCheckMatrix[Game.Util.mAutoPopCheckMatrix.length - 1].mGraphics.mColorVector.length, 'CheckGraphicsState COLOR calls not aligned (check push/pop calls)');
}
Game.Util.prototype = {

    GetAlphaFromColorInt : function Game_Util$GetAlphaFromColorInt(theColorInt) {
        return (theColorInt >>> 24) & 0xff;
    },
    ModAlphaOnColorInt : function Game_Util$ModAlphaOnColorInt(theColorInt, theAlpha) {
        return ((theAlpha & 0xff) << 24) | (theColorInt & 0xffffff);
    }
}
Game.Util.staticInit = function Game_Util$staticInit() {
    Game.Util.mAutoPopCheckMatrix = [];
    Game.Util.gRand = new Game.MTRand();
}

JS_AddInitFunc(function() {
    Game.Util.registerClass('Game.Util', null);
});
JS_AddStaticInitFunc(function() {
    Game.Util.staticInit();
});
Game.Util.ESplitStrType = {};
Game.Util.ESplitStrType.staticInit = function Game_Util_ESplitStrType$staticInit() {
    Game.Util.ESplitStrType.TIntVector = 0;
    Game.Util.ESplitStrType.TVector_STRING = 1;
    Game.Util.ESplitStrType.TVector_FLOAT = 2;
}
JS_AddInitFunc(function() {
    Game.Util.ESplitStrType.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\Util.cs
//LineMap:1=2 2=4 21=22 26=26 34=30 58=55 76=72 82=75 85=77 89=79 91=80 93=80 95=81 97=81 99=82 101=82 103=83 105=83 107=84 109=84 111=85 117=92 120=94 124=96 126=97 128=97 130=98 132=98 134=99 136=99 138=100 140=100 142=101 144=101 146=102 162=110 168=112 172=117 175=121 
//LineMap:187=125 193=136 197=141 201=146 211=127 221=152 229=162 231=165 235=170 239=175 243=180 244=187 254=155 260=202 266=204 270=209 280=220 284=225 288=230 293=234 299=237 302=239 308=242 311=244 318=248 322=253 326=258 330=264 335=270 339=273 346=277 352=284 362=296 
//LineMap:372=307 381=317 389=326 395=333 401=340 405=345 407=348 415=357 423=366 426=370 428=373 431=377 433=380 435=383 440=389 441=391 442=393 446=398 449=402 450=402 453=404 454=404 455=404 457=404 459=405 460=405 461=405 462=405 464=405 466=406 467=406 468=406 469=406 
//LineMap:471=406 473=407 474=407 475=407 476=407 478=407 480=408 481=408 482=408 483=408 485=408 487=409 488=409 489=409 490=409 492=409 494=410 495=410 496=410 497=410 502=426 510=435 511=435 513=436 516=438 518=448 522=453 526=458 529=462 533=467 536=471 539=475 540=475 
//LineMap:541=478 543=479 547=482 548=482 553=485 554=487 556=488 560=491 562=494 563=496 565=499 568=505 576=514 578=517 581=521 586=416 598=503 599=527 604=441 607=443 
//Start:Version
/**
 * @constructor
 */
Game.Version = function Game_Version() {
}
Game.Version.Get = function Game_Version$Get() {
    return Game.Version.mVersion;
}
Game.Version.prototype = {

}
Game.Version.staticInit = function Game_Version$staticInit() {
    Game.Version.mVersion = '0.9.12.9490';
}

JS_AddInitFunc(function() {
    Game.Version.registerClass('Game.Version', null);
});
JS_AddStaticInitFunc(function() {
    Game.Version.staticInit();
});

//Src:C:\p4_managed\PrimeSharp\prime\Bejeweled\Version.cs
//LineMap:2=3 8=7 18=5 
